WEBVTT

00:01.990 --> 00:10.800
ES8 ha alcune nuove funzionalità introdotte nel 2017, rispetto a ES7. In questo video, esamineremo solo

00:10.810 --> 00:13.360
quelli importanti.

00:13.660 --> 00:17.750
Quindi il primo è 'padding'.

00:18.010 --> 00:28.110
Abbiamo nuove funzioni che possiamo aggiungere alle stringhe che sono '. padStart "e". padEnd'. Ora

00:28.110 --> 00:43.810
per dimostrarlo, andiamo nella console. E fai una "Tartaruga" e noi faremo una ". padStart 'of 10, se lo faccio, ottengo'

00:43.810 --> 00:48.230
Turtle 'con 10 spazi davanti.

00:49.810 --> 01:01.170
Se lo faccio '. padEnd 'get' Turtle 'con 10 spazi dopo di esso, e questo è utile solo per allineare

01:01.170 --> 01:09.310
i caratteri, delle stringhe, se vuoi un padding specifico per loro. Ancora una volta molto molto semplice facile da prendere, solo un

01:09.310 --> 01:11.980
altro metodo di stringa che abbiamo ricevuto.

01:11.980 --> 01:13.510
Va bene, andiamo nel secondo.

01:13.510 --> 01:20.830
Il secondo che abbiamo ottenuto è qualcosa chiamato virgole finali nelle liste di parametri e nelle chiamate delle funzioni.

01:21.040 --> 01:21.840
Hmm! , cosa significa?

01:21.970 --> 01:33.200
Bene, ora posso fare qualcosa come "const fun", "a, b, c, d" e aggiungere una virgola alla fine.

01:34.370 --> 01:38.610
E, se faccio una funzione, diciamo 'console. log '(s)' a

01:38.930 --> 01:41.670
', solo una stupida funzione semplice.

01:41.690 --> 01:48.920
Ora posso eseguire questa funzione, come una, due, tre, quattro e poi una virgola alla fine.

01:49.220 --> 01:54.120
E questo è ancora valido javascript. Se eseguo questo, lo

01:54.200 --> 01:55.550
vedi, funziona.

01:55.550 --> 01:56.680
Registro della console "a".

01:56.690 --> 01:59.030
Quale è uno, viene registrato.

01:59.030 --> 02:03.850
Ora, perché sarebbe utile a tutti?

02:03.860 --> 02:09.320
Il motivo principale è che quando inizi a ottenere elenchi di parametri davvero grandi, vedrai

02:09.320 --> 02:12.420
molte persone fare cose simili a questa.

02:15.910 --> 02:18.140
Solo per rendere le cose un po 'più pulite.

02:18.310 --> 02:27.080
E quando inizi a farlo, ogni volta che aggiungi un nuovo parametro, è molto più semplice.

02:27.100 --> 02:32.710
Ma anche in github, quando si apportano modifiche, in realtà fa la differenza.

02:32.710 --> 02:35.860
Le differenze verdi e rosse sono molto più pulite.

02:35.860 --> 02:41.750
Quindi è solo sintattico e rende le cose un po 'più belle.

02:41.760 --> 02:47.530
Ancora una volta, normalmente non vorresti fare qualcosa del genere, ma forse quando hai un lungo elenco di parametri come quello,

02:47.770 --> 02:54.520
la virgola finale è ora valida e non genererà un errore. Tutto ok.

02:54.630 --> 02:56.130
Diamo un'occhiata al prossimo.

02:56.400 --> 03:00.720
Il prossimo è, abbiamo 'oggetto.

03:03.310 --> 03:12.410
valori "e" oggetto. voci "e queste sono molto utili perché prima di

03:12.420 --> 03:21.680
queste avevamo qualcosa chiamato" oggetto ". chiavi "e" oggetto. le chiavi "ci hanno permesso di fare qualcosa di simile agli array ma agli oggetti.

03:22.030 --> 03:32.700
Ad esempio, se avessimo un oggetto (obj) che, diciamo, avrà un

03:32.790 --> 03:42.820
oggetto e questo oggetto avrà 'userName0', 'Santa', avremo 'userName1', 'Rudolph'.

03:43.000 --> 03:51.920
E abbiamo anche "userName2", "Mr. Grinch'.

03:52.000 --> 03:57.550
Ora guardando questo oggetto, perché non è un array

03:57.550 --> 04:05.790
non possiamo fare la 'mappa' o 'filtro' o 'ridurre' ma questo tipo di oggetto brutto.

04:05.830 --> 04:10.810
E questo illustra un buon punto, a volte quando lavori con i server, otterrai

04:10.930 --> 04:17.110
oggetti che non ti piacciono davvero o con i quali non vuoi lavorare ma che vuoi ancora ripetere.

04:17.230 --> 04:22.360
E prima che potessimo fare qualcosa del genere con 'object. chiavi ", vorrei fare un po

04:22.360 --> 04:31.450
'più di spazio qui, così possiamo vedere, potrei fare" oggetto ". chiavi "e qui, lanceremo l'oggetto.

04:31.450 --> 04:36.140
E ora, posso usarlo come un array o andare uno per uno.

04:37.190 --> 04:38.240
Come un array.

04:39.490 --> 04:42.120
Quindi è come se fosse un array.

04:42.120 --> 04:45.310
Ma tranne, ha proprietà e valori.

04:45.490 --> 04:53.180
Diciamo, volevamo fare un ciclo 'forEach' e per ogni chiave, cioè per ogni chiave dell'array.

04:53.500 --> 05:05.840
Quindi per ogni 'nome utente', abbiamo anche l'indice che è 0, 1, 2, basta racchiuderlo tra parentesi.

05:05.980 --> 05:15.710
E ora, a sentire, possiamo dire 'console. log (chiave) "e poi" oggetto [chiave] ".

05:15.970 --> 05:20.500
Quindi ora stiamo afferrando l'oggetto con la chiave "username".

05:20.500 --> 05:29.470
Quindi se consolo. registra 'questo, copiamolo e incollalo, ripuliamolo un po' e vedo che ho,

05:29.480 --> 05:34.970
'username' 'Santa', 'username1' 'Rudolph', 'username2' 'Mr. Grinch'.

05:35.190 --> 05:44.580
E questo è un modo per noi di iterare o scorrere gli oggetti, ma con 'oggetto. voci ", le cose diventano un po 'più

05:44.760 --> 05:45.860
facili.

05:46.730 --> 05:58.610
Ad esempio, possiamo fare "oggetto", dobbiamo fare più spazio, possiamo fare "oggetto". valori "e" oggetto. valori ", se faccio

05:58.970 --> 06:06.020
un" forEach "qui, prendo semplicemente il" valore "dal valore.

06:06.140 --> 06:11.670
Posso solo 'console. log (valore)'.

06:13.080 --> 06:19.530
E ora, ottengo il valore di ogni oggetto.

06:19.560 --> 06:28.830
Cioè scorre attraverso 'Santa', 'Rudolf' e 'Mr. Grinch'.

06:29.060 --> 06:31.390
Con le voci, se lo faccio 'oggetto. inserimenti'.

06:31.630 --> 06:33.250
Bene, vediamo cosa succede.

06:34.360 --> 06:42.990
Cancella questo, ottengo una serie di 'username' 'Santa', 'username1' 'Rudolph' e 'username2' 'Mr. Grinch'.

06:43.030 --> 06:49.600
Quindi questo ti dà un sacco di controllo che ottieni sia proprietà che valore o chiave e valore, e

06:49.600 --> 06:55.910
puoi fare quello che vuoi con esso e usare 'foreach', 'map', 'ridurre', 'filter' tutte quelle funzioni dell'array.

06:55.930 --> 06:58.130
Quindi usiamo uno scenario di vita reale qui.

06:58.390 --> 07:04.330
Diciamo, volevamo, abbiamo appena ricevuto questo dal back-end, il back-end ci ha appena inviato un gruppo di utenti

07:04.330 --> 07:09.940
che avevano nel database e vogliamo generare "nomi utente" per questo perché non ci piace il

07:09.940 --> 07:16.540
"nomeutente0" , "nomeutente1", "nome utente2", si desidera visualizzare il nome che visualizza "Babbo Natale" con il numero ID, ovvero 0,

07:16.690 --> 07:21.540
per "Rudolf" sarà 1, per "Mr. Grinch 'sarà 2.

07:21.610 --> 07:25.160
Come possiamo farlo? usando i nostri nuovi poteri.

07:25.570 --> 07:30.040
Bene, posso semplicemente fare qualcosa con 'oggetto.

07:31.340 --> 07:40.290
voci "e" oggetto. le voci 'avranno un' oggetto 'su cui posso mappare e questo ci darà

07:40.860 --> 07:44.370
un' valore ', ricordate ancora che questo restituirà array.

07:44.640 --> 07:55.700
E qui vogliamo solo tornare a un valore di 1 perché vogliamo prendere "Babbo Natale", "Rudolph" e "Mr. Grinch'.

07:55.740 --> 07:58.690
Questo è il secondo elemento dell'array.

07:59.130 --> 08:06.710
E poi vogliamo aggiungere a quello, come una stringa 'valore 0' che è il primo elemento.

08:06.750 --> 08:09.540
Quindi 'username0', 'username1', 'username2'.

08:10.080 --> 08:13.330
E qui vogliamo 'sostituire', questa è

08:13.440 --> 08:21.480
solo una funzione che possiamo usare sulle stringhe e vogliamo che sostituisca 'username' con una stringa vuota ('').

08:22.710 --> 08:29.520
Quindi quello che stiamo facendo qui è, stiamo creando una nuova stringa con 'Santa', 0 perché non abbiamo bisogno del nome utente

08:29.940 --> 08:30.490
qui.

08:30.510 --> 08:38.280
Quindi ora, anche se abbiamo un oggetto, possiamo scorrere come un array e in questo modo abbiamo nuovi nomi

08:38.280 --> 08:42.430
utente, "Santa0", "Rudolph1" e "Mr. Grinch2' .

08:42.780 --> 08:43.880
Quant'è fico?

08:44.880 --> 08:50.790
Quindi, queste sono aggiunte davvero utili al linguaggio, in particolare all'oggetto. valori

08:50.790 --> 08:57.970
"e" oggetti. voci ", puoi farci molto, ma c'è una grande

08:57.980 --> 09:03.870
funzionalità ES8 che è arrivata e tutti sono entusiasti, e si chiamano" Async ", oh aspetta!

09:04.100 --> 09:07.670
Ora è nuovo di zecca e tutti nella community ne sono davvero entusiasti.

09:07.670 --> 09:14.710
Tuttavia, al fine di cogliere appieno il vantaggio e comprenderlo, abbiamo bisogno di un intero video da solo.

09:14.960 --> 09:17.220
Quindi ci vediamo in quello.

09:17.530 --> 09:17.790
Buh-bye.
