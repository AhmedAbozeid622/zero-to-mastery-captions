WEBVTT

00:01.270 --> 00:02.500
Ben tornato.

00:02.500 --> 00:06.490
Parleremo di alcuni concetti avanzati di "oggetti".

00:06.490 --> 00:13.840
Ora, come ho detto, con entrambi gli array e le funzioni, questi sono concetti avanzati, probabilmente non

00:13.840 --> 00:21.490
lo otterrai solo al 100 percento la prima volta, ma usa questi video come riferimento per tornare mentre avanzi

00:21.490 --> 00:22.980
nel tuo carriera.

00:24.250 --> 00:30.020
Ora in questo video parlerò di tre cose importanti per gli oggetti.

00:30.110 --> 00:35.260
Parleremo di "tipo di riferimento".

00:35.350 --> 00:38.040
Parleremo di "contesto".

00:38.620 --> 00:41.350
E infine parleremo di "istanziazione".

00:45.000 --> 00:51.690
Quindi iniziamo con la prima riga. 'tipo di riferimento'. Cosa intendo quando dico un "tipo di riferimento"?

00:51.690 --> 00:58.810
Bene, volevo vedere se riesco a indovinare cosa succederà quando faccio array '[]' equals array '[]'.

00:58.830 --> 01:00.530
Quale pensi che sarà la risposta?

01:00.570 --> 01:02.860
Vediamo.

01:02.890 --> 01:05.930
Hmm! interessante.

01:05.930 --> 01:14.160
OK, cosa succede se faccio uno array uguale a uno array? interessante.

01:14.260 --> 01:15.270
OK un'altra domanda.

01:15.550 --> 01:18.280
Che ne dici di qualcosa del genere?

01:19.650 --> 01:25.090
'Oggetto1' è uguale al valore

01:29.230 --> 01:37.220
di 10 e diremo 'oggetto2' uguale a 'oggetto1'.

01:39.120 --> 01:49.450
E finalmente diremo che una variabile (var) 'object3' è uguale a valore 10.

01:49.460 --> 01:54.710
Quindi guardando questi e in realtà lo copierò qui, così puoi vederlo anche tu.

01:59.260 --> 02:00.180
Guardando

02:00.310 --> 02:07.420
questo, cosa succede se faccio 'object1' uguale a 'object2'?

02:07.450 --> 02:08.510
Cosa pensi che succederà?

02:09.560 --> 02:10.100
Vero.

02:10.300 --> 02:10.750
OK.

02:10.880 --> 02:15.580
Ciò ha senso, intendo che "oggetto2" è "oggetto1".

02:15.760 --> 02:22.780
Ma cosa succede se faccio 'object1' equivale a 'object3'.

02:22.860 --> 02:25.710
Qui ottengo, falso.

02:25.900 --> 02:29.160
Ma perché? Abbiamo valore 10, valore 10.

02:29.180 --> 02:30.990
Sono entrambi la stessa cosa.

02:31.240 --> 02:32.060
Destra.

02:32.460 --> 02:33.190
Controlliamo qualcos'altro.

02:33.200 --> 02:37.010
Cosa succede se faccio 'oggetto1. valore

02:38.230 --> 02:42.430
"è uguale a 15, OK.

02:42.610 --> 02:45.340
E ora faccio 'object2. valore 'è

02:48.390 --> 02:50.020
uguale a 15.

02:50.150 --> 02:59.590
Ma se faccio 'object3. valore ", ottengo 10. Beh, era confuso, giusto.

03:00.000 --> 03:02.280
Diamo un'occhiata a ciò che sta realmente accadendo.

03:02.430 --> 03:07.010
E questo è il primo argomento di cui stiamo parlando, che è il "tipo di riferimento".

03:07.110 --> 03:08.220
Diamo un'occhiata a un diagramma.

03:11.020 --> 03:16.700
Gli oggetti sono quelli che vengono chiamati i "tipi di riferimento" in Javascript.

03:16.940 --> 03:25.000
Fino a questo punto, tutti gli altri tipi di javascript che abbiamo

03:27.530 --> 03:39.610
imparato tra cui 'numeri', 'null', abbiamo 'indefinito', 'booleani', 'stringhe' persino 'simboli' sono tutti definiti dal linguaggio di programmazione .

03:39.600 --> 03:48.150
Quindi Javascript, la persona che ha scritto javascript ed ECMAScript lo standard afferma che si tratta di tipi primitivi.

03:48.150 --> 03:57.990
Ti diciamo cosa sono. Ora un "tipo di riferimento" che è un tipo non primitivo non è

03:57.990 --> 03:59.900
definito dai linguaggi di programmazione.

03:59.910 --> 04:06.380
Ciò significa che sono stati creati dal programmatore.

04:06.410 --> 04:08.750
Quindi diamo un'occhiata qui come esempio.

04:09.760 --> 04:10.930
Quando dico variabile.

04:10.930 --> 04:13.200
Il numero uno è uguale a uno.

04:13.330 --> 04:15.170
Javascript sa di cosa si tratta.

04:15.170 --> 04:16.470
È un numero

04:16.480 --> 04:17.500
È un tipo primitivo.

04:17.500 --> 04:19.450
È sempre la stessa cosa.

04:19.590 --> 04:25.340
È immutabile ogni volta che usa quello che è lo stesso che JavaScript conosce.

04:25.460 --> 04:31.460
Quando faccio la variabile numero due, yah sta usando lo stesso numero uno che Java conosce.

04:33.260 --> 04:40.750
Tuttavia, quando abbiamo creato 'object1' equivale a 'value 10' e 'object2' è uguale a 'object1' e 'object3'

04:40.770 --> 04:45.620
è uguale a 'value 10', ben quelli sono creati dal programmatore.

04:45.630 --> 04:47.190
Esistono "tipi di riferimento".

04:47.190 --> 04:55.310
Quindi quello che abbiamo detto è che voglio che "object1" crei un nuovo oggetto, dirà questo riquadro qui in

04:56.560 --> 05:06.590
questo casellario e in esso, inserirà "valore 10" in questo box. 'object2' dice, voglio solo che tu faccia riferimento ed ecco

05:06.590 --> 05:07.680
da

05:07.760 --> 05:19.360
dove viene la parola, riferimento 'object1', dicendo hey! Voglio qualunque cosa ci sia dentro questa scatola. Quando 'object3' viene creato, è un nuovo oggetto

05:19.470 --> 05:22.770
perché abbiamo le nuove parentesi.

05:23.660 --> 05:27.770
E sta dicendo mettere 'valore 10' in questa scatola.

05:27.770 --> 05:35.320
In sostanza quello che stiamo facendo è dire, quando creiamo una variabile (var) 'object1' quando memorizziamo solo un riferimento

05:35.330 --> 05:40.520
un indirizzo in cui stiamo memorizzando il 'valore 10' che è 'Box1'.

05:40.520 --> 05:43.780
Quindi stiamo dicendo 'object1', ti sto solo

05:43.970 --> 05:49.660
facendo sapere che questo è l'indirizzo di tutti i contenuti che vuoi

05:49.730 --> 05:55.710
e che si trova in 'Box1'. 'object2' sta dicendo, voglio qualunque cosa sia

05:55.730 --> 06:01.220
un 'oggetto1' e guardiamo un 'oggetto1', un 'oggetto1' ha solo le informazioni di 'box1'.

06:01.430 --> 06:08.110
Quindi fa riferimento a questo, un 'oggetto3' crea un nuovo oggetto.

06:08.120 --> 06:15.140
Quindi sta dicendo, inserirò i miei contenuti in 'Box3' e avrò l'indirizzo della casella

06:15.470 --> 06:18.070
che dice 'Box3' proprio qui.

06:19.500 --> 06:21.090
Quindi, tornando al

06:24.280 --> 06:28.040
nostro esempio, questo ha senso, quando cambiamo il valore di

06:28.090 --> 06:31.150
'object1' in 15, cambiamo il contenuto di 'Box1'.

06:31.150 --> 06:39.330
Quindi quando facciamo 'object2. valore 'che fa riferimento alla stessa casella di'

06:39.340 --> 06:45.730
oggetto1 'che è 15, ma' oggetto3. il valore "non cambia perché è interessato a una casella completamente diversa,

06:46.720 --> 06:48.740
è" Box3 "e torna al primo esempio.

06:50.920 --> 06:58.970
Le matrici, come ho già detto nei video precedenti, le matrici sono solo oggetti alla fine della giornata.

06:59.090 --> 07:05.220
Quindi, quando si crea un array, è la stessa cosa, creare un box, una struttura di dati.

07:05.510 --> 07:09.100
E questo sta creando una seconda struttura di dati.

07:09.120 --> 07:09.800
Destra.

07:09.860 --> 07:16.820
Quindi questo è un "tipo di riferimento". Un concetto molto importante ma penso, penso che tu abbia capito bene.

07:17.670 --> 07:18.980
Andiamo al prossimo.

07:18.990 --> 07:21.010
Questo diventa un po 'più complicato.

07:21.060 --> 07:30.090
Questo si chiama 'contesto' e 'contesto' viene confuso molto con 'portata'.

07:30.190 --> 07:37.230
Se ricordi, abbiamo detto che 'scope' viene creato quando vede parentesi graffe, giusto !.

07:37.270 --> 07:45.040
Abbiamo detto che, se creiamo una funzione, non appena creiamo quella funzione, viene creato un nuovo

07:45.040 --> 07:45.880
"ambito".

07:46.450 --> 07:57.550
Quindi possiamo avere, "lascia che un" sia uguale "a" e che viva in questo universo.

07:57.560 --> 08:02.180
Non sa nulla dell'ambito di root che è qui.

08:02.180 --> 08:06.680
Quindi se lo faccio 'console. log (a) ', beh non funzionerà.

08:06.880 --> 08:11.940
Oh! e dobbiamo effettivamente assegnare qualcosa e dobbiamo nominarlo per dire semplicemente 'b'.

08:12.320 --> 08:16.380
Quindi se lo faccio, bene 'console. log (a)'.

08:16.590 --> 08:20.710
bene, basta restituire 'ReferenceError' perché non esiste.

08:20.810 --> 08:22.370
Quindi questo è "ambito".

08:22.400 --> 08:31.520
Ora, in che modo il 'contesto' è diverso? 'contesto' ti dice dove siamo all'interno dell'oggetto.

08:31.520 --> 08:32.650
Lasciatemi spiegare.

08:32.990 --> 08:38.760
Se, diciamo 'console. log (questo)'.

08:39.110 --> 08:45.350
Bene, vedete, ricevo alcuni punti salienti, e questa è la prima volta che vediamo "questo", ed è una parola

08:45.350 --> 08:46.340
speciale in javascript.

08:46.340 --> 08:52.220
Probabilmente la parola più confusa che molte persone hanno problemi e persino le persone che sono nel settore da anni

08:52.220 --> 08:57.150
hanno ancora dei momenti difficili con "questo". Ma vediamo di cosa si tratta.

08:57.560 --> 09:03.950
'this' è, come puoi vedere, l '"oggetto finestra".

09:03.990 --> 09:14.610
Quindi, per ricontrollare, se lo faccio 'console. log (this) 'equals' window ', realizzo.

09:14.840 --> 09:23.990
E posso accedere a questo. alert ("ciao") 'Quindi cosa significa'

09:24.030 --> 09:35.670
questo ', qual è l'ambiente oggetto in cui ci troviamo adesso, il modo migliore per

09:35.670 --> 09:42.500
pensarci è, che cos'è alla sinistra del punto?

09:42.510 --> 09:49.860
Quindi in questo momento, sono in grado di fare "avviso" perché sono all'interno dell '"oggetto finestra".

09:50.190 --> 09:54.060
Quindi fare 'finestra' o fare 'questo' è la stessa cosa.

09:54.210 --> 09:57.170
Ora, perché è importante?

09:57.330 --> 10:04.110
Bene, quando arriveremo all '"istanza", ti mostrerò perché? ma è un concetto molto importante che vedrai

10:04.110 --> 10:05.490
ancora e ancora.

10:05.550 --> 10:17.440
Ma ricorda, 'questo' si riferisce solo a quale oggetto è dentro. Altri due esempi per dimostrare "questo".

10:17.480 --> 10:23.450
Uno è, se faccio 'funzione a ()', con la funzione 'a',

10:26.240 --> 10:29.140
dirò 'console. log (questo)'.

10:29.170 --> 10:30.840
Quindi, se chiamo "a", cosa pensi che accada?

10:33.620 --> 10:35.660
Vediamo. l'oggetto

10:35.660 --> 10:39.280
finestra 'this' fa ancora riferimento alla funzione.

10:39.410 --> 10:47.240
E se ricordi che è perché ho detto, deve essere l'oggetto di cui siamo dentro adesso.

10:47.240 --> 10:47.970
Tecnicamente funzione "a".

10:48.020 --> 10:52.260
Posso andare alla finestra. a 'ed esegui la funzione.

10:52.520 --> 11:02.940
Quindi a sinistra del punto, questa è la 'finestra', al fine di creare un nuovo valore per 'questo'.

11:03.070 --> 11:06.450
Devi fare qualcosa del genere.

11:10.430 --> 11:13.560
'oggetto', 'una' funzione 'a'.

11:13.580 --> 11:14.960
Ora se faccio 'function

11:19.930 --> 11:23.240
()' e all'interno faccio una 'console. log (questo)'.

11:23.230 --> 11:32.550
Bene, in tal caso, se copio questo ed eseguo 'object4. a 'Bene, ora

11:35.600 --> 11:45.780
questo è l'oggetto, che è' oggetto4 '.

11:45.850 --> 11:49.910
Allora perché è importante per noi?

11:50.080 --> 11:54.510
Bene, prima di tutto lo vedrai in altre basi di codice, quindi è bene saperlo.

11:54.730 --> 12:01.840
Ma è davvero importante quando facciamo "istanziazione", "istanziazione" è quando fai una copia di un

12:02.470 --> 12:05.320
oggetto e riutilizzi il codice.

12:05.320 --> 12:11.950
Immagina che stai costruendo un grande gioco multiplayer online e questo gioco avrà molti

12:11.950 --> 12:17.170
giocatori che puoi avere maghi che puoi avere troll, stregoni, elfi.

12:17.200 --> 12:24.130
Ora, se hai dovuto creare un oggetto per ogni singolo giocatore che è un sacco di codice ripetuto, è un sacco di seccature

12:24.130 --> 12:28.040
e bene, è un sacco di tempo e non è molto efficiente.

12:29.410 --> 12:32.320
Per risolverlo, puoi fare qualcosa chiamato "istanziazione".

12:32.320 --> 12:37.490
Stai creando istanze o più copie di un oggetto.

12:37.510 --> 12:42.990
Quindi lascia che ti mostri come facciamo 'istanziazione' in JavaScript.

12:43.040 --> 12:49.340
Ancora una volta questo sembrerà, un po 'strano all'inizio, proprio come hanno fatto i cicli' for ', proprio come

12:49.340 --> 12:54.000
all'inizio hanno fatto le' funzioni ', ma è solo la sintassi e ti abituerai.

12:54.380 --> 12:59.290
Quindi diciamo che abbiamo una classe "Giocatore".

12:59.430 --> 13:05.540
Ora vedi già la nuova sintassi e io capitalizzo una "classe".

13:05.590 --> 13:10.060
Ora, pensa a una "classe" come qualcosa di cui voglio fare una copia.

13:10.210 --> 13:18.130
Se mai volessi fare una copia di un 'oggetto', è una buona idea fare qualcosa del genere, quindi vedrai quanto

13:18.130 --> 13:20.060
è facile copiarlo ora.

13:20.070 --> 13:22.000
Quindi lo facciamo.

13:22.010 --> 13:23.680
"Class Player".

13:25.650 --> 13:28.650
E qui dentro, dirò "costruttore" e

13:31.360 --> 13:35.570
so che sembra strano ma, di nuovo, è solo sintassi.

13:35.590 --> 13:45.650
Diamo, questo 'Giocatore' può avere un 'nome' e un 'tipo' e all'interno del costruttore 'questo. name 'è uguale a' name

13:45.740 --> 13:51.350
'e' this. digitare 'uguale a' tipo '.

13:55.940 --> 13:58.150
Oh ragazzo! Cosa è appena successo qui.

13:58.160 --> 14:00.890
"costruttore", quando si crea una "classe", un "Giocatore", "classe", dice.

14:01.190 --> 14:08.330
Ogni volta che eseguo una copia di un "Giocatore", la prima cosa che viene eseguita

14:08.330 --> 14:14.760
è la funzione "costruttore" e questa funzione "costruttore" creerà queste proprietà sull'oggetto "Giocatore".

14:14.990 --> 14:17.530
Quindi "nome" e un "tipo".

14:17.660 --> 14:21.500
E ora posso creare tutto ciò che voglio per il "Giocatore".

14:21.500 --> 14:30.730
Diciamo, vogliamo creare un metodo come 'introduc ()' che 'console. log (s) "con segni di spunta

14:33.650 --> 14:42.980
indietro (`), "Ciao, lo sono" e di nuovo se ricordi questa stringa

14:43.420 --> 14:54.190
di sintassi, "questo. nome "," Sono un "," questo. genere'. Eccezionale!

14:54.280 --> 15:02.560
Quindi, ora sto dicendo che questa classe di "Giocatore", ogni giocatore che creerò sarà sempre in grado di presentarsi e

15:02.560 --> 15:07.880
avranno anche "questo" "nome" e "questo". genere'.

15:07.900 --> 15:14.930
E la ragione per cui usiamo "questo" qui è che quando creiamo un "Giocatore" possiamo accedere al nome e al tipo di proprietà.

15:14.980 --> 15:17.090
Ti mostrerò in seguito come funziona.

15:17.320 --> 15:25.090
Ma questa è solo la sintassi a cui ti abituerai. Per accedere al "Giocatore" e farne copie.

15:25.120 --> 15:29.290
Dovrai eseguire un "costruttore" che è tutte le proprietà e i metodi che desideri che il

15:29.290 --> 15:29.970
"Giocatore" abbia.

15:30.250 --> 15:38.680
Puoi anche creare metodi che possono avere i "Giocatori" e ogni volta che vuoi accedere a una proprietà

15:38.680 --> 15:47.160
all'interno del "costruttore", utilizzalo bene. nome 'per (se io) voglio usare' introdurre 'dovrò fare' questo. introdurre'.

15:47.190 --> 15:54.030
OK, quindi abbiamo un 'Giocatore' ma quando stiamo costruendo il nostro gioco multiplayer vogliamo ora copiarlo ma aggiungerci

15:54.030 --> 15:54.650
sopra.

15:54.750 --> 15:59.470
Diciamo che abbiamo ciò che vogliamo creare un giocatore mago, un giocatore che è un mago.

15:59.520 --> 16:00.570
In tal

16:00.570 --> 16:04.010
caso, lo faremmo, 'class Wizard' di nuovo la

16:05.030 --> 16:10.780
lettera maiuscola 'si estende' e di nuovo è solo la parola chiave javascript 'Player'.

16:13.400 --> 16:14.260
Quindi cosa sta dicendo questo?

16:14.270 --> 16:19.340
Sto dicendo, voglio che il "mago" estenda qualunque cosa abbia il "Giocatore".

16:19.340 --> 16:26.540
Quindi voglio aggiungere qualsiasi cosa abbia "Player", sempre perché è una "classe", devo fare un "costruttore".

16:28.410 --> 16:35.700
E questo "Mago" accetterà "nome" e "tipo" e qui dentro, questa è la parte difficile.

16:35.700 --> 16:45.480
Ogni volta che estendiamo qualcosa, dobbiamo anche chiamare la funzione "costruttore" del "Giocatore".

16:45.480 --> 16:52.010
Dobbiamo fare qualcosa chiamato "super" con le proprietà che vogliamo passare al "costruttore".

16:52.080 --> 17:01.040
In questo caso, 'nome' e 'tipo', so che questo è confuso, è solo qualcosa che devi fare, ogni volta

17:01.340 --> 17:02.410
che 'estendi'

17:02.630 --> 17:09.450
una classe, vuoi usare i super in modo da avere essenzialmente accesso a questi.

17:09.460 --> 17:14.440
OK, quindi diciamo che con la procedura guidata, vogliamo anche avere una funzione 'play'.

17:14.620 --> 17:18.600
E la funzione 'play' era solo una 'console. log'.

17:19.060 --> 17:30.640
'WEEEEEE I'm a', 'this' 'type' e ora che abbiamo il nostro mago, qual è il potere?

17:30.640 --> 17:31.340
qual è il motivo per cui l'abbiamo appena fatto?

17:31.360 --> 17:37.340
Ora possiamo farlo, invece di creare costantemente "Giocatori" e poi dire che hanno i loro Maghi e

17:37.450 --> 17:38.760
che possono giocare.

17:38.770 --> 17:49.360
Ora posso dire 'wizard1' equivale a 'nuovo' 'Wizard' e chiameremo di nuovo il primo wizard.

17:49.370 --> 17:50.830
Otteniamo "nome" e "tipo".

17:51.210 --> 17:58.220
Quindi diremo "Shelly" e lei sarà una "Guaritrice".

18:00.220 --> 18:15.990
E se voglio creare un nuovo mago, dirò solo 'mago2' uguale a 'nuovo' 'Mago' 'Shawn' ed è 'Magia Oscura'.

18:16.270 --> 18:23.120
Ooh! Ci sono state molte nuove sintassi, quindi esaminiamole e assicuriamoci di capire tutto.

18:23.610 --> 18:29.010
Come abbiamo appreso, usiamo il log della console (console. log) per capire davvero cosa stiamo facendo.

18:29.010 --> 18:34.240
Ho intenzione di aggiungere un registro console (console. log) proprio in alto qui.

18:36.240 --> 18:37.620
E dirà 'questo'.

18:37.640 --> 18:38.730
Cos'è questo'.

18:39.950 --> 18:46.950
Ho intenzione di salvare, e in realtà ho intenzione di copiarlo nella console.

18:47.150 --> 18:48.010
Copiamolo.

18:49.100 --> 18:51.570
E vedi cosa ci offre il registro della console?

18:51.570 --> 18:54.430
Vediamo che otteniamo 'Wizard'.

18:54.530 --> 18:56.220
Va bene, esaminiamo tutto qui.

18:57.580 --> 19:02.440
Dico che abbiamo un "giocatore di classe", quindi un "mago di classe" che estende il "giocatore".

19:02.830 --> 19:07.440
E poi abbiamo due variabili che abbiamo creato 'wizard1' e 'Wizard2'.

19:07.480 --> 19:14.350
Ora il programma vedrà la parola chiave "nuova" e ogni volta che vedrà una parola chiave "nuova", dirà, oh! stiamo creando un

19:14.350 --> 19:23.810
nuovo 'Wizard' e questo 'Wizard' avrà due parametri 'Shelly' e 'Healer'.

19:23.860 --> 19:30.280
Quindi tornerà alla classe "Wizard" perché contiene questa "nuova" parola.

19:30.310 --> 19:38.740
Va alla classe "Mago" e dice, ehi! 'Wizard' Voglio che estenda 'Player'.

19:38.900 --> 19:47.990
Quindi andrà al "costruttore", e vedrà questo "super" e ciò che fa, ci

19:47.990 --> 19:51.570
porterà al "costruttore" del "Giocatore".

19:51.800 --> 20:02.510
E lo esegue, e ora collega 'this' come 'Wizard' e quindi introduce la 'nuova' funzione e quindi aggiunge la

20:02.540 --> 20:03.920
funzione 'play'.

20:03.920 --> 20:16.550
Ora, se vado a 'wizard1' e dico 'gioca', ottengo 'WEEEEEEE I'm a healer', perché Shelly è un guaritore.

20:16.760 --> 20:25.800
Ma ho anche accesso a 'wizard1. presenta ',' Ciao io sono Shelly, sono un guaritore '.

20:27.220 --> 20:34.580
E abbiamo anche accesso a "wizard2", Uh! Devo eseguirlo di nuovo.

20:34.720 --> 20:35.950
Facciamolo di nuovo.

20:38.970 --> 20:42.680
E non credo di aver copiato il secondo "mago" l'ultima volta.

20:42.810 --> 20:47.370
Quindi ora ho 'wizard2. introdurre'.

20:47.380 --> 20:48.780
"Ciao sono Sean",

20:49.260 --> 20:50.890
"sono una magia oscura".

20:50.920 --> 20:54.480
Quella frase non ha senso Sean, ma per ora va bene.

20:54.970 --> 20:57.250
Proviamo qualcosa.

20:57.250 --> 20:58.610
Se faccio "log della

21:01.320 --> 21:02.500
console" qui.

21:02.740 --> 21:05.520
E diremo solo "mago" e

21:08.190 --> 21:11.190
qui diremo "giocatore", solo così possiamo distinguerli.

21:12.710 --> 21:19.820
E copierò solo il primo mago in modo da non farne funzionare due, di nuovo perché stiamo creando

21:19.820 --> 21:25.760
due "maghi", avremo due volte questa esecuzione. Ma solo per la nostra sanità mentale, correremo.

21:25.820 --> 21:32.090
'Shelly'. Quindi aggiornerò e aggiungerò qui. Ooh! Ho dimenticato di aggiungere

21:35.320 --> 21:43.690
una virgola e aggiorniamo, e ricevo un errore, "Errore di riferimento", "Deve chiamare il super costruttore e la classe derivata prima di accedere

21:43.690 --> 21:45.040
a" questo "".

21:45.520 --> 21:54.430
Quello che sta dicendo è che per poter accedere a "questo" e ottenere "questo". digitare ', devo chiamare' super 'che esegue una

21:54.880 --> 21:57.720
funzione' costruttore 'e' giocatore '.

21:57.730 --> 21:59.260
Ecco cosa sta facendo "super".

21:59.260 --> 22:05.080
Sembra strano ma è solo qualcosa di cui hai bisogno. Lo inserirò in fondo dopo

22:05.080 --> 22:08.830
che avremo chiamato "super" e ora dovrebbe funzionare.

22:08.830 --> 22:18.810
Vediamo, il primo mago "giocatore".

22:19.220 --> 22:24.660
Quindi chiamiamo "super" non appena diciamo "nuovo mago", "Shelly, Guaritore".

22:24.930 --> 22:32.400
Vado al "mago" estende "Giocatore", eseguo la funzione "costruttore" che dice "super", ehi! eseguo la funzione "costruttore" e il "giocatore"

22:32.400 --> 22:35.280
e io eseguo quello.

22:35.400 --> 22:44.570
Ed è per questo che registriamo prima "console log player" e poi andiamo a "console. registra '' wizard '' e poi esegui il

22:44.570 --> 22:46.530
resto della classe.

22:46.550 --> 22:48.180
Molto bello !.

22:48.390 --> 22:50.730
Ora solo per mostrarti qualcosa.

22:50.760 --> 22:57.950
Questa è in realtà una nuova sintassi che vedrai e "reagirà" ed era parte di ES6.

22:57.960 --> 23:07.090
Ma indietro nel tempo, è così che facevamo. Lo stesso identico codice che ho lassù è proprio qui che

23:11.630 --> 23:20.060
si chiama eredità classica e non sembra troppo male ma vedi che c'è un prototipo che è un'altra cosa che

23:20.520 --> 23:26.250
vedrai in javascript e ad essere sincero con te, non dovresti non lo uso

23:26.250 --> 23:27.000
davvero.

23:27.000 --> 23:34.320
Non sembra molto bello e vedi che dobbiamo associare 'play' sia a 'wizard1' che a

23:35.650 --> 23:39.210
'wizard2' e non sembra carino come questo.

23:39.340 --> 23:41.950
E una volta che ti abitui a tutto.

23:42.160 --> 23:43.820
Non è poi così male.

23:43.840 --> 23:49.600
Tutto quello che stiamo dicendo è, non appena diciamo 'classe', diciamo,

23:49.600 --> 23:51.060
ehi! probabilmente faremo una copia di questo oggetto.

23:51.270 --> 23:56.820
Quindi vogliamo fare copie del giocatore, vogliamo fare copie di "mago" e questo si chiama "istanziazione".

23:56.820 --> 24:06.020
Quando eseguo la parola chiave "nuova", dico di creare un'istanza di "procedura guidata" e "procedura guidata" utilizza alcune funzionalità

24:06.020 --> 24:11.270
del lettore e aggiunge anche la sua piccola funzione "gioca".

24:11.270 --> 24:18.770
Holy moly, è stato molto, come ho detto, questo è qualcosa a cui dovrai tornare e non lo

24:18.770 --> 24:19.940
capirai subito.

24:19.940 --> 24:26.380
È davvero molto difficile comprendere appieno l'argomento senza realmente usarlo nella vita reale.

24:26.420 --> 24:32.900
Tienilo a mente, ogni volta che senti qualcuno parlare di "tipo di riferimento" o "contesto" o

24:33.290 --> 24:35.780
persino "ambito" o "istanziare" qualcosa.

24:35.840 --> 24:38.790
Bene, queste sono le cose di cui stanno parlando.

24:39.020 --> 24:40.980
Gli "oggetti" sono davvero complicati.

24:41.000 --> 24:42.570
Sono davvero difficili.

24:42.680 --> 24:47.040
Ma con ciò, ci dà molto potere.

24:47.050 --> 24:51.280
Quindi, buona fortuna con gli esercizi, ci vediamo nel prossimo. Buh-bye.
