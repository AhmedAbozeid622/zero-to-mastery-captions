WEBVTT

00:01.060 --> 00:09.590
Bentornati nei video precedenti che abbiamo appreso su HTTP e JSON. Abbiamo appreso che possiamo inviare richieste e

00:09.650 --> 00:14.830
ottenere risposte. Ma c'è un problema. Fino ad ora

00:14.920 --> 00:23.720
ogni volta che abbiamo bisogno di comunicare con il server facciamo quella richiesta quindi il browser quando riceve la

00:23.870 --> 00:29.930
risposta fa un aggiornamento della pagina. Inizialmente il caricamento della pagina sul Web

00:30.810 --> 00:35.710
era semplice per inviare una richiesta di un sito Web a un server.

00:35.940 --> 00:43.350
E fino a quando nulla è andato storto le risorse sarebbero state scaricate dalla pagina web e visualizzate sul

00:43.350 --> 00:44.150
tuo computer.

00:45.280 --> 00:51.820
Il problema con questo modello è che ogni volta che si desidera aggiornare qualsiasi parte della pagina, ad

00:51.820 --> 00:59.390
esempio, visualizzare un nuovo set di prodotti come su Amazon. Bene, dovrai caricare di nuovo l'intero programma,

00:59.510 --> 01:09.050
anche il contorno, persino la barra di navigazione in alto. Tutto doveva essere ricaricato, un aggiornamento completo della pagina.

01:09.080 --> 01:16.070
Ciò è estremamente dispendioso e si traduce in un'esperienza utente scadente, specialmente quando le pagine diventano più

01:16.070 --> 01:17.770
grandi e complesse.

01:17.930 --> 01:20.220
Puoi pensarci sul sito Udemy.

01:20.810 --> 01:34.640
Se andiamo a Udemy, bene, se faccio clic su diciamo marketing, la barra in alto rimarrà. Hai visto che?

01:34.640 --> 01:37.230
È una bella esperienza utente.

01:37.520 --> 01:41.500
Posso fare clic sulle schede e non riceverò un aggiornamento completo della pagina.

01:41.510 --> 01:48.630
Bene, carica automaticamente i dati sulla pagina.

01:48.640 --> 01:55.450
Ora questo problema che abbiamo portato qui ha portato alla creazione di tecnologie che consentono

01:55.450 --> 02:04.520
alle pagine Web di richiedere piccoli blocchi di dati come HTML, XML, testo normale, JSON e visualizzarli solo quando necessario.

02:05.740 --> 02:07.990
Aiutare a risolvere questo problema di aggiornamento.

02:09.340 --> 02:14.010
E la tecnologia si chiamava AJAX.

02:14.040 --> 02:22.470
Consente di leggere da un server Web dopo che la pagina è stata caricata e di

02:22.470 --> 02:31.610
aggiornare una pagina Web senza ricaricare la pagina. E infine inviare i dati in background mentre l'utente interagisce con il sito Web.

02:31.660 --> 02:40.000
In realtà è stato lanciato da Google nel 2006 e ora è ciò che ci aspettiamo dai siti Web e da qualsiasi app

02:40.000 --> 02:42.790
Web che vedi online utilizza Ajax ora.

02:42.800 --> 02:50.920
Vedi che Google ha avuto questo grosso problema quando stiamo cercando qualcosa, beh, inizialmente scrivevi

02:50.920 --> 02:56.430
'apple' e avrebbe fatto un aggiornamento completo della pagina.

02:56.430 --> 03:03.270
Ma ora con questo posso mantenere la barra in alto e caricarlo.

03:03.410 --> 03:05.050
Posso anche avere suggerimenti elaborati

03:07.980 --> 03:09.190
dal server.

03:09.300 --> 03:17.070
E questa è tutta una risposta del server che afferma che questi sono alcuni dei suggerimenti basati su

03:17.080 --> 03:18.200
Apple Store.

03:18.650 --> 03:24.410
Quindi è stato un grosso problema per Google e sono stati in grado di risolverlo con l'Ajax ma ora

03:24.410 --> 03:25.650
tutti abbiamo questa capacità.

03:25.670 --> 03:27.530
Quindi, come possiamo farlo.

03:27.530 --> 03:37.430
"Che cos'è l'Ajax? "AJAX è solo una tecnologia, un metodo per combinare pezzi insieme per raggiungere questo obiettivo.

03:37.590 --> 03:46.280
E è stato realizzato utilizzando uno strumento creato dai browser ed è stato chiamato richiesta HTTP XML.

03:46.620 --> 03:49.670
Sembrava qualcosa del genere.

03:50.130 --> 03:58.110
È stato creato un nuovo oggetto richiesta HTTP XML. Come puoi vedere sembra un po 'difficile.

03:58.980 --> 04:08.810
Fai una richiesta, fai una richiesta per ottenere questo URL che dici quando viene caricato. Se lo stato la risposta

04:08.810 --> 04:15.200
è maggiore di 200 o inferiore a 400.

04:15.200 --> 04:16.300
È un successo.

04:16.310 --> 04:25.880
Analizzeremo il testo della risposta da ricordare perché stiamo ricevendo una stringa dal server. Se il problema persiste, possiamo

04:25.880 --> 04:36.640
restituire un errore e quindi inviare la nostra richiesta e anche ascoltare eventuali errori.

04:37.320 --> 04:44.770
Sembra piuttosto duro ma sono cose che abbiamo superato. Ma non preoccuparti, in realtà non lo facciamo più.

04:44.770 --> 04:49.560
Questo era il vecchio modo di farlo quando Ajax fu introdotto per la prima volta.

04:49.570 --> 04:52.980
jQuery è arrivato e ha detto bene che questo è

04:52.980 --> 04:58.320
un po 'difficile da fare ogni volta. Ti semplificheremo semplicemente facendo questo.

04:58.550 --> 05:01.820
E questa era un'altra parte del motivo per cui jQuery era popolare.

05:01.820 --> 05:05.700
Possiamo semplicemente fare richieste Ajax facendo questo metodo.

05:06.050 --> 05:11.690
Ma ora c'è in realtà un modo ancora più nuovo che abbiamo usato quando costruiamo

05:11.690 --> 05:17.220
la nostra app di reazione ed è supportata dai browser e si chiama fetch.

05:17.510 --> 05:26.930
Come ricordi, è stato recuperato l'URL e quindi abbiamo fatto questo ". quindi (risposta) "e abbiamo ricevuto una risposta.

05:26.930 --> 05:31.790
Ora questa è davvero una buona cosa perché gli aggiornamenti della pagina sono molto più veloci e non devi aspettare

05:31.790 --> 05:33.140
che la pagina si aggiorni.

05:33.140 --> 05:36.660
Ciò significa che il sito sembra più veloce e più reattivo.

05:38.390 --> 05:44.250
Inoltre, ad ogni aggiornamento vengono scaricati meno dati, il che significa meno larghezza di banda sprecata.

05:44.750 --> 05:50.840
E questo è un problema importante, soprattutto sui dispositivi mobili in cui la connessione a Internet potrebbe

05:50.840 --> 05:52.460
non essere altrettanto buona.

05:52.580 --> 06:03.370
Ajax consente alle pagine Web e alle applicazioni Web di estensione di modificare i contenuti in modo dinamico ed è ovunque.

06:04.080 --> 06:06.510
È qualcosa di molto carino.

06:06.510 --> 06:14.140
Sembra intimidatorio ma è solo una questione di fare questo recupero che fa HTTP per te e tutto ciò che

06:14.140 --> 06:21.090
fai è dire se vuoi fare un GET, un POST e aggiungere alcuni dati JSON a quella richiesta.

06:21.220 --> 06:29.460
Rivediamo quindi cosa succede con Ajax. Si verifica un evento in una pagina Web come l'accesso

06:29.460 --> 06:34.200
e faccio clic su Accedi. Oggetto richiesta HTTP XML -

06:34.290 --> 06:41.280
Ancora una volta qualcosa che i browser Web hanno implementato viene creato e creato utilizzando JavaScript.

06:41.560 --> 06:49.800
L'oggetto richiesta HTTP XML invia una richiesta al server Web, il server elabora la richiesta e quindi

06:49.920 --> 06:54.500
il server invia una risposta alla pagina Web.

06:54.590 --> 07:03.650
La risposta viene letta da JavaScript e l'utente è in grado di accedere. Allo stesso tempo, aggiornando solo una piccola

07:03.650 --> 07:06.490
parte della finestra.

07:06.530 --> 07:12.380
Questo è ciò che è un'applicazione a singola pagina ed è una parola che probabilmente hai

07:12.410 --> 07:21.770
già sentito prima ed è una tendenza su come creare app Web. Dove si carica una base una pagina quasi vuota e si crea il contenuto

07:21.770 --> 07:25.010
al volo in base ai dati recuperati dal server.

07:25.010 --> 07:27.790
Torniamo da te Udemy.

07:27.900 --> 07:36.270
Quando faccio clic su un corso, facciamo "pubbliche relazioni", vedi che questo si sta caricando uno alla volta. Ho caricato la barra

07:36.810 --> 07:38.040
superiore.

07:38.160 --> 07:41.350
Poi ho fatto una pausa e poi il resto caricato.

07:41.400 --> 07:45.900
Se clicco su "Esplora corso" vedrai di nuovo quella barra in alto caricata.

07:45.930 --> 07:50.540
Altre parti del web si caricano lentamente in modo dinamico.

07:50.620 --> 07:59.820
E di nuovo se torno alla 'fotografia', ad esempio, parti della pagina web si caricano dinamicamente

07:59.820 --> 08:06.890
e questa è la bellezza. Queste applicazioni non ricaricano quasi mai completamente, distruggono il contenuto

08:06.890 --> 08:12.270
precedente in tutto o in parte e lo costruiamo sulla base di nuovi dati - nuova pagina.

08:12.470 --> 08:14.760
E questo potrebbe sembrare familiare.

08:15.720 --> 08:19.350
Ti ricordi come abbiamo realizzato la nostra app "robofriends".

08:19.740 --> 08:24.950
Abbiamo recuperato questo URL che ci ha fornito utenti.

08:25.330 --> 08:30.260
Quindi ora che comprendiamo questi concetti andiamo riga per riga e vediamo cosa succede.

08:30.280 --> 08:34.790
Ho usato il recupero basato su quello che ho detto, il recupero dovrebbe essere parte dell'oggetto finestra giusto?

08:34.990 --> 08:41.500
Controlliamo. Se apro la console e lo faccio

08:41.730 --> 08:43.870
'finestra. fetch

08:43.940 --> 08:54.200
'yeah fetch è una funzione che possiamo usare e questo URL se ricordi i ritorni per noi- Cos'è?

08:54.220 --> 08:56.540
Sì, un oggetto JSON.

08:56.800 --> 09:05.500
E questo oggetto JSON, il recupero ci consente di fare qualcosa chiamato risposta - 'risposta. JSON ()'.

09:05.840 --> 09:08.800
Bene, facciamolo per ora e vediamo cosa succede.

09:08.810 --> 09:14.750
Ho intenzione di copiare e incollare questo. Aprirò la console e sai che aprirò una nuova scheda

09:14.750 --> 09:17.180
per mostrarti che puoi farlo da qualsiasi luogo.

09:18.170 --> 09:25.770
Se copio e incollo questo recupero ottengo qualcosa chiamato promessa e questo è qualcosa in javascript a

09:26.040 --> 09:27.630
cui ti abituerai.

09:27.750 --> 09:34.050
Promessa sta dicendo "hey, sto facendo una richiesta da qualche parte su Internet e prometto di farti sapere quando

09:34.050 --> 09:37.160
ho restituito questo valore. "Quindi il modo in

09:37.650 --> 09:42.310
cui accedi alla promessa è - quindi hai questo:" una volta restituito, dammi

09:42.360 --> 09:43.540
il valore ".

09:43.620 --> 09:45.540
Tu fai '. allora

09:45.660 --> 09:51.600
'e ti dà la risposta. Se aggiungo alla mia richiesta precedente. allora

09:51.920 --> 10:05.520
e io faccio 'console di risposta. log (di risposta)'.

10:05.690 --> 10:11.510
Guarda che ho una risposta. Lo status 200 lo ricorderemo.

10:11.720 --> 10:12.520
Ok va bene.

10:12.530 --> 10:19.690
E otteniamo anche questo corpo ma dice flusso respirabile. E fetch- voglio dire che abbiamo

10:19.850 --> 10:25.930
imparato a conoscere JSON. analizzare per analizzare JSON.

10:26.340 --> 10:32.300
Ma il recupero in realtà arriva con un suo metodo chiamato bene "json".

10:32.450 --> 10:39.770
Quindi su questa risposta, se facciamo "json", in realtà lo convertirà per noi.

10:39.770 --> 10:49.310
Vediamo. Se torno a quella richiesta di nuovo ricevo una risposta. Se invece di accedere alla console, dico

10:49.380 --> 10:51.320
'risposta. json

10:51.530 --> 10:55.800
() 'In tal caso, ricevo di nuovo una promessa.

10:55.800 --> 11:03.300
Quindi questo significa che dobbiamo fare. quindi ricevere ogni volta che questo restituisce la promessa che è il valore.

11:03.680 --> 11:07.440
Quindi di nuovo vado e lo faccio. allora E in questo

11:07.600 --> 11:13.780
caso vediamo quali dati riceviamo riceviamo dati e consoleremo. dati di registro.

11:17.680 --> 11:31.800
Se premo invio. Guarda che riceviamo i nostri utenti, gli stessi utenti che erano qui.

11:31.880 --> 11:40.160
Quindi ora vedi che utilizziamo semplicemente l'API di recupero che ci consente di effettuare una chiamata AJAX dopo il montaggio del

11:40.160 --> 11:40.740
componente.

11:40.880 --> 11:48.830
Quindi, una volta caricata la nostra app robo friends, abbiamo fatto una richiesta Ajax utilizzando l'API di recupero.

11:49.100 --> 11:53.350
Abbiamo ricevuto una risposta che era una promessa.

11:53.360 --> 12:01.190
Quindi abbiamo dovuto farlo allora e questa risposta e questo è solo uno standard che ogni volta che prendi ti ricorderai di

12:01.190 --> 12:03.420
averlo fatto. json

12:03.710 --> 12:11.270
L'ho convertito in qualcosa che possiamo usare bene in JavaScript e perché

12:11.270 --> 12:21.440
questo ha restituito una promessa che abbiamo fatto. poi abbiamo ottenuto gli utenti e ora abbiamo l'oggetto Users e non abbiamo mai dovuto aggiornare la pagina.

12:21.510 --> 12:29.870
E comunque, se vuoi questo JSON ogni volta che accedi ad esso per sembrare più bello ed

12:29.870 --> 12:36.560
essere un po 'più leggibile, sto usando un'estensione di Chrome chiamata' JSONView '.

12:36.590 --> 12:37.130
È gratis.

12:37.130 --> 12:39.580
Basta aggiungerlo Chrome, lo fa automaticamente per te.

12:39.590 --> 12:43.000
Lo consiglio vivamente. Ok, torniamo a

12:43.460 --> 12:46.030
questo, questo dovrebbe avere senso

12:46.040 --> 12:47.450
ora.

12:47.810 --> 12:56.670
Ora abbiamo la possibilità di caricare dinamicamente le nostre pagine Web per creare applicazioni a pagina singola

12:56.750 --> 13:07.640
utilizzando AJAX e Ajax è una combinazione di strumenti per utilizzare l'API di recupero, l'utilizzo di HTTP, JSON per comunicare con i

13:07.640 --> 13:08.630
server.

13:09.080 --> 13:20.000
E ora abbiamo un quadro completo del nostro front-end. Il nostro front-end può avere HTML, CSS, JavaScript, reagire.

13:20.000 --> 13:31.670
Possiamo usare AJAX per comunicare con i server e utilizziamo i dati JSON per inviare dati via cavo. Davvero entusiasta per il prossimo paio

13:31.670 --> 13:33.660
di video.

13:34.500 --> 13:35.470
Quindi vedrò in quello. Ciao ciao.
