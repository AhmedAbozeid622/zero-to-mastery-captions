WEBVTT

00:01.450 --> 00:07.380
Nel 1989 Tim Berners-Lee ha inventato l'HTML che ha cambiato il mondo.

00:07.400 --> 00:13.930
Ma l'HTML non farebbe molto se non potessimo recuperare documenti da tutto il mondo e da computer diversi.

00:13.930 --> 00:16.860
A tal fine,

00:16.870 --> 00:24.280
Tim ha creato "Hypertext Transfer Protocol" o HTTP in breve.

00:24.290 --> 00:29.810
Ora ricorda queste frecce dai diagrammi che abbiamo avuto.

00:30.020 --> 00:37.070
Ti abbiamo detto che queste frecce erano semplicemente i fili e i cavi collegati che collegavano la rete

00:37.250 --> 00:37.860
mondiale.

00:38.840 --> 00:39.960
"Questo, giusto?

00:39.980 --> 00:46.590
Ti sei ricordato del diagramma. "Ma vedi che questi sono solo fili.

00:46.610 --> 00:53.840
Non ci sono istruzioni su come fare le cose per cui hai bisogno di qualcosa chiamato protocollo.

00:53.840 --> 01:00.830
Pensalo come uno standard che tutti seguono. Se tutti sono d'accordo, il

01:00.830 --> 01:11.570
protocollo funziona e può essere utilizzato da tutti. HTTP che ho qui è un protocollo che consente il recupero di risorse come

01:11.700 --> 01:12.630
documenti HTML.

01:12.670 --> 01:17.470
Voglio dire, è nel nome giusto Hypertext Transfer Protocol.

01:17.540 --> 01:24.120
Ora con l'uso di un HTML e HTTP abbiamo ora il World Wide Web.

01:24.260 --> 01:31.610
Possiamo prendere i file HTML e riceverli se andiamo a 'google. com / about 'andiamo alla pagina about HTML,

01:31.610 --> 01:34.260
la prendiamo e la riceviamo.

01:34.280 --> 01:43.290
Quindi HTTP è il protocollo o le regole che utilizziamo sui cavi.

01:43.440 --> 01:50.550
È il fondamento di qualsiasi scambio di dati sul Web e apre la strada a

01:50.730 --> 02:01.870
qualcosa chiamato protocollo del server client, il che significa che le richieste vengono avviate dal destinatario che nel nostro caso è il browser web.

02:01.950 --> 02:09.240
Quindi inviano una richiesta tramite HTTP. Il server ora capisce cosa dice il browser Web

02:10.200 --> 02:18.000
perché sta parlando in HTTP e il server può ora rispondere con HTML e il browser lo capisce

02:18.270 --> 02:20.310
perché sta parlando di nuovo

02:20.340 --> 02:21.780
tramite HTTP.

02:21.940 --> 02:29.950
Quindi dovresti pensare a HTTP come un linguaggio comune che un client e un server possono usare per comunicare.

02:29.950 --> 02:33.930
Stanno semplicemente dicendo Hey, puoi darmi questo documento.

02:34.170 --> 02:36.570
E il server può dire di sì, nessun problema.

02:36.630 --> 02:37.920
Ecco qui.

02:37.920 --> 02:43.330
E fino a questo punto non abbiamo davvero parlato con un server nella nostra app, vero?

02:43.440 --> 02:50.160
Costruiamo le applicazioni front-end o le applicazioni rivolte al client usando HTML, CSS, javascript

02:50.190 --> 02:54.120
e reagendo, ma vivevamo nel nostro mondo.

02:54.340 --> 03:01.860
Nessuna comunicazione con un altro computer. HTTP ci consente ora di comunicare con i server, con

03:01.860 --> 03:02.990
il mondo esterno.

03:03.060 --> 03:06.050
Quindi ripassiamo la terminologia ancora una volta.

03:06.200 --> 03:15.780
Clienti e server possono comunicare scambiando messaggi individuali. I messaggi inviati dal client di

03:16.320 --> 03:28.180
solito un browser Web sono chiamati richieste e i messaggi inviati dal server sono generalmente chiamati risposte.

03:28.220 --> 03:35.120
Quindi se HTTP è la lingua che ci consente di comunicare tra questi due insegnami alcune delle

03:35.120 --> 03:35.990
parole giuste.

03:36.290 --> 03:37.690
Voglio dire, è una buona domanda.

03:37.820 --> 03:44.690
E fortunatamente per te HTTP è abbastanza facile da imparare perché hai solo poche parole e ti mostrerò cosa sono

03:44.690 --> 03:45.940
in questo momento.

03:46.070 --> 03:51.910
Hai 'OTTIENI' hai 'POST' hai 'PUT'.

03:51.990 --> 03:53.880
E finalmente hai 'ELIMINA'.

03:57.360 --> 04:00.130
e ora stai pensando "umm che è tutto? "E sì,

04:00.130 --> 04:04.880
HTTP è bello perché è semplicemente semplice.

04:04.920 --> 04:06.660
Non è necessario complicare eccessivamente le cose.

04:07.750 --> 04:15.520
Impari queste quattro parole e queste lingue e puoi costruire l'app dei tuoi sogni.

04:15.520 --> 04:18.810
Quindi esaminiamolo uno per uno. "OTTIENI" significa

04:18.820 --> 04:22.530
che voglio ottenere un file HTML.

04:22.660 --> 04:28.360
Quindi chiedi di ottenere qualcosa e il server risponde con quella richiesta.

04:28.420 --> 04:31.700
Un 'POST' dice che voglio pubblicare qualcosa.

04:31.710 --> 04:38.410
Quindi ho intenzione di inviare alcuni dati ai server di Google e voglio che tu POST-Voglio che tu li aggiunga

04:38.950 --> 04:44.520
ai tuoi server o al tuo database. "PUT" ti invierò alcuni

04:44.780 --> 04:46.530
dati.

04:46.700 --> 04:51.950
E voglio che tu aggiorni alcuni dati già esistenti nei server di Google e

04:51.950 --> 04:59.270
semplicemente li aggiorni con queste nuove informazioni e poi 'ELIMINA' significa che cancella bene un pezzo di dati sul back-end

04:59.270 --> 05:01.240
sui server o sul database.

05:01.250 --> 05:08.270
Quindi, se usiamo Twitter come esempio, 'GET' sarà quello di ricevere il feed Twitter

05:08.270 --> 05:18.450
con tutti i tweet da oggi. "POST" sarebbe se hai creato un nuovo utente e desideri aggiungerlo ai server di Twitter. 'PUT' sarebbe se hai fatto un tweet ma vuoi

05:18.600 --> 05:25.880
fare una modifica o una modifica in modo da modificare quel tweet e 'ELIMINA' significherà bene sia eliminare il

05:25.890 --> 05:32.080
tuo account utente o eliminare un tweet. E non preoccuparti, li useremo quando

05:32.080 --> 05:36.130
arriveremo alla sezione backend e costruiremo il nostro progetto finale.

05:36.520 --> 05:45.040
Ora nel corso degli anni HTTP è stato esteso non solo per preoccuparsi del testo. Non solo recupera documenti ipertestuali come HTML, ma

05:45.040 --> 05:53.500
anche immagini e video e pubblica contenuti su server come con i risultati dei moduli HTML.

05:53.650 --> 06:01.300
e HTTP può anche essere usato per recuperare parte dei documenti per aggiornare le pagine Web su richiesta che si chiama AJAX

06:01.750 --> 06:04.900
e abbiamo un video in arrivo che ne parla.

06:05.020 --> 06:09.170
Ma l'idea principale si basa ancora su questi quattro verbi che

06:09.190 --> 06:13.230
abbiamo appena appreso, ora possiamo comunicare con i server.

06:13.340 --> 06:13.630
Tutto ok.

06:13.630 --> 06:23.220
Quindi sappiamo che questa freccia qui in alto usa HTTP per effettuare richieste usando uno di questi quattro verbi.

06:23.230 --> 06:23.680
Okay,

06:23.700 --> 06:27.630
quindi penso che tu abbia la parte richiesta. Ora, con cosa risponde

06:27.700 --> 06:29.320
il server?

06:29.320 --> 06:30.770
Che dire della risposta qui?

06:30.850 --> 06:38.140
Il server ti invia due cose principali. uno è un messaggio HTTP.

06:38.210 --> 06:42.780
Questo è qualcosa che hai sicuramente visto prima

06:42.800 --> 06:49.360
e collegherò alle risorse di questa W3school un messaggio di 200 significa successo.

06:49.410 --> 06:57.250
Probabilmente hai visto 200 OK prima di aver visto 404 messaggi che significa che non sono stati trovati.

06:57.390 --> 07:03.530
Se inserisci un URL che non esiste otterrai un 404 e forse a volte riceverai un messaggio di errore

07:03.570 --> 07:05.080
500 che è Bene,

07:05.230 --> 07:07.260
c'è qualcosa di sbagliato nel server.

07:07.530 --> 07:15.000
Quindi questo è solo un codice numerico fornito con ogni risposta che ti dice la risposta del server.

07:15.000 --> 07:16.080
Quindi questo è il primo.

07:18.390 --> 07:22.980
Il secondo è in genere una sorta di dati come HTML.

07:23.190 --> 07:25.530
E finora è quello che abbiamo fatto HTML.

07:25.830 --> 07:31.160
Ma nei prossimi video ti mostrerò che può inviare altre cose oltre al semplice HTML.

07:31.230 --> 07:33.600
Quindi aggiungiamo a questo diagramma ora.

07:34.230 --> 07:43.760
Vogliamo dire che anche questo ha un codice di stato e diremo 200 per ora che tutto andava bene

07:43.790 --> 07:50.770
e nella risposta darebbe il codice di stato più il nuovo file HTML.

07:51.020 --> 07:51.890
Tutto ok.

07:52.070 --> 07:56.900
Dimostriamolo effettivamente online per vedere come è possibile guardare questa azione.

07:58.360 --> 08:04.410
Qui ho un ottimo sito Web chiamato 'esempio. com 'ed è un semplice sito web che puoi

08:04.510 --> 08:05.330
visitare subito.

08:05.440 --> 08:12.830
Ma la parte interessante di questo è se apri la tua console per gli sviluppatori, fino a questo punto abbiamo esaminato la scheda degli elementi e quindi

08:12.830 --> 08:20.450
la scheda della console che voglio mostrare la scheda Rete che abbiamo qui. Ora la scheda Rete - Potrebbe essere

08:20.450 --> 08:21.620
necessario fare

08:21.980 --> 08:27.610
clic su alcune di queste icone e vedrai apparire diverse cose.

08:27.710 --> 08:30.900
Assicurarsi che il filtro non sia più disponibile.

08:31.780 --> 08:39.960
Tutto non viene cliccato e ora all 'esempio. com 'mentre questo è aperto semplicemente aggiorna

08:43.010 --> 08:44.420
e guarda.

08:44.600 --> 08:47.880
Ho intenzione di fare clic su questa icona che la rende un po 'più grande.

08:47.900 --> 08:52.010
Questo è un plugin, quindi non preoccuparti di questo javascript ma la cosa migliore che dice.

08:52.010 --> 08:55.940
"esempio. com "" Status: 200 OK

08:55.970 --> 09:03.140
"E" Type: document "e mi dice anche la dimensione - il tempo impiegato per ottenere questo che è 53 millisecondi ...

09:03.140 --> 09:04.760
È abbastanza veloce.

09:04.760 --> 09:07.790
Ciò significa che il server ha risposto con 200.

09:07.790 --> 09:13.830
Se faccio clic su questo, ricevo un sacco di cose di cui non dobbiamo

09:13.830 --> 09:16.080
davvero preoccuparci, ma alcune

09:16.080 --> 09:23.340
cose "Richiedi URL" questo è ciò che abbiamo richiesto. Otteniamo un codice di stato di 200 dal server.

09:23.340 --> 09:31.280
E se clicchiamo sulla risposta c'è un messaggio di risposta che abbiamo ricevuto il documento HTML

09:31.280 --> 09:32.760
dal server.

09:32.860 --> 09:36.870
Se torniamo alle intestazioni vediamo anche che il nostro metodo di richiesta era un 'OTTIENI'.

09:36.970 --> 09:44.430
Abbiamo fatto una richiesta "GET". Chiudiamo questo e aggiorna di nuovo.

09:44.490 --> 09:48.880
Ora ottengo uno stato 304. A 304 Se guardiamo qui

09:48.930 --> 09:55.050
significa che non è stato modificato indica che la pagina di richiesta non è

09:55.050 --> 09:59.150
stata modificata dall'ultima richiesta. Perché l'ho già richiesto ora

09:59.170 --> 10:04.800
Google è abbastanza intelligente da dire oh non mi preoccuperò del server e richiederò sempre la

10:04.800 --> 10:05.640
stessa cosa.

10:05.640 --> 10:09.960
L'ho già memorizzato, quindi eccolo qui.

10:10.130 --> 10:10.730
Molto bello.

10:10.730 --> 10:13.740
Quindi la scheda Rete è davvero utile per questo.

10:14.030 --> 10:14.420
Tutto ok.

10:14.420 --> 10:20.330
Quindi puoi andare avanti e giocare con l'esempio. com 'e vedere di persona come funziona HTTP.

10:21.970 --> 10:29.590
E tra l'altro sì, questo HTTP che vedi qui è quello che significa quando fai una richiesta HTTP, dice che

10:29.680 --> 10:34.340
facciamo HTTP - stiamo usando il web in tutto il mondo.

10:34.640 --> 10:38.260
E vai a richiederlo dal server.

10:38.450 --> 10:39.110
Molto bello.

10:39.140 --> 10:40.650
E se ti stai chiedendo delle "s".

10:40.670 --> 10:43.850
Non ti preoccupare, ti farò sapere alla fine di questo video che cosa significa anche questo.

10:46.410 --> 10:46.970
Tutto ok.

10:47.120 --> 10:49.780
E se volessi inviare dati.

10:49.850 --> 10:53.790
Se torniamo al nostro diagramma, sto solo facendo una richiesta "OTTIENI".

10:53.840 --> 10:58.090
E se volessi effettivamente inviare alcune informazioni al server.

10:58.100 --> 11:02.120
A parte qualche URL che dice che voglio queste informazioni.

11:02.120 --> 11:04.330
Bene, ci sono due modi in cui puoi farlo.

11:05.440 --> 11:08.300
Uno è qualcosa chiamato stringa di query.

11:08.530 --> 11:13.140
E poi il secondo è attraverso il corpo della richiesta.

11:13.250 --> 11:20.450
Quindi ti mostrerò come entrambi questi lavori ho qui il modulo che abbiamo creato nella nostra

11:20.660 --> 11:24.270
prima sezione HTML avanzata quando sapevamo solo HTML.

11:24.860 --> 11:25.990
Apriamo questo file.

11:29.810 --> 11:30.850
Ce l'ho qui.

11:30.870 --> 11:34.650
Se faccio doppio clic su -ahh, ricordi questo no?

11:34.650 --> 11:37.990
Abbiamo fatto molta strada. In questo modulo,

11:38.100 --> 11:46.280
se ricordi che avevamo un metodo "GET" e ora puoi capire cosa significa questo "GET".

11:46.320 --> 11:52.220
Sta dicendo che con questo modulo voglio che tu faccia una richiesta "OTTIENI".

11:52.350 --> 11:59.960
Vediamo cosa succede quando faccio clic su Register mentre apro la scheda di rete.

12:00.160 --> 12:04.000
Ho intenzione di fare clic su 'Registrati! '.

12:04.010 --> 12:04.650
Tutto ok.

12:04.730 --> 12:07.190
Quindi abbiamo questa richiesta.

12:07.190 --> 12:14.810
Vediamo che abbiamo fatto una richiesta e ha creato queste cose chiamate stringhe di query.

12:14.840 --> 12:21.370
Il primo modo di inviare dati al server. Con una richiesta 'OTTIENI' se vuoi

12:21.380 --> 12:29.710
inviare informazioni tramite un modulo, le aggiunge all'URL usando questo punto interrogativo che dice che sto per inviarti

12:29.710 --> 12:34.400
alcune stringhe di query e avrà una chiave e un valore.

12:34.630 --> 12:36.550
In questo caso nome, cognome è tutto

12:36.550 --> 12:38.310
vuoto quindi non ci sono informazioni.

12:38.320 --> 12:42.110
Ma per il resto dirò che il nome è uguale ad Andrei.

12:42.400 --> 12:51.900
Se faccio clic su questo, vediamo che abbiamo inviato i parametri della stringa di query. Abbiamo nome, cognome, e-mail, password e data

12:51.960 --> 12:55.370
di nascita che è vuota.

12:55.710 --> 13:02.590
Ma se scorriamo verso il basso nelle automobili, l'impostazione predefinita è Volvo, quindi abbiamo Auto: Volvo.

13:02.730 --> 13:07.140
Quindi queste informazioni ora vengono inviate al server.

13:07.140 --> 13:10.260
Questi sono i parametri della stringa di query usando 'GET'.

13:10.260 --> 13:12.390
E abbiamo menzionato una cosa però.

13:12.480 --> 13:16.530
Vediamo che abbiamo una password qui che non è molto sicura, vero?

13:16.560 --> 13:27.850
Se torno al modulo e scrivo "segreto" e faccio di nuovo clic su Registra Bene, ora ho la mia password aperta

13:28.270 --> 13:34.900
inviata via cavo e la ho anche qui nella barra degli URL.

13:35.070 --> 13:35.370
Tutto ok.

13:35.370 --> 13:36.350
Torneremo su quello.

13:37.790 --> 13:39.060
Quindi questo è un modo.

13:39.170 --> 13:44.930
Il secondo modo è attraverso il corpo della richiesta.

13:44.930 --> 13:48.210
Lascia che ti mostri come funziona nel modo

13:48.230 --> 13:57.110
in cui inviamo informazioni al corpo se usiamo una richiesta "POST" e questo è qualcosa che vedrai più spesso di una richiesta

13:57.110 --> 14:04.690
"GET" è che vogliamo aggiungere alcuni dati del modulo a il server, quindi vogliamo pubblicare qualcosa se lo

14:04.690 --> 14:06.790
cambio qui, lo salverò.

14:06.970 --> 14:09.300
E apriamo una nuova scheda.

14:10.430 --> 14:14.920
Con un nuovo dato salvato questo è un modulo di posta.

14:15.010 --> 14:23.540
Se lo apro qui e digito la password "segreta" e faccio clic su "Registrati! Registro 'I

14:26.590 --> 14:32.230
get'. html "ma nessuna stringa di query.

14:32.350 --> 14:33.370
Se faccio clic

14:36.350 --> 14:41.290
su questo, vedo che ora invece di stringhe di query sono i dati del modulo.

14:41.480 --> 14:48.650
E dice anche "Content-Type: application / x-www-form-urlencoded".

14:49.070 --> 14:57.830
E questo è solo un modo HTML per dire che questo è un modulo e questo è il corpo ma non viene visualizzato qui.

14:57.860 --> 15:03.200
Quindi ora il server non può accedervi dai parametri della query e non preoccuparti, ti mostrerò come lo fanno

15:03.200 --> 15:03.780
i server.

15:03.860 --> 15:09.740
Quando arriviamo alla sezione backend. Invece di accedervi tramite i parametri della query, ora

15:09.740 --> 15:12.160
posso accedervi tramite i dati del modulo.

15:12.170 --> 15:15.440
Quindi torniamo al diagramma.

15:15.610 --> 15:22.850
Ora capiamo che possiamo fare richieste HTTP usando 'GET', 'POST', 'PUT' e 'DELETE'.

15:22.850 --> 15:35.140
Posso usare stringhe di query che si trovano nella parte superiore dell'URL per inviare i dati o il corpo della richiesta e quindi il server risponde con un codice

15:35.500 --> 15:41.350
di stato basato su come era la mia richiesta e restituisce quello con

15:41.350 --> 15:42.440
una risposta.

15:42.820 --> 15:52.290
Ma l'unico problema che abbiamo riscontrato è che la password era ben visibile in entrambi i casi, no?

15:52.300 --> 15:57.550
E se avessimo avuto una persona dall'aspetto spaventoso qui.

15:57.560 --> 15:58.360
Ecco qua

15:58.580 --> 16:08.140
E se avessimo una persona che stava guardando la nostra comunicazione e che la monitorasse.

16:08.380 --> 16:15.370
Se ho usato stringhe di query per inserire bene la mia password, può semplicemente guardarmi alle spalle e

16:15.440 --> 16:18.790
vedere oh la password di Andrea è segreta.

16:18.790 --> 16:29.510
Ora posso accedere al suo account Google o se uso il modo di inviare i dati in modo corretto, può trovare un modo per ottenere che questa richiesta

16:29.510 --> 16:33.460
venga prima da lui. E basta guardare i dati

16:36.900 --> 16:44.750
del modulo e vedere che la mia password è segreta. "Non va molto bene, vero?

16:44.750 --> 16:57.210
"Beh, una soluzione a questo è stata l'idea di HTTPS. Ora HTTPS significa Hypertext Transfer Protocol Secure

16:57.240 --> 17:06.820
e qui puoi vedere che "W3C" utilizza la versione protetta di HTTPS.

17:06.860 --> 17:11.280
Le comunicazioni tra il browser e i siti Web sono ora crittografate.

17:12.610 --> 17:13.330
E cosa significa?

17:13.330 --> 17:22.380
Crittografato significa solo che è confuso, quindi solo il client e il server conoscono il passaggio segreto o la

17:22.390 --> 17:25.360
chiave segreta per leggere il messaggio.

17:26.740 --> 17:35.050
E questa parte a "S" del segreto utilizza una tecnologia chiamata sicurezza del livello di trasporto o

17:35.050 --> 17:41.870
il suo predecessore strato di socket sicuri o TLS e SSL in breve.

17:41.920 --> 17:51.820
Quindi ora anche con HTTPS se l'attaccante o quello che chiamiamo un uomo nel mezzo la persona che sta

17:51.820 --> 17:58.030
solo monitorando le nostre richieste. Anche se ottengono la nostra password sarà solo

17:58.030 --> 18:06.120
un completo jibberish che avrà qualcosa di simile a questo e beh, questa non è la nostra password, quindi sarà

18:06.170 --> 18:07.690
insignificante, eviterà quell'attacco.

18:07.690 --> 18:08.960
Questo è solo il consiglio.

18:09.280 --> 18:17.040
Come sviluppatore dovresti dire a tutti i tuoi amici se stai inviando informazioni sensibili, magari accedendo a un

18:17.040 --> 18:18.330
conto bancario.

18:18.450 --> 18:26.130
Assicurati che ci sia HTTPS là fuori se non c'è HTTPS quando invii, forse il tuo login con

18:26.130 --> 18:27.560
la tua password.

18:27.690 --> 18:30.250
Bene, questo non è sicuro.

18:30.400 --> 18:30.890
Tutto ok.

18:31.010 --> 18:40.860
Ripassiamo. Il tuo browser Web è un client HTTP che invia richieste ai computer server. Quando l'utente del browser inserisce seguire le

18:40.920 --> 18:48.930
richieste aprendo un file o digitando un URL o facendo clic su un collegamento ipertestuale un tag

18:48.930 --> 18:50.500
di ancoraggio.

18:50.880 --> 18:56.530
Il browser crea una richiesta HTTP e la invia per comunicare con il server.

18:56.730 --> 19:02.380
Ora il server può ricevere informazioni. La prima versione che abbiamo potuto utilizzare

19:02.470 --> 19:09.430
parametri URL come 'www. Google. com / about "e ottieni specificamente HTML.

19:09.510 --> 19:11.020
Questo è stato.

19:11.050 --> 19:18.950
Poi è arrivato il modulo in modo che ora possiamo effettivamente inviare più dati oltre all'URL dicendo che vogliamo andare

19:18.950 --> 19:20.880
a questo file HTML.

19:21.260 --> 19:34.930
Ora potremmo usare 'GET' o 'POST' per inviare dati. Tramite un corpo o una stringa di query e un server può agire

19:34.930 --> 19:40.540
in base a tali dati e restituire una nuova pagina.

19:40.630 --> 19:47.200
E questa è la base del web e di come il web mondiale che abbiamo ora è stato reso possibile. Attraverso la comunicazione del

19:47.380 --> 19:53.140
server client. Nei prossimi video impareremo ancora di più.

19:53.390 --> 19:56.820
Per capire davvero questo potere ti vedrò nel prossimo. Ciao ciao.
