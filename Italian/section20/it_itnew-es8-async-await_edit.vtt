WEBVTT

00:01.210 --> 00:08.290
Ah, la nuova funzionalità di javascript di cui tutti parlano ultimamente 'Async Await'. In questo video impareremo di cosa

00:08.290 --> 00:12.830
tratta tutto l'hype. Per iniziare, devi prima

00:12.890 --> 00:19.880
sapere che Async Await fa parte di ES8 e si basa sulle promesse.

00:20.000 --> 00:22.280
Se non sei sicuro di quali siano le promesse.

00:22.280 --> 00:25.840
Assicurati di controllare prima quel video.

00:25.960 --> 00:34.420
Ora sotto il cofano una funzione asincrona è una funzione che restituisce una promessa. Ma il vantaggio di Async Await è che

00:34.430 --> 00:37.710
facilita la lettura del codice.

00:38.110 --> 00:39.430
Lascia che ti mostri cosa intendo.

00:39.760 --> 00:44.750
Questa è una promessa che abbiamo appena fatto.

00:44.770 --> 00:47.340
È una funzione mossa giocatore.

00:47.350 --> 00:53.470
Immagina di progettare un gioco che abbia la distanza più la direzione in cui il giocatore si muove e

00:53.470 --> 00:59.560
se vogliamo cambiarli abbiamo un "giocatore in movimento". quindi "," sposta di nuovo il giocatore "," sposta di nuovo il giocatore ".

00:59.650 --> 01:00.810
'sposta giocatore' di nuovo.

01:01.150 --> 01:03.670
Ora questo è un codice asincrono.

01:03.730 --> 01:06.200
Sappiamo che il giocatore di mosse accadrà, quindi

01:06.280 --> 01:08.390
Questo accadrà, quindi questo, quindi questo.

01:08.500 --> 01:16.780
Se vogliamo avere un qualche tipo di azione all'interno, possiamo racchiuderlo tra parentesi e registrare tale estrazione dalla console.

01:16.780 --> 01:21.370
Tutte le cose che puoi fare con le promesse. con async aspetta

01:21.410 --> 01:24.240
Sarebbe qualcosa del genere.

01:27.300 --> 01:28.420
Cosa sta succedendo qui.

01:29.770 --> 01:37.660
Il grande vantaggio di Async ti aspetta è che rende il codice più facile da leggere e so che probabilmente non lo stai pensando in questo momento

01:37.660 --> 01:41.230
perché questa è una nuova sintassi, ma dai solo una possibilità.

01:41.240 --> 01:48.850
L'obiettivo con asincrono attende che il codice appaia sincrono - un codice che sia asincrono sembra sincrono.

01:48.850 --> 01:54.890
Ora, se ricordi una promessa in javascript è un po 'come un' ti devo '.

01:55.020 --> 01:58.180
Prometto di restituirti qualcosa in futuro.

01:58.990 --> 02:05.140
Qualcosa come una chiamata AJAX che ridimensiona un'immagine ottenendo alcune informazioni da un database.

02:05.140 --> 02:07.040
Queste sono tutte cose che richiedono tempo.

02:07.180 --> 02:11.910
Invece di aspettare su di loro, vogliamo continuare con le nostre vite e fatelo sapere

02:11.920 --> 02:13.510
Facci sapere quando sarà finito.

02:13.780 --> 02:18.220
Ma continueremo a lavorare sulle nostre cose mentre lo sta facendo in background.

02:18.700 --> 02:22.290
Lo facciamo in questo modo perché è così che funziona JavaScript.

02:22.330 --> 02:30.010
Se ricordi nel nostro video "Come funziona Javascript" abbiamo parlato del fatto che javascript sia a thread singolo. Perché i nostri programmi siano efficienti possiamo

02:30.010 --> 02:34.270
usare la programmazione asincrona per fare queste cose.

02:34.450 --> 02:38.670
Quindi le promesse ci aiutano a risolvere questo e sembrava così.

02:39.560 --> 02:45.660
Ora ricordate che cosa ho detto all'inizio del codice di attesa asincrono sono solo promesse.

02:45.770 --> 02:53.960
Sotto il cofano chiamiamo questo zucchero sintattico qualcosa che fa ancora la stessa cosa ma è solo una

02:54.170 --> 02:56.930
sintassi diversa per renderlo più bello.

02:56.960 --> 03:06.940
Zucchero sintattico E le promesse hanno questo. poi che continui a dover incatenare asincrono d'altra

03:06.940 --> 03:12.420
parte ha questa parola asincrona di fronte ad essa e alcuni attendono parole chiave.

03:12.700 --> 03:15.180
Vediamo cosa significa tutto questo.

03:15.980 --> 03:20.560
Sebbene queste due cose facciano lo stesso con la funzione playerStart.

03:20.560 --> 03:25.650
Dichiariamo innanzitutto una funzione asincrona. Conduciamo javascript sapere-

03:25.660 --> 03:32.220
"Ehi, questa è una funzione asincrona. "E lo dichiariamo con la parola funzione e poi un nome di funzione.

03:32.270 --> 03:39.800
Ora possiamo fare tutto ciò che vogliamo all'interno di questa funzione, ma abbiamo accesso a una nuova parola perché abbiamo usato

03:39.890 --> 03:42.460
la parola asincrona per definire questa funzione.

03:42.620 --> 03:50.350
Abbiamo la parola chiave "wait" e questa parola chiave dice- e possiamo rimuoverla per ora.

03:51.330 --> 03:57.890
Questa parola chiave 'wait' dice "hey mettere in pausa questa funzione fino a quando non ho qualcosa per te. "Quindi stiamo aspettando

03:58.920 --> 04:01.580
la risposta.

04:02.360 --> 04:08.900
E puoi usare questa parola chiave 'wait' davanti a qualsiasi funzione che restituisca una promessa che sappiamo che il giocatore

04:08.910 --> 04:10.050
di move fa.

04:10.220 --> 04:16.760
E una volta risolta la promessa, la funzione passa alla riga successiva e attende la mossa successiva e

04:17.030 --> 04:20.770
attende la mossa successiva e attende la mossa successiva.

04:20.840 --> 04:27.200
Ora il bello di questo è che invece di concatenarlo in questo modo ora

04:27.410 --> 04:34.380
posso assegnare proprio come la programmazione asincrona, la variabile prima di aspettare questo e posso assegnare il

04:37.770 --> 04:46.070
secondo ad aspettare questo e il primo e il secondo avranno il risultato di ogni funzione ma in un variabile.

04:46.150 --> 04:48.220
Quindi sembra molto sincrono.

04:48.250 --> 04:50.980
Non stai usando '. allora 'non stai concatenando.

04:50.980 --> 04:54.920
Hai solo una semplice programmazione sincrona che aspetti che ciò accada.

04:54.930 --> 04:56.590
Quindi aspettando che ciò accada.

04:57.130 --> 05:02.720
Ma usiamo un esempio più realistico, quindi lo capiamo davvero.

05:02.920 --> 05:07.860
Se utilizziamo la nostra funzione di recupero e di nuovo se ricordi la funzione di recupero.

05:08.050 --> 05:10.010
Questa è una promessa.

05:11.190 --> 05:15.270
Vedi che abbiamo una promessa.

05:15.430 --> 05:26.070
Quindi, con la funzione fetch se utilizziamo la nostra risorsa API preferita, segnaposto json. Prendiamo gli utenti qui in modo che

05:26.080 --> 05:34.800
questo punto finale degli utenti. Se vogliamo recuperare qualcosa, abbiamo restituito una promessa in modo da fare una. quindi risposta dovremmo eseguirlo.

05:34.810 --> 05:41.540
json E poi finalmente.

05:41.540 --> 05:41.540
quindi console. registra la risposta o i dati che otteniamo.

05:42.780 --> 05:51.990
Quindi di nuovo se copio e

05:51.990 --> 06:01.280
incollo questo nella nostra console, riceviamo una promessa che è inizialmente in sospeso, quindi viene risolta e ottengo i miei utenti.

06:01.280 --> 06:06.050
Ora come possiamo trasformarlo in una funzione asincrona.

06:06.080 --> 06:09.010
Ancora una volta la stessa funzione funzionerà allo stesso modo ma sembrerà un po 'più pulita.

06:09.080 --> 06:16.060
Sarà zucchero sintattico.

06:16.210 --> 06:18.340
Bene, se ricordi

06:18.620 --> 06:27.950
che dobbiamo dichiarare una funzione con una parola chiave asincrona e questa funzione dirà fetchUsers e

06:28.400 --> 06:32.150
fetch users Avrà questo al suo interno.

06:32.430 --> 06:38.740
Ma ora possiamo usare di fronte a tutto ciò che restituisce una promessa.

06:38.980 --> 06:43.580
La parola chiave "wait".

06:43.640 --> 06:46.290
Quindi ora questa funzione verrà messa in pausa fino a quando non avremo una risposta dal recupero.

06:46.770 --> 06:52.050
Quindi posso dire che const "risposta" equivale

06:52.100 --> 06:57.150
ad attendere la chiamata di recupero. E ora invece di usare il. allora posso dire che const 'data'

06:59.060 --> 07:13.750
equivale a 'attende' risposta. json () risposta 'because again'. json "restituisce una promessa in modo da poter inserire la parola chiave" wait ". E poi finalmente posso solo

07:14.710 --> 07:21.790
'console. log (data) 'Va bene

07:21.790 --> 07:27.140
copiamo e incolliamo questo e vediamo se funziona.

07:29.120 --> 07:31.570
Tutto ok.

07:35.610 --> 07:36.100
Ora chiamo la funzione fetchUsers che è la funzione asincrona.

07:36.150 --> 07:42.980
E ho fatto un po 'di errore qui.

07:43.160 --> 07:45.320
Non c'è risposta, è la risposta breve "resp". Ecco qua proviamo di nuovo.

07:45.350 --> 07:51.050
Quindi aggiorniamolo.

07:51.620 --> 07:53.460
Copia e incolla, esegui la funzione fetchUsers e guarda quello.

07:54.510 --> 08:01.990
Abbiamo la nostra promessa che è stata risolta.

08:02.130 --> 08:05.940
E i nostri utenti non

08:06.240 --> 08:18.200
hanno nulla di diverso dalla promessa, ma ora abbiamo un bel codice passo dopo passo che dice prendere questo.

08:18.210 --> 08:21.210
Ottieni una risposta, quindi eseguila attraverso il metodo json e quindi registra i "dati" della console. E potresti pensare a te stesso

08:21.210 --> 08:29.450
che è davvero più bello di quello che avevamo prima.

08:29.450 --> 08:34.070
Ricordiamo cosa avevamo prima.

08:34.370 --> 08:36.470
Questo è quello che avevamo prima.

08:43.920 --> 08:45.590
Questo è quello che abbiamo ora.

08:45.780 --> 08:47.750
E alcuni di voi potrebbero sostenere che il primo modo promettente sembra migliore.

08:48.630 --> 08:52.760
E tu sai cosa.

08:53.130 --> 08:53.810
È una preferenza personale e questo è un semplice esempio.

08:53.850 --> 08:57.030
Quindi ci sono momenti in cui questo sembra davvero molto più pulito.

08:57.040 --> 09:00.100
Ma credo fermamente nel fare ciò che è più facile da leggere e comprendere per te e i tuoi compagni di squadra.

09:00.360 --> 09:07.340
Facciamo un ultimo esempio. Facciamo qualcosa di ancora più realistico.

09:07.560 --> 09:12.850
Diciamo che abbiamo un

09:12.960 --> 09:20.130
elenco di URL e questa volta abbiamo utenti, post e album dell'API segnaposto json.

09:20.130 --> 09:22.390
E vogliamo esaminarli tutti.

09:23.660 --> 09:25.810
Se ricordi nel nostro video sulle promesse abbiamo avuto qualcosa del genere.

09:25.850 --> 09:30.270
Rimuoviamolo in modo da poterlo vedere meglio.

09:30.500 --> 09:32.550
Quindi abbiamo avuto qualcosa del genere.

09:32.870 --> 09:34.010
Lo abbiamo promesso. tutto - abbiamo mappato attraverso gli URL. Abbiamo recuperato gli URL e

09:34.010 --> 09:43.900
risposto con JSON, quindi abbiamo restituito l'array e l'array aveva utenti, post, album e abbiamo anche fatto un. catturare.

09:45.400 --> 09:54.020
Quindi di nuovo solo per assicurarci che funzioni

09:54.030 --> 10:03.440
andando a copiarlo mettilo nella nostra console e vediamo che otteniamo i dati dei nostri utenti, post e album.

10:03.440 --> 10:06.860
Quindi funziona.

10:06.860 --> 10:07.990
Convertiamolo in una funzione asincrona.

10:08.270 --> 10:10.830
Bene, cominciamo facendo un 'const getData' e questa sarà (uguale) una funzione asincrona.

10:11.300 --> 10:21.970
E voglio solo sottolineare che questa volta l'ho fatto con l'espressione della funzione invece del modo in cui l'abbiamo fatto l'ultima volta che

10:23.610 --> 10:28.470
era la funzione asincrona e quindi il nome della funzione.

10:28.470 --> 10:31.900
Ma voglio solo mostrarti entrambi i modi.

10:32.040 --> 10:33.570
Va bene, quindi come possiamo fare una 'promessa. tutti'? Bene, se ricordi che ora

10:35.350 --> 10:44.030
possiamo mettere la parola chiave "wait" di fronte a qualsiasi promessa. Quindi possiamo mettere la parola chiave "wait" davanti alla promessa. tutto Quindi posso dire che const-

10:44.060 --> 10:50.400
e questa è una

10:50.570 --> 11:02.760
piccola magia ES6 di destrutturazione- Posso dire che gli utenti, i post e gli album che stiamo per ricevere equivarranno ad "attendere" e quindi alla promessa. tutto ciò che già abbiamo.

11:03.800 --> 11:12.700
Quindi copiamolo e basta.

11:13.070 --> 11:14.450
Copiamo la promessa. tutto e posizionalo qui.

11:14.460 --> 11:19.170
Tutto ok.

11:20.080 --> 11:20.680
E ora possiamo semplicemente registrare su console ciò che avevamo. Possiamo

11:20.800 --> 11:32.750
copiare e incollare subito dopo aver "atteso" tutte le promesse che avremo "utenti", "post", se posso scrivere. e poi "album". e invece di Array perché l'abbiamo

11:33.270 --> 11:42.590
fatto con la

11:42.830 --> 11:50.480
destrutturazione possiamo solo dire "post" degli utenti e "album".

11:53.260 --> 11:55.250
Va bene, quindi vediamo se funziona. Copia e

11:55.510 --> 12:05.510
incolla questo ed esegui getData e guardalo.

12:08.220 --> 12:09.030
Abbiamo ottenuto gli stessi esatti risultati.

12:09.090 --> 12:12.920
Molto bello.

12:13.890 --> 12:14.670
Ma potrebbe esserci una cosa che hai notato qui che è nel modo promesso che abbiamo. catturare.

12:15.070 --> 12:23.420
Se qualcuno di questi fallisce, vogliamo rilevare questi errori come possiamo farlo con Async wait.

12:23.490 --> 12:31.590
Al momento non stiamo rilevando nessuno di questi errori.

12:31.590 --> 12:33.740
Questa è la parte di cui non molte persone sono grandi fan.

12:35.490 --> 12:38.840
Ma è qualcosa a cui ci abituiamo non è poi così male. JavaScript ha qualcosa chiamato "provare a catturare i blocchi".

12:39.060 --> 12:47.520
e cioè quando vede la parola "prova", eseguirà automaticamente qualunque cosa ci sia dentro.

12:47.790 --> 12:55.770
Nel nostro caso tutto questo blocco vogliamo che venga

12:55.770 --> 13:08.130
eseguito in un blocco try e poi 'try' viene fornito anche con un blocco catch.

13:08.160 --> 13:09.200
Quindi prova un blocco catch e entro il catch se qualcosa non riesce qui.

13:09.540 --> 13:15.450
Bene, possiamo prenderlo qui, così possiamo solo consolarlo. log 'oops' Quindi ora diciamo che ho sbagliato a scrivere uno

13:15.690 --> 13:19.460
degli URL e

13:19.550 --> 13:20.190
copiamolo. Proviamolo.

13:21.890 --> 13:29.760
Avremo i nuovi URL.

13:30.020 --> 13:31.720
Vorrei chiarirlo. Nuovi URL con l'URL errato per uno di essi.

13:31.820 --> 13:37.880
Copia e incolla getData e vedrai qui che si verifica un errore di sintassi.

13:37.880 --> 13:44.270
E questo perché una cosa che devi ricordare con

13:44.560 --> 13:53.570
catch è che il catch riceve un errore e questo errore puoi consolarlo se

13:53.570 --> 13:55.390
lo desideri. Quindi, basta accedere alla console e quindi riprovare.

13:55.430 --> 14:00.310
Questa volta chiameremo semplicemente getData1 -perfect.

14:01.530 --> 14:07.230
Ora, se lo pulisco un po 'e faccio getData1

14:07.240 --> 14:14.770
con il blocco try catch, non riesco a recuperare l'errore di tipo' oops

14:15.100 --> 14:15.910
'.

14:15.920 --> 14:17.420
Quindi ottengo il blocco catch con l'errore proprio come abbiamo fatto con la promessa. tutto usando solo le promesse.

14:17.510 --> 14:26.860
E il gioco è fatto.

14:27.400 --> 14:28.400
Questo è tutto.

14:28.420 --> 14:29.250
Async attende

14:29.330 --> 14:37.090
anche se all'inizio è intimidatorio perché c'è un po 'di nuova sintassi che rende le cose piuttosto belle e sincrone.

14:37.090 --> 14:40.130
Abbiamo semplicemente una variabile a cui assegnare la

14:40.210 --> 14:48.370
promessa di attesa e quindi la funzione si interrompe fino a quando la promessa non ritorna e poi continua con la registrazione della console.

14:48.370 --> 14:53.710
E devi solo ricordare il tentativo di catturare i blocchi qui per catturare i tuoi errori e basta.

14:53.860 --> 14:59.690
Ora sei un asincrono in attesa del Maestro.

14:59.710 --> 15:02.280
Puoi usare quello che preferisci.

15:02.350 --> 15:05.170
Come ho detto alla fine della giornata, utilizzare le promesse o le

15:05.170 --> 15:12.370
funzioni di attesa asincrona basate su qualunque sia la più semplice per te e il tuo team, ma speriamo che quando incontri entrambe queste cose, ora sei molto più a tuo agio.

15:12.370 --> 15:19.510
Ci vediamo nel prossimo. Ciao ciao.
