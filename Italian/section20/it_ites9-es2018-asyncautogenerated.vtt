WEBVTT

00:00.360 --> 00:00.870
Ben tornato.

00:01.560 --> 00:10.100
Voglio parlarti di altre due nuove U. S. Funzionalità 2018 e per mostrarti come funzionano.

00:10.110 --> 00:18.000
Useremo l'esempio che abbiamo avuto nel video sulle promesse in cui passiamo in rassegna tutto ciò

00:18.000 --> 00:22.010
che sei L sono API di Star Wars.

00:22.140 --> 00:30.240
Bene, abbiamo recuperato i dati e poi abbiamo semplicemente consegnato la console su tutto ciò che

00:31.020 --> 00:39.910
abbiamo ricevuto in modo che se copio questo e lo incollo nella nostra console, otteniamo i nostri utenti.

00:40.060 --> 00:44.820
Abbiamo Luke Skywalker C3 peo r2 d2 e Darth Vader.

00:44.950 --> 00:51.250
E se questo non ti sembra familiare Assicurati di controllare i video delle promesse prima di

00:51.280 --> 00:52.360
affrontare questo.

00:52.450 --> 00:59.800
Ora la prima funzionalità di cui parlerò delle novità di Javascript viene chiamata finalmente e, come suggerisce

00:59.800 --> 01:03.050
il nome, ci consente di fare qualcosa.

01:03.070 --> 01:11.820
Alla fine, dopo che una promessa è terminata e il modo in cui funziona è aggiunto di solito alla fine.

01:12.850 --> 01:22.720
E questo blocco infine verrà chiamato indipendentemente dal fatto che il punto funzioni o che la promessa venga trasmessa e cada in

01:22.840 --> 01:24.060
un errore.

01:24.130 --> 01:26.310
Quindi non importa cosa.

01:26.440 --> 01:31.540
Dopo che tutto è stato fatto all'interno di una promessa Finalmente sarai chiamato.

01:31.540 --> 01:39.100
Se si risolve o rifiuta e fa qualcosa a cui diciamo nel nostro caso diciamo che posso avere

01:39.190 --> 01:47.350
dati qui e questi dati consoleranno semplicemente la finestra di dialogo per vedere ciò che otteniamo e diremo solo extra

01:52.640 --> 01:59.890
in modo che quando eseguiamo questo ancora tempo che vado a copiare andiamo a rinfrescare qui.

01:59.950 --> 02:08.160
Copia e incolla Ho premuto invio otteniamo un extra qui ma non definito.

02:08.160 --> 02:11.490
E questo perché alla fine non si riceve davvero un parametro.

02:11.550 --> 02:16.020
Quindi questo è di solito vuoto non riceve nulla dalla promessa.

02:16.380 --> 02:18.690
Quindi possiamo lasciarlo fuori.

02:19.460 --> 02:25.990
Ma vedi qui che sono stato in grado di chiamare extra anche se il punto è finito.

02:26.060 --> 02:35.300
Ma cosa succede se lanciamo un errore e viene chiamato un blocco catch possiamo simularlo abbastanza facilmente.

02:35.970 --> 02:45.280
Possiamo semplicemente fare all'interno del punto e poi in JavaScript indietro e lanciare un errore dicendo di lanciare

02:45.280 --> 02:54.280
Error e quello che succederà qui non appena questa riga raggiungerà il lancio di un errore salterà

02:54.280 --> 03:05.500
su tutti questi registri della console e colpirà il blocco della cache con questo parametro di errore, quindi se dico questo

03:05.500 --> 03:15.180
o copiamo questo per aggiornare la pagina copia e incolla e vediamo cosa succede quaggiù premo invio e

03:15.180 --> 03:24.880
vediamo che oh otteniamo l'errore che il blocco cache ha eseguito con il nostro errore ma abbiamo anche

03:24.880 --> 03:28.150
chiamato extra che è finalmente.

03:28.150 --> 03:36.240
Quindi alla fine è ottimo per quei momenti in cui è necessario eseguire un pezzo di codice, non importa quale.

03:36.340 --> 03:43.870
Dopo una promessa, forse vuoi inviare un'email a un utente indipendentemente dal fatto che la sua richiesta abbia avuto

03:43.870 --> 03:45.590
esito positivo o negativo.

03:45.850 --> 03:48.530
Forse vuoi avere una piccola icona di notifica.

03:48.550 --> 03:54.100
Ci sono molti modi per usare finalmente e ora c'è un modo per assicurarsi che qualcosa accada

03:54.100 --> 03:55.390
dopo una promessa.

03:55.390 --> 04:04.990
Qualunque cosa diciamo adesso, la prossima di cui voglio parlare è un po 'più avanzata per

04:04.990 --> 04:05.850
spiegarlo.

04:05.860 --> 04:19.340
Ripuliamolo e parliamo del per l'attesa della funzione ora se ricordi che avevamo questo pezzo di codice nel nostro video di attesa asincrono e lì ti ho

04:19.340 --> 04:29.420
mostrato come siamo in grado di utilizzare la funzione di attesa asincrona di sì otto per rendere il nostro promette un

04:29.690 --> 04:37.610
aspetto più sincrono invece di avere quel cambiamento di punto promesso quindi DOD quindi DOD quindi

04:37.640 --> 04:48.440
cattura punto possiamo usare asincrono aspettiamo ora la cosa bella di questa nuova funzione è che ci permette di scorrere le chiamate

04:48.440 --> 04:57.260
asincrone in attesa se ne abbiamo più di loro proprio come siamo in grado di usare il for

04:57.260 --> 05:06.410
di così usando il for for loop che ci ha permesso di iterare su intervalli siamo ora in

05:06.410 --> 05:14.060
grado di iterare sulle attese promesse che avremo ma invece di parlare lascia che

05:14.060 --> 05:22.660
ti mostri codice ora diciamo che useremo questo come esempio creeremo una nuova funzione e questo si

05:22.660 --> 05:32.590
chiamerà get data per ricordare in realtà come appare il for for loop se avessi una funzione chiamiamola loop through

05:32.680 --> 05:44.980
tuo ls che riceve il tuo parametro l e lo farà il ciclo che usa il ciclo for dirà che siete tutti voi ls e

05:45.190 --> 05:54.640
voi siete ls è questo array qui con 3 o altro e questo per tutto il ciclo sta semplicemente

05:54.640 --> 06:00.140
andando in un ciclo attraverso tutto e possiamo semplicemente disconnettervi

06:00.150 --> 06:13.920
lì che siete a proposito di lotta copia e incolla questo, aggiorna qui premi invio e fai semplicemente il ciclo attraverso la tua ls ora e passiamo al

06:13.920 --> 06:22.380
tuo parametro else Vedo che sto solo passando in rassegna questi, quindi è quello che era 4.

06:22.380 --> 06:31.230
Quindi, usando questa conoscenza, ora possiamo creare una nuova funzione chiamata get data per aggiungere questa nuova funzione, faremo

06:31.230 --> 06:38.870
esattamente quello che questa fa sopra usando questi per un peso di funzionalità, vediamo come

06:38.870 --> 06:39.550
sarebbe.

06:39.770 --> 06:49.400
Avremo una funzione asincrona in modo da poter usare la parola chiave sveglia e quindi qui possiamo avere una

06:49.940 --> 07:01.240
serie di promesse perché una serie di promesse è irritabile e in grado di essere ripetuta per un peso di parole chiave,

07:02.530 --> 07:12.900
quindi questi array di promesse semplicemente be are la tua Ls mappa del pensiero che andrà in loop e rendiamola

07:12.900 --> 07:22.230
un po 'più grande in modo da poter vedere che è meglio faremo un loop sopra te stai

07:22.230 --> 07:30.650
bene e restituirà il recupero che stai bene così e qui nel primo linea tutto ciò

07:30.890 --> 07:36.560
che stiamo facendo è creare un array di queste promesse di

07:40.690 --> 07:50.500
recupero di ciascuna di queste richieste, quindi possiamo usarle per un'attesa di scorrere queste promesse, quindi tutto ciò che

07:51.610 --> 07:55.390
potremmo dire è dire per un'attesa

08:00.120 --> 08:08.130
e poi qui diciamo che richiedi una serie di promesse che è ammirevole eseguirà il

08:08.130 --> 08:19.060
ciclo di ognuna di queste promesse ciascuna delle richieste e estrarremo quei dati da ciascuna delle richieste dicendo oh aspetta richiesta caduta.

08:19.110 --> 08:25.310
Jason perché ricorda che abbiamo usato la parola chiave sveglia davanti a una promessa.

08:25.450 --> 08:33.820
E poiché sappiamo che stiamo usando la parola chiave wait qui perché stiamo ripetendo le nostre promesse

08:33.820 --> 08:36.600
e dobbiamo attendere la richiesta.

08:36.640 --> 08:41.650
Jason, che è ancora una promessa che riceve i nostri dati.

08:41.650 --> 08:49.830
Ricorda in modo simile a come abbiamo fatto qui prima e quindi abbiamo semplicemente cancellato il nostro registro, diciamo i dati da vedere

08:49.890 --> 08:55.140
mentre otteniamo Fi chiaro questo e copiamo semplicemente il nostro nuovo codice per renderlo

08:58.020 --> 09:03.800
un po 'più grande e assicurarci di non avere il punto e virgola quindi Ce l'ho qui

09:03.810 --> 09:07.980
Quindi copiamo te o altrimenti aggiorna una pagina.

09:08.070 --> 09:14.140
Copia i tuoi URL e poi copieremo anche la funzione incollandola qui.

09:14.310 --> 09:23.990
Premi invio e cancella solo questo e se ottengo i dati ora quando eseguo questo vediamo

09:23.990 --> 09:32.690
che abbiamo ricevuto prima gli utenti che sono proprio qui rendiamolo un po

09:32.690 --> 09:43.850
'più grande in modo da poter vedere che abbiamo il utenti e alla prossima fermata abbiamo cosa abbiamo dopo.

09:43.930 --> 09:52.710
Abbiamo i post in così un centinaio di post e quindi la prossima fermata è l'album proprio così e

09:58.370 --> 10:03.610
questa è la nuova funzionalità Sì 2018 come vedi qui.

10:03.650 --> 10:06.200
È esattamente la stessa cosa che abbiamo fatto sopra.

10:06.620 --> 10:11.410
Se eseguo la nostra funzione originale per ottenere

10:18.390 --> 10:28.360
dati, vediamo che otteniamo gli stessi risultati esatti che hai album che abbiamo postato che abbiamo utenti.

10:28.570 --> 10:37.390
L'unica cosa che l'attesa di funzionalità ci consente di far passare attraverso queste molteplici promesse quasi

10:38.350 --> 10:48.150
come se stessimo scrivendo il codice sincrono in modo da rivedere abbiamo la funzione finalmente che possiamo eseguire alla

10:48.150 --> 10:56.280
fine di una promessa e noi avere un peso di quello prende ogni articolo da

10:56.400 --> 11:01.590
una serie di promesse che ci restituiscono nell'ordine corretto.

11:01.590 --> 11:03.890
Tutte le risposte

11:03.980 --> 11:04.400
Tutto ok.

11:04.590 --> 11:05.590
Penso che sia abbastanza.

11:05.610 --> 11:07.990
È tempo per te di giocare con questo.

11:08.010 --> 11:09.490
Ci vediamo nel prossimo video.

11:09.500 --> 11:09.960
Ciao ciao.
