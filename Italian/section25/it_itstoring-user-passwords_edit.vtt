WEBVTT

00:03.080 --> 00:06.920
Ben tornato. La sicurezza è una cosa molto importante sul web.

00:07.280 --> 00:14.360
E in qualità di sviluppatori, abbiamo la responsabilità di assicurarci che qualunque informazione utente riceviamo, la

00:14.360 --> 00:17.160
gestiamo con cura in modo sicuro.

00:18.770 --> 00:27.160
E fino ad ora ti ho mostrato come eseguire una semplice configurazione di accesso, ma non ti ho davvero mostrato un

00:27.160 --> 00:28.820
modo sicuro per farlo.

00:30.190 --> 00:32.810
E in questo video parlerò di bcrypt-nodejs.

00:32.890 --> 00:39.560
E bcrypt è una libreria molto potente.

00:40.660 --> 00:45.500
Ci permette di creare un login molto sicuro.

00:45.500 --> 00:46.650
Cosa significa?

00:46.970 --> 00:49.000
Lascia che ti mostri.

00:49.120 --> 00:58.160
Fino ad ora avevamo "password" solo in chiaro. Nella vita reale non archiviamo mai

00:58.250 --> 01:06.800
le password come semplici testi come questo, proprio come una stringa nel nostro database.

01:08.530 --> 01:16.300
Questo è esattamente il modo in cui le aziende vengono violate e le password rilasciate dagli utenti quando vengono archiviate in questo modo.

01:16.300 --> 01:24.040
Vogliamo archiviare le password in qualcosa chiamato hash e arriverò a quello che è in un secondo, ma voglio

01:24.040 --> 01:31.540
cambiare il database in giro per mostrarti un aspetto più realistico di come verranno archiviate le cose.

01:31.540 --> 01:35.680
Vedete nel nostro database possiamo avere qualcosa

01:39.730 --> 01:46.910
di simile a "login:" e questo login conterrà una matrice di oggetti

01:50.590 --> 01:51.760
che

01:51.880 --> 02:05.320
ha un "id:" diciamo solo "987" con l'hash che sarà vuoto per ora e poi per e-mail e questa e-mail farà solo riferimento a

02:05.590 --> 02:08.150
john @ gmail. com.

02:08.230 --> 02:12.480
Questo è qualcosa che approfondiremo mentre parliamo di database.

02:12.680 --> 02:18.230
Ma voglio mostrarti - voglio dimostrarti questo punto.

02:18.380 --> 02:27.920
Per consentirci di gestire le informazioni sensibili, vale a dire, se diciamo che John accede al nostro sito e vuole fare un

02:27.920 --> 02:40.010
accesso, ci darà la sua e-mail più la sua password, che è "cookie". Ora, si sta fidando di noi con queste

02:40.010 --> 02:41.490
informazioni.

02:41.690 --> 02:47.360
E la prima cosa che vogliamo fare è - beh, sicuramente non lo aggiungeremo come stringa di

02:47.720 --> 02:52.020
query in una richiesta GET - lo aggiungeremo a una richiesta POST.

02:52.040 --> 02:55.530
Quindi è nel corpo della richiesta.

02:55.940 --> 02:59.220
Volevamo anche inviarlo tramite HTTPS.

02:59.420 --> 03:01.750
Questo è qualcosa che richiede un certificato.

03:02.180 --> 03:08.690
E non ci occuperemo di questo, ma vogliamo sicuramente includerlo attraverso una richiesta HTTPS in modo

03:08.690 --> 03:12.110
che sia crittografato. Quando invia "biscotti", si

03:12.260 --> 03:20.510
confonderà e nessuno al centro può vederlo o saranno in grado di vederlo ma non capiranno

03:20.510 --> 03:22.210
cosa significhi.

03:22.520 --> 03:30.750
E solo il server una volta che riceve questa password può effettivamente capire che questo sta per "cookie".

03:32.100 --> 03:34.110
Va bene, quindi uno è HTTPS.

03:34.150 --> 03:38.010
La seconda cosa è, come memorizziamo quella password?

03:39.230 --> 03:47.430
Bene, lo memorizziamo in un hash e bcrypt, il pacchetto di cui stavo solo parlando, ci consente di farlo.

03:47.480 --> 03:52.230
Lasciami scaricare questo pacchetto e mostrarti come funziona.

03:58.680 --> 03:59.250
Ecco qua

03:59.430 --> 04:07.300
Ora con il bcrypt installato puoi vedere qui che ha alcune cose che possiamo usare e

04:07.300 --> 04:14.770
ho intenzione di copiarlo e incollarlo e spostare alcune di queste cose in giro.

04:14.770 --> 04:16.440
In realtà lo metterò in fondo.

04:20.490 --> 04:25.030
bcrypt ci offre un modo per hash una password e

04:27.940 --> 04:29.650
un modo per

04:32.210 --> 04:35.970
confrontare password o hash. Ma cosa significa?

04:36.070 --> 04:40.850
Andiamo uno per uno.

04:41.030 --> 04:43.880
Se afferro questa funzione e nel nostro '/ accesso'

04:46.770 --> 04:55.530
o mi dispiace, suppongo nel nostro '/ registrati' perché è quando diamo la nostra password. Nel nostro '/ register' quando

04:57.620 --> 05:01.410
eseguiamo 'bcrypt. hash 'e invece di' bacon

05:01.420 --> 05:04.450
'questo è ciò che passiamo come password dell'utente

05:04.660 --> 05:11.640
- se passiamo la password qui, bene abbiamo un paio di parametri che ci danno e queste sono opzioni

05:11.640 --> 05:13.240
che possiamo inserire.

05:13.260 --> 05:15.200
Per ora lo lasceremo così com'è.

05:18.840 --> 05:28.050
Se io consolo. registra "l'hash che riceviamo in questa funzione - quindi bcrypt sta per

05:28.410 --> 05:33.780
hash la password e quindi restituisce questo hash - stiamo per dire semplicemente" hash ".

05:33.840 --> 05:35.550
Bene, quindi vediamo cosa succede qui.

05:35.580 --> 05:37.980
Ho intenzione di salvare. Poi

05:37.980 --> 05:44.000
corro 'npm start' tornando al nostro postino.

05:44.160 --> 05:48.830
Se eseguo "/ registrati" con Ann, ho intenzione di fare clic su Invia

05:51.940 --> 05:56.070
e visualizzo "bcrypt non definito" perché non l'ho incluso qui.

05:56.080 --> 06:02.090
Facciamo così 'const bcrypt = require

06:05.360 --> 06:08.750
(' bcrypt-nodejs ')'

06:08.740 --> 06:12.730
- Salviamolo e riproviamo.

06:12.840 --> 06:13.870
Ho intenzione di fare clic su Invia.

06:15.900 --> 06:28.030
Torniamo alla console - lo vedi? Abbiamo appena ricevuto un hash ed è quello che fa una funzione hash. Una funzione hash Una funzione hash

06:32.820 --> 06:44.030
prende una stringa e la confonde in un modo in cui non riuscirò mai a capire che questo [l'hash]

06:44.030 --> 06:50.650
sta per password "cookies" e le funzioni hash sono un modo.

06:50.970 --> 06:57.140
Cioè puoi inserire "cookies" e otterrai questo, ma non potrai più tornare indietro.

06:57.620 --> 07:03.930
E l'altra qualità delle funzioni di hash è che se ora lo faccio di nuovo con la password

07:03.930 --> 07:05.870
- Oh immagino che la

07:05.880 --> 07:14.460
password per Ann fosse "mele" - se faccio clic su Invia torno, vedo che l'hash la prima volta e la seconda volta sono diverso.

07:14.460 --> 07:19.920
E anche se le funzioni di hash in realtà restituiscono sempre la stessa cosa per lo stesso valore,

07:19.920 --> 07:25.800
bcrypt è un po 'più sicuro di così e aggiunge un po' di altra magia per assicurarsi che sia

07:25.950 --> 07:27.940
impossibile capire quale sia la password.

07:27.960 --> 07:37.270
Ma ora possiamo archiviare questo hash - questo valore confuso - nel nostro database qui per il login e ogni

07:37.320 --> 07:43.560
volta che eseguiamo l'accesso e vogliamo verificare se le password dell'utente corrispondono.

07:43.890 --> 07:47.800
Bene ora - lasciami rimuovere questo - abbiamo -

07:47.940 --> 07:48.600
andiamo

07:52.130 --> 07:53.940
a '/ signin' e

07:57.130 --> 08:05.090
in alto possiamo confrontare gli hash in modo da afferrare l'hash che avevamo prima - usiamo questo o

08:05.390 --> 08:07.230
usiamo l'ultimo che abbiamo.

08:08.160 --> 08:09.330
Lo sostituirò.

08:09.330 --> 08:18.450
Sembrerà piuttosto brutto ma sostituirò questo hash con questa lunga stringa e confronterò

08:18.450 --> 08:19.230
'mele'

08:21.650 --> 08:26.170
perché è la password di Ann.

08:26.240 --> 08:31.480
Se metto a confronto "mele" con questo hash, consoliamolo. log.

08:32.680 --> 08:34.480
'prima ipotesi' avremo

08:38.230 --> 08:42.730
di nuovo la risposta - questo è ciò

08:42.860 --> 08:46.970
che riceviamo dopo che bcrypt lo fa.

08:47.140 --> 08:52.380
E la seconda volta faremo anche un 'log di

08:57.560 --> 09:04.480
console' con la password sbagliata, che è 'veggies' e questa sarà la 'seconda ipotesi'.

09:04.510 --> 09:06.640
Andiamo a fare un accesso.

09:06.640 --> 09:11.990
Non importa cosa sia perché non siamo davvero preoccupati per una risposta.

09:13.330 --> 09:21.180
E ricevo un errore che dice che l'hash non è definito perché non ho aggiornato questo hash a quello che abbiamo appena

09:21.180 --> 09:21.930
copiato prima.

09:21.930 --> 09:23.230
Quindi lasciami fare questo.

09:26.480 --> 09:27.080
Ecco qua

09:28.860 --> 09:30.980
Fammi tornare indietro, fai clic su Invia.

09:32.320 --> 09:34.110
Se guardo indietro qui

09:34.120 --> 09:36.160
ottengo "la prima ipotesi è

09:36.370 --> 09:39.920
vera", cioè "mele" è uguale a questo hash che

09:39.940 --> 09:45.310
ci hanno dato, ma "verdure" non è uguale all'hash che ci hanno dato lì.

09:48.400 --> 09:53.830
Lasciami chiudere un po '. E bcrypt è davvero molto potente.

09:53.840 --> 09:59.780
Lo useremo quando implementeremo effettivamente un database per la nostra registrazione. Usando bcrypt, che è un pacchetto di hashing

09:59.780 --> 10:07.730
provato e testato, possiamo archiviare in modo sicuro le informazioni degli utenti, le password degli utenti nel nostro database e

10:07.730 --> 10:14.840
nessuno anche se loro - anche se gli hacker accedono al nostro database - avranno difficoltà a ottenere

10:14.840 --> 10:16.500
l'utente Le password.

10:17.300 --> 10:22.370
Potrebbero essere in grado di ottenere i loro indirizzi e-mail, ma mai le nostre

10:22.370 --> 10:25.770
password e le implementeremo nel nostro database utilizzando bcrypt.

10:25.830 --> 10:29.940
Ma voglio davvero sottolineare questo punto perché la sicurezza è davvero importante.

10:30.930 --> 10:37.570
Invia sempre qualsiasi informazione sensibile dal front-end al back-end usando HTTPS in un corpo POST

10:38.550 --> 10:48.960
e se ottieni qualcosa come una password il modo in cui la memorizzi nel database sta usando qualcosa come bcrypt per generare un hash,

10:48.960 --> 10:51.820
e ogni volta un utente

10:52.140 --> 11:00.220
accede, controlla l'hash con qualunque cosa abbia inserito l'utente. Nella parte successiva ti ho lasciato un articolo sulla sicurezza

11:00.250 --> 11:01.210
che

11:01.330 --> 11:08.830
ho scritto che potrebbe essere un po 'avanzato ma penso che copra il modo migliore per archiviare le

11:08.830 --> 11:14.710
password degli utenti - qualcosa che viene trascurato abbastanza spesso ma di nuovo molto

11:14.710 --> 11:18.100
importante se tu voglio essere il miglior sviluppatore.

11:18.180 --> 11:19.770
Vedrò nel prossimo. Ciao ciao
