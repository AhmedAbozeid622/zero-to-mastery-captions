WEBVTT

00:01.100 --> 00:06.280
Ben tornato. In questa sezione continueremo a lavorare

00:06.410 --> 00:12.620
sul nostro progetto finale: l'app di riconoscimento facciale che abbiamo creato e abbiamo il front-end principalmente realizzato

00:12.620 --> 00:16.720
per esso, ma ora abbiamo bisogno di un server - qualcosa che

00:17.060 --> 00:23.910
il front-end può comunicare in modo che questa app possa vivere su più di un semplice laptop: possiamo effettivamente implementarla.

00:24.120 --> 00:33.480
E se ricordi la nostra app abbiamo un accesso e il collegamento Accedi anche a un registro che possiamo

00:33.480 --> 00:35.270
registrare gli utenti.

00:35.520 --> 00:40.130
E se avessimo avuto l'app così com'è adesso non c'è nulla che interagisca con essa.

00:40.290 --> 00:47.830
Ogni volta che accediamo all'app possiamo semplicemente creare un nuovo utente una nuova password e accedere senza problemi.

00:50.530 --> 00:57.140
Ma se costruiamo un back-end per esso ora abbiamo la possibilità di interagire con esso.

00:57.250 --> 01:02.820
Possiamo anche includere un database in modo che ci sia memoria e possiamo avere utenti reali

01:02.830 --> 01:07.450
che il nostro back-end ricorderà e arriveremo al database nelle prossime sezioni.

01:07.540 --> 01:12.440
Ma per ora abbiamo lavorato su Node ed Express e dovremmo avere familiarità con il loro funzionamento.

01:13.330 --> 01:15.500
È abbastanza carino e semplice, giusto?

01:15.520 --> 01:24.160
Stiamo semplicemente creando URL ed endpoint e fornendo una risposta al front-end.

01:24.180 --> 01:26.360
Quindi è su questo che lavoreremo in questa sezione.

01:27.730 --> 01:28.930
Se torniamo alla

01:32.470 --> 01:37.080
nostra app solo guardando questa app, possiamo capire quali endpoint potremmo voler avere.

01:37.090 --> 01:46.370
Vogliamo sicuramente avere un endpoint di "accesso"; vogliamo avere un endpoint 'registra' e ogni volta che accediamo a questa

01:46.370 --> 01:50.480
app - beh, avremo una sorta di profilo.

01:50.480 --> 02:00.450
Vogliamo che il nostro nome e il nostro grado vengano visualizzati e idealmente questo grado cambierà in base a quanti volti o quanti URL

02:00.450 --> 02:03.190
ho inviato per il mio profilo.

02:05.870 --> 02:07.610
Quindi, ecco la parte divertente.

02:07.610 --> 02:13.850
In realtà non toccheremo davvero il front-end per i primi due video perché

02:13.850 --> 02:21.790
il modo in cui vuoi costruire un server API è che vuoi capire qual è la funzionalità

02:21.790 --> 02:30.100
che vogliamo e testarlo su qualcosa come Postman. Quindi nel prossimo paio di video useremo Postman e creeremo il

02:30.100 --> 02:37.310
nostro server, e con Postman testeremo il nostro server proprio come abbiamo fatto nella sezione precedente, facendo funzionare tutti

02:37.310 --> 02:38.020
i

02:39.030 --> 02:43.060
nostri end point e infine lo collegheremo al nostro front-end.

02:44.360 --> 02:45.740
Sarà molto divertente.

02:45.920 --> 02:54.200
Ora qui ho rinominato il nostro progetto front-end in smart-brain, ma questa è l'app React su cui

02:54.200 --> 03:03.050
stiamo lavorando e ho anche creato una cartella chiamata 'smart-brain-api', e non ha assolutamente nulla in esso tranne

03:03.050 --> 03:07.090
per un 'pacchetto. JSON'.

03:07.220 --> 03:10.040
Quindi ho appena eseguito 'npm init'.

03:10.040 --> 03:13.520
Ma è qualcosa che già conoscevamo, quindi non ti annoierò.

03:13.760 --> 03:19.560
E poi ho installato un paio di pacchetti che abbiamo usato nella sezione precedente.

03:19.880 --> 03:26.870
Il framework Express - in modo da poter costruire un server davvero bene, Nodemon - in modo da poter

03:26.870 --> 03:36.100
eseguire Nodemon nei nostri script e assicurarci che il nostro server sia in esecuzione, e abbiamo anche body-parser, che usiamo per analizzare e avere accesso

03:36.100 --> 03:40.120
al request dot body [req. body] per leggere i dati JSON e modulo.

03:40.360 --> 03:43.610
A parte questo, non esiste un file JavaScript.

03:43.720 --> 03:53.760
Quindi iniziamo creando un 'server. js "e ora che abbiamo" server. js ', negli "script" possiamo

03:53.760 --> 04:02.280
solo dire che NPM "inizia" e di nuovo è JSON, quindi devo avvolgerlo tra parentesi graffe.

04:03.280 --> 04:08.410
E questo "start" dirà semplicemente "nodemon server. js "- E ora

04:10.730 --> 04:12.800
ogni volta che

04:12.800 --> 04:19.800
eseguiamo 'npm start' il nostro server funzionerà ma non abbiamo ancora nulla.

04:19.810 --> 04:27.170
Quindi prendiamo il nostro scheletro di base della nostra app Express, e questo dovrebbe esserti familiare ormai.

04:27.640 --> 04:38.470
Avremo solo una const express uguale a richiede il pacchetto express [const express = require ('express')].

04:38.620 --> 04:41.890
Creeremo quindi la nostra app eseguendo Express e

04:46.140 --> 04:55.710
infine avremo l'ascolto del punto dell'app e useremo la porta 3000 [app. hear (3000)] e all'interno di 'hear' possiamo effettivamente inviargli un

04:55.710 --> 05:00.970
secondo parametro, che è una funzione all'interno di questa funzione, verrà eseguito

05:03.610 --> 05:08.220
subito dopo che 'hear' avrà luogo sulla porta 3000.

05:08.440 --> 05:19.990
E solo per assicurarci che tutto funzioni senza intoppi, diremo semplicemente che l'app è in esecuzione sulla porta 3000

05:20.240 --> 05:28.110
'Nodemon fa questo per noi, ma mi piace averlo qui a prescindere.

05:28.120 --> 05:28.410
Tutto ok.

05:28.420 --> 05:30.790
Quindi, solo per provare questo se faccio 'npm start' abbiamo

05:35.330 --> 05:42.410
avviato Nodemon, l'app è in esecuzione sulla porta 3000 proprio come l'ho detto qui [console. log ('l'app è in esecuzione sulla porta 3000')].

05:42.500 --> 05:48.830
In questo momento, ora che abbiamo l'app in esecuzione, creiamo solo un percorso di base per assicurarci

05:48.830 --> 05:50.720
che tutto funzioni correttamente.

05:50.750 --> 05:58.780
Puoi semplicemente creare un 'app. get () 'nella route principale [(' / ')].

05:59.080 --> 06:04.700
E ancora, come abbiamo già fatto in precedenza, otterrà una risposta alla richiesta.

06:08.150 --> 06:19.240
E qui faremo solo un punto di risposta invia [res. send ('this is working')] salviamo e torniamo al nostro Postman

06:19.250 --> 06:24.100
e facciamo il nostro localhost 3000 e faremo un

06:27.270 --> 06:31.850
root [/] e otterremo 'questo funziona' perfettamente.

06:31.870 --> 06:35.560
Quindi ora che abbiamo impostato questo mi piace pianificare la nostra API.

06:35.590 --> 06:40.450
E questo è qualcosa come uno sviluppatore che vuoi davvero fare prima di iniziare a scrivere

06:40.450 --> 06:44.900
codice e vuoi assicurarti di avere un'idea di come sarà il tuo design API.

06:46.470 --> 06:47.850
Quindi pensiamo a questo.

06:47.940 --> 06:53.760
Lo avvolgerò nei commenti e possiamo lavorarci uno per uno. Se vuoi avere un percorso

06:53.850 --> 07:00.280
di root che forse per ora diremo solo che risponde

07:00.510 --> 07:02.760
con 'questo funziona'.

07:02.820 --> 07:12.150
Vogliamo anche avere un percorso di "accesso" perché bene vogliamo che le persone accedano e questo

07:12.150 --> 07:22.190
"accesso" molto probabilmente sarà una richiesta POST perché pubblicheremo alcuni dati alcuni JSON, alcune informazioni utente e

07:22.190 --> 07:24.530
risponderanno con o successo

07:27.680 --> 07:29.640
o fallimento.

07:30.110 --> 07:30.710
Tutto ok.

07:30.770 --> 07:39.200
Abbiamo anche un 'registro' e il registro sarà di nuovo una richiesta POST perché vogliamo aggiungere

07:39.230 --> 07:49.610
i dati al database o nel nostro caso una variabile nel nostro server e con le nostre nuove informazioni utente.

07:49.620 --> 07:53.860
Quindi forse questo invece di dire "successo / fallimento" restituiremo

07:53.880 --> 07:57.620
l'utente appena creato per assicurarsi che tutto funzioni.

07:57.930 --> 08:03.300
E diremo che questo è il nuovo oggetto utente che restituiremo. OK.

08:03.310 --> 08:11.190
Vogliamo anche nella schermata iniziale avere la possibilità di accedere al profilo dell'utente.

08:11.250 --> 08:19.890
Quindi forse avremo un profilo con un parametro opzionale di 'userId' in modo che ogni utente abbia la propria

08:20.020 --> 08:21.110
schermata iniziale.

08:21.390 --> 08:25.230
E molto probabilmente questa sarà una richiesta GET.

08:25.230 --> 08:33.700
Vogliamo solo ottenere le informazioni dell'utente e questo ci restituirà l'utente. E poiché vogliamo lavorare con la classifica o ogni volta che

08:33.700 --> 08:41.530
un utente pubblica una nuova foto, vogliamo assicurarci che il loro conteggio di quante foto abbiano inviato aumenti e che tu

08:41.530 --> 08:49.190
abbia un modo per mantenere il punteggio, una variabile che aumenta di uno ogni volta che un utente invia queste

08:49.190 --> 08:54.740
foto e quindi controlla gli altri utenti per vedere chi ha inviato di più e

08:54.740 --> 08:56.170
assegnargli un ranking.

08:56.540 --> 09:09.080
Forse possiamo avere un endpoint di immagine che sarà di nuovo un post o forse nel nostro caso perché stiamo aggiornando il punteggio che

09:09.080 --> 09:11.210
dovrebbe essere un PUT.

09:11.210 --> 09:17.520
Perché l'utente esiste già e vogliamo assicurarci che ci sia un aggiornamento sul profilo utente.

09:17.810 --> 09:26.470
E questo restituirà semplicemente l'oggetto utente aggiornato o forse qualunque cosa abbiamo aggiornato, nel nostro caso un conteggio di

09:26.800 --> 09:28.130
qualche tipo.

09:29.710 --> 09:37.660
E potresti anche chiederti qui con il 'signin' se non stiamo creando un nuovo utente perché

09:37.690 --> 09:40.110
stiamo facendo un POST?

09:40.140 --> 09:46.680
E se ricordi ogni volta che inviamo una password, non vogliamo

09:46.670 --> 09:56.030
davvero inviarla come stringa di query, vero? Vogliamo inviarlo all'interno del corpo idealmente tramite HTTPS in modo che sia nascosto dagli

09:56.030 --> 10:00.250
attacchi man-in-the-middle ed è sicuro. Guardando questo, ciò potrebbe

10:00.250 --> 10:06.860
cambiare mentre andiamo avanti nel progetto, ma abbiamo un'idea di ciò che vogliamo creare.

10:06.880 --> 10:14.070
Quindi nei prossimi video inizieremo a creare questi endpoint e testarli con Postman

10:14.070 --> 10:16.950
per assicurarsi che funzionino.

10:17.040 --> 10:18.900
Ci vediamo nel prossimo. Ciao ciao
