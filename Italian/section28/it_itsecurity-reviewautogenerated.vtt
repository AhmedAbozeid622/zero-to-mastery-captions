WEBVTT

00:01.070 --> 00:02.480
Ben tornato.

00:02.480 --> 00:10.100
Voglio fare una rapida revisione della nostra sicurezza e di come funziona la nostra app in questo momento perché mettere

00:10.310 --> 00:19.650
online un'app Web sicura è una responsabilità molto importante del Web Developer. Torniamo al nostro codebase.

00:19.750 --> 00:24.250
Ci sono due problemi principali che vedo finora.

00:24.280 --> 00:28.870
La prima cosa è che non stiamo facendo nulla chiamato convalida.

00:29.010 --> 00:39.820
Se ho intenzione di accedere qui e vado al mio controller di accesso se un utente non inserisce l'e-mail corretta o inserisce qualcosa che non

00:40.150 --> 00:45.460
ci aspettiamo, forse lascia quel campo e-mail vuoto o il campo password

00:46.860 --> 00:51.310
vuoto Bene cosa succede allora? E lo stesso con il registro.

00:51.470 --> 01:00.800
Se andiamo a registrarci e un utente non digita l'e-mail o il nome o la password corretti, li

01:00.800 --> 01:09.230
registriamo ancora tecnicamente perché se lasciamo il nome vuoto e-mail password vuota, inseriranno semplicemente un utente vuoto

01:09.260 --> 01:10.810
nel database.

01:12.160 --> 01:14.670
Andiamo all'app e mostriamo cosa significa.

01:15.460 --> 01:23.480
Se lascio questo vuoto e faccio clic su registrati, guardo che sono entrato nell'app e se

01:23.480 --> 01:24.170
torno

01:26.910 --> 01:37.200
al database e vado agli utenti vedo un utente vuoto. E questo non è molto dannoso, ma mostra un argomento importante su

01:37.200 --> 01:44.790
cui vuoi davvero concentrarti nella tua app e che è la convalida: assicurarti che quando comunichi tra il

01:44.790 --> 01:49.520
front-end e il back-end ci siano alcuni livelli di sicurezza.

01:49.620 --> 01:54.420
Innanzitutto il front-end eseguirà la propria convalida.

01:54.420 --> 02:03.670
Ad esempio, se andiamo alla pagina di accesso o alla pagina di registrazione all'interno del nostro front-end all'interno della nostra app re-act,

02:03.670 --> 02:10.100
verificheremo in realtà prima di fare clic su Register per accedere al pulsante Invia.

02:10.330 --> 02:18.360
E al momento dell'invio controllerà per assicurarsi che il nome non sia vuoto, l'e-mail ha un formato e-mail adeguato come

02:18.450 --> 02:26.830
avere un segno di at o un punto com alla fine e quindi la password avrà una sorta di convalida per

02:26.830 --> 02:33.690
dire che deve essere maggiore di sei caratteri. E ora il front-end invia tali informazioni convalidate

02:34.320 --> 02:40.520
al back-end e una cosa importante che si desidera assicurarsi con il proprio server è

02:40.520 --> 02:45.590
che il server non si fidi mai di nulla ricevuto dal front-end.

02:45.640 --> 02:48.050
Quindi dovrebbe fare la propria validazione.

02:48.070 --> 02:56.470
Cioè per controllare il nome e-mail e la password e assicurarsi che ci siano valori che vuole inserire e effettuare

02:56.590 --> 02:58.030
transazioni nel database.

02:58.920 --> 03:14.470
Un modo in cui possiamo farlo. Bene, possiamo semplicemente dire che se e-mail o nome o password e possiamo semplicemente fare il non

03:14.800 --> 03:17.070
così è il contrario.

03:17.320 --> 03:20.700
Quindi se questo è vuoto si trasformeranno in vero.

03:20.740 --> 03:24.500
Se questo è vuoto, si trasformeranno in vero, questo è vuoto, si trasformeranno in vero.

03:24.580 --> 03:30.280
Quindi, se uno di questi è vuoto, possiamo semplicemente rispondere allo stato

03:32.710 --> 03:33.370
400

03:36.330 --> 03:40.910
e possiamo semplicemente rispondere con l'invio di un modulo errato.

03:43.710 --> 03:45.420
Salviamo questo e vediamo cosa succede.

03:47.570 --> 03:53.500
Salverò. L'unica cosa che voglio fare è in realtà tornare al mio database e ho il mio PSQL in

03:53.500 --> 03:53.850
esecuzione qui.

03:53.890 --> 03:58.540
Se vado al login o agli utenti voglio eliminare l'utente vuoto.

03:58.540 --> 04:07.130
Ora e questo è perfetto.

04:07.350 --> 04:09.570
Se torno qui e provo a

04:12.780 --> 04:15.470
fare clic su Register, ottengo ancora il registro.

04:15.490 --> 04:19.180
Questo perché se torno vedo che qui ricevo un errore e ottengo

04:23.080 --> 04:26.050
"impossibile impostare le intestazioni dopo che sono state inviate".

04:26.590 --> 04:33.430
E questo è un po 'un trucco perché se vai qui e apri la console.

04:33.660 --> 04:44.890
Bene, abbiamo una cattiva richiesta da parte del server, ma questo se l'istruzione viene eseguita e poi continua e lo

04:44.890 --> 04:52.810
fa anche perché ricordare per terminare l'esecuzione all'interno di una funzione dobbiamo dire

04:53.050 --> 04:53.670
return.

04:53.920 --> 05:01.870
In questo modo, se questo viene eseguito, ritorna da questa funzione e questa parte non viene mai eseguita.

05:03.480 --> 05:14.860
Lasciami salvare che torna alla nostra app ora andiamo ad aggiornare qui. Faremo solo un utente vuoto.

05:14.950 --> 05:21.100
Anche in questo caso stiamo effettuando l'accesso perché ora quando andiamo al front-end se ricordi

05:21.100 --> 05:26.030
nel nostro file di registro sul front-end quando facciamo clic su Register.

05:28.890 --> 05:30.180
Bene, stiamo

05:32.690 --> 05:40.640
recuperando e stiamo solo verificando se l'utente e questo utente, perché stiamo rispondendo qui con l'invio di

05:41.060 --> 05:43.400
un modulo errato, sarà l'utente.

05:43.400 --> 05:51.530
Quindi controlliamo qui per ID. Salviamo e ricordiamo, questo è qualcosa che

05:51.560 --> 06:00.310
abbiamo fatto con il nostro accesso anche nei video precedenti se torniamo indietro per registrarti prova a registrarti.

06:00.780 --> 06:06.430
Non mi permette perché se apro la console non riesco a caricare le risorse.

06:06.430 --> 06:17.400
Se vado in rete, riprova che vai al registro ottengo "invio modulo errato".

06:17.520 --> 06:19.530
Quindi è davvero molto importante.

06:19.560 --> 06:28.460
Il server e il client devono eseguire la propria convalida e assicurarsi che gestisca tutte le possibilità.

06:28.530 --> 06:35.610
Se un utente malintenzionato, ad esempio, inserisce un pezzo di codice davvero pessimo anziché un'e-mail. Bene, dobbiamo convalidare contro questo

06:35.610 --> 06:42.260
e assicurarci di prendere le azioni appropriate basate su quello.

06:42.430 --> 06:49.220
Quindi possiamo aggiungere cose come questa in altre parti della nostra app, specialmente quelle in cui accettiamo input.

06:49.510 --> 06:57.760
Fortunatamente per noi è per il nostro registro e quindi abbiamo anche il nostro accesso.

06:57.760 --> 07:05.430
E poi per l'accesso possiamo semplicemente copiare e incollare e qui stiamo usando l'e-mail e la password del

07:05.550 --> 07:10.740
punto del punto del corpo della richiesta in modo da poter semplicemente

07:13.540 --> 07:17.310
ristrutturare nuovamente la password dal corpo del punto

07:20.360 --> 07:21.390
della richiesta

07:25.190 --> 07:34.300
rimuoveremo il nome e di nuovo e rimuoveremo il corpo del punto richiesta da questi solo per renderlo un po 'più pulito.

07:34.460 --> 07:37.270
E se lo salvo, anche questo dovrebbe funzionare.

07:37.640 --> 07:40.610
Andiamo ad accedere, assicurati di non essere in grado di accedere.

07:40.730 --> 07:41.260
Perfezionare.

07:41.270 --> 07:51.570
E se vado da Wes su gmail dot com Uno due tre accessi Sono in grado di accedere.

07:51.590 --> 07:54.550
Va bene, questa è la prima parte della sicurezza che volevo coprire.

07:54.890 --> 07:59.170
Ci sono ovviamente alcune altre cose che possiamo fare qui, ma penso che tu abbia avuto l'idea.

08:00.570 --> 08:09.160
La prossima cosa, e un altro grande difetto nella nostra app, è che quando inviamo un'immagine prendiamo

08:12.200 --> 08:14.880
questo e apriamo la scheda.

08:15.320 --> 08:18.020
La scheda di rete qui fa clic su

08:20.930 --> 08:25.600
Rileva e se guardi bene l'endpoint dell'immagine che quando ci prendiamo cura di noi.

08:25.610 --> 08:31.560
Ma se guardi gli output, è qui che chiediamo chiarimenti sull'API per la richiesta.

08:31.580 --> 08:43.650
Se faccio clic su questo e guardo le intestazioni e guardo l'autorizzazione ottengo la chiave con DCB17e ...

08:43.690 --> 08:49.290
E se torno al front-end e sotto l'app punto

08:55.810 --> 08:58.170
js DCB17e ...

08:58.180 --> 08:59.970
Questa è la nostra chiave API.

09:00.390 --> 09:03.520
Stiamo creando la nostra chiave API che nel mio caso è gratuita.

09:03.520 --> 09:11.190
Ma quando usi un'API che costa denaro, qualcuno potrebbe rubare queste informazioni e usare la tua API

09:11.350 --> 09:19.690
per caricare l'API con le richieste e farti pagare un sacco di soldi e non vorrai mai farlo quando giochi

09:19.690 --> 09:22.090
come sviluppatore sul tuo progetto.

09:22.090 --> 09:23.230
Va bene.

09:23.590 --> 09:26.560
Ma cose del genere non dovrebbero succedere.

09:26.560 --> 09:31.880
Quindi una cosa che possiamo fare per evitare ciò è in realtà spostare questo nel backend anziché nel front-end.

09:32.200 --> 09:33.510
Lascia che ti mostri come possiamo farlo.

09:36.800 --> 09:44.390
Torneremo al nostro front-end e nel nostro front-end in realtà copierò le informazioni

09:44.390 --> 09:49.440
chiare sul back-end e le rimuoverò dal front-end.

09:49.910 --> 09:56.490
Quindi, se ricordi che abbiamo solo bisogno di installare Clarifai sul back-end, quindi

09:56.490 --> 10:02.370
ho intenzione di fermare il server e fare NPM installazione Clarifai

10:06.500 --> 10:14.230
in modo che abbiamo il pacchetto dot json lo importeremo questa volta usando il comando request.

10:14.250 --> 10:16.200
Quindi andiamo

10:19.250 --> 10:29.860
alla nostra immagine di gestione e quindi all'immagine di gestione che importeremo e invece di importazione faremo const

10:32.150 --> 10:41.550
clarifai uguale richiede chiarimento e copieremo esattamente ciò che abbiamo nella nostra app e vogliamo rimuovere

10:41.550 --> 10:48.730
questo andando a taglialo fuori usa la nostra chiave API proprio qui.

10:52.680 --> 11:01.940
Quindi scorrendo verso il basso diamo un'occhiata a dove utilizziamo la nostra chiave API nel nostro caso è qui l'app. Modelli.

11:02.280 --> 11:08.940
E qui vogliamo solo fare il chiarimento e poi prendere la nostra risposta.

11:09.090 --> 11:11.210
Quindi questa parte inferiore possiamo mantenere.

11:11.210 --> 11:19.620
Abbiamo solo bisogno che la chiamata di chiarimento provenga ora dal backend, quindi lo copieremo.

11:19.670 --> 11:20.900
Torna al

11:24.110 --> 11:31.320
nostro back-end e mettiamolo in atto perché ora abbiamo l'app dalla nuova istanza di clarifai e ora

11:31.320 --> 11:33.500
avremo bisogno di afferrare l'input.

11:33.570 --> 11:40.210
Quindi sembra che avremo bisogno di un nuovo endpoint. Ripuliamolo un po 'e prevediamo chiarimenti, facciamolo

11:42.580 --> 11:43.380
qui

11:46.470 --> 11:49.950
solo per vedere meglio. Lo minimizzerò un

11:52.860 --> 12:03.780
po 'e i modelli di punti app prevedono che lo prevederemo con il nostro input punto corpo punto punto che ovviamente non

12:03.780 --> 12:04.470
abbiamo.

12:04.490 --> 12:09.980
Ma ora sappiamo che abbiamo bisogno dell'input e possiamo avvolgerlo attorno a una funzione come questa.

12:10.140 --> 12:20.560
Possiamo dire const handleApiCall e questo riceverà una risposta alla richiesta

12:25.280 --> 12:30.230
e lo sposteremo qui.

12:30.300 --> 12:39.550
Quindi ora possiamo solo dire gestire la chiamata API in basso qui e sul nostro

12:39.550 --> 12:48.710
server possiamo creare un nuovo endpoint per Image e possiamo fare una richiesta post perché

12:48.710 --> 12:50.540
la aggiungeremo

12:50.570 --> 12:59.900
al nostro corpo di punti di richiesta e chiameremo che imageurl e l'endpoint imageurl avranno handleApiCall.

13:00.040 --> 13:07.240
Non avrà bisogno del database. Avremo sicuramente bisogno di importarlo ma ce l'abbiamo già sull'oggetto immagine.

13:07.240 --> 13:17.220
OK, quindi se lo salvo ora dobbiamo assicurarci di ricevere il corpo con l'URL, quindi andare

13:17.220 --> 13:18.940
al front-end.

13:19.190 --> 13:28.980
Diciamo che al momento dell'invio dobbiamo recuperare e copiarlo.

13:28.980 --> 13:36.780
Quello che abbiamo qui per ora. Vogliamo recuperare imageurl.

13:37.010 --> 13:49.310
Sarà un metodo post e avremo un json di input e quell'input sarà

13:49.310 --> 14:01.700
semplicemente questo input DOT di stato. Questo ci darà una risposta e quella risposta continuerà a gocciolare in questo modo.

14:01.810 --> 14:08.220
Ma tieni presente che, poiché si tratta di un recupero, dovremo fare una risposta dot json.

14:08.470 --> 14:16.550
Quindi è abbastanza semplice da fare ripariamo il rientro qui e faremo un punto quindi la risposta è

14:18.530 --> 14:19.760
uguale al

14:22.420 --> 14:28.510
punto di risposta Jason Salveremo e vorremmo tornare indietro e assicurarci che funzioni.

14:28.510 --> 14:41.660
Quindi andiamo al nostro server vai all'immagine e assicuriamoci di rispondere qui con punto quindi dati e questi dati avranno

14:41.660 --> 14:43.180
una risposta

14:43.260 --> 14:51.470
punto json di dati. Qualunque cosa ci dia questo. Se c'è una sorta di errore faremo un problema.

14:54.470 --> 14:56.420
Dirò lo stato della risposta 400.

14:59.050 --> 15:00.810
Lo faremo.

15:00.810 --> 15:12.900
json "impossibile lavorare con l'API". Salviamo. Vedremo se funziona la prima volta.

15:12.920 --> 15:23.930
Di solito non funziona, ma se eseguiamo l'accesso con Wes su Gmail dot com 1 2 3 accedi, abbiamo un piccolo problema.

15:25.420 --> 15:29.060
Andiamo alla consolazione - impossibile

15:32.090 --> 15:38.040
recuperare Oh, dobbiamo effettivamente avviare NPM sul nostro server.

15:38.110 --> 15:39.510
Va bene e ora abbiamo alcuni errori.

15:39.520 --> 15:40.660
Tutto ok.

15:40.660 --> 15:47.510
Abbiamo parentesi mancanti, quindi abbiamo appena fatto un po 'di errore di sintassi qui ed è

15:47.510 --> 15:50.270
perché ho dimenticato un punto qui.

15:50.270 --> 15:51.390
Salviamolo.

15:51.920 --> 15:58.810
E se andiamo ai nostri front-end in esecuzione, il back-end è in esecuzione. Chiudiamo questo e riprovare.

16:00.170 --> 16:01.190
Va bene, ho effettuato l'accesso.

16:01.250 --> 16:09.680
Se copio di nuovo questa immagine. Momento della verità.

16:09.790 --> 16:10.180
Tutto ok.

16:10.180 --> 16:17.820
Stiamo ottenendo l'immagine, ma la risposta - qualcosa non funziona. Impossibile recuperare la risposta del server

16:17.900 --> 16:20.390
con stato 500.

16:20.390 --> 16:24.140
Quindi otteniamo un errore nel server e sembra che gestire

16:26.740 --> 16:29.620
la chiamata API non sia una funzione.

16:29.650 --> 16:39.010
Quindi andiamo di nuovo al server e al mio terribile errore di ortografia. Questo ti porta sempre con l'ortografia.

16:39.040 --> 16:41.150
Proviamo ancora una volta.

16:41.340 --> 16:47.710
Lo elimineremo e lo rileggeremo. Nessun errore

16:47.750 --> 16:48.480
Tutto ok.

16:48.570 --> 16:49.410
Guarda quello.

16:49.680 --> 16:51.120
Funziona

16:51.120 --> 16:52.100
Stupefacente.

16:52.530 --> 16:59.340
Non vedo errori nella mia API o nel front-end.

16:59.420 --> 17:00.510
Quindi non è stato male.

17:00.590 --> 17:08.100
E se in realtà torno alla richiesta, vai alla scheda di rete e

17:08.100 --> 17:12.810
controlliamo che premerò Rileva se vado a imageurl.

17:13.060 --> 17:15.560
Non stiamo vedendo nessuna delle nostre chiavi.

17:15.580 --> 17:21.780
L'unica cosa che stiamo vedendo è una risposta che è la risposta che otteniamo da Clarifai, ma il nostro server

17:21.780 --> 17:25.850
è in esecuzione nel nostro ambiente e nessuno ha accesso ad esso.

17:27.290 --> 17:30.110
Quindi andiamo oltre quello che abbiamo appena fatto.

17:30.200 --> 17:39.720
Abbiamo creato un nuovo endpoint e poiché ora abbiamo i nostri controller e per quanto riguarda l'immagine possiamo aggiungerlo ai controller

17:39.720 --> 17:46.500
di immagine e all'interno dei controller di immagine creiamo una nuova funzione e praticamente

17:46.500 --> 17:54.480
copiamo e incolliamo esattamente come avevamo sul fronte e abbiamo risposto con i dati Json e questi

17:54.480 --> 17:59.400
dati Json vengono ora inviati come punto di risposta Json.

17:59.790 --> 18:09.920
Quindi sul front-end abbiamo semplicemente creato una richiesta di recupero che ha inviato l'input e abbiamo risposto con una risposta.

18:10.290 --> 18:14.630
Quindi non è cambiato molto sul front-end, tranne per il fatto che ora nascondiamo la chiave API.

18:14.760 --> 18:21.030
E invece di avere chiarimenti qui, ce l'abbiamo sul backend.

18:21.280 --> 18:26.630
Spero che siano stati alcuni preziosi consigli di sicurezza per te.

18:26.650 --> 18:31.130
Ci sono molte cose quando si tratta di sicurezza ed è sicuramente qualcosa

18:31.130 --> 18:35.190
a cui devi abituarti perché hai sempre più anni di esperienza.

18:36.250 --> 18:43.900
Ma avere quella regola generale di assicurarsi che la tua macchina o, nel nostro caso, la tua base di codice di front-end

18:43.900 --> 18:49.210
e back e non faccia mai affidamento sulla sicurezza dell'altro, si concentri sempre e

18:49.220 --> 18:55.650
assicurati che qualsiasi input che ottenga da altri luoghi al di fuori di se stesso sia sempre convalidato .

18:55.780 --> 19:00.510
E proteggiamo tutti i segreti che abbiamo dal mondo esterno.

19:00.610 --> 19:04.760
Mai fidarsi di nessuno è praticamente il motto della sicurezza.

19:05.570 --> 19:08.680
Quindi spero che fosse perspicace e lo vedrò nel prossimo video.
