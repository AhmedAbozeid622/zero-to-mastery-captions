WEBVTT

00:00.540 --> 00:05.330
È tempo di imparare un altro argomento entusiasmante e entreremo nelle basi del Backend.

00:05.610 --> 00:10.650
Ma volevo mostrarti quello che abbiamo coperto finora sul Front-End.

00:10.840 --> 00:17.950
Abbiamo iniziato con questo diagramma di chiedere "Chi è google. com? "e passando attraverso l'ISP chiedendo

00:17.950 --> 00:20.810
al server dei nomi di dominio l'indirizzo IP.

00:20.950 --> 00:29.460
Chiediamo quindi all'indirizzo IP di trovare i server di Google e quindi i server di Google ci forniscono il nostro file HTML, CSS e JavaScript

00:29.470 --> 00:34.400
che siamo in grado di ottenere uno tramite HTML E quindi i tag di

00:34.420 --> 00:43.040
collegamento e i tag di script per ottenere CSS e Javascript . Il browser legge il file per

00:43.040 --> 00:51.860
noi, HTML, CSS e il motore V8 o il motore JavaScript del browser lo

00:51.920 --> 00:58.510
utilizza per leggere JavaScript e manipoliamo il DOM utilizzando JavaScript.

00:58.520 --> 01:05.300
Abbiamo anche appreso che la posizione del server è importante, quanti viaggi facciamo, quante richieste HTTP

01:05.300 --> 01:06.590
facciamo è importante.

01:06.590 --> 01:08.560
La dimensione dei file è importante.

01:08.810 --> 01:16.660
E abbiamo appreso alcune di quelle soluzioni come le reti di distribuzione dei contenuti, con script in un solo pacchetto. js file e

01:16.820 --> 01:21.230
anche minimizzare i nostri file.

01:23.740 --> 01:33.040
E poi abbiamo anche appreso di questa nuova tecnologia chiamata AJAX in cui possiamo semplicemente recuperare utenti, parlare con il server

01:33.040 --> 01:40.750
mentre l'utente sta ancora navigando sul sito Web e ricevere una risposta JSON per aggiornare il sito

01:40.750 --> 01:43.050
Web in tempo reale.

01:43.390 --> 01:49.730
E questa immagine con cui abbiamo iniziato sembra molto più chiara rispetto al primo video, vero?

01:49.780 --> 01:53.210
Comprendiamo cosa fa uno sviluppatore front-end.

01:53.230 --> 02:00.760
Vediamo il potere di React e sappiamo anche che queste frecce significano semplicemente richieste HTTP; una lingua che sia il

02:01.090 --> 02:08.310
front-end che il back-end possono parlare e usando AJAX e JSON siamo in grado di farlo in modo dinamico.

02:09.570 --> 02:15.930
Ora il back-end e il ruolo di uno sviluppatore di back-end. Sono quelli che hanno il

02:15.930 --> 02:24.330
compito di lavorare con server e database. E un server è responsabile di qualsiasi cosa tu ottenga nel browser.

02:24.650 --> 02:32.140
Posso chiedere qualsiasi cosa al browser; come "Vai a google. com". Ma alla fine della giornata il web server può

02:32.170 --> 02:38.890
darmi tutto quello che vuole. Se mi manderà su Twitter. com invece di google. com, beh,

02:38.920 --> 02:42.500
dipende dal server. Qualunque cosa di cui abbiamo bisogno, facciamo semplicemente

02:42.520 --> 02:47.740
la richiesta e speriamo che il server ci dia ciò che abbiamo richiesto. E se ricordi che

02:47.980 --> 02:57.740
un server è solo un computer; un computer che da qualche parte nel mondo sta solo ascoltando questa

02:57.880 --> 03:02.770
connessione HTTP, chiedendo di vedere se abbiamo dei file.

03:02.830 --> 03:11.800
Il più semplice dei server e potresti averlo usato prima di usare Hostgator o un sito

03:11.860 --> 03:19.120
di WordPress e metterli su Hostgator. Usa qualcosa chiamato "LAMP STACK".

03:19.120 --> 03:28.330
Questo è stato ciò che è stato utile per il più semplice dei siti Web che è, (se) vuoi solo un semplice sito Web di informazioni

03:28.330 --> 03:28.920
Forse

03:29.050 --> 03:33.460
un semplice sito Web WordPress in cui non sta accadendo nulla di complesso.

03:33.550 --> 03:41.380
Niente di veramente professionale. Quello che usavano era un server Linux che è il sistema operativo.

03:41.740 --> 03:47.280
Proprio come ho Mac, Linux sarà il sistema operativo del server.

03:47.430 --> 03:48.810
Abbiamo il server Apache.

03:48.810 --> 03:51.980
Apache è un server, ancora una volta

03:52.080 --> 03:58.500
un programma scritto da qualcuno che è davvero bravo ad accettare richieste e

03:58.500 --> 04:01.070
inviare risposte di file.

04:01.200 --> 04:03.990
Avevamo MySQL che è un database.

04:03.990 --> 04:09.230
Forse hai avuto una sezione commenti nel tuo blog e devi

04:09.260 --> 04:16.680
archiviare quei dati, quello sarebbe il database. E poi abbiamo avuto il PHP che era solo un linguaggio che puoi

04:16.680 --> 04:23.040
usare per avere un po 'di logica nei tuoi server. E il server, proprio come il tuo computer, aveva un file system

04:23.040 --> 04:29.140
in cui sono archiviati tutti i file del tuo sito web. E Apache l'ha appena fatto.

04:29.330 --> 04:31.790
Ascolta per vedere se qualcuno è entrato

04:31.790 --> 04:37.650
nel sito di funfun. com nell'URL. Se ha ricevuto quella

04:37.770 --> 04:42.270
richiesta, ti darà semplicemente un indice. html.

04:42.720 --> 04:51.260
Se qualcuno è entrato nel sito di funfun. com / about, ti darà solo. html. Era un server

04:51.260 --> 04:53.640
molto semplice, molto semplice.

04:53.750 --> 05:00.860
Questo è quello che usano la maggior parte dei siti Web di hosting come Hostgator. E potresti chiederti "Potrei semplicemente scaricare il server Apache ed eseguire

05:00.860 --> 05:05.150
il mio server dal tuo computer? "Sì,

05:05.160 --> 05:07.320
puoi assolutamente farlo.

05:07.490 --> 05:11.630
Ma senza avere un software server, beh, il

05:12.080 --> 05:14.210
nostro computer è irraggiungibile.

05:14.360 --> 05:21.350
Nessuno su Internet può accedere al nostro computer perché il nostro computer non è un server, non ha un codice che gli dice

05:21.350 --> 05:25.570
"Ehi, se ricevo una richiesta, invialo. "Ma come abbiamo

05:25.710 --> 05:33.930
visto nei nostri video precedenti, possiamo creare server falsi per testare i nostri siti Web.

05:33.960 --> 05:36.710
Questo era il vecchio modo di fare le cose.

05:36.720 --> 05:39.530
Non c'era molta logica, non potevi davvero espanderci.

05:39.720 --> 05:46.190
Non puoi avere siti web come Facebook o Amazon che utilizzano questo tipo di sistema.

05:46.350 --> 05:51.940
Come ho detto, questo era per siti Web molto semplici.

05:52.000 --> 05:59.310
Ora un nuovo stack che chiamiamo un application server sembra qualcosa di più simile a questo.

05:59.380 --> 06:06.580
Ora un server delle applicazioni è diverso dal nostro esempio precedente perché a differenza dell'utilizzo del server Apache che è molto semplice e

06:06.610 --> 06:14.050
richiede solo una risposta, basta dare i file lì e indietro. Con qualcosa di simile a

06:14.050 --> 06:23.750
un server Node in cui hai Node. js in esecuzione, bene puoi scrivere uno script e dire "Se ricevo

06:23.750 --> 06:33.230
una richiesta di accesso, controlla il nome utente dell'utente nel database. Se corrisponde, fammelo sapere e quindi inviare

06:33.320 --> 06:42.260
una risposta tramite JSON all'applicazione Front-End. E possiamo personalizzare ciò che dicono questi script.

06:42.260 --> 06:50.990
Finora siamo stati in grado di utilizzare JavaScript solo sul Web. Ma ora, con Node. js, possiamo usarlo su un server, su un computer che non

06:51.680 --> 06:55.670
esegue un browser web. Con Nodo. js, possiamo

06:55.670 --> 07:02.630
scrivere JavaScript dove, se ho pubblicato qualcosa su Facebook, quel post su Facebook, quando ho cliccato

07:02.630 --> 07:08.060
su 'post', verrà inviato al Node Server che sta ascoltando le richieste.

07:09.000 --> 07:18.060
Dirà che "Andrei ha appena pubblicato questo messaggio in formato JSON. "Il nodo. js ed Express. Il file js sul server

07:18.180 --> 07:27.000
lo leggerà e dirà "Ah, vogliamo archiviare questo post nel nostro database. "e questo database memorizzerà quel post, in

07:27.000 --> 07:32.460
modo che quando torno la prossima volta sia ancora lì.

07:32.460 --> 07:39.360
E una volta fatto, risponderà con successo dicendo che "Il mio post è un successo" e ora

07:39.360 --> 07:42.060
viene visualizzato nella mia sequenza temporale.

07:42.420 --> 07:49.410
Posso modificare il post, posso eliminare il post e di nuovo Node Server può eliminare quel post dal database e quindi

07:49.410 --> 07:52.520
inviare una risposta e rimuoverlo dalla sequenza temporale.

07:52.560 --> 07:59.070
Hai solo il potere di interagire costantemente con il Front-End. Nei prossimi due video

07:59.070 --> 08:03.570
costruiremo un progetto che incorpora tutto questo.

08:03.630 --> 08:07.320
Creeremo un Node Server usando un Express, Creeremo il

08:07.320 --> 08:14.610
nostro database in cui archiviamo le informazioni dell'utente. E utilizzeremo AJAX e JSON

08:14.610 --> 08:20.400
per creare, accedere e aggiornare costantemente le informazioni dell'utente.

08:20.460 --> 08:26.880
Quindi abbiamo una comprensione di questo sistema completo. Se stai costruendo siti Web e

08:26.910 --> 08:34.540
app Web, beh, non li stai davvero realizzando. Come sviluppatore web, stai costruendo qualcosa di più simile a questo:

08:34.750 --> 08:38.300
ma potresti chiederti: "È così? "" È questo il fine

08:38.320 --> 08:44.420
ultimo di ciò che può fare un'infrastruttura di server back-end? "Beh, no, se sei

08:44.770 --> 08:53.760
Facebook, Twitter o Amazon, faresti qualcosa del genere e non ti preoccupare troppo,

08:53.760 --> 08:57.210
possiamo spiegare cosa sta succedendo.

08:57.280 --> 09:01.740
Stai solo facendo copie del tuo computer.

09:01.750 --> 09:11.660
Quindi pensa a ciascuno di questi rettangoli come a un computer. E poiché Facebook riceve molte persone, crea una copia del loro server

09:11.660 --> 09:15.720
e lo mette forse in Asia, e uno in Africa,

09:15.860 --> 09:22.640
in modo che tutti gli asiatici possano accedervi e tutti dall'Africa possano accedervi, invece di avere

09:22.640 --> 09:23.530
tutti

09:23.630 --> 09:30.530
accedere a un server e sovraccaricare il sistema. Perché hanno lo stesso server, sta solo

09:30.560 --> 09:35.910
copiando questi file e mettendoli su un server da qualche altra parte.

09:35.970 --> 09:36.570
Questo è tutto.

09:36.650 --> 09:43.900
Ed è quello che abbiamo chiamato ridimensionamento. Ma usano anche lo stesso database, quindi se

09:43.900 --> 09:51.460
da questo server qualcuno aggiorna le informazioni, beh, questa persona qui che usa questo server, avrà comunque accesso

09:51.460 --> 09:55.920
alle informazioni che quella persona che utilizza questo server ha aggiornato.

09:55.960 --> 10:04.640
E infine, abbiamo qualcosa chiamato "Load Balancer". E questo è simile a

10:05.240 --> 10:14.090
quello che farebbe Apache o NginX. Dove ascolta una richiesta HTTP e nota che "Hmm, questo qui in Nord America è davvero molto impegnato

10:14.090 --> 10:15.700
in questo momento. "" Ho

10:15.720 --> 10:22.940
intenzione di trasferire questa persona su questo server qui. "e bilancia semplicemente il carico dei server.

10:24.040 --> 10:29.290
e può continuare a crescere avendo sempre più server man mano che hai sempre più utenti.

10:29.410 --> 10:33.390
E infine puoi anche avere più database.

10:33.400 --> 10:40.600
Ancora una volta questi quadrati rappresentano ciascuno un computer; un computer che esegue un database, un computer che esegue

10:40.600 --> 10:48.380
un server, un computer che esegue un bilanciamento del carico. E puoi avere più database, di nuovo, in modo

10:48.400 --> 10:52.220
che non vengano sopraffatti da tutte queste richieste.

10:52.420 --> 10:59.250
E ciascuno mantiene una copia dell'altro. E questo è qualcosa di cui parleremo (di più) quando

10:59.250 --> 11:02.030
arriveremo alla sezione Nodo e alla sezione Database.

11:02.100 --> 11:08.160
Ma voglio mostrarti l'idea dietro i server. Per lavorare con il back-end,

11:08.370 --> 11:18.050
l'obiettivo principale è assicurarsi che quando si effettua una richiesta HTTP dal front-end, si ottenga una risposta il

11:18.470 --> 11:22.100
più rapidamente possibile con i dati corretti.

11:22.370 --> 11:28.680
E questo è lo sviluppo del back-end. Assicurandoci di restituire tali risorse in modo

11:28.700 --> 11:35.870
che il nostro team di front-end possa essere sicuro che riceveremo esattamente ciò di cui abbiamo bisogno.

11:35.880 --> 11:42.090
Quindi voglio che tu ti ecciti perché nelle prossime sezioni ci

11:42.090 --> 11:49.920
concentreremo sul back-end e sul front-end. Costruiremo un'app che utilizza tutte queste tecnologie in un unico posto.

11:49.920 --> 11:57.210
Quindi sai esattamente come tutto è collegato e hai un'idea di come passare

11:57.210 --> 12:04.290
da qualcosa di simile a un giorno con qualcosa di simile.

12:04.400 --> 12:05.210
Vedrò nel prossimo, ciao.
