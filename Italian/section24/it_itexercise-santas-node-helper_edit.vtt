WEBVTT

00:02.900 --> 00:03.840
Ben tornato.

00:03.980 --> 00:11.140
Ho una piccola sfida divertente per te e questa sfida proviene da uno dei miei

00:11.270 --> 00:19.880
siti Web di programmazione preferiti sul web e si chiama "Avvento del codice" e l'avvento del codice avviene ogni dicembre.

00:19.880 --> 00:21.980
I programmatori di tutto il

00:22.110 --> 00:24.700
mondo, non importa in quale lingua scrivano.

00:24.770 --> 00:31.100
Puoi fare questi problemi con qualsiasi lingua vogliano e dovresti risolvere per 24 giorni

00:31.100 --> 00:32.580
fino a

00:32.630 --> 00:35.730
Natale questi difficili problemi usando il codice.

00:35.930 --> 00:40.910
Quindi faremo davvero qualcosa di divertente qui.

00:41.360 --> 00:43.720
Abbiamo l'avvento del codice dal 2015.

00:43.740 --> 00:49.100
So che è un po 'vecchio, ma mi piace davvero questa domanda.

00:49.100 --> 00:52.160
Penso che sarà davvero una buona pratica.

00:53.240 --> 00:59.570
Quindi lascerò per te questa sfida, e ci sono due parti di questa sfida.

00:59.570 --> 01:09.250
Quindi pensaci come è necessaria una risposta alla prima parte e alla seconda parte.

01:09.440 --> 01:15.770
Ora condividerò il link a questa sfida in modo da poter effettivamente leggere tutte le regole e puoi

01:15.890 --> 01:19.170
persino ottenere l'input per il tuo puzzle proprio qui.

01:20.350 --> 01:24.520
E non ti preoccupare che sembra confuso, ma una volta letta la domanda capirai

01:25.390 --> 01:28.810
perché questa è la parte eccitante che è nel prossimo video.

01:28.960 --> 01:32.430
- ma assicurati di non guardarlo prima di averlo finito! - nel prossimo video

01:32.680 --> 01:40.180
ti mostrerò cosa farei se risolvessi questo problema logico usando la programmazione e in questo modo puoi confrontare ciò che

01:40.180 --> 01:45.870
fai con quello che faccio - non significa che il mio modo sia corretto.

01:45.880 --> 01:48.990
Esistono molti modi diversi per

01:49.120 --> 01:56.200
risolvere i problemi durante la programmazione, ma come una piccola sfida divertente

01:56.200 --> 02:04.700
scoprirai la soluzione a questo problema usando il nostro modulo 'fs' usando Node e usando JavaScript.

02:04.940 --> 02:11.990
E poi ti mostrerò quello che faccio e vedremo il cui codice è più veloce e il

02:11.990 --> 02:14.160
modo in cui confronteremo il

02:15.140 --> 02:22.030
nostro codice è, faremo qualcosa del genere all'interno della nostra funzione qualunque quella funzione potrebbe essere.

02:22.100 --> 02:24.900
Molto probabilmente leggerai il file

02:25.130 --> 02:28.570
che ti forniscono, che è questo qui.

02:30.730 --> 02:39.650
Subito dopo lo faremo per dire 'console. time () 'e possiamo assegnargli qualsiasi etichetta che

02:39.850 --> 02:46.890
vogliamo, quindi basta dire la sfida divertente ora il tempo di log della console.

02:47.100 --> 02:58.340
Quando tocchiamo questa linea, inizierà un timer e finirà solo quando vedrà

02:58.550 --> 03:02.570
la console. log "o" timeEnd ".

03:02.810 --> 03:09.640
e dobbiamo dargli lo stesso input o la stessa etichetta della prima volta che l'abbiamo chiamato.

03:09.730 --> 03:15.650
Quindi 'funchallenge' ... ora in questo modo, questo è ciò

03:15.970 --> 03:22.930
che succede se lo eseguiamo e riceviamo un po 'di errore perché stiamo eliminando questo file che

03:22.930 --> 03:24.540
non vogliamo fare.

03:24.670 --> 03:26.990
Cancelliamo e proviamo ancora una volta.

03:30.660 --> 03:35.310
funchallenge ha preso 0. 319 secondi.

03:35.670 --> 03:44.220
Beh, è stato davvero molto veloce perché tutto ciò che stiamo facendo è davvero il log della console, ma

03:44.220 --> 03:49.830
usando questo vediamo quanto velocemente la tua funzione risolve il problema.

03:50.720 --> 03:55.510
E poi ti mostrerò quanto velocemente la mia soluzione risolve il problema.

03:56.060 --> 04:00.960
E avremo un po 'di competizione. Quindi ci vediamo in quello.

04:00.980 --> 04:01.220
Ciao ciao
