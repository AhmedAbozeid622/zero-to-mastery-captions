WEBVTT

00:00.980 --> 00:02.900
Ciao a tutti.

00:02.900 --> 00:04.000
Ben tornato.

00:04.280 --> 00:12.170
E in questo video, voglio mostrarti qualcosa che mi ha davvero entusiasmato quando ho iniziato a studiare il nodo, e

00:12.170 --> 00:19.040
spero che tu sia eccitato quanto me mentre attraversiamo questo video e poi facciamo un po 'di

00:19.040 --> 00:20.300
sfida .

00:20.300 --> 00:21.310
Ti lascerà a bocca aperta.

00:21.330 --> 00:25.760
Almeno lo ha fatto per me quando ho iniziato a imparare a programmare.

00:25.850 --> 00:34.250
Ora nel video precedente abbiamo parlato di qualcosa chiamato modulo FS che viene fornito con il nodo, e questo è qualcosa che è incorporato

00:34.250 --> 00:39.590
nel nodo e il modo in cui lo otteniamo è che faremo solo const.

00:39.760 --> 00:50.360
Bene, in realtà abbiamo bisogno prima di un file, quindi facciamo uno script touch. js, creeremo una nuova sceneggiatura perfetta.

00:50.400 --> 00:52.920
Bene, possiamo chiuderlo perché non ne abbiamo bisogno.

00:53.490 --> 01:02.190
E nella sceneggiatura. js che abbiamo in questa cartella o in qualche nodo possiamo avere 'const fs'.

01:02.210 --> 01:15.460
equivale a "richiedono (" fs ")", quindi FS qui sta per file system e se hai un nodo scaricato hai accesso a questo.

01:15.470 --> 01:17.680
Solo facendo questo.

01:17.880 --> 01:21.750
Ora, perché è così eccitante e così utile.

01:22.320 --> 01:30.830
Bene, perché il file system FS ti consente di accedere al nostro file system, che di nuovo non sembra così eccitante.

01:30.840 --> 01:38.230
Ma lasciami dimostrare cosa succede e perché questo è utile, quindi abbi pazienza qui.

01:38.280 --> 01:42.080
Farò un po 'di programmazione e poi spiegherò esattamente cosa sta succedendo.

01:43.140 --> 01:48.470
Quindi useremo 'fs. readFile'.

01:48.560 --> 01:50.720
È piuttosto autoesplicativo.

01:51.200 --> 02:01.380
Abbiamo un parametro vuoto e quindi abbiamo err per errore, dati.

02:01.760 --> 02:03.710
E questa è una funzione freccia.

02:05.450 --> 02:12.270
Quindi il secondo parametro è una funzione e questa funzione ha errori o dati.

02:12.310 --> 02:24.630
Quindi, per l'errore, dirò che se c'è un errore lanceremo err, o possiamo semplicemente dire errrroooorrr del

02:25.020 --> 02:30.660
punto dot console. Spingerlo davvero in faccia.

02:31.550 --> 02:42.680
Tutto apposto! Ora, se non si è verificato un errore, diremo bene e diremo solo console. accedi e disconnetteremo qualunque sia

02:42.680 --> 02:45.150
il dato.

02:45.370 --> 02:45.990
Tutto apposto.

02:46.150 --> 02:47.720
Consentitemi di aggiungere i punti e virgola.

02:48.830 --> 02:51.090
E salvalo.

02:51.100 --> 02:59.440
Quindi quello che faccio qui. Ho appena importato il modulo FS che viene fornito con il nodo e

02:59.740 --> 03:01.670
il modulo FS ha un

03:01.720 --> 03:05.480
metodo readFile () che sembra che legga una sorta di file.

03:05.560 --> 03:13.300
Il primo parametro è il file effettivo che vogliamo fare, quindi il percorso del file, che non abbiamo ancora.

03:13.300 --> 03:14.650
Quindi creiamo uno.

03:14.650 --> 03:25.200
Sto per dire un nuovo file e lo chiameremo 'ciao. txt "e con" ciao. txt ', faremo il nostro classico helllloooooo

03:26.300 --> 03:27.850
lì !!!

03:29.090 --> 03:32.300
E cose eccitanti così punti esclamativi.

03:32.540 --> 03:37.120
L'abbiamo salvato e ora possiamo dire che vogliamo leggere il file.

03:37.190 --> 03:40.340
'Ciao. txt 'dalla directory corrente.

03:41.140 --> 03:42.340
Ciao

03:42.790 --> 03:45.140
punto testo.

03:45.280 --> 03:50.450
Ora questo metodo readFile troverà il file con il percorso,

03:50.500 --> 03:52.700
ok, quindi eccolo qui.

03:52.840 --> 03:59.420
Lo leggerà e poi se c'è un errore, emetterà un errore.

03:59.590 --> 04:06.670
Se c'è una sorta di dati e tutto ha successo, sputerà i dati. Con il modo in cui possiamo eseguire questo

04:06.670 --> 04:08.300
file nel nodo.

04:08.310 --> 04:13.720
Bene, prima dovrò salvarlo. Diremo script nodo. js

04:15.140 --> 04:19.740
Enter e ho il buffer.

04:20.920 --> 04:22.740
Cos'è quello?

04:22.840 --> 04:27.460
E questo perché dobbiamo fare un po 'di codifica.

04:27.670 --> 04:34.680
E ciò significa che se faccio questo 'toString ()', proviamo questo e mostriamo cosa intendo.

04:37.450 --> 04:38.530
E ho capito.

04:38.770 --> 04:41.250
Ciao.

04:41.260 --> 04:49.530
Quindi 'readFile' legge il file come suggerisce il nome e sputerà qualunque cosa stia leggendo.

04:50.010 --> 04:50.750
Dati.

04:51.500 --> 04:55.490
Ora, perché dobbiamo inserire qui "toString ()".

04:56.970 --> 05:04.380
Solo per sapere che 'toString ()' fa qualcosa, di default se non aggiungi nulla, userà

05:04.380 --> 05:11.280
la codifica chiamata UTF 8 e UTF 8 è un tipo di codifica.

05:11.420 --> 05:14.640
Eseguiamo questo per assicurarci che sia sempre lo stesso.

05:14.750 --> 05:15.530
Sì.

05:15.530 --> 05:20.300
Quindi UTF 8 è un tipo di codifica che abbiamo.

05:20.300 --> 05:22.980
È abbastanza standard con HTML 5.

05:23.000 --> 05:26.900
E praticamente tutti lo usano sul web.

05:27.290 --> 05:37.160
È un modo per noi di avere personaggi, siano essi caratteri latini, conosci l'ABC o abbiamo caratteri coreani giapponesi,

05:37.160 --> 05:45.770
cinesi, sono tutti rappresentati da un numero e UTF 8 è un modo per codificare questi numeri

05:45.770 --> 05:48.870
per assicurarti che possiamo leggerli.

05:48.920 --> 05:55.910
In realtà è un argomento piuttosto complesso, quindi raccomando la pagina di Wikipedia che parla di UTF 8.

05:55.970 --> 06:03.420
Per ora sappi solo che UTF 8 è un tipo di codifica che è praticamente standard in tutto il web.

06:03.500 --> 06:09.290
Potresti anche aver visto ASCII e ASCII prima dell'esistenza di UTF 8.

06:09.290 --> 06:19.610
ASCII era principalmente per le lingue latine, quindi gli ABC; e UTF lo hanno ampliato per includerne molti di più da molte più lingue

06:19.860 --> 06:22.540
da diverse parti del mondo.

06:22.960 --> 06:29.780
Va bene un po 'di una tangente che non avevamo bisogno di andare avanti, ma come puoi vedere

06:30.530 --> 06:30.990
qui

06:31.070 --> 06:35.300
abbiamo "helllloooooo there" e siamo in grado di leggere il file.

06:35.300 --> 06:36.320
Tutto apposto.

06:36.330 --> 06:37.030
Molto bello.

06:38.270 --> 06:42.810
Vorrei solo aggiungere un altro metodo al tuo repertorio.

06:43.250 --> 06:57.160
Facciamo anche 'fs. readFileSync () 'e' fs. readFileSync () 'funziona in modo leggermente diverso da quello precedente

06:57.160 --> 07:00.210
e sync sta per sincrono.

07:00.580 --> 07:01.540
Quindi vedremo cosa succede.

07:01.540 --> 07:12.230
Vado a salutare.

07:12.230 --> 07:12.230
ancora una volta, e questa volta lo lascerò così.

07:14.150 --> 07:26.630
E diciamo solo che questo equivarrà al file e ci limiteremo a "console". log (file)'.

07:26.650 --> 07:27.020
Tutto apposto.

07:27.050 --> 07:31.710
Consentitemi di salvarlo ed eseguirlo.

07:31.760 --> 07:32.390
Tutto apposto.

07:32.460 --> 07:37.370
Sappiamo ancora una volta che abbiamo ottenuto questo perché dobbiamo fare 'toString ()'.

07:37.440 --> 07:38.610
Quindi facciamolo.

07:38.640 --> 07:42.660
Proverò 'toString ()' Ho intenzione di salvare

07:46.060 --> 07:51.020
ed eseguirlo di nuovo. Va bene ci arrivo 'helllloooooo lì

07:51.280 --> 07:52.410
!!!

07:52.510 --> 08:05.020
'Ma solo per distinguerli, diciamo solo che questo è il numero uno e questo è il numero due.

08:05.450 --> 08:07.660
Lo salvo, lo eseguo di nuovo.

08:08.630 --> 08:12.510
E whoa, cosa è appena successo.

08:14.050 --> 08:21.140
Ne abbiamo uno dopo i due.

08:21.920 --> 08:30.830
Ora se hai visto il video sincrono asincrono in questo corso, potresti capire cosa sta

08:30.830 --> 08:32.090
succedendo qui.

08:32.090 --> 08:34.210
Altrimenti farò una breve sinossi.

08:34.220 --> 08:42.610
Ma ti consiglio di dare un'occhiata a quel video. Ora il file letto è asincrono ed è per questo che

08:42.610 --> 08:45.200
ha qualcosa chiamato funzione di callback.

08:45.220 --> 08:53.290
Sta dicendo: hey ho intenzione di leggere questo file, e quando avrò finito con esso, continuerai semplicemente con la tua attività

08:53.290 --> 08:55.120
e continuerai a leggere.

08:55.120 --> 08:59.010
Linea tre, linea quattro, linea cinque, linea sei, fino a 11.

08:59.260 --> 09:07.010
Quando avrò finito, ti farò sapere e ti darò un errore o alcuni dati. 'readFileSync ()' che è sincrono

09:07.010 --> 09:11.740
dice: ho intenzione di leggere questo file.

09:11.780 --> 09:14.750
Non fare nulla, attendi qui quando

09:14.750 --> 09:18.600
ho finito lo assegnerò a 'file' e poi potrai continuare.

09:20.210 --> 09:30.080
Quindi, come puoi vedere qui, ciò che accade è che leggiamo il file e poiché questo è un asincrono,

09:30.080 --> 09:41.280
eseguirà questo e arriverà alla linea 10 ed eseguirà 'fs. readFileSync () 'e' readFileSync () 'perché sta dicendo hey aspetta fino

09:41.280 --> 09:45.150
a quando non ho finito, stampa' helllloooooo lì

09:45.330 --> 09:46.920
!!! 'e

09:47.160 --> 09:52.340
poi il codice asincrono dirà: hey ho finito di leggere il file,

09:52.380 --> 09:55.770
ecco i dati e li stampa qui.

09:55.770 --> 09:59.860
Ancora una volta ti consiglio davvero di dare un'occhiata al video sincrono asincrono.

10:00.330 --> 10:03.070
Ma per ora spero che abbia senso.

10:03.240 --> 10:12.240
Ora guardando questo, quale dovresti usare? Bene per un caso semplice come questo,

10:12.400 --> 10:19.690
possiamo usare quello che vogliamo. Ma potresti vedere un problema con il secondo, specialmente se stiamo costruendo

10:19.690 --> 10:21.150
qualcosa come un server.

10:21.250 --> 10:25.090
Se abbiamo un file enorme che ha qualcosa in più di 'helllloooooo lì !!! ', bene,

10:25.300 --> 10:34.360
se stiamo facendo' readFileSync () ', ciò che accade è arresteremo o metteremo in

10:34.360 --> 10:39.980
pausa l'esecuzione del nostro file e leggeremo l'intero testo.

10:40.370 --> 10:47.000
E il programma aspetterà solo che finisca; rispetto al file letto che dice: hey

10:47.000 --> 10:48.230
puoi continuare.

10:48.320 --> 10:50.340
Ti farò sapere quando avrò finito.

10:50.360 --> 10:56.210
Quindi, quando stai costruendo un server e diciamo un server espresso con route.

10:56.360 --> 11:03.530
Bene, in quel caso vogliamo usare readFile () se stiamo leggendo qualsiasi tipo di file o file di testo, qualunque esso

11:03.530 --> 11:04.160
sia.

11:04.310 --> 11:08.680
Perché in questo modo non stiamo bloccando l'esecuzione e il programma può continuare a fare le cose.

11:09.700 --> 11:10.050
Tutto apposto.

11:10.150 --> 11:12.750
Quindi un'ultima volta solo per chiarire le cose.

11:12.760 --> 11:17.690
Ho intenzione di etichettarlo come 'Async' e 'Sync'.

11:17.710 --> 11:22.350
Quindi, ancora una volta, se eseguiamo questo, abbiamo "Sync" e "Async".

11:22.420 --> 11:23.360
'helllloooooo lì !!!

11:23.790 --> 11:32.350
'Ma molto bello siamo in grado di leggere un file ed entrambi i casi che è stato abbastanza bello.

11:32.350 --> 11:38.800
Lascia che ti mostri alcuni di questi e poi ti dico esattamente perché questo è così eccitante e come possiamo usarlo

11:38.800 --> 11:40.880
per fare alcune cose davvero eccitanti.

11:44.090 --> 11:50.770
Quindi diciamo l’inferno !!! "Il testo è un po 'noioso e vogliamo aggiungerlo.

11:51.110 --> 11:54.230
Bene, possiamo fare qualcosa del genere.

11:55.280 --> 12:01.160
'fs. appendFile () 'gli diamo il file che vogliamo aggiungere.

12:01.430 --> 12:05.220
Quindi in questo caso è '. /Ciao. testo'.

12:05.780 --> 12:10.130
E comunque, se questo non esiste, in realtà creerà semplicemente il file per noi.

12:10.130 --> 12:13.130
E il secondo parametro dirà cosa vogliamo aggiungere.

12:13.130 --> 12:28.150
Quindi diciamo che volevamo anche aggiungere forse uno spazio e poi dire "Questo è così bello", ora c'è un punto esclamativo.

12:28.210 --> 12:36.020
E infine il terzo parametro rileva un errore e questo errore dirà che se c'è un errore.

12:36.040 --> 12:37.020
Consentitemi di ridurne le dimensioni

12:37.040 --> 12:49.790
in modo che possiate vedere - diciamo solo che se si verifica un errore, faremo solo "console". log '' console.

12:49.870 --> 12:50.210
log (err) 'Va bene.

12:50.260 --> 12:51.780
Perfezionare.

12:51.830 --> 12:53.900
Quindi eseguiamo questo e vediamo cosa succede.

12:53.900 --> 12:57.520
Ho intenzione di eseguire la sceneggiatura e ci arrivo 'helllloooooo lì

12:57.530 --> 12:58.360
!!! 'helllloooooo lì

12:58.370 --> 12:58.970
!!!

12:58.970 --> 13:11.690
"Perché questi sono andati per primi, ma se vado a" ciao. txt ', guarda quello, abbiamo appena scritto su un file. E ora abbiamo "Questo è così bello.

13:12.000 --> 13:17.440
"Quindi, se eseguo di nuovo questo e mi permetto di chiarire questo solo in modo da avere più spazio

13:21.160 --> 13:22.180
Guardalo. Arrivo 'helllloooooo lì

13:22.270 --> 13:22.930
!!! '' È

13:22.930 --> 13:23.860
così bello '' helllloooooo lì

13:23.860 --> 13:24.520
!!!

13:24.520 --> 13:25.990
"È fantastico"

13:26.010 --> 13:30.770
Se torniamo al ciao. file txt, oh ragazzo abbiamo aggiunto ancora di

13:30.770 --> 13:31.850
più 'Questo è così

13:32.490 --> 13:33.460
bello' testo.

13:33.680 --> 13:35.140
Quindi è abbastanza bello.

13:35.140 --> 13:39.740
Abbiamo appena aggiunto qualche altra riga al nostro file.

13:39.800 --> 13:42.450
Permettetemi di rimuoverlo solo per non diventare troppo fastidioso.

13:42.800 --> 13:44.780
Andando a salvarlo e tornare indietro.

13:46.190 --> 13:48.930
Va bene così abbiamo imparato l'appendice.

13:49.090 --> 13:57.880
Vorrei solo commentare questo in modo che non interferisca con nessuno degli altri.

13:57.900 --> 14:04.570
Facciamo una 'scrittura' questa volta - ora creiamo un po 'di spazio qui in modo che

14:07.240 --> 14:09.220
possiamo vedere con la

14:10.320 --> 14:17.020
scrittura, come puoi immaginare,' fs. writeFile () 'e diremo semplicemente che questo file si chiamerà' bye. testo'.

14:17.020 --> 14:19.550
Denominazione molto originale da solo.

14:20.400 --> 14:21.540
E dirò solo.

14:21.540 --> 14:23.750
Triste di vederti andare.

14:27.200 --> 14:44.280
E ancora una volta ci vorrà un errore e questo errore dirà 'if (err)' 'console. log (err) 'Va bene, quindi salviamolo, eseguiamo il

14:44.340 --> 14:50.640
file o eseguiamo lo script.

14:51.890 --> 14:56.110
E guarda questo, 'ciao. txt 'appena aggiunto.

14:56.240 --> 15:00.580
Se facciamo clic su di esso, abbiamo "Triste vederti andare".

15:00.650 --> 15:03.090
Abbiamo appena creato un nuovo file di testo.

15:03.940 --> 15:05.870
Molto molto figo.

15:05.930 --> 15:17.010
A proposito, solo per sapere cosa succede, se diciamo che ho sbagliato a scrivere il file letto e ora è un inferno. txt 'Beh, se eseguo questo, avrò

15:17.150 --> 15:22.280
un errore e puoi vederlo.

15:22.340 --> 15:30.610
Perché si spegne, ricevo il messaggio di errore, errore con molte R.

15:30.620 --> 15:30.930
Tutto apposto.

15:30.950 --> 15:39.260
Segue un po 'di seguito, ma nel caso in cui la gente lo stia chiedendo o ci stavi pensando.

15:39.340 --> 15:39.990
Tutto apposto.

15:40.160 --> 15:45.190
Woo ~ Mi sto stancando, quindi facciamo un ultimo e poi ti dirò esattamente

15:45.190 --> 15:46.670
perché è così bello.

15:46.840 --> 15:54.180
L'ultimo che faremo - di nuovo facciamo un po 'di spazio qui - sarà la' cancellazione '.

15:54.490 --> 15:59.240
Quindi con quell''eliminazione 'possiamo fare' fs. unlink ()'.

15:59.270 --> 16:08.500
il nome è un po 'fuori qui ma' fs. unlink () 'e diremo' ciao. txt 'e nota che sono stato in grado

16:08.500 --> 16:18.730
di fare solo' ciao. txt "ma solo per mantenerlo coerente, dirò solo". /addio. txt "con". /

16:18.730 --> 16:24.400
'prima e con questo.

16:24.400 --> 16:25.970
Ancora una volta se ci sono errori

16:28.550 --> 16:29.680
solo 'console.

16:29.790 --> 16:32.720
log (err) 'Whoops Ho dimenticato di fare

16:37.540 --> 16:39.900
il' if 'perfetto, ora Bene,

16:40.130 --> 16:42.020
vediamo cosa succede qui.

16:43.460 --> 16:52.940
E solo per divertimento, aggiungiamo solo una 'console. log () 'qui dopo che ha terminato la cancellazione e diremo' inizio 'perché stiamo

16:52.940 --> 16:58.590
dicendo' ciao 'al'. /addio. testo'. Sbalordire.

16:58.990 --> 17:00.290
Bene, eseguiamo questo.

17:00.290 --> 17:06.220
Sto per dire - e commenteremo il file di scrittura qui perché non è necessario scriverlo, abbiamo

17:06.220 --> 17:08.320
già il 'ciao. testo'.

17:08.420 --> 17:09.640
Lasciami salvare.

17:09.810 --> 17:13.280
Ora se guardi il 'ciao. testo ", vediamo cosa succede

17:16.580 --> 17:20.410
qui quando eseguo lo script, guarda" ciao. testo "è stato appena rimosso.

17:20.830 --> 17:22.910
L'inizio è appena successo.

17:25.290 --> 17:26.430
Eccezionale.

17:26.490 --> 17:30.840
Quindi è stato molto eccitante per me, si spera sia stato anche per te.

17:30.900 --> 17:34.270
Ma perché questo è eccitante?

17:34.650 --> 17:42.900
Bene perché ora siamo in grado di utilizzare la programmazione in javascript al di fuori dei soli browser Web e al

17:42.900 --> 17:46.760
di fuori della creazione di siti Web e server.

17:46.890 --> 17:52.760
Ciò che possiamo fare ora con questa conoscenza è che possiamo semplificare la nostra vita.

17:52.800 --> 18:01.540
Puoi pensare ai casi, forse vuoi leggere un file Excel e ci sono cose che puoi usare, usando il file di

18:01.540 --> 18:05.690
lettura e usando i moduli NPM che puoi leggere.

18:05.830 --> 18:06.180
Diciamo.

18:06.180 --> 18:10.730
Le colonne in un eccellente e fanno un po 'di matematica.

18:11.140 --> 18:18.100
O forse hai un foglio Excel con tutte queste e-mail e vuoi inviare un'e-mail per dire 100 persone in questo

18:18.190 --> 18:24.160
elenco ma non vuoi essere sorpreso a spammare le persone dal filtro google dicendo che ehi questo

18:24.160 --> 18:32.650
account è spamming perché hanno appena inviato 100 e-mail in due minuti. Bene usando qualcosa come Node,

18:32.650 --> 18:40.150
puoi creare forse qualcosa che ogni sei ore invia cinque e-mail.

18:40.150 --> 18:48.520
Un'altra cosa che puoi fare se avessi un robot, ad esempio, qualcosa di simile a un file system invece di

18:48.520 --> 18:50.010
leggere dal file.

18:50.000 --> 18:58.000
Puoi leggere dal robot, magari attraverso il wireless, forse attraverso i fili e ottenere un input di alcuni dati che

18:58.450 --> 19:00.040
il robot ha.

19:00.400 --> 19:03.570
Forse ha rilevato un gatto.

19:03.910 --> 19:10.120
Bene usando quell'input, puoi fare qualcosa a cui puoi rispondere magari mandandoti una e-mail

19:10.120 --> 19:16.420
dicendo che il robot ha appena rilevato un gatto e invia quell'e-mail o invia un output.

19:16.420 --> 19:24.160
Ed è quello che chiamiamo output input, in cui stai ricevendo input da un'altra fonte, da un'altra macchina e

19:24.760 --> 19:32.140
poi stai anche producendo qualcosa per il consumo, che è davvero eccitante perché apre il mondo in

19:32.170 --> 19:35.490
cui puoi creare strumenti per te stesso.

19:35.620 --> 19:36.730
Puoi automatizzare le cose.

19:36.730 --> 19:41.760
Puoi letteralmente fare tutto ciò che la tua mente può pensare.

19:42.310 --> 19:48.310
E so che questo è ancora presto e sei ancora all'inizio della tua carriera di sviluppatore, ma questo

19:48.310 --> 19:54.370
è il primo passo per capire come puoi usare la programmazione per risolvere i problemi e rendere la tua

19:54.610 --> 19:58.580
vita più efficiente, o forse solo un po 'più divertente .

19:58.630 --> 20:02.040
Quindi nel prossimo video faremo qualcosa di divertente.

20:02.140 --> 20:07.650
Utilizzeremo ciò che abbiamo appena appreso e aiuteremo Babbo Natale in una sfida di programmazione.

20:08.720 --> 20:10.190
Ci vediamo in quello.

20:10.360 --> 20:10.570
Ciao ciao
