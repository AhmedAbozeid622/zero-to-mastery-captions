WEBVTT

00:01.050 --> 00:09.260
Ora, torno al mio esempio qui aggiungiamo un nuovo file e chiameremo questo 'script2. js'.

00:09.270 --> 00:20.110
- Ora lo 'script2.

00:20.110 --> 00:20.110
js 'può avere una costante chiamata' largeNumber '.

00:20.340 --> 00:24.320
E diciamo solo che è 356.

00:24.780 --> 00:35.410
E se vogliamo esportare questo e dire 'export default largeNumber' e ora all'interno di 'script. js 'I do "importa

00:35.410 --> 00:44.880
largeNumber da' script2. js'".

00:44.940 --> 00:47.000
- Facciamolo un po 'più piccolo -

00:47.220 --> 00:48.810
E ora ho cambiato

00:51.920 --> 00:59.120
questo in' largeNumber 'faremo semplicemente' a + b 'se eseguo' script nodo. js "Viene

00:59.160 --> 01:05.660
visualizzato l'errore" Importazione token imprevista ".

01:05.890 --> 01:13.390
E questo perché Node deve ancora implementare la nuova funzionalità ES6 delle dichiarazioni di importazione.

01:15.090 --> 01:19.910
E ci sono modi per aggirarlo e puoi aggiungere pacchetti per permetterti di farlo.

01:20.170 --> 01:25.980
Ma ti mostrerò il modo CommonJS perché la maggior parte dei server che incontrerai avranno il

01:25.980 --> 01:26.710
modo CommonJS.

01:26.790 --> 01:29.730
E nel corso degli anni questo [import] e questo [da] diventeranno più diffusi.

01:29.730 --> 01:32.750
Ma sai già come farlo dalla sezione front-end.

01:32.820 --> 01:34.260
Quindi niente è diverso qui.

01:34.260 --> 01:40.460
Per familiarizzare con CommonJS utilizzeremo il modulo "Richiedi".

01:40.470 --> 01:44.200
Quindi, come possiamo farlo usando il modo in cui funziona

01:44.280 --> 01:44.950
-

01:45.120 --> 01:47.150
nel Nodo 8. 9, qual è la versione che abbiamo?

01:51.100 --> 02:01.040
Bene, dovremo fare un 'const largeNumber = require ('. / SCRIPT2. js ')' - ancora una volta questo potrebbe

02:01.110 --> 02:04.140
essere familiare - E poi dentro

02:04.330 --> 02:10.850
qui dobbiamo dargli il percorso del file. Con 'request' ora

02:10.910 --> 02:16.040
abbiamo 'largeNumber' e vogliamo anche esportarlo ora.

02:16.210 --> 02:25.750
E il modo in cui le esportazioni funzionano con CommonJS è il modulo 'do. export "e questo perché -

02:25.750 --> 02:36.350
fammi solo cancellare questo e mostrarti. Se faccio 'nodo' e faccio 'modulo' vedrai che 'modulo' è un oggetto globale a

02:36.350 --> 02:42.140
cui abbiamo accesso e che usa 'modulo. export 'Posso

02:42.190 --> 02:49.880
dire quali oggetti voglio esportare in questo file.

02:49.880 --> 02:52.760
Nel nostro caso ci sarà 'largeNumber'.

02:56.170 --> 03:05.090
Se lo salvo e ora eseguo il nostro "script del nodo", oops devo prima uscire dal processo.

03:06.880 --> 03:07.800
Cancella se

03:07.880 --> 03:09.750
eseguo 'nodo script.

03:09.790 --> 03:16.110
js 'I get [oggetto Object] 5.

03:16.220 --> 03:17.200
Hmm, perché?

03:17.600 --> 03:25.250
Bene perché ora abbiamo esportato questo oggetto e il modo in cui vogliamo accedervi, qui, stiamo esportando un

03:26.110 --> 03:29.350
oggetto globale che possiamo nominare qualunque cosa.

03:29.350 --> 03:39.620
Nel nostro caso possiamo dire 'script2' e per ottenere bene la proprietà di 'script2' dovremo dire

03:39.700 --> 03:41.780
'script2. largeNumber 'E

03:41.780 --> 03:49.730
ora se eseguo questo ottengo 361 e questo può essere chiamato qualunque cosa sia solo una variabile che stai dichiarando.

03:49.770 --> 03:56.470
Quindi possiamo semplicemente chiamarlo 'c' - 'c. largeNumber 'e funziona ancora.

03:57.980 --> 04:01.610
È un po 'diverso da quello a cui siamo abituati sul front-end.

04:02.630 --> 04:09.230
E questo solo perché non abbiamo implementato il, o Node non ha implementato l'importazione e l'esportazione con questa

04:09.350 --> 04:10.770
versione di esso.

04:11.000 --> 04:12.140
Ma alla fine arriverà.

04:12.140 --> 04:19.190
Basta non aver paura se la vedi in questo modo; una volta che ti sei abituato alla sintassi è praticamente lo stesso.

04:19.210 --> 04:21.540
Bene, ci vediamo nel prossimo.

04:21.550 --> 04:22.020
Ciao ciao.
