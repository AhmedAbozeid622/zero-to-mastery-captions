WEBVTT

00:01.000 --> 00:07.210
Ben tornato. Nell'ultimo video abbiamo parlato del Document Object Model e alcuni di voi potrebbero

00:07.210 --> 00:08.240
avere una domanda.

00:08.590 --> 00:17.550
Bene, quando mi ha mostrato la finestra sembrava un oggetto. Hai proprietà e metodi.

00:17.840 --> 00:24.360
Ma ogni volta che accediamo al DOM, al documento, non sembra che l'oggetto lo faccia?

00:24.550 --> 00:26.630
Sembra HTML.

00:26.950 --> 00:31.120
E questo perché i browser Web nascondono semplicemente il fatto che si tratta di un oggetto.

00:31.120 --> 00:36.380
Ci danno solo una bella vista come questa, così possiamo giocarci meglio.

00:36.520 --> 00:39.870
Ma è un oggetto Javascript.

00:39.910 --> 00:46.060
Ora con questo documento possiamo usare qualcosa chiamato Selettori per selezionare diversi elementi in

00:46.060 --> 00:47.840
modo da poterli manipolare.

00:47.920 --> 00:53.710
Quindi ti mostrerò alcuni di loro oggi quelli che vengono usati più spesso

00:54.010 --> 00:55.530
che incontrerai oggi.

00:55.690 --> 01:06.070
Ruolo sviluppatore web. Se vai a documentare il primo che ti mostrerò è getElementsByTagName.

01:07.230 --> 01:11.580
Come suggerisce il nome, accetta un nome tag.

01:11.580 --> 01:19.230
Nel nostro caso, se guardiamo bene il nostro file HTML indice, ho creato per te una lista della spesa e se

01:19.230 --> 01:21.630
minimizzo questo solo così puoi vederlo.

01:21.930 --> 01:26.420
Abbiamo un semplice file HTML e sembra che sia una lista della spesa importante.

01:26.430 --> 01:29.280
Potrebbe essere il compleanno di qualcuno e stanno ricevendo un quaderno.

01:29.280 --> 01:30.050
Tutto ok.

01:30.180 --> 01:33.010
Quindi con il nome del tag posso dire bene cosa fanno i tag.

01:33.020 --> 01:38.280
Voglio selezionare, voglio selezionare il tag H1 o premere Invio e guardarlo.

01:38.610 --> 01:40.470
Ottengo il tag H1.

01:40.500 --> 01:40.730
OK.

01:40.740 --> 01:42.260
Cos'altro posso fare?

01:42.390 --> 01:51.520
Posso fare un documento. getElementsByClassName.

01:51.750 --> 01:59.260
E qui posso dire che all'interno del file indice ho classe 'secondo' che è il secondo paragrafo

01:59.290 --> 02:01.180
che non dice scuse.

02:01.180 --> 02:04.600
Quindi posso dire 'secondo' che lo guardo.

02:04.730 --> 02:07.560
Ora ho il "secondo" elemento.

02:07.570 --> 02:10.910
Quando altro abbiamo? getElementById.

02:11.020 --> 02:16.750
Penso che tu possa indovinare cosa farà questo, documento. getElementsById.

02:16.840 --> 02:25.430
Ancora una volta selezioneremo Id di vedremo che c'è un primo anno, quindi possiamo fare prima, e ottengo

02:25.430 --> 02:26.100
l'ID.

02:27.300 --> 02:33.210
Ora vedi una differenza qui che getElementById non ha il plurale.

02:33.210 --> 02:36.530
Giusto. Perché puoi avere un solo ID.

02:36.600 --> 02:38.910
Restituisce l'elemento completo rispetto a quello

02:38.950 --> 02:40.750
che sembra un array.

02:41.190 --> 02:50.210
Quindi per poter accedere completamente a quanto sopra, dovrò fare 'secondo' e quindi accedere all'indice zero

02:50.260 --> 02:54.310
dell'array, nel qual caso non ricevo scuse.

02:56.370 --> 02:57.150
Tutto ok.

02:57.460 --> 03:00.940
Quindi questi tre sono molto molto utili.

03:00.940 --> 03:06.680
Ma c'è qualcosa chiamato querySelector e querySelectorAll che sono ancora meglio.

03:07.000 --> 03:11.950
Diamo un'occhiata a loro. Con documento. querySelector Posso selezionare

03:12.200 --> 03:20.800
qualsiasi cosa qui dentro come ho fatto con CCS. Ad esempio, se volessi selezionare, facciamolo in questo

03:20.810 --> 03:32.460
caso H1 o posso selezionare H1 se volessi selezionare 'Li' le nostre voci dell'elenco, ottengo molto, ma sembra che ottenga solo il

03:32.520 --> 03:38.910
primo sul notebook. E se volessi selezionarli tutti? E questo perché

03:38.910 --> 03:44.170
il selettore di query seleziona il primo elemento che trova.

03:44.230 --> 03:51.490
Se faccio querySelectorAll invece li seleziona tutti.

03:54.520 --> 03:58.360
E vedi qui che abbiamo tutti e sei gli elementi "Li".

04:03.160 --> 04:06.770
Solo per mostrarti che funziona con qualsiasi selettore CSS.

04:06.820 --> 04:13.140
Se faccio 'Li' e H1 mentre ottengo anche H1 e tutti 'Li'.

04:13.210 --> 04:14.920
Quindi è molto molto utile.

04:14.920 --> 04:20.650
L'unica avvertenza che ormai conosci è che ogni volta che vengono introdotte nuove funzionalità abbiamo la possibilità per tutti

04:20.650 --> 04:22.230
i browser di implementarla.

04:22.360 --> 04:22.950
Quindi controlliamo.

04:22.950 --> 04:28.840
Posso usare per vedere se querySelector è in regola.

04:28.840 --> 04:29.290
Tutto ok.

04:29.290 --> 04:32.560
Sembra che tutti i browser lo abbiano implementato, il che è positivo.

04:32.590 --> 04:34.650
Controlliamo querySelectorAll.

04:34.860 --> 04:37.660
Bene, andiamo avanti, tutto è verde.

04:38.200 --> 04:38.880
Quello è buono.

04:39.070 --> 04:45.670
Voglio abituarmi a quella pratica di assicurarmi che qualunque metodo o proprietà tu usi

04:45.670 --> 04:56.280
sia per HTML, CSS e Javascript, tutto funzioni nei browser. Quindi ti consiglio di usare questi due per fare la tua

04:56.280 --> 05:00.470
selezione perché è esattamente come i CSS.

05:00.600 --> 05:06.120
Sono più potenti dei primi tre. Ma incontrerai questi tre di tanto in tanto con le

05:06.120 --> 05:07.500
vecchie basi di codice.

05:08.800 --> 05:09.470
OK.

05:09.830 --> 05:10.550
Cos'altro possiamo fare.

05:10.540 --> 05:15.260
Vedo che abbiamo l'attributo Get e l'attributo Set. Controlliamolo.

05:16.980 --> 05:26.850
Come suggerisce il nome, se faccio un documento. getAttribute bene, vediamo che non c'è nulla

05:26.970 --> 05:33.270
sull'attributo Get è lì? Perché è necessario selezionare un elemento per ottenere i suoi attributi.

05:33.270 --> 05:34.140
Lasciatemi spiegare.

05:34.380 --> 05:42.960
Quindi, se volessi ottenere il numero casuale 23 dal primo pozzo 'Li', avrei prima selezionarlo,

05:42.960 --> 05:49.210
possiamo usare qualcosa come querySelector e poiché seleziono il primo.

05:49.310 --> 05:50.930
Posso dire

05:54.190 --> 05:59.650
"Li" e lo capisco. Ma ricorda che dobbiamo memorizzarlo da

05:59.650 --> 06:07.970
qualche parte, in modo da poterlo dare a una variabile e memorizzarlo da qualche parte o posso semplicemente dire getAttribute random.

06:08.090 --> 06:15.190
Quindi dirò che selezionerò 'Li' e da lì otterrò qualsiasi attributo che si chiama 'random'

06:16.500 --> 06:18.650
e poi ottengo 23.

06:18.870 --> 06:25.470
Quindi getAttribute può essere qualsiasi cosa. Puoi immaginare un tag immagine che abbia larghezza e altezza

06:25.470 --> 06:30.970
e vuoi afferrare forse la larghezza e l'altezza per vedere quali valori hanno, cosa puoi fare con loro.

06:30.990 --> 06:33.280
Puoi anche impostare l'attributo.

06:33.510 --> 06:44.970
Quindi se premo su e ottengo l'ultimo comando ora posso cambiare getAttribute in setAttribute per dire ora casuale quale è

06:45.000 --> 06:50.560
l'attributo che vogliamo prendere e in cosa vogliamo cambiarlo.

06:50.880 --> 06:59.170
Possiamo dire che vogliamo cambiarlo in 1000. Chiudi la parentesi e ottengo Non definito.

06:59.410 --> 07:09.780
Ma ora se seleziono querySelector il primo 'Li' vedo che casualmente è stato cambiato in 1000.

07:09.790 --> 07:12.970
Ora potresti pensare a te stesso con questo.

07:13.060 --> 07:18.910
Posso avere una classe per avere forse un nuovo stile e cambiare

07:18.910 --> 07:22.160
alcuni CSS? Che cosa! Puoi assolutamente farlo.

07:22.270 --> 07:30.300
Questa è una delle cose più interessanti di avere il DOM è che puoi cambiare qualsiasi cosa nel tuo browser.

07:31.200 --> 07:32.960
Quindi proviamo alcuni di quelli.

07:33.000 --> 07:35.830
Puoi usare getAttribute o setAttribute Ma

07:35.850 --> 07:39.470
voglio mostrarti il modo più comune di farlo.

07:39.510 --> 07:46.480
Il primo modo per cambiare il tuo stile è semplicemente usare il tag style.

07:46.620 --> 07:58.020
Quindi, ad esempio, se volessi dire querySelector, whoops voglio dire documento. querySelector e selezioneremo il tag H1, questo H1

07:58.080 --> 08:07.590
ha anche una proprietà style e tutti gli elementi nella pagina Web hanno una proprietà

08:07.590 --> 08:08.380
style.

08:10.120 --> 08:14.230
Ed ecco un sacco di cose di cui non dobbiamo preoccuparci.

08:14.440 --> 08:21.040
Ma quello che possiamo fare è dire stile e poi punto, vogliamo accedere a una proprietà sullo stile che è, beh, il

08:21.620 --> 08:22.620
nostro stile CSS.

08:22.630 --> 08:32.310
Quindi sappiamo che possiamo avere un background. Quindi lo sfondo che possiamo dire è uguale a, ma dovremmo dire

08:32.340 --> 08:37.240
che lo sfondo è uguale a giallo, ma deve essere una stringa giusta?

08:37.280 --> 08:41.960
Quindi stringa gialla premere Invio, guarda quello.

08:42.000 --> 08:48.000
Cambiamo semplicemente il nostro background e puoi fare stili come questo e cambiare tutti i tuoi stili.

08:48.000 --> 08:49.440
Ma c'è un problema qui.

08:49.500 --> 08:52.610
Il problema è la separazione delle preoccupazioni.

08:52.740 --> 09:03.060
Idealmente non vogliamo includere stili che essenzialmente abbiamo uguale a sfondo

09:03.650 --> 09:04.660
giallo.

09:04.890 --> 09:07.160
È esattamente la stessa cosa che abbiamo fatto.

09:07.410 --> 09:16.070
Quindi, se aggiorno qui vedrai che anche se non ho cambiato nulla, ho ancora lo sfondo giallo.

09:16.210 --> 09:26.650
Ma poiché ricordiamo che vogliamo che la separazione dell'HTML si concentri sul testo, il CSS si concentra sullo

09:26.980 --> 09:29.920
stile e Javascript sulle azioni.

09:30.020 --> 09:36.000
Quindi qual è il modo migliore per noi di cambiare stile rispetto allo stile. {proprietà}.

09:36.060 --> 09:38.250
Abbiamo alcune cose che possiamo usare.

09:38.400 --> 09:40.610
Quindi inizieremo con className e classList.

09:40.650 --> 09:43.900
E in realtà ho uno stile piuttosto interessante chiamato titolo cool.

09:44.010 --> 09:45.110
Quindi diamo un'occhiata.

09:46.230 --> 09:50.750
Voglio rimuovere questo. Ricaricare.

09:50.960 --> 09:55.990
Quindi inseriamo il documento querySelector H1 in una variabile,

09:58.350 --> 10:01.780
quindi non dobbiamo continuare a farlo.

10:02.010 --> 10:06.060
Quindi sto per dire che la variabile H1 è uguale a Ecco

10:06.110 --> 10:06.580
qui.

10:06.660 --> 10:13.440
Quindi ora abbiamo H1. Possiamo dire che H1 dot

10:13.500 --> 10:18.610
className è uguale e aggiungeremo un titolo interessante.

10:18.830 --> 10:19.710
Vediamo cosa succede.

10:20.860 --> 10:21.530
Whoa.

10:21.800 --> 10:23.320
È piuttosto bello.

10:23.420 --> 10:29.990
Nel caso ti stia chiedendo come ho fatto, userò semplicemente questo CSS e il modo in cui l'ho trovato è

10:29.990 --> 10:31.760
che ho guardato questo Codepen.

10:31.790 --> 10:37.290
Quindi se cerchi codepen. io puoi trovare un sacco di cose interessanti che la

10:37.630 --> 10:41.770
gente ha costruito con CSS e puoi vedere che questo è stato fatto da Rafael Castro.

10:41.900 --> 10:46.630
Ho appena usato il suo fantastico CSS per il mio tag H1.

10:46.790 --> 10:48.220
E il gioco è fatto.

10:48.240 --> 10:58.570
Quindi ho aggiunto una nuova classe al mio H1. Se seleziono il mio H1, vedrai che ho una classe chiamata Title.

10:58.650 --> 11:00.810
Molto bella.

11:00.850 --> 11:02.770
In realtà c'è un'altra cosa che possiamo

11:02.770 --> 11:04.240
fare, possiamo fare classList.

11:04.660 --> 11:15.800
Quindi diciamo che volevo aggiungere una lezione a "Li", diciamo documento. querySelector farà 'Li' che selezionerà

11:18.640 --> 11:28.960
il primo e voglio dire che qui vogliamo dare un'occhiata a ClassList.

11:29.060 --> 11:29.600
Vedo

11:29.620 --> 11:33.240
che non c'è niente perché non ci sono lezioni.

11:33.560 --> 11:39.970
Ma se aggiungo una classe qui e facciamo grassetto, rosso e non abbiamo

11:40.460 --> 11:43.120
bisogno di quella virgola.

11:43.210 --> 11:45.530
Quindi ora abbiamo due articoli di classe.

11:45.590 --> 11:50.640
Se lo salvo, lo rifaccio e lo aggiorno, vedo

11:53.590 --> 12:01.990
che ho un elenco di classi. Questo elenco di classi ci offre alcuni metodi che possiamo usare come

12:02.380 --> 12:04.090
Aggiungi Rimuovi e Attiva.

12:04.210 --> 12:05.060
Quindi facciamolo.

12:05.230 --> 12:07.720
Facciamo il 'Li'.

12:07.730 --> 12:15.900
E ho intenzione di dire ClassList. aggiungi e aggiungeremo un titolo interessante.

12:16.000 --> 12:19.100
Guarda quello. Quel tipo di casini sulla nostra lista.

12:19.100 --> 12:22.520
Quindi rimuoviamo quel titolo interessante e aggiungiamone uno diverso.

12:22.580 --> 12:24.710
Quindi sto per dire classList

12:24.710 --> 12:25.480
Rimuovi.

12:25.700 --> 12:37.990
Bel titolo e invece aggiungiamo un'altra classe che ho nel mio CSS che si chiama Fatto che mi darà una linea attraverso il

12:37.990 --> 12:43.290
testo, in modo che l'elemento Da fare sia fatto.

12:43.630 --> 12:53.990
Quindi, se lo faccio, guarda quello, ho il mio primo compito nella mia lista della spesa fatto.

12:54.120 --> 12:57.880
Ma cosa succede se ho fatto un errore e voglio ripristinarlo.

12:57.960 --> 13:08.020
Invece di rimuoverlo potrei semplicemente dire attiva e disattiva di nuovo e attiva e disattiva e attiva e disattiva. Vedi che questo potrebbe essere molto

13:08.020 --> 13:15.670
utile se vuoi accendere e spegnere qualcosa avanti e indietro.

13:15.700 --> 13:16.410
Molto bello.

13:16.560 --> 13:18.050
Cos'altro abbiamo?

13:18.220 --> 13:26.430
Ciò che finora abbiamo imparato che dovremmo usare querySelectors per afferrare l'elemento e cambiare gli stili

13:26.790 --> 13:29.200
usando qualcosa come classList.

13:29.460 --> 13:33.250
Assicuriamoci che classList sia disponibile in tutti i browser.

13:34.120 --> 13:34.660
Controlliamo.

13:34.660 --> 13:36.340
ClassList.

13:38.760 --> 13:44.410
E sembra che stiamo diventando green, ma ce ne sono alcuni come IE 11 e che ha un supporto parziale.

13:44.790 --> 13:47.430
Quindi vogliamo stare attenti con l'utilizzo di classLists.

13:47.520 --> 13:51.630
Quindi potremmo dover usare del testo in alcune aree.

13:52.360 --> 13:55.640
Ne ho altri che vorrei mostrarti.

13:55.690 --> 14:00.230
Uno è innerHTML e ho qui pericoloso.

14:00.310 --> 14:04.130
Vedrai e poi alcune basi di codice ed è per questo che voglio mostrarti questa proprietà.

14:04.510 --> 14:16.410
Posso fare qualcosa sulla falsariga del punto dot Selector H1.

14:16.480 --> 14:30.960
Ora all'interno di questo posso dire che innerHTML è uguale a guardare questi punti esclamativi forti e quindi chiudere il tag forte.

14:31.070 --> 14:34.110
Ora se premo Invio, guarda quello.

14:34.510 --> 14:42.380
Ho appena cambiato il HTML interno di H1 per avere tag forte. Ricontrolliamo l'aspetto di H1 ora.

14:43.220 --> 14:47.020
H1 ha tag forti con punti esclamativi.

14:47.420 --> 14:48.350
Torniamo indietro.

14:48.380 --> 14:52.050
Possiamo anche accedere a qualcosa chiamato parentElement e figli.

14:52.100 --> 14:53.420
Quindi diamo un'occhiata.

14:54.230 --> 15:07.470
Se voglio selezionare il punto del documento Jello querySelectorTutto 'Li' selezionerà Jello che è il secondo nell'array, quindi

15:08.930 --> 15:10.650
significa uno.

15:11.300 --> 15:12.480
E ho Jello.

15:12.890 --> 15:25.260
Quindi ora posso dire punto parentElement e ottengo l'elenco non ordinato e se faccio parentElement di

15:25.740 --> 15:29.840
parentElement ottengo il corpo.

15:29.870 --> 15:31.490
Quindi ho Jello.

15:31.940 --> 15:38.400
Ottengo il genitore che è l'UL e il genitore del genitore che è il corpo.

15:38.420 --> 15:42.570
Posso anche fare i bambini.

15:42.980 --> 15:50.360
Quindi, se faccio questo, che è genitore genitore che va al corpo e poi ai figli, ottengo tutti i

15:50.360 --> 15:51.710
figli del corpo.

15:51.920 --> 15:52.940
Molto bello.

15:52.940 --> 15:59.550
L'ultimo punto che voglio mostrarti è che è davvero importante per i selettori e le variabili della cache.

15:59.630 --> 16:00.490
Cosa significa?

16:00.710 --> 16:04.480
Ogni volta che facciamo qualcosa del genere, supponiamo di avere un file Javascript.

16:04.610 --> 16:10.370
E ogni volta che selezioniamo cose nuove ogni volta che vogliamo usarle.

16:11.530 --> 16:22.000
Bene, questo sta esaurendo la memoria perché il computer deve ricordare che il browser deve ricordare che vogliamo selezionarlo e quindi lo selezioniamo di

16:22.000 --> 16:26.890
nuovo e quindi selezioniamo di nuovo e stiamo selezionando la stessa

16:26.890 --> 16:27.810
cosa.

16:27.810 --> 16:37.390
Quindi il browser Web sta eseguendo ripetutamente azioni quando tutto ciò che dovevamo fare era la variabile H1 è uguale

16:37.920 --> 16:40.380
a dot dot querySelector H1.

16:40.690 --> 16:48.610
Quindi ora ogni volta che devo usare H1 il browser Web non deve andare a cercare il DOM trovare H1 e quindi

16:48.610 --> 16:49.830
memorizzarlo in memoria.

16:49.900 --> 16:57.010
Abbiamo H1 attivo fino a quando non aggiorniamo la pagina in modo che il lavoro dei browser Web sia completato.

16:57.070 --> 17:00.650
Ci ha già detto dove si trova H1 e ora possiamo usarlo.

17:00.760 --> 17:02.360
E questo si chiama Selettori cache.

17:02.380 --> 17:03.880
Ed è qualcosa che tratteremo.

17:04.090 --> 17:10.480
E l'ultimo video in questa sezione in cui parliamo di alcuni concetti fondamentali per gli sviluppatori. Ci vediamo nel prossimo video,

17:10.480 --> 17:11.830
ciao ciao.
