WEBVTT

00:01.210 --> 00:07.830
Ben tornato. Fino a questo punto abbiamo imparato a conoscere il codice eseguendolo solo dall'alto verso il basso.

00:07.830 --> 00:14.020
Solo in linea retta. Abbiamo imparato a conoscere i condizionali, in cui possiamo aggiungere un'istruzione

00:14.020 --> 00:17.380
'if' e farla andare in un modo o 'altro', andare nell'altro modo.

00:17.710 --> 00:24.220
Quindi abbiamo anche appreso "if else" e "else if".

00:24.310 --> 00:35.680
Quindi 'if', 'else if', 'else if', 'else'. E poi se volessimo fare qualcosa del genere. Qualcosa in cui continuiamo a

00:35.680 --> 00:42.280
farlo ancora e ancora. E questo si chiama "looping", ed è qui che impareremo in questo video.

00:42.640 --> 00:49.750
E come puoi vedere nella nostra struttura, il looping JavaScript, analizzeremo tutto questo in questo video.

00:49.910 --> 00:50.720
Iniziamo.

00:52.480 --> 01:02.160
Ho un tag 'script' vuoto qui. Questo è di nuovo allegato al nostro HTML e cominciamo forse con un 'elenco di cose da fare'.

01:02.160 --> 01:12.760
E un elenco di cose da fare ha ... o dovrebbe essere un array. E vogliamo avere forse una "stanza pulita".

01:12.880 --> 01:25.730
Vogliamo avere "lavarsi i denti". Forse "esercizio", dovrebbe sicuramente "studiare" alcuni "javascript".

01:25.790 --> 01:28.910
E infine, dovremmo "mangiare sano".

01:29.090 --> 01:32.330
Tutto ok. Quindi abbiamo un 'elenco di cose da fare'.

01:33.200 --> 01:39.950
Diciamo che volevamo aggiungere un punto esclamativo alla fine di questi "elenchi di cose da fare".

01:39.950 --> 01:43.140
Voglio dire, sono tutti molto importanti e vogliamo enfatizzarlo.

01:43.170 --> 01:49.190
Ma, voglio dire, è un po 'noioso, giusto? Devo andare uno per uno e aggiungere un punto esclamativo, aggiungere

01:49.220 --> 01:50.130
un punto esclamativo.

01:50.130 --> 01:54.310
E immagina se "todo list" fosse composto da centinaia di righe.

01:55.470 --> 01:58.410
E come programmatori vogliamo fare le cose in modo efficiente.

01:58.410 --> 02:00.310
Questo è ciò per cui abbiamo macchine.

02:00.720 --> 02:06.930
Quindi, aggiungiamo alcuni loop a questo. Per fare un ciclo in JavaScript uno dei modi

02:06.930 --> 02:12.530
principali per farlo, si chiama 'ciclo per'. E imparerai una nuova sintassi qui.

02:12.540 --> 02:19.410
E attenzione! All'inizio sembra confuso, ma è una di quelle cose di nuovo, devi farlo

02:19.410 --> 02:21.890
un paio di volte - e te ne accorgerai.

02:21.900 --> 02:27.370
Quindi la prima è la variabile 'i' è uguale a '0' lo faremo.

02:27.390 --> 02:33.240
Quando 'i' è inferiore a 'todos. lunghezza'.

02:33.480 --> 02:37.780
E poi faremo "i ++".

02:37.780 --> 02:40.220
Non ti preoccupare, ti spiego cosa significa.

02:40.270 --> 02:47.310
Abbiamo le parentesi graffe e poi dentro per ora aspettiamo solo e spieghiamo cosa sta succedendo.

02:47.320 --> 02:53.410
Quindi, sto dicendo 'for', che è un JavaScript che dice: faremo un ciclo.

02:53.890 --> 02:59.200
Ora in questo ciclo la prima cosa che faremo è dire: 'io' è uguale a '0'.

02:59.200 --> 03:01.220
Quindi solo una variabile casuale 'i'

03:01.300 --> 03:04.840
è: è comune essere usata in un ciclo 'for' - sta per 'indice'.

03:04.840 --> 03:07.080
Quindi 'i' inizia con '0'.

03:07.090 --> 03:13.670
Abbiamo un punto e virgola, il che significa che è la fine dell'espressione, abbiamo appena assegnato alla variabile 'i' lo '0'

03:14.330 --> 03:18.840
e quindi nella riga successiva dice: 'i', che è in questo momento '0'.

03:19.160 --> 03:27.150
Se quello è inferiore alla lunghezza di 'todos' e 'todos. lunghezza "- non l'abbiamo mai visto prima.

03:29.360 --> 03:32.050
Ma sta dicendo: quanto dura l'elenco?

03:32.060 --> 03:40.350
In questo caso '1, 2, 3, 4, 5'. Quindi '0' è maggiore di (* minore di) '5'.

03:40.530 --> 03:44.040
In tal caso, esegui questo ciclo.

03:44.280 --> 03:51.800
E quando hai finito, fai "i ++", che significa "i" più "1".

03:51.820 --> 03:53.620
Quindi passiamo attraverso quello.

03:53.620 --> 04:06.760
Prima di tutto 'todos. lenth'. se vado, se copio questo, faccio 'todos. lunghezza "- Ottengo" 5 ", cinque elementi.

04:06.870 --> 04:07.940
Posso

04:08.070 --> 04:14.060
anche fare "helllooo". lunghezza "e ottengo" 8 ".

04:14.070 --> 04:22.730
Quindi 1, 2, 3, 4, 5, 6, 7, 8. Quindi 'lunghezza' ci dice solo quanti elementi nella lista.

04:22.720 --> 04:26.390
E se faccio la variabile 'i' è uguale a '0'.

04:27.620 --> 04:28.700
Bene, "i" è "0".

04:28.710 --> 04:39.700
Ma se faccio 'i ++' e guardo di nuovo 'i', vedo che è '1'. Se faccio di nuovo 'i ++', bene ottengo '2'.

04:39.740 --> 04:43.010
Quindi questo sta incrementando 'i'.

04:43.100 --> 04:48.850
Quindi quello che stiamo facendo è dire: inizia con '0' e finché 'i'

04:48.890 --> 04:54.120
è inferiore a '5', quindi esegui qualsiasi cosa in questo blocco.

04:54.140 --> 04:57.880
E una volta terminato, aggiungi '1' a 'i'.

04:57.950 --> 05:01.980
Quindi vediamo cosa succede se lo faccio 'console. log'.

05:02.390 --> 05:10.130
'io' qui. Salviamo e aggiorniamo. '0', '1', '2', '3', '4'.

05:10.320 --> 05:13.570
Quindi, stiamo facendo un ciclo, dove inizia con '0'.

05:13.740 --> 05:15.370
Quindi aggiungiamo '1'.

05:15.450 --> 05:21.990
Ora è "1". Quindi aggiungiamo un altro '1' a '2', un altro '1' a '3' e un

05:21.990 --> 05:31.890
altro '1' a '4', e come mai non abbiamo '5' qui perché, non appena 'i 'uguale a 5' che corrisponderà al 'todos. lunghezza "e il ciclo si interrompe.

05:31.920 --> 05:36.780
Quindi è così che diciamo al loop di fermarsi. OK.

05:36.990 --> 05:44.290
Quindi, come possiamo fare questo: se volessimo aggiungere un punto esclamativo alla fine di questi?

05:44.310 --> 05:47.250
Bene, possiamo accedere a 'todos'

05:50.430 --> 05:58.840
da - perché è un array, da 'i'. Poiché il primo va in giro, 'i' sarà '0', che dovrebbe essere "clean room".

05:58.920 --> 06:05.550
Quindi "1" che è "lavarsi i denti", quindi "2" che è "esercizio", "3" che è "studiare javascript" e

06:05.550 --> 06:07.420
4 che è "mangiare sano".

06:07.540 --> 06:14.620
Quindi, ricontrolliamolo. Se faccio 'todos [i]' e salvo. Aggiorna e dovrei cambiarlo di nuovo in 'i'.

06:14.670 --> 06:16.220
Ecco qua

06:16.310 --> 06:25.220
Altrimenti se lo faccio, questo in realtà non funzionerà, guarda questo. Perché, beh, questo è '5' equivale a '5', quindi non lo farà

06:25.220 --> 06:27.570
mai, non lo attraverserà mai.

06:27.770 --> 06:29.090
Quindi torniamo a 'i'.

06:29.210 --> 06:34.290
E aggiorna: "clean room", "lavarsi i denti", "esercizio", "studiare javascript", "mangiare sano".

06:34.310 --> 06:35.050
Perfezionare.

06:35.060 --> 06:45.850
Quindi, ora posso solo fare '[i] + "! "'Rinfresciamo.

06:45.850 --> 06:45.850
Guarda quello!

06:46.090 --> 06:47.630
Ecco quanto sono importanti questi articoli.

06:47.740 --> 06:59.740
Ma se faccio "todo" - o "todos". Bene, i miei "todos" in realtà non hanno questo punto esclamativo che li abbiamo appena registrati, ma

06:59.740 --> 07:02.990
in realtà non abbiamo cambiato quel "todo", giusto?

07:03.190 --> 07:06.800
Quindi facciamolo.

07:06.970 --> 07:22.090
Ora possiamo dire che 'todos [i] = todos [i] + "! "'.

07:22.110 --> 07:23.020
Quindi vediamo.

07:23.020 --> 07:24.570
Io aggiorno.

07:24.570 --> 07:25.330
Non succede nulla.

07:25.330 --> 07:26.760
Ma ora se controllo "todos" ...

07:29.490 --> 07:33.540
Guarda quello! Ho dei punti esclamativi in ciascuno dei miei "todos".

07:34.140 --> 07:45.620
E ancora, per scomporlo, stiamo dicendo "stanza pulita" ora equivale a "stanza pulita" più punto esclamativo.

07:45.620 --> 07:46.620
Molto bello.

07:47.060 --> 07:47.580
OK.

07:47.720 --> 07:51.060
Impariamo alcuni altri - in realtà prima di farlo, cosa succede

07:51.290 --> 07:57.620
se vogliamo cancellare questi dalla lista. Forse vogliamo eliminarli, perché li abbiamo fatti. Bene, possiamo fare qualcosa

07:58.130 --> 08:01.460
come 'todos [i]. pop'.

08:01.490 --> 08:06.140
Se ricordi, questo è un metodo "pop" che rimuove l'ultimo elemento.

08:06.350 --> 08:14.870
Quindi, se vado, salva e aggiorna, ottengo 'todos [i]. pop non è una funzione '.

08:14.870 --> 08:15.540
Perché?

08:15.560 --> 08:20.070
Bene, perché stiamo dicendo "clean room" - "pop".

08:20.100 --> 08:21.820
E questa è una "stringa".

08:22.290 --> 08:27.990
Quello che vogliamo fare è 'todos. pop ", perché questo è il" array ".

08:28.350 --> 08:34.230
Quindi, se lo salvo e lo aggiorno, vediamo cosa abbiamo nel nostro "todos":

08:35.880 --> 08:38.920
"clean room" e "lavarsi i denti".

08:38.930 --> 08:39.510
Hmm.

08:39.630 --> 08:40.740
Perché?

08:41.160 --> 08:46.820
Bene, perché inizialmente era "0".

08:47.060 --> 08:50.290
E la lunghezza dell'elenco "todos" era "5".

08:50.600 --> 08:59.770
Ma poi perché l'abbiamo fatto scattare, questo è cambiato in '4' e questo in 'uno', e quindi '3' e '2'.

09:00.050 --> 09:05.910
Quindi, come puoi vedere, abbiamo rimosso "mangia sano", "studia javascript" ed "esercizio".

09:05.930 --> 09:12.270
Ma poiché il nostro decimo "todos" è cambiato, beh, si è fermato a metà.

09:12.310 --> 09:16.080
Quindi qual è un modo in cui possiamo risolvere quel problema?

09:17.630 --> 09:29.360
Bene, possiamo fare variabili 'todos'. lunghezza 'uguale' todos. lunghezza'.

09:29.650 --> 09:32.020
Quindi ora questa variabile è '5'.

09:32.140 --> 09:42.680
Quindi, se faccio solo variabili 'todos. lenth '- questo lo ricorderà, perché funzionerà solo una volta, andrà

09:42.680 --> 09:43.580
...

09:43.730 --> 09:48.370
Questo funzionerà, quindi assegneremo '5' a 'todos. lunghezza'.

09:48.560 --> 09:51.370
E poi questo si ripeterà.

09:51.400 --> 09:59.940
Quindi, se lo salvo e lo aggiorno, diamo un'occhiata a "todos". Guarda quello! Abbiamo finito tutti i nostri "todos"!

10:00.070 --> 10:00.790
Molto bello.

10:01.430 --> 10:11.230
Bene, lascia che ti mostri un'altra opzione, che è il ciclo "while". Il ciclo 'while' va in questo modo.

10:15.250 --> 10:22.910
'while', - creiamo una variabile qui. Variabile 'counter'

10:23.090 --> 10:36.160
'counterOne' Diremo che è '0'. E diremo: "mentre counterOne è inferiore a 10".

10:36.300 --> 10:39.810
In tal caso, voglio "consolare". log

10:43.000 --> 10:50.590
'' counterOne '. E poi voglio "counterOne" plus, plus.

10:50.640 --> 10:53.010
Ricorda che stiamo facendo, stiamo aggiungendo.

10:53.430 --> 10:58.800
Quindi ogni volta che aumentiamo 'counter' di '1'. Vediamo cosa succede qui.

10:58.800 --> 11:09.330
Se lo salvo e aggiorno: "0, 1, 2, 3, 4, 5, 6, 7, 8, 9" e poi si interrompe, perché, non appena questo è '10', non è

11:10.330 --> 11:11.500
più giusto .

11:11.500 --> 11:14.530
Quindi questa parte del blocco non funziona.

11:17.820 --> 11:18.260
OK.

11:18.420 --> 11:29.200
Posso fare qualcosa ... può essere... viceversa? Dove diciamo che il "contatore" è "10" e questa volta vogliamo fare

11:29.200 --> 11:30.180
il conto alla rovescia.

11:30.520 --> 11:38.940
Quindi, mentre il contatore è '10', continua, e altrimenti, fermati. E il modo in cui lo facciamo, ovviamente vogliamo

11:39.210 --> 11:39.780
sottrarre.

11:39.780 --> 11:43.900
Non vogliamo continuare ad andare "11" o "12", perché altrimenti continuerà per sempre.

11:44.070 --> 11:47.570
Il modo in cui lo facciamo è - meno, meno, che è esattamente l'opposto.

11:47.580 --> 11:49.190
Quindi sottrae '1'.

11:49.620 --> 11:50.810
Vediamo cosa succede.

11:52.610 --> 11:56.410
'10, 9, 8, 7, 6, 5, 4, 3, 2, 1 '.

11:56.420 --> 11:57.830
Ecco qua

11:57.890 --> 12:05.300
Ora per curiosità cosa accadrà se vado in questo modo, dove il numero continua ad aumentare

12:05.330 --> 12:08.560
da "10" a "11", fino all'infinito.

12:08.590 --> 12:08.890
Destra?

12:08.900 --> 12:16.800
Continuerà a salire e, se lo desideri, puoi farlo in Google Chrome.

12:16.880 --> 12:19.950
In realtà è piuttosto divertente.

12:19.970 --> 12:27.170
Quello che succede è che continua ad andare sempre e per sempre. Avrai solo un elenco di tutte queste cose e si

12:27.260 --> 12:34.460
chiama così in un "ciclo infinito". Un "ciclo infinito" significa che va praticamente all'infinito. Solo che non lo

12:34.460 --> 12:38.910
è, perché alla fine Google Chrome andrà in crash.

12:38.990 --> 12:42.440
Dirà: "Ehi, non posso gestire tutte queste informazioni.

12:42.440 --> 12:45.630
Mi stai facendo impazzire. "e smetterà di funzionare.

12:46.640 --> 12:47.040
OK.

12:47.120 --> 12:49.930
Quindi abbiamo imparato il 'for loop'.

12:50.060 --> 12:52.700
Abbiamo imparato il "mentre". Cos'altro abbiamo?

12:52.700 --> 12:55.630
Abbiamo il "fare".

12:55.790 --> 13:07.470
Quindi, questo è chiamato il ciclo 'do while' ed è un po 'diverso' the while '. Iniziamo con "do".

13:07.750 --> 13:19.070
Quindi parentesi graffe e diciamo 'contatore' ... chiamiamo "counterTwo" questa volta. Farò variabile 'counterTwo' uguale

13:19.910 --> 13:25.860
a '10'. E fai "counterTwo", più, più.

13:25.930 --> 13:27.180
Quindi aggiungi "counterTwo".

13:27.640 --> 13:32.850
E 'anche console. log (counter Two) '.

13:33.130 --> 13:41.440
E vogliamo spostare la console. log "in alto, perché in questo modo inizierò con" 10 ", quindi aumenterò - oops ...

13:41.490 --> 13:43.450
Questo dovrebbe essere sottratto.

13:43.530 --> 13:45.700
Quindi facciamo '10'.

13:45.790 --> 13:49.710
È un po 'come' 10 ', quindi sottrarrà. Quindi la prossima volta che verrà

13:49.710 --> 13:50.980
qui, sarà "9".

13:51.480 --> 13:55.650
E poi facciamo 'while', e diamo una condizione qui.

13:55.650 --> 14:04.890
Quindi le condizioni saranno "counterTwo", sarà maggiore di "0".

14:05.240 --> 14:05.520
OK.

14:05.530 --> 14:08.910
Quindi vediamo cosa succede qui.

14:08.990 --> 14:13.960
Aggiornamento: '10, 9, 8, 7, 6, 5, 4, 3, 2, 1 '.

14:14.310 --> 14:21.580
Hmmm, sembra che abbiamo appena fatto la stessa cosa del "while loop", vero?

14:21.580 --> 14:24.060
Quindi fammi provare.

14:24.070 --> 14:27.240
Rinfresciamo qui.

14:27.470 --> 14:35.120
E vediamo che abbiamo da '10' a '1' per il ciclo while e da '10' a '1' attraverso il ciclo 'do while'.

14:35.120 --> 14:37.490
Quindi qual è la differenza qui?

14:37.760 --> 14:44.930
La differenza è che con un ciclo 'while' controlliamo prima la condizione, quindi diciamo: "CounterOne è maggiore di

14:44.930 --> 14:45.500
'0'?

14:45.550 --> 14:53.960
OK. Quindi fai queste cose. "Contro il ciclo" do while ", che dice:" Prima fai le cose e poi fai "counterTwo". "Vorrei

14:54.110 --> 14:57.500
solo dimostrare questo punto.

14:57.570 --> 15:07.530
Se lo facciamo ... '10' qui. E '10'. Rinfresciamo.

15:07.750 --> 15:09.200
Ottengo solo "1".

15:09.210 --> 15:11.430
Hmm ... Controlliamo qualcosa qui.

15:11.510 --> 15:24.330
Sto per dire che questo è il ciclo 'while' e questo è il ciclo 'do while'. Salva e aggiorna. Quindi sembra che il 'do while'

15:24.330 --> 15:26.530
sia corso.

15:26.910 --> 15:32.520
Ma il ciclo 'while' non l'ha mai fatto, perché. Bene, '10' equivale a '10'.

15:32.700 --> 15:40.770
Questo non riesce e il ciclo non viene eseguito. Contro il ciclo 'do while', che fa prima questo e poi controlla la

15:40.770 --> 15:42.670
condizione, se dovrebbero fare un ciclo.

15:42.810 --> 15:51.180
Quindi questa è la differenza tra questi due. Ma ad essere sincero con te, la maggior parte

15:51.180 --> 16:00.530
delle volte utilizzerai un ciclo "for". E il ciclo 'for' è quello a cui ti abituerai. Ma in realtà esiste un modo

16:00.530 --> 16:02.530
migliore per farlo.

16:02.720 --> 16:08.990
Se guardi il 'SectionOutline', vediamo che ne ho un ultimo, che è 'forOach' e dice "nuovo

16:08.990 --> 16:10.590
in ECMAScript 5".

16:10.880 --> 16:19.070
Quindi, come ricordi, JavaScript è in continua evoluzione e ECMAScript 5 era un nuovo standard, che

16:19.230 --> 16:25.170
ha aggiunto il metodo "forEach". Quindi, qual è il metodo 'forEach'?

16:25.180 --> 16:29.190
Bene, ti mostrerò la differenza tra un ciclo 'for' e un 'forEach'.

16:29.190 --> 16:30.920
Entrambi fanno la stessa cosa.

16:31.110 --> 16:34.620
Ma dimmi quale sembra migliore.

16:34.710 --> 16:42.490
Quindi, bene qui diremo 'console. log (i) 'Quindi stiamo solo

16:43.640 --> 16:54.010
registrando' i '. E con un ciclo "forEach" posso fare "todos". forOach 'function' i ','

16:55.110 --> 16:58.260
console. log (i)'.

16:58.560 --> 17:04.270
Il mio aspetto è un po 'confuso, ma proviamolo e vediamo cosa succede.

17:04.880 --> 17:16.160
Quindi sembra che una riga "10" stia stampando su "0, 1, 2, 3, 4" e la riga "14" stia stampando "stanza libera, lavarsi i

17:16.170 --> 17:17.950
denti, esercitarsi, studiare javascript,

17:17.950 --> 17:19.090
mangiare sano".

17:19.090 --> 17:20.480
Che ci facciamo qui?

17:20.480 --> 17:22.220
Bene, "forEach"

17:22.430 --> 17:24.190
Ci vuole un array.

17:24.190 --> 17:31.530
In questo caso il "todos", e chiede un argomento, vale a dire "dimmi cosa farne".

17:33.030 --> 17:41.820
Quindi, l'azione che vogliamo eseguire sui "todos" può essere rappresentata in una funzione.

17:41.870 --> 17:52.330
Quindi dico "funzione" e questa funzione riceve l'argomento di "i", ovvero ogni singolo elemento nel

17:52.330 --> 17:53.170
"todos".

17:53.530 --> 18:02.750
Quindi, potrei semplicemente dire "todo" qui e "todo". E aggiorna e sarà sempre lo stesso.

18:02.770 --> 18:12.030
Quindi, vedi qui che non stiamo necessariamente accedendo all'indice come siamo con questo, perché qui per ottenere i

18:12.030 --> 18:21.600
"todos" che dovevo fare, "todos [i]". Se aggiorno. OK.

18:21.710 --> 18:24.440
In quel caso ora è tutto uguale.

18:24.910 --> 18:29.190
OK, ma come posso accedere all'indice all'interno di "forEach"?

18:29.570 --> 18:38.860
Bene, il secondo parametro. E il secondo argomento che riceve è la 'i', l'indice.

18:38.870 --> 18:52.260
Quindi, ora se faccio 'i' e aggiorno: '0, 1, 2, 3, 4'. Quindi è la stessa cosa che sta facendo questo nel ciclo 'for'. E mi

18:52.980 --> 19:03.710
aggiorno e lo guardo. Ora guardando questi 2 quale ti dice di più su ciò che fa?

19:04.850 --> 19:06.670
Questo o questo?

19:06.710 --> 19:17.490
Leggiamolo in inglese: 'todos. Ogni "esegui una funzione, quella" console registra "quel" todo "e l '"

19:18.520 --> 19:19.720
indice "Versus

19:20.130 --> 19:22.520
Bene, francamente questo sembra confuso.

19:23.460 --> 19:28.860
Quindi, "forEach" è un metodo davvero eccezionale che hanno aggiunto al linguaggio, il che semplifica davvero

19:28.860 --> 19:29.700
le cose.

19:29.700 --> 19:31.930
Molte persone potrebbero essere

19:31.920 --> 19:37.610
confuse da questa parte della funzione. Ma voglio solo mostrarti quanto è potente 'forEach' che possiamo effettivamente fare.

19:37.650 --> 19:45.760
Ho intenzione di eliminare la funzione e la chiamerò "logTodos".

19:46.010 --> 19:59.390
E ora tutto ciò che devo fare è: avere una funzione e chiamarla "logTodos".

19:59.570 --> 20:02.340
E ora lo commenterò.

20:02.630 --> 20:09.330
Farà esattamente la stessa cosa, ma ora posso usare 'logTodos' in altri posti.

20:10.260 --> 20:23.300
Quindi, ora posso farlo - diciamo, ho un altro elenco, che ha forse punti esclamativi, come abbiamo fatto nel primo.

20:26.340 --> 20:28.760
'TodosImportant'.

20:30.780 --> 20:47.700
Quindi, ora posso fare 'todosImportant. forOach 'e utilizzare la stessa funzione' logTodos '. Salvo e aggiorno. E guarda quello!

20:47.700 --> 20:47.700
Abbiamo anche questi da usare.

20:47.740 --> 20:51.280
Quindi puoi vedere che è molto estensibile.

20:51.300 --> 20:56.830
Ora l'unico avvertimento che voglio mostrarti con 'forEach' è che è un nuovo standard.

20:56.910 --> 21:01.590
Come facciamo con tutti i nuovi standard, dovremmo verificare che funzionino su tutti i browser.

21:01.590 --> 21:08.070
Quindi, se ricordi, abbiamo avuto "caniuse". com ', che usiamo per questo. E lo usiamo in

21:08.100 --> 21:15.390
CSS per assicurarci che le nostre funzionalità CSS3, come 'boxshadow' e 'transitions', funzionino su tutti i browser.

21:15.420 --> 21:23.410
Quindi facciamolo. Facciamo "foreach" e vedrai qui "ECMAScript5" - "foreach".

21:23.600 --> 21:27.500
Sembra, beh, pieno supporto!

21:27.770 --> 21:29.160
Sembra tutto a posto.

21:29.420 --> 21:33.840
Abbiamo solo Opera Mini, che ha un supporto parziale.

21:33.980 --> 21:41.460
Quindi, sembra abbastanza buono. A meno che non siamo davvero preoccupati per Opera Mini. Possiamo usare 'foreach' nel browser.

21:41.530 --> 21:54.460
E solo per testare se apriamo la nostra console, beh, possiamo sicuramente vedere che un array ha "forEach".

21:54.540 --> 21:56.920
Così il gioco è fatto.

21:57.060 --> 22:07.630
Avevamo il ciclo "for", il ciclo "while", il ciclo "do while" e infine "forEach". E il prossimo video che espanderemo sul nostro esempio di

22:07.630 --> 22:14.320
Facebook e avremo più utenti. In modo che possiamo scorrere il database di

22:14.410 --> 22:19.830
più utenti e vedere se "nome utente" e "password" corrispondono a uno di questi.

22:20.080 --> 22:21.640
Ci vediamo nel prossimo. Ciao ciao
