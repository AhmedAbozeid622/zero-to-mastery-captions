WEBVTT

00:01.000 --> 00:06.710
Ben tornato! Le funzioni sono la parte più difficile di JavaScript.

00:07.140 --> 00:11.380
E ci vorrà del tempo per ottenerlo completamente. Tuttavia, in questo

00:11.480 --> 00:13.810
video proveremo a farlo.

00:13.880 --> 00:18.020
Impareremo le funzioni JavaScript.

00:18.030 --> 00:21.710
Quindi, cominciamo con "Che cosa sono le funzioni? "Beh, sono pezzi

00:22.640 --> 00:28.040
di codice, che eseguono azioni. Senza funzioni JavaScript non

00:28.040 --> 00:30.730
farebbe davvero nulla.

00:30.740 --> 00:40.340
Il bello è che le funzioni possono eseguire un'azione o più azioni. Ma torneremo a quello. Innanzitutto, parliamo di come

00:40.390 --> 00:45.560
già conosci alcune funzioni JavaScript senza nemmeno accorgertene.

00:45.640 --> 00:47.250
Li hai già visti.

00:47.300 --> 00:53.160
'alert' - questa è una funzione. 'prompt' - questa è

00:56.130 --> 00:57.970
una funzione.

00:58.150 --> 00:59.350
Hai visto questi prima.

01:00.240 --> 01:07.500
Quindi, JavaScript ci fornisce alcune funzioni, che sono davvero molto utili, in modo che chiunque scriva

01:07.500 --> 01:12.380
JavaScript, possa usarle senza doverle scrivere più e più volte.

01:12.430 --> 01:15.700
Quindi con le funzioni abbiamo 2 opzioni.

01:15.830 --> 01:20.990
Uno: sta utilizzando le funzioni JavaScript esistenti, come "avviso" e "prompt".

01:21.980 --> 01:25.880
E due: possiamo crearne uno nostro.

01:25.880 --> 01:32.900
Quindi, prima di entrare nel modo in cui creiamo le nostre funzioni e ciò che è così utile su di esse, potresti aver

01:32.900 --> 01:37.920
notato - notato una cosa: queste parentesi, che sono proprio l'una accanto all'altra con funzioni.

01:37.940 --> 01:45.800
Cosa vogliono dire? Bene, ciò in JavaScript significa eseguire la funzione.

01:46.840 --> 01:52.750
Quindi, vediamo se succede, quando digito 'alert' e premo 'enter'.

01:52.810 --> 02:01.540
Ottengo "f alert ()" e alcune cose strane. Hmmm, 'f' qui sta per funzione e può vedere quando ci passo

02:01.540 --> 02:01.990
sopra.

02:01.990 --> 02:04.450
Dice 'function alert ()'.

02:04.450 --> 02:08.060
Ecco cosa significa eseguire una funzione:

02:08.080 --> 02:08.960
per

02:09.010 --> 02:13.090
eseguire 'alert ()' la eseguo chiamandola così

02:15.010 --> 02:23.330
['alert ()'] Quindi, queste parentesi significano 'chiamare una funzione', così posso chiamare una funzione.

02:23.490 --> 02:28.580
E hai anche notato che in 'alert' posso aggiungere

02:29.050 --> 02:33.800
cose come "ciao! "Questi sono tutti chiamati" argomenti "e

02:33.910 --> 02:42.190
lo so, sto lanciando un sacco di gergo, un mucchio di parole verso di te, ma queste sono solo cose che sentirai

02:42.190 --> 02:44.670
più volte, quando sei uno sviluppatore,

02:44.710 --> 02:51.490
e si attaccheranno a te - non sarà la prima volta, ma, come ho detto, prova solo ad

02:51.700 --> 02:53.990
arrivarci un passo alla volta.

02:54.010 --> 02:58.630
Quindi "argomenti" sono ciò che viene dato alle funzioni.

02:58.840 --> 03:03.880
Ad esempio, quando l'abbiamo fatto, nel nostro esempio qui.

03:03.970 --> 03:13.190
"Ciaooooo" e la 'console. log "era un" argomento ". E la cosa interessante è che puoi avere più argomenti:

03:13.200 --> 03:19.820
ad esempio, se ho rimosso questo e ho solo, abbiamo solo 'console. accedi "per ora.

03:20.190 --> 03:24.690
Posso fare "Come stai".

03:24.700 --> 03:27.950
Salvo e aggiorno e ottengo.

03:27.950 --> 03:29.150
"Ciao come stai".

03:29.210 --> 03:37.800
Vedi, posso avere più argomenti, ma solo aggiungendo una virgola. Ma di nuovo, ciò dipende dalla funzione.

03:37.810 --> 03:47.870
Ora, ancora prima di iniziare a creare il nostro, passiamo in rassegna. 'alert' è una funzione, 'alert' tra parentesi,

03:47.960 --> 03:56.220
sto chiamando la funzione 'alert' e sto chiamando la funzione 'alert' con

03:56.400 --> 03:59.910
l'argomento 'Hi'. 'alert' deve essere

04:00.090 --> 04:02.460
chiamato, altrimenti è semplicemente seduto lì.

04:03.900 --> 04:08.880
Ora il grande motivo per usare la funzione è che puoi chiamarli tutte le volte che vuoi.

04:08.970 --> 04:19.080
Pensa a "allerta", immagina di dover dire ogni volta "Ehi, computer, crea questa finestra" pop-up "e stampa ogni argomento che ho

04:19.080 --> 04:21.090
inserito" ogni volta.

04:21.270 --> 04:27.540
Voglio dire, farebbe davvero schifo. Non è carino, che possiamo semplicemente chiamare 'alert' e quella finestra pop-up si

04:27.540 --> 04:29.770
apre per noi e tutto è fatto per te?

04:29.780 --> 04:32.010
Bene, questo è praticamente ciò che fanno le funzioni.

04:32.010 --> 04:39.810
Semplificano la vita avendo azioni, raggruppate, quindi le scrivi solo una volta e poi puoi

04:39.810 --> 04:41.450
semplicemente chiamarle.

04:41.480 --> 04:43.480
OK. Quindi andiamo alla parte divertente.

04:43.490 --> 04:54.970
Creiamo le nostre funzioni. Quindi, se torniamo al nostro documento qui, vediamo qui. Abbiamo 2 modi per creare

04:54.970 --> 05:00.180
funzioni e ti mostrerò il primo modo.

05:00.340 --> 05:01.980
In realtà, ti mostrerò prima questo.

05:02.200 --> 05:08.970
Quindi, creiamo la nostra funzione, usando il primo metodo, che è "dichiarazione di funzione".

05:09.310 --> 05:17.780
E useremo il nostro 'script. js 'qui, che è collegato al nostro HTML, che abbiamo fatto nel video precedente.

05:17.930 --> 05:23.840
Quindi, qui posso dire 'function sayHello ()' is

05:27.960 --> 05:30.510
'console. log ( "Ciao")'.

05:35.380 --> 05:38.700
Ancora una volta la sintassi è un po 'diversa, ma devi solo ricordarla.

05:38.800 --> 05:41.850
Sto dicendo 'funzione' - si chiamerà 'sayHello'.

05:42.070 --> 05:49.150
Abbiamo quelle parentesi che ci sono molto familiari. E poi 'console. log ( "Ciao");'. Vediamo cosa

05:49.150 --> 05:53.480
succede quando salvo. Io aggiorno.

05:53.830 --> 05:54.860
Hmmm, non succede nulla.

05:55.980 --> 05:56.920
Perché?

05:57.240 --> 06:00.530
Bene, abbiamo dichiarato questa funzione.

06:00.540 --> 06:09.430
Ma ricorda, cosa abbiamo fatto con "alert"? Bene, esiste, ma non l'abbiamo eseguito.

06:09.480 --> 06:16.170
Dobbiamo chiamare la funzione, quindi dobbiamo dire 'saluta', in questo modo. Ora quando mi aggiorno.

06:16.740 --> 06:19.430
Ottengo "Ciao".

06:19.570 --> 06:25.610
Quindi pensaci con la variabile. Quando dico 'var a equivale a 5',

06:25.720 --> 06:29.260
questo non farà nulla, finché non avremo effettivamente la 'a'.

06:29.560 --> 06:34.120
Ed è allora che stampa '5'.

06:34.130 --> 06:36.500
OK. Quindi è un modo.

06:36.510 --> 06:39.060
Qual è il secondo modo di creare una funzione?

06:39.270 --> 06:45.150
Il secondo modo è chiamato "espressione di funzione".

06:45.340 --> 06:47.900
E questo va così.

06:48.130 --> 07:01.430
Posso dire 'var sayBye = function ()' 'console. log ( "Ciao");'.

07:02.300 --> 07:05.620
Ancora una volta lo salverò e aggiornerò.

07:05.810 --> 07:11.660
E di nuovo riceviamo solo 'Hello' perché, beh, di nuovo dobbiamo chiamare quella funzione.

07:11.720 --> 07:20.560
Quindi, dico "sayBye", eseguilo e aggiorna. "Ciao ciao". Ora una cosa che potresti

07:20.640 --> 07:30.040
aver notato qui è che stiamo assegnando questa funzione alla variabile 'sayBye', ma qual è il

07:30.940 --> 07:33.240
nome della funzione?

07:33.250 --> 07:40.520
Voglio dire che qui chiaramente il nome della funzione è 'sayHello', ma qui siamo, stiamo solo assegnando alla variabile.

07:40.520 --> 07:48.230
Voglio dire, tecnicamente la funzione non ha un nome e questa si chiama "funzione anonima".

07:48.360 --> 07:54.480
Abbiamo assegnato questa funzione a 'sayBye', quindi possiamo fare riferimento a 'sayBye', ma per il resto non possiamo

07:54.480 --> 07:56.350
davvero accedere a questa funzione.

07:56.640 --> 07:59.880
Bene, vedrai perché è importante nei

07:59.940 --> 08:01.500
video successivi.

08:01.500 --> 08:06.770
Ma potresti tecnicamente farlo: e chiamare questa funzione 'arrivederci'.

08:13.110 --> 08:13.760
OK.

08:14.050 --> 08:20.560
Quindi, ora che sappiamo, come creare funzioni, perché abbiamo bisogno di questi argomenti?

08:20.830 --> 08:23.740
Ricorda, perché abbiamo bisogno di cose all'interno delle parentesi?

08:23.740 --> 08:26.660
Voglio dire, sembrano abbastanza utili, giusto?

08:27.630 --> 08:40.090
Bene, proviamo qualcosa. 'cantare', facciamo una funzione 'cantare' e questo 'cantare' avrà, avrà 'console. log 'e dirò

08:40.120 --> 08:46.220
"AHHHHHHHHHHHH". Sono io che canto.

08:46.230 --> 08:51.550
E ha anche 'console. log ( "TEEEEEEEEE")'.

08:52.030 --> 09:00.390
È così che canto. Ora, se lo salvo e lo aggiorno, assicurati che canti ancora. Oh, devo chiamarlo!

09:03.440 --> 09:04.920
Rinfresciamo.

09:05.040 --> 09:07.410
Bellissima canzone: AHHHHHHHHHHHH, TEEEEEEEEE.

09:07.680 --> 09:18.530
Ma ora, ogni volta che voglio passare a una canzone diversa, forse volevo dire "laaa deeee daaa".

09:18.660 --> 09:31.840
Bene, devo eliminare questo e cambiarlo in "laaa deeee daaa" oppure devo

09:32.260 --> 09:33.640
crearne

09:36.310 --> 09:50.750
uno nuovo, chiamando la console "sing2". log 'e puoi vedere qui, quanto è fastidioso, che sto scrivendo sempre la stessa cosa e

09:51.020 --> 09:52.710
cambiando queste cose.

09:52.910 --> 10:00.090
E ora devo eseguire "sing2". E aggiorno, e accidenti, è stato stancante! OK.

10:00.460 --> 10:07.600
Ho fatto tutto questo e ora immagino, se avessimo migliaia di canzoni, che vogliamo cantare; siamo "Spotify" e vogliamo

10:07.600 --> 10:10.330
mostrare tutti i testi delle canzoni.

10:10.330 --> 10:13.210
Voglio dire, è piuttosto faticoso, vero?

10:13.210 --> 10:18.680
E una delle regole con gli sviluppatori è questa idea di "DRY: non ripetere te stesso".

10:18.730 --> 10:21.790
Idealmente, vuoi rendere le cose il più efficienti possibile.

10:22.000 --> 10:34.820
E una cosa che puoi fare è - aggiungendo argomenti. Quindi posso aggiungere qualcosa come 'canzone' e ora - lasciami eliminare questo

10:34.820 --> 10:35.970
per ora.

10:37.720 --> 10:46.670
Nella 'console. registro 'Posso solo dire' canzone '.

10:46.820 --> 11:01.190
Quindi ora ogni volta che voglio cambiare la canzone, posso dire "Laaa deee daaa". 'cantare ("helllloooooo") Quindi "cantare (" backstreets

11:02.140 --> 11:08.990
back ok ") Ora salvo e

11:11.770 --> 11:14.470
aggiorno.

11:14.500 --> 11:23.060
E guarda quello! Vedi quante righe di codice abbiamo appena salvato e come posso ora usare 'canta'

11:23.330 --> 11:26.600
ogni volta che voglio, e posso personalizzarlo come voglio.

11:26.600 --> 11:28.050
Un po 'come "allerta".

11:28.130 --> 11:30.570
Ecco cosa fanno gli argomenti.

11:30.830 --> 11:37.790
Gli argomenti ci consentono di non ripeterci e di rendere le nostre funzioni più estensibili.

11:37.790 --> 11:40.530
Possono essere personalizzati.

11:40.590 --> 11:44.860
Facciamo un'altra cosa per imparare una cosa divertente sulle funzioni.

11:44.970 --> 11:57.450
Lo elimineremo e proveremo 'function multiply ()'. E gli daremo 'a' e 'b', quindi accetterà due argomenti

11:57.450 --> 12:01.330
e faremo 'a * b'.

12:01.710 --> 12:15.320
E ora all'interno di 'a * b' diremo 'moltiplica' e chiameremo 'moltiplica (5, 10)'. Salva e aggiorna.

12:15.460 --> 12:18.890
E ora dovremmo avere "moltiplicare" a nostra disposizione.

12:18.910 --> 12:24.570
Puoi vedere qui 'moltiplica (a, b)' che è 'b' esattamente quello che abbiamo scritto.

12:24.600 --> 12:27.370
OK, quindi cosa succede se

12:29.630 --> 12:32.020
faccio 'moltiplicare' (5, 10)?

12:32.480 --> 12:33.410
Cosa pensi che avrò?

12:33.560 --> 12:33.910
Vediamo!

12:37.980 --> 12:39.770
Hmmm, è davvero strano.

12:39.780 --> 12:42.340
Proviamo di nuovo con un numero diverso.

12:42.370 --> 12:44.180
Ancora "indefinito".

12:44.380 --> 12:47.530
Perché? Bene, questo si chiama debug.

12:47.530 --> 12:50.680
Vediamo se riusciamo a capire cosa sta succedendo qui.

12:50.680 --> 12:53.580
Ho intenzione di fare un 'console. accedi "qui.

12:54.490 --> 12:59.050
E disconnetterò 'a' e 'b' per assicurarmi che questa funzione sia effettivamente in esecuzione.

12:59.210 --> 13:11.600
Quindi ho intenzione di salvare e aggiornare. OK. 'Console. registro ',' a 'e' b 'e ho appena eseguito nuovamente la funzione.

13:11.660 --> 13:17.610
'Console. log'. OK. Quindi sembra che stia funzionando, ma poi sto diventando 'indefinito' qui.

13:17.770 --> 13:23.440
Bene, posso mostrartelo in un diagramma.

13:23.440 --> 13:27.270
Quindi, una funzione è un "input".

13:27.330 --> 13:32.270
Gli diamo una sorta di "input", forse a volte è vuoto, quindi è tutto ciò che c'è tra parentesi.

13:32.460 --> 13:34.900
Nel nostro caso è "a" e "b".

13:35.010 --> 13:42.790
Quindi quelli sono numeri, quindi '5' e '10'. E poi la funzione fa qualunque cosa le diciamo di fare.

13:42.790 --> 13:51.550
Nel nostro caso era "moltiplicare 5 e 10". E poi otteniamo un 'output', ma non stiamo ottenendo quel 'output'.

13:51.550 --> 13:52.280
Perché?

13:52.350 --> 13:56.270
Bene, perché una funzione funziona in questo modo.

13:56.650 --> 14:01.450
E non preoccuparti, ho appena aggiunto un mucchio di frecce, ma esaminerò tutto e te lo spiegherò.

14:01.450 --> 14:03.400
L '"input" sta ricevendo "5" e "10".

14:03.400 --> 14:11.950
La funzione fa alcune cose, e fino a questo punto abbiamo fatto solo console. log "e il modo" console. log 'funziona, la

14:11.950 --> 14:18.870
funzione sta dicendo:' Basta registrarlo sulla console nel browser '.

14:19.100 --> 14:24.400
Ma non l'abbiamo mai fatto quando abbiamo restituito un "valore".

14:24.470 --> 14:25.820
Lascia che ti mostri cosa intendo.

14:26.600 --> 14:29.300
Quando non restituiamo qualcosa, diventiamo "indefiniti".

14:29.330 --> 14:32.240
Quando restituiamo qualcosa, otteniamo il "valore".

14:32.240 --> 14:37.090
Quindi vediamo qui se possiamo spiegarlo.

14:37.110 --> 14:47.410
Quindi, qui ogni volta che dico "moltiplica (10, 5)" e rimuoverò la "console. log 'solo per non confonderci, salvare

14:47.410 --> 14:50.400
e aggiornare ...

14:50.770 --> 14:51.820
Ottengo "indefinito".

14:52.000 --> 14:56.710
Questo perché, come vedi in questo diagramma, non stiamo restituendo nulla.

14:56.710 --> 15:04.330
Quindi, in JavaScript il modo in cui restituisci le cose è che devi inserire 'return' all'interno di una funzione.

15:04.690 --> 15:12.400
Quindi, ora "restituirà a * b" e vedrai che è a - è una parola speciale in JavaScript - è

15:12.400 --> 15:13.740
evidenziata in rosso.

15:14.020 --> 15:20.310
Bene, ora sta dicendo "Sì, restituiremo il valore".

15:20.370 --> 15:28.320
Quindi, anche se abbiamo aggiunto 'console. log'. Farai 'console. log 'e poi chiedi "Ehi, ho un' return '? ".

15:28.470 --> 15:31.160
Se lo faccio, ho intenzione di inviargli un valore.

15:32.170 --> 15:33.520
Spero che non sia troppo confuso.

15:33.520 --> 15:35.170
Vediamo se funziona.

15:35.930 --> 15:37.980
Ho intenzione di salvare e aggiornare.

15:38.240 --> 15:47.700
E ora se faccio 'moltiplicare (5, 10)', ottengo '50'.

15:47.840 --> 15:56.860
Sìì! Abbiamo fatto funzionare la nostra funzione e questo è un concetto chiave molto importante,

15:56.860 --> 16:01.010
che dobbiamo ricordare è che dobbiamo restituire qualcosa da una funzione.

16:01.030 --> 16:02.870
Voglio dire che non dobbiamo.

16:02.980 --> 16:07.990
Ma idealmente lo facciamo, quindi non otteniamo questi casi, in cui abbiamo solo "indefinito" e non sappiamo cosa fa

16:07.990 --> 16:08.680
la funzione.

16:08.680 --> 16:14.830
È un po 'come una' scatola nera ', che fa qualcosa e potremmo avere una' console. log ", oppure no, ma non sappiamo cosa

16:14.830 --> 16:16.410
sta succedendo all'interno.

16:16.410 --> 16:22.620
È bello avere un "ritorno" per assicurarsi che la funzione si comporti come ci aspettiamo.

16:22.650 --> 16:24.540
Ok, cosa succede se facciamo qualcosa del genere?

16:24.540 --> 16:33.550
Cosa succede se faccio 'return a', e ho dimenticato un punto e virgola qui, e 'return b'. Cosa pensi che succederà? Aggiorniamo

16:33.550 --> 16:37.930
ed eseguiamo questo.

16:37.960 --> 16:38.540
OK.

16:38.830 --> 16:41.870
Cosa succede se cambio l'ordine e inserisco prima 'a'?

16:41.960 --> 16:43.080
Proviamo di nuovo.

16:44.960 --> 16:54.550
Ottengo '5' e 'return' è l'ultimo modo per terminare una funzione se questo ha senso. Quindi, non appena si dice 'return' in una

16:54.550 --> 16:57.770
funzione, il programma termina.

16:57.820 --> 17:04.240
Quindi, per farlo, dico "moltiplica (5, 10)". Va alla funzione, dice:

17:04.240 --> 17:10.690
"Sì, ho la funzione 'moltiplica'. Metterò 'a' come '5' e '10' come 'b' ".

17:10.840 --> 17:20.540
E ora entra nella funzione e dice: 'return 5', che è 'a'. Quindi restituisce quello ed esce dalla funzione.

17:20.950 --> 17:23.290
Quindi ora queste due linee non vengono affatto eseguite.

17:23.290 --> 17:30.090
Il programma legge semplicemente questo, va qui, legge la prima riga della funzione e quindi esce.

17:30.100 --> 17:37.630
Quindi, in una funzione dovresti avere un'istruzione 'return', o è giusto?

17:38.500 --> 17:41.910
Vediamo un caso in cui ciò potrebbe non essere corretto.

17:41.920 --> 17:43.750
Aggiungiamo un'istruzione 'if' a questo.

17:44.080 --> 17:53.330
Diciamo che vogliamo "moltiplicare", ma siamo anche un po 'pigri e non vogliamo essere troppo duri con il

17:53.330 --> 17:54.040
computer.

17:54.140 --> 18:05.420
Quindi diciamo che vogliamo dire che 'if' - ricordiamo la 'dichiarazione if'. "se 'a' è maggiore di '10'" o "se 'b' è

18:05.420 --> 18:07.430
maggiore di '10'".

18:10.170 --> 18:18.430
Possiamo dire 'return "è troppo difficile";'.

18:18.710 --> 18:33.380
Altrimenti [else] restituiremo 'a * b'.

18:33.380 --> 18:33.380
Vediamo cosa succede qui.

18:34.890 --> 18:39.050
Ho intenzione di salvare e aggiornare. Facciamo 'moltiplicare (5,4)'.

18:43.400 --> 18:46.220
Ottengo '20'.

18:46.270 --> 18:49.680
E se facciamo '5' e '40'? Ottengo "è troppo

18:49.690 --> 19:01.180
difficile", perché ora sta leggendo la funzione '5' e '10', e sta dicendo: "Hmmm, 'b', che è '40' è maggiore

19:01.180 --> 19:02.440
di '10'".

19:02.470 --> 19:06.560
Quindi, secondo la "dichiarazione if", andrò "è troppo difficile".

19:06.670 --> 19:19.480
E poiché un 'return' esce dalla funzione, non arriva mai a questo, anche se faccio 'return a * b', non ci arriverai mai, perché il

19:19.480 --> 19:24.490
'return' esce dalla funzione. Solo per

19:24.490 --> 19:28.960
ricontrollare, facciamolo: facciamo '5 * 40'.

19:28.970 --> 19:34.750
E non arriva mai a nessuna di queste righe, perché non appena questo vede un 'ritorno', esce dalla funzione.

19:35.790 --> 19:37.320
So che è molto.

19:37.320 --> 19:41.980
E capiremo perché queste cose sono importanti nei prossimi due video.

19:42.210 --> 19:50.540
Ma volevo anche mostrarti che puoi avere funzioni interne. Quindi in JavaScript le funzioni sono "variabili".

19:50.880 --> 19:54.120
E ciò significa che siamo stati in grado di

19:56.880 --> 19:59.990
assegnare funzioni come questa. Destra?

20:00.200 --> 20:02.960
E se abbiamo fatto qualcosa del genere,

20:03.080 --> 20:09.640
beh, possiamo chiamare 'a' nello stesso modo in cui lo abbiamo fatto e abbiamo semplicemente assegnato la funzione come variabile.

20:09.680 --> 20:15.030
Quindi tecnicamente potremmo fare qualcosa del genere.

20:15.050 --> 20:22.830
Quindi facciamo 'moltiplicare' - Torniamo al modo in cui l'abbiamo fatto. Lasceremo 'moltiplicare' come è nella forma

20:22.830 --> 20:23.580
semplice.

20:27.330 --> 20:29.640
E

20:32.140 --> 20:38.190
possiamo effettivamente dire "alert (moltiplicare)".

20:38.650 --> 20:43.900
E poi qui faremo "3" e "4". E so che sono molte parentesi.

20:43.900 --> 20:45.620
Non preoccuparti, lo faremo.

20:45.760 --> 20:49.490
Ma salviamo solo questo e aggiorniamo e vediamo cosa succede.

20:49.570 --> 20:58.150
Ottengo "12". Perché quello che sta succedendo è: stiamo iniziando con la funzione interiore e stiamo dicendo: "Ehi, vogliamo

20:58.150 --> 20:59.330
avvisare qualcosa! ".

20:59.470 --> 21:00.630
"Cosa vuoi avvisare? ""

21:00.640 --> 21:03.610
Bene, vogliamo "moltiplicare" "" Vogliamo chiamare questa funzione e

21:03.610 --> 21:06.330
dare 'a' it '3' e '4' ".

21:06.400 --> 21:14.560
Quindi va a 'moltiplicare' e dice: "Sì, assegneremo 'a' e 'b' a '3' e '4', e voglio restituire 'a' e 'b'.

21:14.560 --> 21:24.010
Quindi ora 'moltiplica' viene cambiato in '12' e quindi 'avvisiamo'.

21:24.020 --> 21:33.580
Quindi, vedi che ora, invece di avere qualcosa come "totale", "moltiplicare (4,5)" e quindi inserire "totale"

21:33.590 --> 21:37.420
qui, possiamo semplicemente assegnare "moltiplicare" qui.

21:40.370 --> 21:41.620
Meno male! cioè, era molto!

21:41.640 --> 21:44.850
Ma voglio mostrarti che abbiamo - abbiamo affrontato, penso, l'argomento

21:44.880 --> 21:51.000
più difficile in JavaScript, che è le funzioni. E hai anche coperto il 'ritorno', che

21:51.000 --> 21:53.040
è molto, molto buono.

21:53.050 --> 21:59.140
L'altra cosa che voglio mostrarti è che molte persone si confondono con la terminologia e non penso

21:59.260 --> 22:02.340
che sia così importante, ma voglio solo chiarirlo.

22:02.390 --> 22:11.370
C'è il concetto di "parametri" e "argomenti".

22:11.400 --> 22:18.520
Ora 'parametri' e 'argomenti' sono molto simili ma leggermente diversi.

22:18.520 --> 22:22.420
Quindi "argomenti", come abbiamo detto, sono "4" e "5".

22:22.480 --> 22:27.640
Quindi le funzioni possono avere 'argomenti' e vengono chiamate con 'argomenti'.

22:28.060 --> 22:31.330
I "parametri" sono "a" e "b".

22:31.330 --> 22:36.290
Quindi 'moltiplica' ha due 'parametri' di 'a' e 'b'.

22:36.420 --> 22:38.210
So che è un po 'confuso.

22:38.210 --> 22:40.010
Puoi leggerci un po 'di più.

22:40.010 --> 22:46.860
Non credo sia importante conoscere davvero la differenza, ma proprio così ogni volta che leggi articoli

22:46.860 --> 22:52.550
o impari, magari tramite YouTube, sentirai queste parole quasi in modo intercambiabile.

22:52.590 --> 22:56.710
Significano praticamente la stessa cosa, solo una leggera differenza in essi.

22:58.460 --> 23:00.290
Tutto ok!

23:00.910 --> 23:03.690
Lo so, lo so che ti ho lanciato molta terminologia!

23:03.730 --> 23:10.780
Ma dopo averlo ripetuto alcune volte avrà senso, quindi resta forte. Ma questo è tutto per le funzioni.

23:11.080 --> 23:13.580
È tempo per te di provare alcuni esercizi.

23:13.600 --> 23:15.420
Guarda di nuovo questo video se necessario.

23:15.430 --> 23:21.370
Vuoi davvero assicurarti di comprendere le funzioni, poiché sarà il nucleo di JavaScript.

23:21.370 --> 23:28.360
Ricorda, quello che stiamo facendo con le funzioni è che stiamo creando nuove parole

23:28.360 --> 23:34.510
nella lingua, nella lingua JavaScript. Quindi possiamo creare "variabili" o possiamo creare "funzioni" per aggiungere il vocabolario alla lingua

23:34.750 --> 23:37.370
e fino a questo punto è tutto ciò che abbiamo fatto.

23:37.390 --> 23:44.950
Abbiamo questo JavaScript con poche parole che possiamo usare e ne abbiamo aggiunti di nuovi come "moltiplicare" e

23:45.370 --> 23:48.760
"totale" per renderlo più utile per noi.

23:49.000 --> 23:51.020
Ed è questa la programmazione.

23:51.210 --> 23:53.110
Ci vediamo nel prossimo. Ciao ciao
