WEBVTT

00:01.790 --> 00:05.860
Oggetti. Sono strutture dati davvero potenti.

00:06.810 --> 00:12.270
E come puoi vedere è la seconda struttura di dati che impareremo in Javascript.

00:12.270 --> 00:23.270
E di fatto sono anche un tipo javascript. Gli oggetti sono raccolte di proprietà. Bene, cosa significa?

00:24.410 --> 00:27.530
Diamo un'occhiata cercando di scrivere un oggetto.

00:27.530 --> 00:37.700
Quindi per scrivere un oggetto posso avere qualcosa come un utente e parentesi graffe e all'interno di questo possiamo dire

00:37.820 --> 00:41.790
che il nome è uguale a "John".

00:42.170 --> 00:46.000
Posso dire che H è "34".

00:46.050 --> 00:49.320
L'hobby è "calcio".

00:50.900 --> 00:54.490
E forse possiamo anche mettere "è sposato" su

00:56.660 --> 01:00.390
falso e la virgola alla fine qui posso lasciarlo

01:00.540 --> 01:03.440
spento o aggiungerlo, funziona in entrambi

01:03.460 --> 01:04.630
i modi.

01:05.770 --> 01:13.880
Ma ora se lo salvo e lo aggiorno, vediamo se abbiamo l'oggetto utente. Sì.

01:13.950 --> 01:20.820
Sembra che abbiamo "nome: John età: 34 hobby: il calcio è sposato: falso".

01:20.990 --> 01:28.190
E vedi qui che abbiamo un oggetto e sembra un po 'diverso da un array vero?

01:28.220 --> 01:38.210
Perché se ricordiamo un array appariva così, "mela", "banana", "arancia".

01:38.240 --> 01:47.100
Quindi - un array se aggiorniamo abbiamo un 'utente' che assomiglia a questo e un 'elenco' che assomiglia a questo.

01:47.210 --> 01:57.280
Se apro questo, vediamo che abbiamo un po 'di differenza perché un oggetto è più dinamico, posso

01:57.280 --> 02:00.000
avere proprietà e valore.

02:00.220 --> 02:12.770
Quindi proprietà "nome", valore "Giovanni", proprietà, "età", valore "34". Con un array avevamo un indice "0" che conteneva "mela"

02:12.890 --> 02:17.720
e un indice "1" che conteneva "banana".

02:17.720 --> 02:18.680
Hmm interessante.

02:18.740 --> 02:19.000
OK.

02:19.010 --> 02:30.370
Ma come afferrare le proprietà perché con un array potrei fare 'list', afferrare il secondo elemento con '1'

02:30.940 --> 02:39.520
e ho una "banana". Che cosa puoi fare con gli oggetti, puoi dire 'utente. nome ",

02:39.690 --> 02:51.950
John. 'Utente. età ', 34. 'Utente. hobby ', calcio. E 'utente. isMarried ', false. OK.

02:52.250 --> 03:06.510
Ora con un array abbiamo avuto metodi come 'pop' o 'push' per cambiare l'array.

03:06.590 --> 03:08.740
Abbiamo anche avuto "concat".

03:09.210 --> 03:14.930
Come possiamo aggiungere proprietà a un oggetto? Bene è molto semplice.

03:14.930 --> 03:29.700
Tutto ciò che dobbiamo fare è dire qualcosa come "utente. favoriteFood 'e farò uguali e farò spinaci.

03:29.890 --> 03:36.320
Ora, se guardo l'oggetto utente ho il cibo

03:36.320 --> 03:39.160
preferito, gli spinaci.

03:39.230 --> 03:44.060
Quindi abbiamo appena espanso l'oggetto utente.

03:44.100 --> 03:44.730
Che

03:44.730 --> 03:53.000
dire di questo - Posso passare a "isMarried" in "true" per dire che il nostro amico John qui si è appena sposato.

03:53.130 --> 04:01.510
Bene, ora se vado per utente ho "isMarried" su "true".

04:01.560 --> 04:02.940
Molto bello.

04:02.940 --> 04:07.890
Quindi vedi la differenza tra un array e un oggetto.

04:07.890 --> 04:22.370
Ora una domanda che potresti avere è "Perché" array "non è un tipo javascript ma" object "lo è? Bene perché tecnicamente in termini

04:22.370 --> 04:32.120
semplificati un array è solo qualcosa del genere.

04:36.480 --> 04:44.040
Abbiamo anche visto quando abbiamo guardato l'elenco che abbiamo "0" va ad Apple.

04:44.040 --> 04:52.220
"1" equivale a banana e "2" uguale a arancione. E vedi quale è il potere delle strutture dati

04:52.580 --> 04:54.020
in javascript.

04:54.080 --> 05:01.120
Quell'idea di un cassetto della scrivania e in quel cassetto non vuoi avere un casino che non vuoi solo mettere una

05:01.130 --> 05:07.920
cosa, vuoi avere più cose ma vuoi che siano organizzate. Quindi forse vuoi che le penne siano organizzate in

05:07.930 --> 05:12.420
una sezione e che i file siano organizzati in una sezione diversa.

05:12.830 --> 05:18.280
E come ho già detto, le strutture di dati ci aiutano a organizzare meglio le cose.

05:18.350 --> 05:26.570
Quindi, ad esempio, un array è davvero bravo a contenere forse una lista della spesa o una lista di cose da fare.

05:27.140 --> 05:33.190
Ma un oggetto potrebbe essere davvero bravo a contenere qualcosa come le informazioni dell'utente.

05:34.000 --> 05:39.610
Quindi, se pensi a un gioco, diciamo che stai costruendo un gioco in cui controlli questo mago.

05:39.940 --> 05:48.050
Bene, questo mago: quanto è alto il mago, quanto è potente, quanti punti esperienza ha.

05:48.250 --> 05:54.040
Beh, sarebbe davvero bello mettere un oggetto perché quel mago è un oggetto.

05:54.040 --> 06:03.400
Abbiamo bisogno di proprietà e valori, ma forse gli incantesimi che potrebbero essere un elenco perché possiamo avere solo una stringa di

06:03.520 --> 06:07.050
tutti gli incantesimi che il mago potrebbe conoscere.

06:07.090 --> 06:11.890
Quindi significa che possiamo avere matrici all'interno di oggetti?

06:12.010 --> 06:25.350
Sì, se l'utente fosse un mago posso mettere "incantesimo" o "incantesimi" e posso fare una serie

06:25.740 --> 06:35.340
di tutti gli incantesimi "abracadabra" o "Shazam" o posso fare "fischio".

06:35.430 --> 06:39.800
Quindi ora ho un array all'interno di un utente.

06:40.080 --> 06:41.460
OK, e viceversa.

06:41.460 --> 06:48.310
Posso avere un utente all'interno di un array?

06:48.710 --> 06:49.480
Beh, sì, puoi.

06:49.640 --> 06:59.790
Supponiamo di voler avere un elenco di utenti su un'app per il nostro sito Web. Possiamo avere un elenco di oggetti

06:59.790 --> 07:01.710
in cui

07:06.960 --> 07:15.830
abbiamo "username" "Andy" che ha "password", "segreto" e possiamo avere "username",

07:18.540 --> 07:28.310
"Jess" che ha la "password" "123". Vediamo questo in azione.

07:28.370 --> 07:37.370
Ho intenzione di aggiornare e dire 'elenco' e guardare quello. All'interno di questo elenco ho il primo oggetto con nome utente

07:37.370 --> 07:38.520
e password.

07:38.520 --> 07:44.500
E il secondo nome utente e password. Quindi gli elenchi sono davvero bravi a farlo,

07:44.530 --> 07:52.240
creare elenchi e quelli sono array. E gli oggetti sono davvero bravi a contenere oggetti. Ma come possiamo

07:52.360 --> 07:54.520
accedervi ora?

07:55.000 --> 07:57.580
Bene, prima diamo un'occhiata all'utente.

07:57.670 --> 08:07.630
Se avessi voluto accedere bene a un incantesimo avrei potuto fare 'utente. incantesimi 'e avrò un array indietro, ma se volessi

08:07.630 --> 08:10.050
- diciamo accedere a

08:10.450 --> 08:15.680
"Shahzam" Beh, farei solo' utente. incantesimi 'e quindi poiché

08:15.730 --> 08:28.740
è un array ottengo il secondo oggetto usando' [1] '- "Shahzam". Al contrario, per l'elenco posso dire "elenco", il primo

08:28.740 --> 08:35.320
elemento che è "Andy" e voglio ottenere la sua password.

08:35.450 --> 08:37.410
Bene, farò "password".

08:37.770 --> 08:42.590
E ora capisco - beh Andy ha scritto male la sua password, dovrebbe dire "segreto".

08:42.600 --> 08:45.930
Ma otteniamo "secre".

08:46.180 --> 08:48.220
Ecco come accedi alle cose.

08:48.570 --> 08:49.350
OK.

08:49.840 --> 08:51.480
Un'altra domanda che ho.

08:51.850 --> 09:06.510
E se volessi dire che anche questo utente John, che è un mago, può "gridare". Forse può fare una sorta di azione.

09:06.640 --> 09:09.320
Possiamo aggiungere una funzione a un oggetto?

09:09.580 --> 09:13.080
Sì, possiamo, tutto ciò che dobbiamo fare è fare 'funzione'

09:13.120 --> 09:17.260
E vedi che il colore è cambiato, significa che stiamo facendo qualcosa di giusto.

09:17.260 --> 09:20.840
Posso dire 'console delle funzioni. log 'Gridando

09:24.380 --> 09:29.070
"Ah" salviamolo e vediamo in azione.

09:31.720 --> 09:35.940
'Utente' - assicurati di avere il grido lì sì E guarda

09:35.960 --> 09:38.380
che ha la "F" per "funzione".

09:38.900 --> 09:45.350
E ora se vado 'utente. grida "e ricorda che devo chiamare la funzione.

09:45.770 --> 09:53.960
Ottengo "AHHHHH! ". Molto bello. Quindi posso avere funzioni all'interno degli oggetti.

09:54.320 --> 10:00.680
E una cosa che potresti notare è: aspetta un secondo, ho pensato che le funzioni avrebbero

10:00.680 --> 10:03.120
dovuto dire qualcosa come, sai, avviso.

10:03.330 --> 10:08.710
Ma questo abbiamo 'utente. grido'.

10:08.770 --> 10:16.240
Quindi questo è un po 'diverso da quello che abbiamo visto prima e questo in realtà è chiamato un metodo e questa

10:16.240 --> 10:18.250
è un'altra terminologia che impareremo.

10:18.250 --> 10:23.110
Ma una funzione all'interno di un oggetto è un "metodo".

10:23.110 --> 10:29.500
Quindi posso dire che "gridare" è un "metodo" di "utente".

10:29.720 --> 10:42.090
Proprio come con una matrice come le liste e se faccio "pop" - beh "pop" è un "metodo" di "list".

10:42.230 --> 10:48.390
E un'altra cosa che potresti aver capito è 'console. log'.

10:48.620 --> 10:49.310
Cosa

10:49.370 --> 10:58.190
pensi che sia 'log' che abbiamo fatto per tutto questo tempo? Bene, "console" come risulta è solo un oggetto.

10:58.260 --> 11:06.300
Lo vedi? 'console' ha tutti questi aspetti come metodo su di esso.

11:06.360 --> 11:10.180
Quindi per tutto questo tempo abbiamo appena fatto console. log.

11:10.400 --> 11:19.770
Ma posso anche fare: facciamo "info". Se lo faccio console. info e dirò "ciao".

11:23.930 --> 11:24.850
Ottengo "ciao"

11:24.990 --> 11:26.220
Non cambia nulla.

11:26.220 --> 11:29.150
Ma cosa succede se facciamo qualcosa come "errore".

11:29.340 --> 11:40.100
Beh, posso fare 'console. errore "e ora - guarda quello, ottengo l'errore.

11:40.420 --> 11:46.690
Quindi ecco quali sono i metodi. Sono funzioni all'interno di un oggetto.

11:46.700 --> 11:55.510
OK, ho un'ultima cosa interessante da mostrarti e cioè "Posso fare qualcosa del genere?

11:57.450 --> 12:03.200
Un utente può essere un oggetto vuoto? "Sì, funziona.

12:03.200 --> 12:09.170
Quindi se ottengo 'user2' ottengo solo l'oggetto vuoto e non c'è davvero nulla al suo interno.

12:10.630 --> 12:10.940
OK.

12:10.960 --> 12:11.950
E le matrici?

12:11.950 --> 12:15.490
Posso fare un elenco vuoto?

12:18.010 --> 12:24.050
Sì, posso fare un elenco vuoto.

12:24.210 --> 12:31.040
Ma come puoi vedere non posso davvero usare alcuna proprietà in "user2" perché non ha proprietà.

12:31.920 --> 12:41.610
E non riesco davvero ad accedere a 'list [0]' o 'list2 [0]', che è quello vuoto, beh perché al momento non

12:41.680 --> 12:44.130
c'è nulla al suo interno.

12:46.200 --> 12:57.440
Quindi questo ci ricorda quando non dichiariamo una variabile che diventa "indefinita" ma con un oggetto e un elenco possiamo avere qualcosa

12:57.500 --> 13:03.030
di vuoto e non indefinito. Ma c'è una cosa che voglio mostrarti.

13:03.230 --> 13:06.350
Può esserci un oggetto vuoto.

13:06.350 --> 13:18.730
Quindi se faccio 'var' oggetto vuoto, beh, è un oggetto vuoto ma c'è qualcosa chiamato 'null'.

13:19.120 --> 13:33.030
E questo è il nostro sesto tipo di dati e 'null' è un tipo speciale che dice solo che un oggetto è null.

13:33.040 --> 13:34.530
Quindi vediamo cosa significa.

13:34.600 --> 13:39.640
Se guardo un oggetto vuoto ottengo un oggetto vuoto.

13:39.970 --> 13:46.920
Se ottengo un oggetto "null" restituisce null.

13:46.960 --> 13:54.850
Quindi questo è un personaggio speciale che vedremo più avanti nelle lezioni, ma significa solo che non

13:54.850 --> 13:57.190
c'è nulla in questo oggetto.

13:57.190 --> 14:09.150
Se vado 'null0bj. name = Andy 'Non riesco a impostare il

14:09.340 --> 14:13.230
nome della proprietà di null.

14:13.400 --> 14:22.430
Ma se lo faccio per un oggetto vuoto che è solo un oggetto vuoto, bene posso

14:22.790 --> 14:27.300
dire che il nome è uguale a Andy

14:27.370 --> 14:30.400
E guarda che ho Andy.

14:30.610 --> 14:32.230
Quindi questo è ciò

14:32.290 --> 14:40.140
che un oggetto "nullo" è vuoto, completamente vuoto e in questo momento sembra inutile come se non ne avessimo bisogno.

14:40.150 --> 14:44.580
Ma ti mostrerò casi in cui questo è importante per noi.

14:44.590 --> 14:46.930
OK, erano un sacco di cose.

14:47.020 --> 14:51.870
Ma in realtà hai imparato così tanto in JavaScript.

14:51.990 --> 14:59.550
Praticamente direi che l'80 percento di ciò che devi sapere in javascript per lavorare in modo professionale e sembra

14:59.670 --> 15:05.650
che non abbiamo coperto molto o forse ad alcuni potrebbe sembrare che abbiamo coperto molto.

15:05.670 --> 15:12.390
Ma in termini di sintassi solo guardando questo abbiamo imparato solo poche parole e alcuni modi di fare le cose.

15:13.470 --> 15:20.190
Con questo nuovo potere ti mostrerò come possiamo costruire un semplice Facebook con quello che abbiamo appena

15:20.190 --> 15:20.780
imparato.

15:22.630 --> 15:23.730
Ci vediamo nel prossimo video. Ciao ciao
