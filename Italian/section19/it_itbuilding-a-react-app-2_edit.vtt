WEBVTT

00:00.480 --> 00:01.230
Bentornato

00:01.410 --> 00:05.020
Continuiamo a costruire la nostra app RoboFriends Adesso,

00:05.080 --> 00:12.460
fino a questo punto, se guardi il nostro indice. js - beh, ci sono state molte copie e incolla

00:12.670 --> 00:15.640
che abbiamo fatto. Se avessimo molti amici

00:15.640 --> 00:19.810
robot immaginiamo di avere centinaia di questi che dobbiamo costantemente copiare e incollare

00:19.910 --> 00:21.530
Non è molto efficiente, vero?

00:21.730 --> 00:30.160
Inoltre, se ricordi il nostro diagramma qui di un flusso di dati a senso unico, abbiamo sempre avuto un genitore

00:30.160 --> 00:34.980
come un componente di app che aveva figli che hanno i

00:35.050 --> 00:43.300
loro figli e così via e così via Quindi, usando questa conoscenza, possiamo avere un grande componente di app

00:43.300 --> 00:47.970
che ha bambini diversi in modo da rendere ogni componente piccolo

00:47.990 --> 00:57.160
e riutilizzabile Torniamo al nostro esempio. Ora che abbiamo un "robot". js "idealmente possiamo elencare tutti

00:58.700 --> 01:09.740
questi 10 utenti Il modo in cui lo facciamo - abbiamo un componente" CardList "in modo che se importiamo un componente" CardList

01:09.740 --> 01:17.000
"che è un genitore di" Card ", allora possiamo semplicemente renderlo invece di tutte queste

01:17.290 --> 01:30.390
carte Quindi dirò 'CardList' e di nuovo dovremo crearlo. Quindi dico un nuovo file, "CardList. js 'cambiandolo di nuovo alla nostra

01:33.060 --> 01:43.050
sintassi' Babel '- importeremo' React 'da' reagire 'e lo renderò un po' più grande E

01:43.050 --> 01:44.970
ancora diremo

01:45.020 --> 01:52.800
semplicemente 'const', 'CardList' equivale a - non accetterò nulla per ora

01:54.360 --> 01:56.530
ma tornerà ..

01:56.890 --> 02:01.700
Bene, cosa dovrebbe tornare?

02:01.850 --> 02:05.070
Dovrebbe restituire le carte, giusto?

02:05.920 --> 02:07.960
Possiamo solo copiare e incollare

02:11.750 --> 02:13.160
questo inserendolo

02:13.480 --> 02:15.750
qui. Risolviamo un po 'il rientro.

02:18.730 --> 02:26.660
Ora "CardList" sarà quello che restituirà queste carte e "indicizzerà". html "visualizzerà semplicemente" Elenco schede

02:26.710 --> 02:33.280
"Se lo salvo, suppongo che la" scheda "non venga

02:33.350 --> 02:39.330
utilizzata in modo da poterla rimuovere E i"

02:39.770 --> 02:42.500
robot "non vengono

02:42.620 --> 02:48.400
utilizzati Ma ora possiamo usare i" robot "

02:48.400 --> 02:59.560
per superarlo, poiché "robot" è uguale all'array "robot". 'CardList' sta accettando un oggetto 'robot' Se lo salvo, tutto funziona

02:59.730 --> 03:05.880
ma sto ricevendo questo errore perché, come puoi vedere, non abbiamo esportato Se

03:06.950 --> 03:13.910
torniamo all'Elenco schede, esporta, predefinito - e si spera ormai stai cominciando a prenderne

03:13.920 --> 03:20.040
il controllo C'è molta ripetizione qui ma ogni volta, finché impari la

03:20.520 --> 03:28.410
sintassi, creiamo questi componenti in modo piacevole. E riceviamo un sacco di errori perché non abbiamo accesso a "robot" e ID

03:28.830 --> 03:30.270
e, beh, sia per

03:30.300 --> 03:38.400
quel motivo, quindi importiamo una carta da - di nuovo nella stessa directory - "Carta.

03:39.280 --> 03:40.960
js "I

03:40.960 --> 03:45.540
robot non sono definiti Sappiamo che" CardList "riceve

03:45.540 --> 03:52.540
i robot ora Quindi ho accesso ad esso nei" puntelli "o posso distruggerlo

03:53.570 --> 04:04.940
e dire che abbiamo accesso ad esso con" robot ". Se lo salvo, guarda che ho tutto indietro come prima Ma

04:05.080 --> 04:07.390
non è tutto vero?

04:07.390 --> 04:10.480
Stiamo solo afferrando lo 0, 1, 2 Solo

04:10.510 --> 04:11.800
tre di

04:11.800 --> 04:17.970
loro E come abbiamo visto sui robot. js ho 10

04:18.130 --> 04:20.870
Hm. Come possiamo farlo meglio?

04:21.040 --> 04:28.410
Rendiamolo un po 'più piccolo in modo da poterlo vedere. Sembra che vogliamo fare una sorta di loop,

04:28.510 --> 04:29.410
giusto?

04:29.410 --> 04:35.650
Vogliamo passare in rassegna i robot e creare un componente di carta per ognuno Come possiamo farlo

04:35.650 --> 04:36.880
qui in React?

04:36.900 --> 04:45.060
Cominciamo aggiungendo un'altra variabile qui. Lo chiameremo "const" "cardComponent" E all'interno

04:47.740 --> 04:50.300
del "cardComponent" vogliamo

04:50.510 --> 04:56.630
dire che "robot" - vogliamo fare bene cosa vogliamo

04:56.690 --> 04:59.390
fare? Quando facciamo

04:59.420 --> 05:03.460
un loop come ho detto prima, vogliamo mappare, giusto?

05:03.470 --> 05:06.740
Potremmo farne anche quattro ciascuno, ma consiglio sempre di creare una mappa.

05:07.120 --> 05:09.280
E all'interno di questa mappa ogni robot lo

05:11.820 --> 05:12.930
ottiene. Quindi otteniamo

05:12.990 --> 05:16.800
un utente ogni volta che lo mappiamo. Quindi possiamo dire

05:20.070 --> 05:26.550
che "utente" dovrebbe tornare di nuovo, perché una mappa deve tornare, lo restituisce, giusto?

05:26.610 --> 05:32.890
Vogliamo restituire un componente della carta. Posso copiarlo e incollarlo proprio qui e entro il

05:34.500 --> 05:42.370
ritorno posso solo dire ora invece dell'indice robot 0 - abbiamo l'indice? Beh, sì, perché ricordi che il secondo

05:42.450 --> 05:48.800
parametro che otteniamo in una mappa è l'indice Quindi posso dire

05:48.800 --> 05:52.730
"utente" e "io" per l'indice

05:52.790 --> 06:03.640
E ora all'interno di "robot" dirò "io" per l'indice. Ogni volta la prima volta intorno a questo sarà zero, quindi 1 quindi

06:03.640 --> 06:07.610
2 fino a 9 per includere i nostri 10

06:08.840 --> 06:11.260
robot Vediamo se questo

06:11.360 --> 06:19.260
funziona davvero Se aggiungo un componente della scheda qui. Ricordi che dobbiamo racchiuderlo tra parentesi graffe perché

06:19.260 --> 06:22.170
è javascript, quindi sa valutare Se

06:22.410 --> 06:28.270
lo salvo, sembra che si stia compilando con successo, torno indietro e

06:28.630 --> 06:29.960
Holy Moly Ci

06:30.240 --> 06:33.650
siamo procurati un array di carte Quanto

06:33.820 --> 06:35.140
è bello!

06:35.140 --> 06:37.160
È stato incredibilmente veloce. Abbiamo appena

06:37.330 --> 06:40.820
usato il nostro buon senso e la nostra conoscenza

06:41.020 --> 06:46.240
di Javascript. Abbiamo appena usato 'mappa', per restituire più componenti, spero che tu capisca quanto

06:46.240 --> 06:50.620
sia potente ed è per questo che React è così popolare in

06:50.680 --> 06:57.510
questo momento. Siamo in grado di usare Javascript per restituire questi elementi HTML e fare le cose molto velocemente

06:59.390 --> 07:04.240
Se apro la console qui vedrò che ricevo un avviso Ogni bambino in un

07:04.250 --> 07:11.120
array o iteratore dovrebbe avere un supporto chiave univoco e c'è un link ad esso se vuoi leggi di

07:11.120 --> 07:12.280
più su

07:13.370 --> 07:20.450
questo Questo è un caso speciale che devi solo ricordare. Quando si lavora con reagire nel modo in cui

07:20.450 --> 07:23.950
funziona il DOM virtuale, tiene traccia di ciò

07:24.320 --> 07:35.300
che sono tutte queste carte Ma senza avere qualcosa chiamato un sostegno chiave, se alcune di queste carte vengono eliminate, React non saprà quale è quale

07:36.720 --> 07:42.660
e avremo per cambiare l'intero DOM. Contro se avesse un sostegno chiave che dicesse

07:42.660 --> 07:43.230
"oh,

07:43.230 --> 07:49.080
questo viene rimosso", posso semplicemente rimuoverlo dal DOM. Ricorda che vogliamo ridurre al minimo la quantità di lavoro

07:49.080 --> 07:50.190
che facciamo al

07:50.280 --> 07:53.170
DOM. Quindi, quando esegui un ciclo, è solo qualcosa che

07:53.220 --> 07:57.100
devi ricordare. Devi dargli una chiave unica. Nel nostro caso

07:57.240 --> 08:01.200
possiamo solo dire "io" che è indice

08:01.210 --> 08:02.250
Se

08:05.300 --> 08:10.130
salviamo questo Oops, dobbiamo racchiuderlo tra parentesi graffe

08:11.000 --> 08:14.720
perché è Javascript. Ed ecco

08:14.740 --> 08:22.800
qua Ora non abbiamo più l'errore E facciamo questo su una nuova riga,

08:23.020 --> 08:29.150
solo così sembra più bello E poiché lo stiamo restituendo

08:33.640 --> 08:39.270
su più righe, vogliamo racchiuderlo tra parentesi, giusto?

08:39.340 --> 08:42.070
Tutto apposto. Ed è

08:42.120 --> 08:45.350
meglio Quindi funziona bene, come lo

08:45.420 --> 08:51.150
vogliamo, voglio mostrarti una cosa. Perché questo è Javascript - tutto

08:51.150 --> 08:53.940
ciò che inseriamo in queste

08:54.450 --> 08:58.730
parentesi graffe è javascript inclusi i commenti - Beh,

08:58.800 --> 09:04.080
possiamo solo copiare e incollare l'intera cosa Rimuovere la costante e

09:07.750 --> 09:14.360
aggiungerla semplicemente tra parentesi Se lo salvo, dovrebbe comunque funzionare, come fa E questo

09:14.500 --> 09:20.200
è un altro potere di React. React ti rende davvero un ottimo

09:20.920 --> 09:25.040
programmatore javascript perché oltre a questa sintassi JSX tutto il resto

09:25.390 --> 09:32.830
è solo javascript Quindi siamo in grado di creare un componente CardLList che elenca le carte e tutto ciò che

09:33.310 --> 09:39.140
dobbiamo fare è passargli un puntello di robot. E abbiamo appena reso questo un sacco più

09:39.440 --> 09:40.840
pulito Molto bello Va

09:40.880 --> 09:42.880
bene così per questo video Altre

09:42.890 --> 09:45.490
cose accadranno nel prossimo Ci vediamo in quello

09:45.500 --> 09:46.880
Ciao ciao
