WEBVTT

00:01.680 --> 00:02.310
All right.

00:02.310 --> 00:03.240
Welcome back.

00:03.240 --> 00:06.540
We have our Hello World app but that doesn't look very cool.

00:06.540 --> 00:09.430
We want to make our RoboFriends app.

00:09.450 --> 00:16.540
So in this video, we're going to get started by building our first component. If we go back here,

00:16.640 --> 00:19.080
we remember that we have the terminal on the right hand side.

00:19.100 --> 00:25.880
And we just ran 'npm start' and 'create-react-app' checks all the files for us make sure there's no errors.

00:25.880 --> 00:33.680
It says that our app is defined but never used so, let's comment this out again 'command' 'slash' save this

00:34.370 --> 00:37.080
and you'll see that everything's working fine.

00:38.590 --> 00:43.510
Now you may have a few questions just on this 'index.js' file

00:44.210 --> 00:48.920
One, we see that we're importing React but how come that's working,

00:48.920 --> 00:55.390
we remember that it didn't work before; we had to use 'require' and then 'browserify'. Again, React has a

00:55.390 --> 00:59.260
webpack underneath the hood that does the bundling for us.

00:59.260 --> 01:03.670
So we're allowed to use 'import', as long as we keep this at the top of the file.

01:03.760 --> 01:10.650
We can import whatever other files we want or whatever packages we want.

01:10.660 --> 01:14.360
We also see that there's two things: React and ReactDOM.

01:14.380 --> 01:21.200
If you remember, React is a 'view' library.

01:21.260 --> 01:25.660
So this is the little robot that we remember from the previous video.

01:26.030 --> 01:31.120
It's the core of the package that does the DOM manipulation for us.

01:31.310 --> 01:35.890
But as I said before, React can be used in multiple places, not just the browser.

01:36.170 --> 01:38.330
It can be used for mobile devices.

01:38.330 --> 01:45.350
It can be used for virtual reality and you can plug and play different libraries like this based on

01:45.440 --> 01:47.850
what screen you're rendering to.

01:48.000 --> 01:52.830
So ReactDOM is used for the DOM (for) Web sites.

01:52.940 --> 01:54.370
So it's the glue of React.

01:54.390 --> 01:57.620
But we can have something like React native.

01:57.620 --> 02:01.950
That actually renders to mobile phones.

02:02.000 --> 02:04.740
We also have: import './index.css'.

02:04.760 --> 02:13.340
And this is a new syntax. Well, React allows us to add CSS not just in one file, but for each different

02:13.340 --> 02:14.270
component.

02:14.390 --> 02:15.960
If we go to 'App.js',

02:16.110 --> 02:21.000
well, we have 'App.css' that describes the app.

02:21.230 --> 02:22.890
If we go to 'index.js',

02:22.910 --> 02:32.060
well we have 'index.css' that has its own styles and these styles will only apply to whatever components

02:32.540 --> 02:35.740
'index.js' renders.

02:35.910 --> 02:41.550
And the way we use it is we just say 'import', and then unlike React package where we just say the name

02:41.550 --> 02:47.940
of the package and it automatically knows to check the known modules folder, we have to tell it where

02:48.000 --> 02:49.770
'index.css' lives.

02:49.830 --> 02:55.170
And this syntax of 'dot' 'slash' means it's in the same directory.

02:55.320 --> 03:01.690
So it's saying check in the source folder 'index.css' should be there . OK.

03:01.740 --> 03:05.100
And finally we see 'registerServiceWorker'.

03:05.100 --> 03:11.040
And this is an advanced topic that we won't cover in this course but think of service workers as a new

03:11.040 --> 03:16.660
feature that allows our apps to become faster and potentially work offline.

03:16.800 --> 03:19.130
It's something that we don't need to concern ourselves with.

03:19.140 --> 03:26.280
So for now you can comment this out and it will still work, but we'll keep it here just because create-react-app

03:26.280 --> 03:34.880
gives it to us for free. The things that we really really care about though is: well, this line

03:34.880 --> 03:43.160
over here. This whole thing is what React does, it's saying: I want the reactDOM package to use the function

03:43.250 --> 03:52.600
'render', and this 'render' is I wanted to render whatever this is, but if you remember before we had app,

03:55.110 --> 03:59.060
and well, this isn't really an a HTML tag is it.

03:59.220 --> 04:04.850
We've just created this from - it looks like the same directory.

04:04.860 --> 04:12.450
There's something called app and it doesn't have a '.js' file, like we see it over here and that is

04:12.450 --> 04:19.390
because it automatically says that if there's no '.css' or any type after it,

04:19.410 --> 04:27.480
well it assumes that it's Javascript, but this will work as well as you can see. Let us go to

04:27.540 --> 04:34.680
'App.js' file and see why we can use this HTML tag that we've created. If we go to 'App.js' file,

04:34.680 --> 04:40.230
well again, we see that we're importing something, we're doing something called destructuring

04:40.230 --> 04:42.420
here and getting component as well.

04:43.350 --> 04:49.660
And we have a few files like 'logo.svg' and 'app.css' that we're importing.

04:49.950 --> 04:52.300
And again we see that our syntax is a little bit off.

04:52.300 --> 05:03.830
So make sure that we change our files to Javascript(Babel) - and it looks like 'class App extends component'

05:04.520 --> 05:05.830
that comes with React.

05:05.840 --> 05:08.060
And this is just standard syntax.

05:08.090 --> 05:15.740
This renders - remember a component always has the role that it must render at least something.

05:15.960 --> 05:21.260
And the way we do that is we return a HTML piece of the website.

05:21.440 --> 05:24.870
So we see over here: 'Welcome to React. To get started, edit...'

05:25.100 --> 05:27.940
Well, that's exactly what it says over here.

05:28.100 --> 05:29.440
That is the power of React.

05:29.450 --> 05:38.680
We're creating our own custom components, our own custom HTML tags, that we can just add and if you

05:38.680 --> 05:45.320
remember the one way data flow picture, we have one parent that has children.

05:45.320 --> 05:52.050
So 'App' has children, but you know what, let's build our own component to make this point clear.

05:52.370 --> 06:00.370
Instead of having 'hello world' in here, let's create a component called 'Hello' and it's a self-closing

06:00.380 --> 06:02.500
tag, so you want to have the backslash.

06:02.700 --> 06:08.630
And and here instead of saying import app, let's do import 'Hello' from

06:08.970 --> 06:12.600
we'll call it 'hello.js'

06:12.610 --> 06:14.710
and you'll notice that it's capitalized here.

06:14.810 --> 06:19.790
Well if you're building a component, the standard is that it's capitalized.

06:19.880 --> 06:29.070
So it'll be called 'Hello.js'. If we save this, we'll get an error. It says, 'Module not found: Can't resolve './Hello''

06:29.090 --> 06:31.070
Because the file doesn't exist.

06:31.070 --> 06:32.290
So let's create one.

06:32.330 --> 06:38.590
I'm going to say, new file 'Hello.js'. There you go.

06:38.670 --> 06:42.920
We have a new 'Hello.js' file and it's compiled successfully.

06:43.020 --> 06:46.370
If we go to the website, well, look at that.

06:46.380 --> 06:51.920
It actually even gives us error on the website, and that's why 'create-react-app' is just so awesome.

06:51.990 --> 06:57.660
It shows you exactly what the errors are, without opening up the console right here.

06:59.520 --> 07:03.830
Again we have nothing built right now in 'Hello', so we need to create it.

07:03.840 --> 07:06.030
Let's use the 'App.js' as an example.

07:06.030 --> 07:14.860
It looks like we need to import 'React' and 'Component', so we need to say and 'import React, { Component } from 'react';'.

07:15.460 --> 07:16.170
Okay.

07:16.590 --> 07:25.080
And the reason we're doing this, again, this is destructuring instead of doing 'React.Component', we

07:25.080 --> 07:31.270
can now just do 'Component', and it means the same thing.

07:31.400 --> 07:34.370
Again looking at 'App.js', it looks like we say class

07:34.430 --> 07:39.440
'our Component name' extends component. Let's do that.

07:39.440 --> 07:41.800
class, we'll call this 'Hello', again,

07:41.800 --> 07:47.990
that's what our component is called, extends 'Component'.

07:48.040 --> 07:58.780
And again remember to change our Javascript to Babel. And if you remember one rule is that we always

07:58.780 --> 08:07.600
want to have a render function, and within this render function we tell it what we want to return.

08:08.070 --> 08:13.870
Well we want to return the 'hello world' example, but we can say 'h1'

08:16.630 --> 08:18.290
'Hello world' '/h1'.

08:21.940 --> 08:27.340
Okay let's see what happens when I do this: I save,

08:27.520 --> 08:31.650
And it says: export 'default' (imported as 'Hello') was not found.

08:31.650 --> 08:34.770
Well it's because we're not exporting this.

08:34.770 --> 08:42.660
Remember if we want another file to use it, we have to export. And we use 'export default' when we're just

08:42.930 --> 08:44.760
exporting one thing.

08:44.760 --> 08:50.880
If we use the word default that means this file only exports one thing and that is the 'App'.

08:50.880 --> 08:54.690
So I can say 'export default'

08:55.310 --> 08:57.650
'Hello'

08:57.730 --> 08:59.220
Let's save.

08:59.420 --> 09:01.100
Looks like it's working.

09:01.160 --> 09:03.070
Let's see what happens in our website.

09:03.500 --> 09:04.470
'Hello world'.

09:04.490 --> 09:12.300
We've just created our very first component. How cool is that! Now,

09:12.320 --> 09:14.290
right now we only have one line.

09:14.300 --> 09:22.610
But what if I wanted to do something like, div wrapping it in a div and maybe underneath here, I'll say

09:23.240 --> 09:31.550
a paragraph that says 'Welcome to React'.

09:31.630 --> 09:35.270
If I save this, I get another error.

09:38.020 --> 09:45.010
And it's because we're just giving it multiple lines here and 'return' is expecting a single thing.

09:45.280 --> 09:47.850
We need to wrap this in brackets.

09:49.020 --> 09:55.270
Like this, in order to have Javascript say, "Ah, this is an expression."

09:55.270 --> 09:57.190
"Evaluate this entire thing."

09:57.340 --> 10:05.690
If we save this, looks like it's working and then 'Hello World, Welcome to React'.

10:05.770 --> 10:06.580
Very cool.

10:07.710 --> 10:18.780
Within here, if you remember if we 'import './Hello.css';', we can create whatever CSS styles we

10:18.780 --> 10:25.620
want, but we need to create that file first. So let's do, new file,

10:26.050 --> 10:27.660
and I need to add an 'o' in here.

10:27.670 --> 10:32.090
The new file name will be 'Hello.css'. Now,

10:32.100 --> 10:34.720
in 'Hello.css', I can just say that the h1.

10:34.770 --> 10:40.150
And this is just standard CSS, will have background of red.

10:40.470 --> 10:42.320
I'm going to save,

10:42.330 --> 10:43.230
save this as well.

10:43.230 --> 10:44.400
Everything looks good.

10:45.320 --> 10:46.490
And look at that.

10:49.300 --> 10:55.480
But you know what, to make this faster and because we've gone over CSS, I want to show you a cool package

10:55.510 --> 11:05.080
called 'tachyons', and 'tachyons' allows us to have similar to bootstrap, predefined class names that we

11:05.080 --> 11:08.720
can just add to components to make things look really really nice.

11:08.770 --> 11:09.470
So let's do that.

11:09.490 --> 11:17.750
I'm going to close this and say 'npm install tachyons'.

11:17.800 --> 11:18.290
Alright.

11:18.290 --> 11:21.390
It's added to the package - we can check by going to 'package.json'.

11:21.410 --> 11:27.920
We see that 'tachyons' are there and we can use 'tachyons' very easily but just going to 'index.js'

11:27.920 --> 11:33.200
file and saying 'import 'tachyons';'.

11:33.420 --> 11:39.150
And now we have access to this package - just to show you what 'tachyons' are,

11:39.150 --> 11:42.510
if I go to 'tachyons styles', 

11:46.820 --> 11:54.200
that gives us a little classes that we can use that for example 'text center' we'll just say 'tc' and as long

11:54.200 --> 12:01.220
as we have 'tachyons' installed, we use 'tc' as class name, it will align our text.

12:01.330 --> 12:06.880
So now that we have 'tachyons' in this 'index.js' file, we can just say within here

12:10.990 --> 12:19.230
'class = 'f1'' for font 1 and 'text center' - I save.

12:19.340 --> 12:19.880
I have to do,

12:19.880 --> 12:20.960
'npm start' here.

12:20.960 --> 12:24.510
Make sure that our server is running, so that we can check our changes.

12:25.220 --> 12:30.970
And we get 'Hello World, Welcome to React'.

12:31.020 --> 12:33.210
But there's actually one trick here.

12:33.210 --> 12:39.270
If you open up the console, although this worked, I get a warning saying 'Invalid DOM property 'class''.

12:39.270 --> 12:41.330
'Did you mean 'className'?' - And React is

12:41.340 --> 12:50.810
really really good at giving you errors, and you might be asking yourself: why a 'className' instead of

12:51.050 --> 12:51.650
'class'?

12:51.800 --> 12:57.840
Because if I save this, go back, I no longer have that error.

12:58.400 --> 12:59.370
Why is that?

12:59.600 --> 13:04.310
Well up until this point, we've kind of just writing HTML,

13:04.610 --> 13:06.950
but this is a Javascript file.

13:07.040 --> 13:10.180
How are we able to do this?

13:10.190 --> 13:13.430
This is actually something called JSX.

13:13.430 --> 13:23.520
Part of the React, is that it allows you to write this HTML-like syntax in your Javascript. And you might

13:23.520 --> 13:32.790
be asking yourself, one, doesn't that break the rule of separation of concerns, and two, how are we even

13:32.790 --> 13:39.210
able to add HTML to Javascript. To answer the first question of separation of concerns, React has the

13:39.210 --> 13:44.910
idea of components, and that is: it's better to have functionality and styles per component so that each

13:44.910 --> 13:47.940
component is its own separate universe.

13:47.940 --> 13:50.160
And you just add these components.

13:50.670 --> 13:58.440
And the idea of separation of concerns with React, is that components, well they're concerned about themselves,

13:58.470 --> 13:59.260
nothing else.

13:59.430 --> 14:03.570
So it changes the paradigm here, and it's kind of nice right.

14:03.570 --> 14:05.090
I can just look at the 'Hello' component.

14:05.100 --> 14:06.410
I know exactly what it's doing.

14:06.420 --> 14:07.900
I can look at the CSS.

14:08.460 --> 14:14.730
And any time I need to make a change, I just need to worry about the files that contain the 'Hello.css'

14:14.730 --> 14:15.960
and 'Hello.js'.

14:15.960 --> 14:21.510
The second thing is this, this thing called JSX. Underneath the hood,

14:21.540 --> 14:29.040
what React is doing is actually letting me use this syntax but they're not actual HTML tags.

14:29.160 --> 14:34.890
Remember what I said about the virtual DOM and how React creates its own object and then looks at the

14:34.890 --> 14:39.360
DOM and compares it and says: 'Hmm I need to change this and it does it for us'?

14:39.360 --> 14:48.110
React uses JSX to create their virtual DOM, their fake DOM, that they built based on what we give it

14:48.120 --> 14:48.850
to them.

14:48.990 --> 14:55.350
Then they look at this virtual DOM and the real DOM, and say this part has changed.

14:55.350 --> 15:01.930
I'm going to change the  now based on the virtual DOM - and that is why React as really really fast.

15:02.070 --> 15:08.430
It creates these objects which is really fast in Javascript and only changes what needs to be done in the

15:08.430 --> 15:09.020
DOM.

15:09.360 --> 15:10.790
So just get used to it.

15:10.830 --> 15:18.240
It's awkward at first but again as long as you wrap it in a bracket, you can write here HTML, as

15:18.240 --> 15:24.180
well as your own custom components, such as 'Hello' that we used in 'index.js' file.

15:28.540 --> 15:39.600
And now maybe it makes sense why we can't say class here, because class is a reserved keyword in Javascript.

15:39.940 --> 15:42.830
Class is part of the language that Javascript uses.

15:42.840 --> 15:49.630
So if this is Javascript, the fact that we're saying class here doesn't make sense. In the old version of

15:49.630 --> 15:50.080
React,

15:50.080 --> 15:57.780
this actually broke React, but now it gives us a nice error. Because this is Javascript and not HTML,

15:57.790 --> 16:01.150
we have to say 'className', and it's something that you'll get used to.

16:01.150 --> 16:05.890
You'll get tricked up with, at the beginning but it becomes easy after a while.

16:06.040 --> 16:12.010
The last thing I'm going to show you is the part of React. Within the 'Hello' component,

16:12.040 --> 16:16.320
I can now add something called props or properties.

16:17.290 --> 16:19.270
And these props can be called anything.

16:19.270 --> 16:21.350
Think of them as HTML attributes.

16:21.370 --> 16:27.850
I can say 'greeting = []', and within here,

16:28.030 --> 16:35.520
I want to wrap it in curly brackets and this is a Javascript expression, whatever I want, I can say 'Hello'

16:38.980 --> 16:49.000
'React Ninja', and if I save this I get an error saying that no useless concatenation.

16:49.000 --> 16:53.970
So it's saying that: hey why are you even adding things when you can just put them all together.

16:54.070 --> 17:00.100
So it's smart enough to even give you suggestions or warnings when you're doing something that's not

17:00.100 --> 17:00.360
clean.

17:00.360 --> 17:03.050
But for now, for demonstration purposes, this is fine.

17:03.400 --> 17:11.120
Now that I've given it, what we call a 'greeting' prop to 'Hello', I now have access in 'Hello.js'

17:11.130 --> 17:14.640
to props. I can now say

17:17.190 --> 17:31.820
'this.props.greeting', I save this, go back, and I say 'Hello React Ninja'.

17:32.050 --> 17:43.650
You see, with this syntax, it's saying that this object, which is 'Hello', has properties 'props', that is 'greeting'.

17:44.060 --> 17:51.140
I know this is confusing,it is just the syntax you have to get used to, but now we have access to whatever

17:51.350 --> 17:57.100
property, and whatever property value we get from

17:57.270 --> 18:02.320
'Hello'. This is a power that will come in handy later on.

18:02.390 --> 18:08.080
But I want you to build your own component here and get comfortable with the syntax.

18:08.230 --> 18:14.110
It is really really powerful and once you get used to it, you can build any components you want.

18:14.350 --> 18:14.650
OK.

18:14.680 --> 18:15.670
One final thing.

18:16.760 --> 18:23.560
This index might be kind of difficult, but I want to show you that this is actually just a function.

18:23.730 --> 18:38.580
If I do 'const Hello', and in here, this function accepts 'props'. If I do an error function here,

18:39.030 --> 18:40.620
wrap it in curly brackets,

18:40.860 --> 18:47.620
and instead of doing this render, I just simply return

18:54.720 --> 19:02.670
If I saved this, well I'm getting an error because 'this.props.greeting' doesn't really exist

19:02.700 --> 19:05.220
because it's not an object anymore.

19:05.220 --> 19:06.120
It is a function.

19:06.120 --> 19:07.280
So I don't need the props.

19:07.290 --> 19:14.040
It receives props, whatever parameters we give it, and 'props.greeting' is acceptable to us.

19:14.070 --> 19:16.820
I save this, go back and look at that.

19:16.830 --> 19:17.710
It's working.

19:17.880 --> 19:19.820
It's just functions.

19:19.810 --> 19:27.510
Think of React as that: we're just creating these functions that take parameters and these parameters

19:27.780 --> 19:36.460
which are given by giving attributes and values, are just being rendered.

19:36.740 --> 19:43.410
I have access to 'props.greeting', if I give it another prop here called, let's say, a dog then I'll have

19:43.440 --> 19:47.110
'props.dog' available to me as well.

19:48.600 --> 19:54.210
And again we had a nice little error saying that 'Component', we're grabbing this but we're not really

19:54.210 --> 19:59.190
using it and we're using unnecessary string concatenation.

19:59.190 --> 20:05.770
Again really useful as you can see, fairly simple to pick up. In the next lesson,

20:05.780 --> 20:10.850
we're going to start actually working on our RoboFriends app, now that we have the basics.

20:10.880 --> 20:12.620
I'll see you in that one. Bye-bye.
