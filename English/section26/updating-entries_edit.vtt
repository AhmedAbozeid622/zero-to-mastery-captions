WEBVTT

00:01.300 --> 00:02.240
Welcome back.

00:02.470 --> 00:04.980
Let's work on the image endpoint here.

00:05.230 --> 00:11.840
And given what we've done so far, we can pretty much be sure that we won't be needing any of this.

00:11.860 --> 00:14.840
We're going to connect it to the database.

00:14.950 --> 00:20.710
Now the image endpoint, if you remember, updates the entries and it increases the count.

00:20.710 --> 00:28.560
So all we have to do is update and let's look at KNEX and see if they have the update function

00:32.790 --> 00:33.970
Yep they do.

00:33.990 --> 00:37.540
And they give us good examples of how to do it.

00:39.760 --> 00:42.170
So let's use this as an example.

00:43.030 --> 00:45.220
To create our update function

00:48.310 --> 00:49.690
we'll just copy it here.

00:52.530 --> 01:04.740
And we know that with our DB dot where we want to say that where the ID equals and it's not 3 equals because

01:04.740 --> 01:14.740
this is SQL where the ID equals the ID that we received in the body that we want to update the entries

01:16.090 --> 01:21.100
to be higher than the entries that is currently there.

01:21.140 --> 01:22.990
But how can we do that.

01:23.160 --> 01:26.660
How can we grab the entries from the database and increase it.

01:26.660 --> 01:34.230
Again this is a problem that's very common and is said of selecting the ID grabbing whatever the entries

01:34.230 --> 01:35.890
is and updating it.

01:36.300 --> 01:46.080
Well we can simply use something called increment and increment just tells us the column and the amount

01:46.080 --> 01:49.110
we want to incremented by. Very cool.

01:49.230 --> 01:49.870
Let's do it.

01:50.160 --> 02:00.200
Let's say that user ID instead of update was just to increment and we'll do entries and we just want

02:00.200 --> 02:01.140
it by one.

02:01.450 --> 02:06.280
And the default is one I'm pretty sure but I always like being explicit so that people know what's going

02:06.280 --> 02:09.020
on when they read the code and let's do that.

02:09.430 --> 02:22.110
So we increment by one and then we want to say returning the entries let's do a dot then and see what

02:22.110 --> 02:22.470
we get

02:29.450 --> 02:30.530
console dot log

02:33.340 --> 02:44.790
entries and let's save. Go back to postman. Let's find our image endpoint that has a body of ID and

02:44.790 --> 02:47.940
we'll have to give it an ID that actually exists for now.

02:47.950 --> 02:59.840
So let's just do one send. And going back here we don't get anything because well we need to do a put request.

02:59.850 --> 03:07.380
Remember we changed it to put we send again and it's hanging because we haven't given it a response

03:07.380 --> 03:09.270
so we'll just cancel the request for now.

03:09.410 --> 03:16.610
But if we go back to the server Well we can see that there's a bit of an error here and we definitely

03:16.610 --> 03:18.600
made a silly error here.

03:18.620 --> 03:22.370
It has no idea what database we're talking about.

03:22.370 --> 03:29.310
We need to actually say users here. The SQL errors are sometimes can be really confusing.

03:29.380 --> 03:33.720
But like I said it is pretty declarative.

03:33.720 --> 03:40.340
So as long as you can read it and understand it with KNEX errors are to a minimum unless you're like

03:40.340 --> 03:43.070
me and you forget to actually mention the table.

03:43.070 --> 03:43.970
Let's try that again.

03:44.930 --> 03:45.600
Sent.

03:45.720 --> 03:48.730
We're going to counsel the requests because there's no response.

03:49.070 --> 03:52.440
But now I have one return.

03:52.580 --> 03:56.300
If I send it again cancel the request.

03:56.370 --> 04:05.220
I have two. If I go back to the database and I select all I see that Ann now has entries of two. Amazing.

04:07.740 --> 04:08.630
So we can go back here

04:08.640 --> 04:15.570
now, knowing that this works. Let's say that entries, we want to - again, return the first array, because we

04:15.570 --> 04:22.670
get one and in stead of console logging we'll say response dot json entries.

04:22.990 --> 04:32.170
But if something fails then we will do a dot catch just like we failed over here and we can say that

04:32.350 --> 04:45.820
error response dot status we'll give it another 400 we'll say Json unable to get count or entries

04:48.180 --> 04:55.260
We will save that and I'm going to actually remove this to make sure that the error is working.

04:55.260 --> 04:58.430
So it should return me a 400.

04:58.560 --> 05:00.030
Let's try that again.

05:00.200 --> 05:04.590
Send. Unable to get entries. 400 request.

05:04.840 --> 05:16.310
But if I fix this to users and select Ann again, I get three.

05:16.390 --> 05:22.660
All right we got our image endpoint working and we have our final endpoint to work on which is sign in

05:24.340 --> 05:25.690
that's for the next video.

05:25.960 --> 05:26.800
I'll see you on that one. Bye-Bye.
