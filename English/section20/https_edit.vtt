WEBVTT

00:01.450 --> 00:07.380
In 1989 Tim Berners-Lee invented the HTML that changed the world.

00:07.400 --> 00:13.930
But HTML wouldn't really do much if we couldn't fetch documents from around the world and different computers.

00:13.930 --> 00:16.860
For that to happen

00:16.870 --> 00:24.280
Tim built the 'Hypertext Transfer Protocol' or HTTP for short.

00:24.290 --> 00:29.810
Now remember these arrows from the diagrams that we've had.

00:30.020 --> 00:37.070
We told you that these arrows were simply the connected wires and cables that connected the worldwide

00:37.250 --> 00:37.860
web.

00:38.840 --> 00:39.960
"This, right?

00:39.980 --> 00:46.590
You remembered the diagram." But you see these are just wires.

00:46.610 --> 00:53.840
There are no instructions on how to do things for that you need something called a protocol.

00:53.840 --> 01:00.830
Think of it as a standard that everyone follows. If everyone agrees then the protocol works and can be

01:00.830 --> 01:11.570
used by everyone. HTTP that I have here is a protocol which allows the fetching of resources such as HTML

01:11.700 --> 01:12.630
documents.

01:12.670 --> 01:17.470
I mean it's in the name right Hypertext Transfer Protocol.

01:17.540 --> 01:24.120
Now with the use of a HTML and HTTP we now have the World Wide Web.

01:24.260 --> 01:31.610
We can grab HTML files and receive them if we go to 'google.com/about' we go to the about

01:31.610 --> 01:34.260
HTML page we grab it and receive it.

01:34.280 --> 01:43.290
So HTTP is the protocol or the rules that we use over the wires.

01:43.440 --> 01:50.550
It is the foundation of any data exchange on the web and it pave the way for something called a client

01:50.730 --> 02:01.870
server protocol which means requests are initiated by the recipient which in our case is the web browser.

02:01.950 --> 02:09.240
So they send out a request using HTTP. The server now understands what the web browser is saying because

02:10.200 --> 02:18.000
it's speaking in HTTP and the server can now respond with HTML and the browser understands it because

02:18.270 --> 02:20.310
it's speaking through HTTP

02:20.340 --> 02:21.780
once again.

02:21.940 --> 02:29.950
So you should think of HTTP as a common language that a client and a server can use to communicate.

02:29.950 --> 02:33.930
They're simply saying Hey can you give me this document.

02:34.170 --> 02:36.570
And the server can say yep no problem.

02:36.630 --> 02:37.920
Here it is.

02:37.920 --> 02:43.330
And up until this point we haven't really spoken to a server in our app have we?

02:43.440 --> 02:50.160
We build the front end applications or the client facing applications using HTML, CSS, javascript

02:50.190 --> 02:54.120
and react but we lived in our own world.

02:54.340 --> 03:01.860
No communications with another computer. HTTP allows us now to communicate with servers, with the outside

03:01.860 --> 03:02.990
world.

03:03.060 --> 03:06.050
So let's go over the terminology one more time.

03:06.200 --> 03:15.780
Clients and servers can communicate by exchanging individual messages. The messages sent by the client

03:16.320 --> 03:28.180
usually a web browser are called requests and the messages sent by the server are usually called responses.

03:28.220 --> 03:35.120
So if HTTP is the language that allows us to communicate between these two teach me some of the

03:35.120 --> 03:35.990
words right.

03:36.290 --> 03:37.690
I mean that's a good question.

03:37.820 --> 03:44.690
And lucky for you HTTP is quite easy to learn because you only have a few words and I'm going to show

03:44.690 --> 03:45.940
you what they are right now.

03:46.070 --> 03:51.910
You have 'GET' you have 'POST' you have 'PUT'.

03:51.990 --> 03:53.880
And finally you have 'DELETE'.

03:57.360 --> 04:00.130
and now you're thinking "umm that's it?"

04:00.130 --> 04:04.880
And yeah HTTP is beautiful because it's just simple.

04:04.920 --> 04:06.660
You don't need to overcomplicate things.

04:07.750 --> 04:15.520
You learn these four words and these languages and you can built the app of your dreams.

04:15.520 --> 04:18.810
So let's go through it one by one. 'GET' means

04:18.820 --> 04:22.530
Well I want to get an HTML file.

04:22.660 --> 04:28.360
So you ask to get something and the server responds with that request.

04:28.420 --> 04:31.700
A 'POST' says I want to post something.

04:31.710 --> 04:38.410
So that is I'm going to send over some data to Google servers and I want you to 'POST' -I want you to add it

04:38.950 --> 04:44.520
to your servers or your database. 'PUT' is

04:44.780 --> 04:46.530
I'm going to send you some data.

04:46.700 --> 04:51.950
And I want you to update some data that already exists in Google servers and just update it with this new

04:51.950 --> 04:59.270
information and then 'DELETE' means well delete a piece of data on the backend- on the servers or on the

04:59.270 --> 05:01.240
database.

05:01.250 --> 05:08.270
So if we use Twitter as an example 'GET' will be to receive the Twitter feed with all the tweets from

05:08.270 --> 05:18.450
today. 'POST' would be if you created a new user and you want to add that user to the Twitter servers. 'PUT'

05:18.600 --> 05:25.880
would be if you made a tweet but you want to make a change or an edit so you edit that tweet and 'DELETE'

05:25.890 --> 05:32.080
will mean well you either delete your user account or delete a tweet. And don't worry we're going to

05:32.080 --> 05:36.130
use these when we get to the backend section and we build our final project.

05:36.520 --> 05:45.040
Now over the years HTTP was extended to not only worry about text. Not only fetch hypertext documents

05:45.040 --> 05:53.500
like HTML, but also images and videos and post content to servers like with HTML form results.

05:53.650 --> 06:01.300
and HTTP can also be used to fetch part of documents to update web pages on demand which is called AJAX

06:01.750 --> 06:04.900
and we have a video coming up talking about this.

06:05.020 --> 06:09.170
But the main idea still stands using these four verbs

06:09.190 --> 06:13.230
we just learned, we can now communicate with servers.

06:13.340 --> 06:13.630
All right.

06:13.630 --> 06:23.220
So we know that this arrow over here at the top uses HTTP to make requests using one of these four verb's.

06:23.230 --> 06:23.680
Okay,

06:23.700 --> 06:27.630
so I think you get the request part. Now,

06:27.700 --> 06:29.320
what does the server respond with?

06:29.320 --> 06:30.770
What about response here?

06:30.850 --> 06:38.140
The server sends you two main things. one is an HTTP message.

06:38.210 --> 06:42.780
That is something that you've definitely seen before and I'll link to this

06:42.800 --> 06:49.360
W3school's resources a 200 message means successful.

06:49.410 --> 06:57.250
You probably have seen 200 OK before you might have seen 404 messages which means not found.

06:57.390 --> 07:03.530
If you enter a URL that doesn't exist you'll get a 404 and maybe sometimes you'll get a 500

07:03.570 --> 07:05.080
error message that is

07:05.230 --> 07:07.260
Well there's something wrong with the server.

07:07.530 --> 07:15.000
So this is just a number code that comes with every response that tells you the response of the server.

07:15.000 --> 07:16.080
So that's the first one.

07:18.390 --> 07:22.980
The second one is usually some sort of data like HTML.

07:23.190 --> 07:25.530
And so far that's what we've been doing HTML.

07:25.830 --> 07:31.160
But in the next videos I'll show you that it can send other things other than just simple HTML.

07:31.230 --> 07:33.600
So let's add to this diagram now.

07:34.230 --> 07:43.760
We want to say that this also has a status code and we'll say 200 for now that everything was fine and in

07:43.790 --> 07:50.770
the response would give the status code plus the new HTML file.

07:51.020 --> 07:51.890
All right.

07:52.070 --> 07:56.900
Let's actually demonstrate this online to see how you can watch this action take place.

07:58.360 --> 08:04.410
I have over here a great Web site called 'example.com' and it's a simple web site you can go visit it

08:04.510 --> 08:05.330
right now.

08:05.440 --> 08:12.830
But the cool part about it is if you open up your developer console, up to this point we've looked at

08:12.830 --> 08:20.450
the elements tab and then the console tab I want to show you the Network tab that we have here. Now

08:20.450 --> 08:21.620
the Network tab-

08:21.980 --> 08:27.610
You might have to click on some of these icons and you'll see that different things will pop up.

08:27.710 --> 08:30.900
Make sure that the filter is gone.

08:31.780 --> 08:39.960
Everything is  un-clicked and now at 'example.com' while this is open just simply refresh

08:43.010 --> 08:44.420
and look at that.

08:44.600 --> 08:47.880
I'm going to click on this icon which makes it a little bit bigger.

08:47.900 --> 08:52.010
This is a plugin so don't worry about this javascript but the top thing it says.

08:52.010 --> 08:55.940
"example.com"  "Status: 200 OK"

08:55.970 --> 09:03.140
And "Type: document" and it even tells me the size - the time that it took to get this which is 53 milliseconds...

09:03.140 --> 09:04.760
That's pretty fast.

09:04.760 --> 09:07.790
So that means the server responded with 200.

09:07.790 --> 09:13.830
If I click on this I get a whole bunch of things that we don't really need to worry about but a few

09:13.830 --> 09:16.080
things 'Request URL'

09:16.080 --> 09:23.340
this is what we requested. We get a status code of 200 from the server.

09:23.340 --> 09:31.280
And if we click on the Response there's a Response message we received the HTML document from the

09:31.280 --> 09:32.760
server.

09:32.860 --> 09:36.870
If we go back to Headers we also see that our request method was a 'GET'.

09:36.970 --> 09:44.430
We did a 'GET' request. Let's close this and refresh again.

09:44.490 --> 09:48.880
I now get a 304 status. A 304

09:48.930 --> 09:55.050
If we look over here means not modified indicates the request page has not been modified since the

09:55.050 --> 09:59.150
last requested. Because I've already requested this

09:59.170 --> 10:04.800
now Google is smart enough to say oh I'm not going to worry about the server and requesting the same

10:04.800 --> 10:05.640
thing over and over.

10:05.640 --> 10:09.960
I already have it memorized so here it is.

10:10.130 --> 10:10.730
Very cool.

10:10.730 --> 10:13.740
So Network tab is really really useful for that.

10:14.030 --> 10:14.420
All right.

10:14.420 --> 10:20.330
So you can go ahead and play with 'example.com' and see for yourself how HTTP works.

10:21.970 --> 10:29.590
And by the way yes this HTTP that you see here that's what it means when you do an HTTP request it says

10:29.680 --> 10:34.340
hey do HTTP -we're using the worldwide web.

10:34.640 --> 10:38.260
And go request this from the server.

10:38.450 --> 10:39.110
Very cool.

10:39.140 --> 10:40.650
And if you're wondering about the 's'.

10:40.670 --> 10:43.850
Don't worry I'll let you know at the end of this video what that means as well.

10:46.410 --> 10:46.970
All right.

10:47.120 --> 10:49.780
Now what if I want to send data.

10:49.850 --> 10:53.790
If we go back to our diagram I'm just doing a 'GET' request.

10:53.840 --> 10:58.090
But what if I want to actually send some information to the server.

10:58.100 --> 11:02.120
Other than some URL saying I want this information.

11:02.120 --> 11:04.330
Well there's two ways that you can do it.

11:05.440 --> 11:08.300
One is something called query string.

11:08.530 --> 11:13.140
And then the second one is through the body of the request.

11:13.250 --> 11:20.450
So I'm going to show you how both of those work I have over here the form that we created in our first

11:20.660 --> 11:24.270
advanced HTML section when we only knew HTML.

11:24.860 --> 11:25.990
Let's open this file up.

11:29.810 --> 11:30.850
I have it over here.

11:30.870 --> 11:34.650
If I double click -ahh you remember this don't you.

11:34.650 --> 11:37.990
We've come a long long way. In this form

11:38.100 --> 11:46.280
if you remember we had a form method 'GET' and now you might understand what this 'GET' means.

11:46.320 --> 11:52.220
It's saying with this form I want you to do a 'GET' request.

11:52.350 --> 11:59.960
Let's see what happens when I click register while opening the network tab.

12:00.160 --> 12:04.000
I'm going to click 'Register!'.

12:04.010 --> 12:04.650
All right.

12:04.730 --> 12:07.190
So we have this request.

12:07.190 --> 12:14.810
We see that we have made a request and it has created these things called query strings.

12:14.840 --> 12:21.370
The first way of sending data to the server. With a 'GET' request if you want to send information through a

12:21.380 --> 12:29.710
form it adds it to the URL using this questionmark which says hey I'm about to send you some query

12:29.710 --> 12:34.400
strings and it's going to have a key and a value.

12:34.630 --> 12:36.550
In this case first name, last name

12:36.550 --> 12:38.310
everything's empty so there's no information.

12:38.320 --> 12:42.110
But otherwise I'll say first name equals Andrei.

12:42.400 --> 12:51.900
If I click on this we see that there's Query String Parameters that we've sent. We have first name,

12:51.960 --> 12:55.370
last name, email, password and birthday which is blank.

12:55.710 --> 13:02.590
But if we scroll down in cars default is Volvo so that we have Cars: Volvo.

13:02.730 --> 13:07.140
So this information now is sent to the server.

13:07.140 --> 13:10.260
That's query string parameters using 'GET'.

13:10.260 --> 13:12.390
And we did mention one thing though.

13:12.480 --> 13:16.530
We see that we have password in here that's not very secure is it.

13:16.560 --> 13:27.850
If I went back to the form and I type in 'secret' and I click register again Well now I have my password

13:28.270 --> 13:34.900
out in the open sent over the wire and I even have it up here in my URL bar.

13:35.070 --> 13:35.370
All right.

13:35.370 --> 13:36.350
We'll get back to that.

13:37.790 --> 13:39.060
So that is one way.

13:39.170 --> 13:44.930
The second way is through the body of the request.

13:44.930 --> 13:48.210
Let me show you how that works the way we send information to

13:48.230 --> 13:57.110
the body is we use a 'POST' request and this is something that you'll more often see than a 'GET' request

13:57.110 --> 14:04.690
is that we want to add some form data to the server so we want to post something if I change this over

14:04.690 --> 14:06.790
here I'm going to save this.

14:06.970 --> 14:09.300
And let's open up a new tab.

14:10.430 --> 14:14.920
With a new saved data this one is a post form.

14:15.010 --> 14:23.540
If i open it up here and I type in password 'secret' and I click on 'Register!'

14:26.590 --> 14:32.230
I get 'register.html' but no query strings.

14:32.350 --> 14:33.370
If I click on this,

14:36.350 --> 14:41.290
I see that now instead of query strings it's form data.

14:41.480 --> 14:48.650
And it even says 'Content-Type: application/x-www-form-urlencoded'.

14:49.070 --> 14:57.830
And this is just an HTML way of saying that this is a form and this is the body but not displaying here.

14:57.860 --> 15:03.200
So now the server can access it not from the query params and don't worry I'll show you how servers

15:03.200 --> 15:03.780
do that.

15:03.860 --> 15:09.740
When we get to the backend section. Instead of accessing it through the query params I can now access

15:09.740 --> 15:12.160
it through the form data.

15:12.170 --> 15:15.440
So let's go back to the diagram.

15:15.610 --> 15:22.850
We now understand that we can do HTTP requests using 'GET', 'POST', 'PUT' and 'DELETE'.

15:22.850 --> 15:35.140
I can use query strings which are at the top of the URL to send the data or the body of the request

15:35.500 --> 15:41.350
and then the server responds with a status code based on how my request was and it returns that with

15:41.350 --> 15:42.440
a response.

15:42.820 --> 15:52.290
But the one issue we saw was that well the password was visible in both cases wasn't it?

15:52.300 --> 15:57.550
And what if we had a -have a scary looking person over here.

15:57.560 --> 15:58.360
There you go.

15:58.580 --> 16:08.140
What if we had a person who was watching our communication our HTTP requests and monitoring it.

16:08.380 --> 16:15.370
If I used query strings to put my password in there well he can just look over my shoulders and see

16:15.440 --> 16:18.790
oh Andrea's password is secret.

16:18.790 --> 16:29.510
I can now log into his Google account or if I use the body way of sending data well he can find a way

16:29.510 --> 16:33.460
to get this request to come over to him first. And

16:36.900 --> 16:44.160
Just look at the form data and see that my password is secret. "That's not 

16:44.180 --> 16:44.750
very good is it?"

16:44.750 --> 16:57.210
Well one solution to this was the idea of HTTPS. Now HTTPS means Hypertext Transfer

16:57.240 --> 17:06.820
Protocol Secure and you can see over here that "W3C" uses the secure version of HTTPS.

17:06.860 --> 17:11.280
The communication between the browser and the Web sites are now encrypted.

17:12.610 --> 17:13.330
And what does that mean?

17:13.330 --> 17:22.380
Encrypted just means that it's jumbled up so only the client and the server know the secret pass or

17:22.390 --> 17:25.360
secret key to read the message.

17:26.740 --> 17:35.050
And this 'S' part the secret uses a technology called transport layer security or its predecessor secure

17:35.050 --> 17:41.870
sockets layer or TLS and SSL for short.

17:41.920 --> 17:51.820
So now even with HTTPS if the attacker or what we call a man in the middle the person who is just monitoring

17:51.820 --> 17:58.030
our requests. Even if they get our password it's going to be just complete jibberish that's going to

17:58.030 --> 18:06.120
have something similar to this and well that's not our password so it's going to be meaningless it avoids

18:06.170 --> 18:07.690
that attack.

18:07.690 --> 18:08.960
This is just the tip.

18:09.280 --> 18:17.040
As a developer that you should tell all your friends if you're ever sending sensitive information maybe logging

18:17.040 --> 18:18.330
into a bank account.

18:18.450 --> 18:26.130
Make sure that there's HTTPS out there if there's no HTTPS when you're sending - maybe your login

18:26.130 --> 18:27.560
with your password.

18:27.690 --> 18:30.250
Well that's not secure.

18:30.400 --> 18:30.890
All right.

18:31.010 --> 18:40.860
Let's review. Your web browser is a HTTP client sending requests to the server machines. When the browser

18:40.920 --> 18:48.930
user enters follow requests by either opening a file or typing a URL or clicking on a hypertext

18:48.930 --> 18:50.500
link an anchor tag.

18:50.880 --> 18:56.530
The browser builds an HTTP request and sends it to communicate with the server.

18:56.730 --> 19:02.380
Now the server can get information back to us. The earliest version we could use

19:02.470 --> 19:09.430
URL parameters such as 'www.google.com/about' and just specifically get HTML.

19:09.510 --> 19:11.020
That was it.

19:11.050 --> 19:18.950
Then came the form so we can now actually send more data other than just the URL saying we

19:18.950 --> 19:20.880
want to go to this HTML file.

19:21.260 --> 19:34.930
Now we could use 'GET' or 'POST' to send data. Either through a body or a query string and a server can take

19:34.930 --> 19:40.540
action based on that data and return a new page.

19:40.630 --> 19:47.200
And this is the foundation of the web and how the worldwide web we have now was made possible. Through

19:47.380 --> 19:53.140
client server communication. In the next few videos we're going to learn even more.

19:53.390 --> 19:56.820
To really understand this power I'll see you in the next one. Bye-bye.
