WEBVTT

00:00.610 --> 00:01.850
We'll come back.

00:01.850 --> 00:07.970
I've given you some starter files so I recommend watching these videos as you code along as well on

00:08.060 --> 00:09.510
your computer.

00:09.530 --> 00:16.520
We have a few animal carts here that are extremely cute obviously right now if we look at what we have

00:16.520 --> 00:24.310
we have an HD m.p.h. with just simple divs that contain these little emojis of animals.

00:24.440 --> 00:32.450
And if we go to the style tab of prefilled a few things for you just so things look good but all we're

00:32.450 --> 00:39.710
really doing here is we have a few colors and we've added gradients here just so it looks a little bit

00:39.710 --> 00:48.680
nicer and we have the zones which are these individual cards with some predefined CSSA properties that

00:48.680 --> 00:54.360
we've already seen in the previous videos just with this base CSSA that we have.

00:54.410 --> 00:57.920
We see that we have some really nice looking cards.

00:58.190 --> 01:02.000
And right now we're using display in line block.

01:02.210 --> 01:08.570
If I change just to display block and I save this let's refresh.

01:08.570 --> 01:18.430
We see that we now have blocks that's great but we want a little bit more control and perhaps make this

01:18.430 --> 01:21.520
grid a little bit more responsive.

01:21.610 --> 01:28.000
Maybe look a little bit different and just overall cleaner and when it comes to grids CSSA grid is a

01:28.000 --> 01:28.450
way to go.

01:28.450 --> 01:30.080
So how do we use it.

01:30.520 --> 01:38.040
Well the first thing we need to do is to have a container around these items.

01:38.180 --> 01:47.030
So I'm just going to create a new div and give it a class of container we can name and whatever we want

01:47.060 --> 01:48.560
but containers are nice.

01:49.970 --> 01:51.620
Descriptive class name.

01:51.860 --> 01:56.190
And we wrap all the items in this container.

01:56.210 --> 02:01.490
Now the way CSSA grid works is very similar to fluxbox.

02:01.580 --> 02:12.770
That is we give it the property of display grid and all the children will now be able to be part of

02:12.830 --> 02:14.960
this grid system.

02:14.960 --> 02:16.820
So let's see what that looks like.

02:16.820 --> 02:25.530
I'm going to have the container class and this container class will have display

02:29.260 --> 02:30.020
grid.

02:30.250 --> 02:33.150
So remember with fluxbox we can do flex.

02:33.250 --> 02:34.150
It's similar to that.

02:34.180 --> 02:40.300
We do display grid and we no longer want to use the display block of the zones because we're going to

02:40.300 --> 02:41.530
have a grid system.

02:41.530 --> 02:46.510
So I'm just going to comment this for now we've just declared this has a grid system but we actually

02:46.510 --> 02:47.930
need to tell it what to do now.

02:48.160 --> 02:59.770
And the most important part of CSX grid is this property grid template columns and most likely you're

02:59.770 --> 03:06.410
going to be using this in all your CSSA grid implementation and where we can use these grid template

03:06.410 --> 03:11.960
columns is to tell our page how many columns we want to use in here.

03:11.960 --> 03:24.250
If I say something like 300 pixels and 300 pixels I save and refresh your look at that I have 300 pixels

03:24.340 --> 03:32.230
and then 300 pixels and automatically it because I've declared it this way with two definitions or two

03:32.230 --> 03:33.730
values.

03:33.730 --> 03:39.420
It assumes that we have two grids two grids of three hundred pixels and 300 pixels.

03:39.430 --> 03:52.140
So if I make this larger or smaller it's always going to have 300 pixels to columns.

03:52.270 --> 03:58.420
If I had let's say a now there are 300 pixels here and save refresh.

03:58.420 --> 04:00.050
Look at that.

04:00.230 --> 04:02.420
We now have three columns.

04:02.480 --> 04:04.070
Very very nice.

04:04.070 --> 04:11.400
And now the one day you'll see a lot of is the grid gap.

04:11.520 --> 04:17.040
And as you might guess from the name it tells us how much gap we want between the grids.

04:17.070 --> 04:24.640
So if I do 20 pixels here and I refresh see that we get 20 pixels of gap.

04:24.750 --> 04:26.760
Now this looks really good right now.

04:26.760 --> 04:35.470
But if I change things around this isn't really responsive because each column is 300 pixels wide.

04:35.730 --> 04:40.180
And as we know users have different display sizes.

04:40.410 --> 04:45.690
So you get these ugly grids where you have a white space over here.

04:45.690 --> 04:49.110
How will we go about solving this.

04:49.240 --> 04:57.250
And you might be thinking what if we just do percentages here what if we had four columns and we say

04:57.250 --> 05:04.850
25 percent 25 percent 25 percent 25 percent refresh this

05:09.920 --> 05:13.800
I have four columns but there's still some scrolling involved

05:16.660 --> 05:20.070
although we see that things are a little bit more responsive now.

05:23.240 --> 05:29.360
Now you can totally do percentages with great Templi columns and it's definitely a lot better than using

05:29.360 --> 05:35.160
something like pixels but you now have to start calculating the fact that you also have a grid gap of

05:35.180 --> 05:42.140
twenty pixels and well see SS great actually gives us a really really good tool that I recommend you

05:42.140 --> 05:48.010
use 100 percent of the time instead of percentages or pixels or yams or rpms.

05:48.320 --> 05:53.170
And that is called a far or a fraction.

05:53.260 --> 06:00.940
Now what does the FRC index mean if I do want F are here and I save Now let's refresh.

06:00.940 --> 06:10.090
All right I get one item as far means we have a one fraction in this column so just fill it all up.

06:10.250 --> 06:17.160
If I do one f are again and I refresh I get two collops.

06:17.400 --> 06:21.720
But look at this as I expand and make it smaller.

06:22.030 --> 06:30.160
It automatically resizes because I'm saying I want two columns that are one far one for

06:32.990 --> 06:33.270
now.

06:33.280 --> 06:41.440
A better way to explain what this far value means is if I do something like too far here what do you

06:41.440 --> 06:42.260
think will happen.

06:43.050 --> 06:48.560
If I save and refresh this should give you a better idea.

06:48.560 --> 06:52.190
All we're saying is we want 3 columns.

06:52.330 --> 07:02.000
And in terms of the proportion or the sizes I want the first two columns to be half the size of the

07:02.000 --> 07:02.730
Thirkell.

07:02.830 --> 07:07.690
Because in terms of fractions This is twice as big as the other ones.

07:09.580 --> 07:16.330
As I make this larger and larger it's always going to say and keep those proportions.

07:16.360 --> 07:19.280
This is going to be twice as large as the other ones.

07:22.790 --> 07:29.990
So when you using CSSA grid this is the best way for you to maintain this grid system and make sure

07:29.990 --> 07:31.840
that it's responsive.

07:31.850 --> 07:33.110
How cool is that.

07:33.410 --> 07:39.800
Just by writing three properties saying that we want to use the grid system adding maybe a great gap

07:40.040 --> 07:48.550
and grid template columns with these F R values we've made a grid system that is quite responsive but

07:48.550 --> 07:52.260
there are a few more properties that we can use in CSSA grid.

07:52.270 --> 07:54.100
So let's check them out in the next video.
