WEBVTT

00:01.060 --> 00:09.590
Welcome back in the previous videos we learned about HTTP and JSON. We learned that we can send requests

00:09.650 --> 00:14.830
and get responses. But there's one issue. Up until now

00:14.920 --> 00:23.720
every time we need to communicate with the server we make that request then the browser when it receives

00:23.870 --> 00:29.930
the response does a page refresh. Originally

00:30.810 --> 00:35.710
page loading on the web was simple you'd send a request for a web site to a server.

00:35.940 --> 00:43.350
And as long as nothing went wrong the assets would be downloaded by the web page and displayed on your

00:43.350 --> 00:44.150
computer.

00:45.280 --> 00:51.820
The trouble with this model is that whenever you want to update any parts of the page for example display

00:51.820 --> 00:59.390
a new set of products like on Amazon. Well you'll have to load the entire program again,

00:59.510 --> 01:09.050
even the outline, even the navigation bar at the top. Everything had to get reloaded- a complete page refresh.

01:09.080 --> 01:16.070
This is extremely wasteful and results in a poor user experience especially as pages get larger and more

01:16.070 --> 01:17.770
complex.

01:17.930 --> 01:20.220
You can think of it on the Udemy website.

01:20.810 --> 01:34.640
If we go to Udemy, well if I click on let's say marketing, The top bar you will remain. Did you see that?

01:34.640 --> 01:37.230
It's a nice user experience.

01:37.520 --> 01:41.500
I can click on tabs and I won't get a complete page refresh.

01:41.510 --> 01:48.630
It's -well it loads data automatically on the page.

01:48.640 --> 01:55.450
Now this issue that we had here led to creation of technologies that allow web pages to request small

01:55.450 --> 02:04.520
chunks of data such as HTML, XML, plain text, JSON and display them only when needed.

02:05.740 --> 02:07.990
Helping to solve this refresh problem.

02:09.340 --> 02:14.010
And the technology was called AJAX.

02:14.040 --> 02:22.470
It allows you to read from a web server after the page has loaded and update a web page without reloading

02:22.470 --> 02:31.610
the page. And finally send data in the background while the user is interacting with the Website.

02:31.660 --> 02:40.000
It was actually pioneered by Google in 2006 and now is what we expect of websites and any web app you

02:40.000 --> 02:42.790
see online uses Ajax now.

02:42.800 --> 02:50.920
You see Google had this big problem when we're searching something, well, you would initially type

02:50.920 --> 02:56.430
in 'apple' and it would do a complete page refresh.

02:56.430 --> 03:03.270
But now with this I can maintain the top bar and have this loaded.

03:03.410 --> 03:05.050
I can even have suggestions

03:07.980 --> 03:09.190
Brought up from the server.

03:09.300 --> 03:17.070
And this is all a response from the server saying these are some of the suggestions based on

03:17.080 --> 03:18.200
Apple store.

03:18.650 --> 03:24.410
So it was a big problem for Google and they were able to solve it with Ajax but now we all have this

03:24.410 --> 03:25.650
ability.

03:25.670 --> 03:27.530
So how are we able to do this.

03:27.530 --> 03:37.430
"What is Ajax?" AJAX is just a technology- a method of combining pieces together to achieve this.

03:37.590 --> 03:46.280
And it was achieved using a tool that browsers built and it was called XML HTTP request.

03:46.620 --> 03:49.670
It looked something like this.

03:50.130 --> 03:58.110
You created a new XML HTTP request object. As you can see it looks a little bit tough.

03:58.980 --> 04:08.810
You make a request -you make a get request at this URL you say onload when it loads. If the

04:08.810 --> 04:15.200
status the response is greater than 200 or less than 400.

04:15.200 --> 04:16.300
It's a success.

04:16.310 --> 04:25.880
We're going to parse the response text remember because we're receiving a string from the server. If it's

04:25.880 --> 04:36.640
not a success well we can return an error and we then send our request and also listen for any errors.

04:37.320 --> 04:44.440
It looks pretty tough but it is things that we've gone over. But don't worry we actually don't do this

04:44.440 --> 04:44.770
anymore.

04:44.770 --> 04:49.560
This was the old way of doing it when Ajax was first introduced.

04:49.570 --> 04:52.980
jQuery came along and said well this is kind of tough to do

04:52.980 --> 04:58.320
every time. We'll make it easy for you by just doing this.

04:58.550 --> 05:01.820
And that was another part of the reason that jQuery was popular.

05:01.820 --> 05:05.700
We can just do Ajax requests doing this method.

05:06.050 --> 05:11.690
But now there's actually an even nicer newer way that we've used actually when we build our react

05:11.690 --> 05:17.220
app and it's supported by the browsers and that is called fetch.

05:17.510 --> 05:26.930
As you remember it was fetch at the URL and then we did this '.then(response)' and we received a response.

05:26.930 --> 05:31.790
Now this is a really good thing because page updates are a lot quicker and you don't have to wait for

05:31.790 --> 05:33.140
the page to refresh.

05:33.140 --> 05:36.660
Meaning that the site feels faster and more responsive.

05:38.390 --> 05:44.250
Also less data is downloaded on each update, meaning less wasted bandwidth.

05:44.750 --> 05:50.840
And this is a major, major issue especially on mobile devices where internet connection might not be

05:50.840 --> 05:52.460
as good.

05:52.580 --> 06:03.370
Ajax allows web pages and by extension web applications to change content dynamically and it is everywhere.

06:04.080 --> 06:06.510
It is something that is just very nice.

06:06.510 --> 06:14.140
It looks intimidating but it's just a matter of doing this fetch that does HTTP for you and all you

06:14.140 --> 06:21.090
do is say if you want to do a GET, a POST and add some JSON data to that request.

06:21.220 --> 06:29.460
So let's review again what happens with Ajax. An event occurs on a web page such as logging in and I

06:29.460 --> 06:34.200
click sign in. XML HTTP request object-

06:34.290 --> 06:41.280
Again something that web browsers have implemented is created and that's created using javascript.

06:41.560 --> 06:49.800
XML HTTP request object sends a request to the web server the server processes the request and then the

06:49.920 --> 06:54.500
server sends a response back to the web page.

06:54.590 --> 07:03.650
The response is read by javascript and the user is able to login. At the same time only updating a small

07:03.650 --> 07:06.490
portion of the window.

07:06.530 --> 07:12.380
That is what a single page application is and its a word that you've probably heard before and it's a trend

07:12.410 --> 07:21.770
in how to make web apps. Where you load a base an almost empty page and build the content on the fly

07:21.770 --> 07:25.010
based on the data fetched from the server.

07:25.010 --> 07:27.790
Let's go back to you Udemy.

07:27.900 --> 07:36.270
When I click on a course, let's do 'public relations' you see that this is loading one at a time. I had

07:36.810 --> 07:38.040
the top bar loaded.

07:38.160 --> 07:41.350
Then I had a pause and then the rest loaded.

07:41.400 --> 07:45.900
If I click on 'Explore course' you'll see again that top bar loaded.

07:45.930 --> 07:50.540
Other parts of the web slowly dynamically load.

07:50.620 --> 07:59.820
And again if I go back to 'photography' for example again parts of the web page load dynamically and that's

07:59.820 --> 08:06.890
the beauty. These applications nearly never do a full reload they destroy the previous content all or

08:06.890 --> 08:12.270
a part of it and we build it based on new data - new page.

08:12.470 --> 08:14.760
And this might sound familiar to you.

08:15.720 --> 08:19.350
Do you remember how we built our 'robofriends' app.

08:19.740 --> 08:24.950
We fetched this URL that gave us users.

08:25.330 --> 08:30.260
So now that we understand these concepts let's go line by line and see what happens.

08:30.280 --> 08:34.790
I used fetch  -based on what I said, Fetch should be part of the window object right?

08:34.990 --> 08:41.500
Let's check. If I open up the console and I do

08:41.730 --> 08:43.870
'window.fetch' yeah

08:43.940 --> 08:53.520
fetch is a function that we can use and this URL if you remember returns for us-

08:53.620 --> 08:54.200
What is that?

08:54.220 --> 08:56.540
Yeah, a JSON object.

08:56.800 --> 09:05.500
And this JSON object, fetch allows us to do something called response - 'response.json()'.

09:05.840 --> 09:08.800
Well let's just do this for now and see what happens.

09:08.810 --> 09:14.750
I'm going to copy and paste this. I'm going to open up the console and you know I'm going to open up

09:14.750 --> 09:17.180
a new tab to show you that you can do this from anywhere.

09:18.170 --> 09:25.770
If I copy and paste this fetch I get something called a promise and this is something in javascript

09:26.040 --> 09:27.630
that you'll get used to.

09:27.750 --> 09:34.050
Promise is saying "hey I'm making a request to somewhere over the Internet and I promise to let you know

09:34.050 --> 09:37.160
when I have this value returned."

09:37.650 --> 09:42.310
So the way you access promise is - so you have this: 'once this is returned

09:42.360 --> 09:43.540
give me the value'.

09:43.620 --> 09:45.540
You do '.then'

09:45.660 --> 09:51.600
and it gives you the response. If I add to my previous request .then

09:51.920 --> 10:05.520
And I do 'response console.log(response)'.

10:05.690 --> 10:11.510
Look at that I get a response. Status 200 we'll remember this.

10:11.720 --> 10:12.520
OK that's good.

10:12.530 --> 10:19.690
And we also get this body but it says breathable stream. And fetch-

10:19.850 --> 10:25.930
I mean we learned about JSON.parse to parse JSON.

10:26.340 --> 10:32.300
But fetch actually comes with its own method called well "json".

10:32.450 --> 10:39.770
So on this response if we do "json" it will actually convert it for us.

10:39.770 --> 10:49.310
Let's see. If I go back to that request again I get a response. If instead of console logging, I say

10:49.380 --> 10:51.320
'response.json()'

10:51.530 --> 10:55.800
In that case, I get a promise again.

10:55.800 --> 11:03.300
So that means we need to do .then to receive whenever this returns the promise which is the value.

11:03.680 --> 11:07.440
So again I go up and do .then

11:07.600 --> 11:13.780
And in this case let's see what data we receive we get data and we'll console.log data. 

11:17.680 --> 11:31.800
If i press enter. Look at that we receive our users- the same users that were here.

11:31.880 --> 11:40.160
So you see now that we simply use the fetch API which allows us to do an AJAX call after the component

11:40.160 --> 11:40.740
mounted.

11:40.880 --> 11:48.830
So once our robo friends app was loaded we made an Ajax request using the fetch API.

11:49.100 --> 11:53.350
We got a response which was a promise.

11:53.360 --> 12:01.190
So we had to do that then and this response and this is just standard that anytime you do fetch you'll

12:01.190 --> 12:03.420
just remember doing .json

12:03.710 --> 12:11.270
I converted this into something that well we can use in javascript and because this returned a promise

12:11.270 --> 12:21.440
we did .then we got the users and now we have the users object and we never had to refresh the page.

12:21.510 --> 12:29.870
And by the way if you want this JSON whenever you're accessing it to look prettier and be a little

12:29.870 --> 12:36.560
bit more readable I am using a Chrome extension called 'JSONView'.

12:36.590 --> 12:37.130
It's free.

12:37.130 --> 12:39.580
You just add it Chrome it automatically does it for you.

12:39.590 --> 12:43.000
I highly recommend it. Okay

12:43.460 --> 12:46.030
let's go back to this

12:46.040 --> 12:47.450
-this should make sense now.

12:47.810 --> 12:56.670
We now have the ability to dynamically load our web pages make single page applications using AJAX and

12:56.750 --> 13:07.640
Ajax is a combination of tools of using the fetch API, using HTTP, using JSON to communicate with

13:07.640 --> 13:08.630
servers.

13:09.080 --> 13:20.000
And now we have a complete picture of our front end. Our front end can have HTML, CSS, javascript, react.

13:20.000 --> 13:31.670
We can use AJAX to communicate with servers and we use JSON data to send data over the wire. Really

13:31.670 --> 13:33.660
excited for the next couple of videos.

13:34.500 --> 13:35.470
So I'll see in that one. Bye-Bye.
