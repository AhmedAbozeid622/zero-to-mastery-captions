WEBVTT

00:01.050 --> 00:09.260
Now, I'm going back to my example here let's add a new file, and we'll call this 'script2.js'.

00:09.270 --> 00:09.820
-

00:11.820 --> 00:20.110
Now the 'script2.js' can have a constant called 'largeNumber'.

00:20.340 --> 00:24.320
And let's just say that's 356.

00:24.780 --> 00:35.410
And if we want to export this and say 'export default largeNumber' and now within 'script.js' I do

00:35.410 --> 00:44.880
"import largeNumber from 'script2.js'".

00:44.940 --> 00:47.000
– let's make this a little bit smaller –

00:47.220 --> 00:48.810
And now I changed this to

00:51.920 --> 00:59.120
'largeNumber' we'll just do 'a + b' if I run 'node script.js'

00:59.160 --> 01:05.660
I get an error 'Unexpected token import'.

01:05.890 --> 01:13.390
And that is because Node has yet to implement the new ES6 feature of import statements.

01:15.090 --> 01:19.910
And there are ways around it and you can add packages in order to allow you to do this.

01:20.170 --> 01:25.980
But I'm going to show you the CommonJS way because most servers that you'll encounter will have the

01:25.980 --> 01:26.710
CommonJS way.

01:26.790 --> 01:29.730
And over the years this [import] and this [from] will become more prevalent.

01:29.730 --> 01:32.750
But you already know how to do this from the front-end section.

01:32.820 --> 01:34.260
So nothing is different here.

01:34.260 --> 01:40.460
In order for you to get familiarized with CommonJS we're going to use the 'require' form.

01:40.470 --> 01:44.200
So how can we do this using the way it works

01:44.280 --> 01:44.950
-

01:45.120 --> 01:47.150
in Node 8.9, which is the version that we have?

01:51.100 --> 02:01.040
Well, we will have to do a 'const largeNumber = require('./script2.js')'

02:01.110 --> 02:04.140
– again this might be familiar –

02:04.330 --> 02:10.850
And then within here we have to give it the file path. With 'require'

02:10.910 --> 02:16.040
we now have 'largeNumber' and we also want to export it now.

02:16.210 --> 02:25.750
And the way exports work with CommonJS is you do 'module.export' and that is because – let me just clear

02:25.750 --> 02:36.350
this and show you. If I do 'node' and I do 'module' you see that 'module' is a global object that we have access

02:36.350 --> 02:42.140
to, and using 'module.exports'

02:42.190 --> 02:49.880
I can say what objects I want to export in this file.

02:49.880 --> 02:52.760
In our case there will be 'largeNumber'.

02:56.170 --> 03:05.090
If I save this and now run our 'node script' – oops got to exit the process first.

03:06.880 --> 03:07.800
Clear

03:07.880 --> 03:09.750
If I run 'node script.js'

03:09.790 --> 03:16.110
I get [object Object]5.

03:16.220 --> 03:17.200
Hmm, why is that?

03:17.600 --> 03:25.250
Well because now we've exported this object, and the way we want to access it, here,

03:26.110 --> 03:29.350
We're exporting a global object which we can name whatever.

03:29.350 --> 03:39.620
In our case we can say 'script2' and in order to get the property of 'script2' well we'll say

03:39.700 --> 03:41.780
'script2.largeNumber'

03:41.780 --> 03:49.730
And now if I run this I get 361 and this can be named anything it's just a variable that you are declaring.

03:49.770 --> 03:56.470
So we can just call it 'c' – 'c.largeNumber' and it still works.

03:57.980 --> 04:01.610
It's a bit of a different style than we're used to on the front-end.

04:02.630 --> 04:09.230
And that's only because we haven't implemented the, or Node hasn't implemented the import and export

04:09.350 --> 04:10.770
with this version of it.

04:11.000 --> 04:12.140
But it will come eventually.

04:12.140 --> 04:19.190
Just don't get scared if you see it this way; once you get used to the syntax it's pretty much the same.

04:19.210 --> 04:21.540
All right I'll see you in the next one.

04:21.550 --> 04:22.020
Bye-bye.
