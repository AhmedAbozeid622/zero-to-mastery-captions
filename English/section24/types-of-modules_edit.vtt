WEBVTT

00:00.910 --> 00:01.580
Welcome back.

00:01.630 --> 00:07.860
In this video I want to talk about the three kinds of modules that you can have in Node.

00:07.960 --> 00:14.670
We've seen that we have this type which we already know about which is a module that you create yourself

00:14.710 --> 00:23.770
like 'script2' and has its module exports and you give it the path to the file so you can find it.

00:23.790 --> 00:33.910
There's also something called 'built-in modules' and built-in modules are modules that come already pre-installed

00:33.910 --> 00:34.780
with Node.

00:35.170 --> 00:43.750
For example one of the more popular ones is the 'fs' module and this module, if I console log

00:48.660 --> 00:52.930
[console.log(c)] is a module with a whole bunch of things once again.

00:53.250 --> 00:56.030
But it allows you to read the file system.

00:56.130 --> 01:04.790
That is, if you had a text file and you wanted to read through the text file and extract out how many

01:04.790 --> 01:12.830
times the word 'hello' was said, well you can write that by simply using the file system module and using

01:13.490 --> 01:24.610
something like 'readFile:' or 'readFileSync:' which will output – do something like 'readFile' – it will output

01:24.760 --> 01:28.480
the contents of the file and then you can do whatever you want with it.

01:29.280 --> 01:39.180
Another popular one is the HTTP module which as you can guess is the module that we'll use later on to

01:39.180 --> 01:45.730
build a server. And you can read up on all these modules but those two are probably the most popular.

01:45.730 --> 01:56.020
In our case as web developers we're really concerned with the HTTP one these modules are without the

01:57.240 --> 02:00.260
'path' – they're just simply exactly like that [('http')].

02:01.100 --> 02:09.130
And then finally the third type of module again the one that we know is something from npm, a package.

02:09.500 --> 02:16.810
And one of my favorite packages to use with Node is something called 'nodemon' and nodemon is really really

02:16.810 --> 02:27.070
nice because well if I clear this and install npm 'install' – and I'll have to do 'npm init' first actually

02:27.070 --> 02:33.280
to make sure that I have a 'package.json' file and if I pass the '-y' it'll just say yes to all the

02:33.700 --> 02:35.260
prompts that I get beforehand.

02:36.460 --> 02:37.240
There you go.

02:37.320 --> 02:46.590
I have my 'package.json', and now within this 'package.json' I'm going to say 

02:47.190 --> 02:49.800
'npm install nodemon --save-dev'

02:55.760 --> 02:57.820
If I go to 'package.json'

02:57.870 --> 02:58.500
I see that

02:58.530 --> 03:03.900
now I have nodemon in 'devDependencies' and we haven't seen this before.

03:03.900 --> 03:09.600
Up until now we've done '--save' or nothing at all and automatically put it in 'dependencies'

03:10.540 --> 03:14.840
'devDependencies' are dependencies that we only use when we're developing.

03:14.890 --> 03:22.300
When we actually release this app or the server it won't be included because nodeman is just for – again

03:22.360 --> 03:26.300
for – our enjoyment while we're developing.

03:26.300 --> 03:28.220
Now let me show you what nodeman does.

03:28.400 --> 03:33.100
nodemon now can be used because it's in 'node_modules'

03:33.130 --> 03:35.890
If you go to '.bin' you see nodemon here.

03:36.260 --> 03:42.020
Well because it's in the package 'node_modules .bin'

03:42.460 --> 03:46.880
I can use the command such as "start"

03:50.770 --> 03:59.590
and say "nodemon" and Node is smart enough to know that if I run nodemon it's going to look in the

03:59.600 --> 04:02.550
'.bin' folder and find it there; if it finds it there,

04:02.810 --> 04:03.750
which it does,

04:03.790 --> 04:04.870
it'll run the command.

04:05.000 --> 04:06.140
So let's see what happens.

04:07.300 --> 04:16.990
If I clear this and do 'npm start' we get a bit of an error because well we have some weird files in here

04:16.990 --> 04:20.970
so let's just go back to our original example.

04:21.010 --> 04:28.640
Let's save run 'npm start' and we have a 'clean exit'.

04:28.810 --> 04:30.860
But you see that something is still running.

04:30.970 --> 04:35.590
If I change this now to 6 and I save, it I'll watch those changes

04:35.590 --> 04:41.710
for me; it keeps listening to changes and it will output everything.

04:41.710 --> 04:51.240
Again if I change this, so I don't have to keep running the 'node script.js' command.

04:51.360 --> 04:52.050
Very cool.

04:52.050 --> 04:57.210
So we'll be using nodemon a lot and it's one of my favorite things to use again so that I don't have

04:57.210 --> 04:58.820
to go back and forth, back and forth.

04:58.890 --> 05:05.210
And if you make any mistakes well it will let you know right off the bat.

05:05.270 --> 05:05.520
All right.

05:05.520 --> 05:06.800
Perfect.

05:06.840 --> 05:07.820
That's it for now.

05:07.830 --> 05:09.900
I'll see you in the next one. Bye-bye
