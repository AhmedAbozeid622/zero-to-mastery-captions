WEBVTT

00:03.080 --> 00:06.920
Welcome back. Security is a very very important thing on the web.

00:07.280 --> 00:14.360
And as developers we have a responsibility to make sure that whatever user information we get we handle

00:14.360 --> 00:17.160
it with care in a secure fashion.

00:18.770 --> 00:27.160
And up until now I have shown you how to do a simple Sign In setup but I haven't really shown you a secure

00:27.160 --> 00:28.820
way of doing that.

00:30.190 --> 00:32.810
And in this video I'm going to talk about bcrypt-nodejs.

00:32.890 --> 00:39.560
And bcrypt is a library that is very very powerful.

00:40.660 --> 00:45.500
It allows us to create a very secure login.

00:45.500 --> 00:46.650
Now what does that mean?

00:46.970 --> 00:49.000
Let me show you.

00:49.120 --> 00:58.160
Up until now we had'password' just in plain text. In real life

00:58.250 --> 01:06.800
we are never ever storing passwords as plain texts like this just like a string into our database.

01:08.530 --> 01:16.300
This is exactly how companies get hacked and passwords get released of users when they store it like this.

01:16.300 --> 01:24.040
We want to store passwords in something called hashes and I'll get to what that is in a second but I

01:24.040 --> 01:31.540
want to change the database around to show you a more realistic look of how things will be stored.

01:31.540 --> 01:35.680
You see in our database we can have something perhaps like

01:39.730 --> 01:46.910
'login:' and this login will contain an array of objects

01:50.590 --> 01:51.760
that has an 'id:'

01:51.880 --> 02:05.320
let's just say '987' with the hash which will be empty for now and then an email and this e-mail will just

02:05.590 --> 02:08.150
reference john@gmail.com.

02:08.230 --> 02:12.480
This is something that we'll get more into as we talk about databases.

02:12.680 --> 02:18.230
But I want to show you – I want to demonstrate this point to you.

02:18.380 --> 02:27.920
In order for us to handle the sensitive information, that is, if John let's say enters our site and wants

02:27.920 --> 02:40.010
to do a Sign In he's going to give us his email plus his password, which is 'cookies'. Now, he is trusting

02:40.010 --> 02:41.490
us with this information.

02:41.690 --> 02:47.360
And the very first thing we want to do is – well we're definitely not going to add it as a query string

02:47.720 --> 02:52.020
in a GET request – we're going to add it to a POST request.

02:52.040 --> 02:55.530
So it's in the body of the request.

02:55.940 --> 02:59.220
We also wanted to send it over HTTPS.

02:59.420 --> 03:01.750
That is something that requires a certificate.

03:02.180 --> 03:08.690
And we're not going to get into that but we definitely want to include it through an HTTPS request so

03:08.690 --> 03:12.110
that it's encrypted. When he sends 'cookies'

03:12.260 --> 03:20.510
it's going to get jumbled up and nobody in the middle can see this or they'll be able to see it but

03:20.510 --> 03:22.210
they won't understand what it means.

03:22.520 --> 03:30.750
And only the server once it receives this password can actually understand that this stands for 'cookies'.

03:32.100 --> 03:34.110
All right, so one is HTTPS.

03:34.150 --> 03:38.010
The second thing is, how do we store that password?

03:39.230 --> 03:47.430
Well we store it in a hash, and bcrypt, the package that I was just talking about, allows us to do this.

03:47.480 --> 03:52.230
Let me just download this package and show you how it works.

03:58.680 --> 03:59.250
There you go.

03:59.430 --> 04:07.300
Now with the bcrypt installed you can see over here that it has a few things we can use and I'm going to copy and paste

04:07.300 --> 04:14.770
this and move some of this stuff around.

04:14.770 --> 04:16.440
I'm actually going to put this at the bottom.

04:20.490 --> 04:25.030
bcrypt gives us a way to hash a password

04:27.940 --> 04:29.650
and a way to compare

04:32.210 --> 04:35.970
passwords or hashes. But what does that mean?

04:36.070 --> 04:40.850
Let's go one by one.

04:41.030 --> 04:43.880
If I grab this function and in our '/signin'

04:46.770 --> 04:55.530
or sorry I guess in our '/register' because that's when we give our password. In our '/register' when we run

04:57.620 --> 05:01.410
'bcrypt.hash' and instead of 'bacon'

05:01.420 --> 05:04.450
this is what we pass as the user's password

05:04.660 --> 05:11.640
– if we pass the password here, well we have a couple of parameters that they give us

05:11.640 --> 05:13.240
and these are options that we can enter.

05:13.260 --> 05:15.200
For now we'll just leave it the way it is.

05:18.840 --> 05:28.050
If I 'console.log' the hash that we receive in this function – so bcrypt is going to hash the password

05:28.410 --> 05:33.780
and then return this hash – we're going to just say 'hash'.

05:33.840 --> 05:35.550
All right so let's just see what happens here.

05:35.580 --> 05:37.980
I'm going to Save. Then I'll run

05:37.980 --> 05:44.000
'npm start' going back to our Postman.

05:44.160 --> 05:48.830
If I do '/register' with Ann – I'm going to click Send

05:51.940 --> 05:56.070
and I get 'bcrypt is not defined' because I haven't included it here.

05:56.080 --> 06:02.090
Let's do that let's do 'const bcrypt = require('bcrypt-nodejs')'

06:05.360 --> 06:08.750
-

06:08.740 --> 06:12.730
Let's save that and try that again.

06:12.840 --> 06:13.870
I'm going to click send.

06:15.900 --> 06:28.030
We go back to the console – do you see that? We just got a hash and that is what a hash function does. A hash function

06:32.820 --> 06:44.030
A hash function takes a string and jumbles it up in a way that there's no way I'm going to be able to

06:44.030 --> 06:50.650
figure out that this [the hash] stands for the password 'cookies' and hash functions are one way.

06:50.970 --> 06:57.140
That is you can enter 'cookies' and you'll get this but you'll never be able to go back.

06:57.620 --> 07:03.930
And the other quality of hash functions is that if I now do this again with password – Oh I guess the

07:03.930 --> 07:05.870
password for Ann was 'apples'

07:05.880 --> 07:14.460
– if I click send I go back I see that the hash the first time and the second time are different.

07:14.460 --> 07:19.920
And although hash functions actually always return the same thing for the same value bcrypt is a

07:19.920 --> 07:25.800
little bit more secure than that and adds a bit of other magic to make sure that it's impossible to

07:25.950 --> 07:27.940
ever figure out what the password is.

07:27.960 --> 07:37.270
But now we can store this hash – this jumbled up value – in our database in here for the login and anytime

07:37.320 --> 07:43.560
we do sign in and we want to check if the user's passwords match.

07:43.890 --> 07:47.800
Well now – let me remove this

07:47.940 --> 07:48.600
– we have

07:52.130 --> 07:53.940
– let's go to '/signin' and at the top

07:57.130 --> 08:05.090
we can compare the hashes so grabbing the hash that we had before – let's use this one

08:05.390 --> 08:07.230
or let's use the latest one that we got.

08:08.160 --> 08:09.330
I will replace this.

08:09.330 --> 08:18.450
It's going to look pretty ugly but I'm going to replace this hash with this long string and I'm going

08:18.450 --> 08:19.230
to compare

08:21.650 --> 08:26.170
'apples' because that's what Ann's password is.

08:26.240 --> 08:31.480
If I compare 'apples' to this hash – let's console.log.

08:32.680 --> 08:34.480
'first guess'

08:38.230 --> 08:42.730
we'll have the response again

08:42.860 --> 08:46.970
– that is what we receive after bcrypt does this.

08:47.140 --> 08:52.380
And the second time around we'll also do a 'console log' with the wrong password, which is 'veggies'

08:57.560 --> 09:04.480
and this will be the 'second guess'.

09:04.510 --> 09:06.640
Let's go to do a Sign In.

09:06.640 --> 09:11.990
It doesn't really matter what it is because we're not really worried about a response.

09:13.330 --> 09:21.180
And I get an error saying hash is not defined because I haven't updated this hash to what we just

09:21.180 --> 09:21.930
copied before.

09:21.930 --> 09:23.230
So let me do that.

09:26.480 --> 09:27.080
There you go.

09:28.860 --> 09:30.980
Let me go back click Send.

09:32.320 --> 09:34.110
If I look back here I get

09:34.120 --> 09:36.160
'first guess is true'

09:36.370 --> 09:39.920
that is, 'apples' equals this hash

09:39.940 --> 09:45.310
they gave us but 'veggies' does not equal the hash that they gave us there.

09:48.400 --> 09:53.830
Let me close that a little bit. And bcrypt is really really powerful.

09:53.840 --> 09:59.780
We're going to use this when we actually implement a database to our registration. Using bcrypt, which

09:59.780 --> 10:07.730
is a tried and tested hashing package, we can safely store users' information, users' passwords into our

10:07.730 --> 10:14.840
database and nobody even if they – even if hackers access our database – they'll have a very hard time getting

10:14.840 --> 10:16.500
the user passwords.

10:17.300 --> 10:22.370
They may be able to get their email addresses but never our passwords and we'll implement that in our

10:22.370 --> 10:25.770
database using bcrypt.

10:25.830 --> 10:29.940
But I really want to emphasize this point because security is really important.

10:30.930 --> 10:37.570
Always send any sensitive information from the front-end to the back-end using HTTPS

10:38.550 --> 10:48.960
in a POST body and if you get something like a password the way you store it into the database is using

10:48.960 --> 10:51.820
something like bcrypt to generate a hash,

10:52.140 --> 11:00.220
and every time a user signs in, check that hash with whatever the user inputted. In the next part I've

11:00.250 --> 11:01.210
left for you

11:01.330 --> 11:08.830
a security article that I wrote that may be a little bit advanced but I think covers the best way for

11:08.830 --> 11:14.710
you to store user passwords – something that is overlooked quite often but again very very important if

11:14.710 --> 11:18.100
you want to be that top developer.

11:18.180 --> 11:19.770
I'll see in the next one. Bye-bye
