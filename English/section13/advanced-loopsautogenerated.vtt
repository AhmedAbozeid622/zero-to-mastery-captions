WEBVTT

00:00.870 --> 00:07.300
Welcome back I want to talk to you a bit about javascript looping.

00:07.430 --> 00:13.760
You see I actually left out a few other ways that we can loop in javascript.

00:13.790 --> 00:23.270
We've talked about our four loops are while loops are due while loops and we also talked about for each.

00:23.510 --> 00:31.040
But there's actually two other ways that we can loop in javascript and I'm going to show you how to

00:31.040 --> 00:33.720
do that in this video.

00:33.730 --> 00:43.940
Now let's imagine we have a basket and this basket is an array that well has our grocery list.

00:44.030 --> 00:45.880
Let's say we want to buy apples.

00:46.010 --> 00:52.280
We want to buy oranges and we also want to buy grapes because grapes are nature's candy.

00:52.280 --> 00:53.220
They're delicious.

00:54.220 --> 00:59.590
Now in order for us to loop through this basket we know how to do this right.

00:59.590 --> 01:07.330
We've learned about the four loops where we can just do a lot i equals zero.

01:07.400 --> 01:16.220
Long as I is less than the basket length we anchormen die one by one.

01:18.520 --> 01:26.530
And less just the console log basket to index of.

01:26.560 --> 01:29.550
So that's the first type of loop that we saw.

01:29.950 --> 01:31.540
If you run this in the browser

01:34.160 --> 01:38.850
and hit Enter we see that we get apples oranges and grapes.

01:38.930 --> 01:43.040
All right so that's the first way we already know how to do that.

01:43.080 --> 01:54.110
We could also use the For Each loop that came new and S-5 and there we can just say item will use air

01:54.130 --> 01:56.140
functions which we've learned about.

01:56.440 --> 01:59.530
And in this era function I'll just canceled our blog

02:03.000 --> 02:06.020
and that looks a lot cleaner than it was before.

02:06.030 --> 02:08.280
If I run this function now

02:11.710 --> 02:12.830
I get the same thing.

02:13.060 --> 02:18.970
We're looping over items and I'm not going to show you how to do the while loop and the do while loop

02:18.970 --> 02:25.460
because we've talked about it but there's two other ways that we can loop through things and Javascript.

02:25.690 --> 02:35.000
The first one is called the four of loop and the other one is for in loop.

02:35.070 --> 02:39.210
I know the naming is a little bit confusing but stick with me here.

02:39.300 --> 02:45.480
The first one the for loop works in a way that's very similar to these two.

02:45.600 --> 02:52.780
It's almost as if we're combining these two together and this is a new specification with ESX So this

02:52.780 --> 03:03.380
is a new feature of Javascript the way it works is we start with a for loop and we say item of Baskett

03:04.660 --> 03:07.750
you see that it the syntax cut nicely for me.

03:07.870 --> 03:16.460
It's all blue and in here we simply say cancel the log item.

03:16.550 --> 03:17.620
Not too bad right.

03:18.770 --> 03:22.210
We're using the for keyword here but we're saying of.

03:22.400 --> 03:26.370
And we're just creating a variable we can name this whatever we want.

03:26.460 --> 03:28.660
Of Baskett which is our array.

03:28.880 --> 03:37.970
And that's going to loop through it so that if I copy and paste this here and hit enter I get the exact

03:38.270 --> 03:40.360
same thing.

03:40.590 --> 03:45.630
And as we know in programming there's many way of doing things and these are just some of the ways that

03:45.630 --> 03:47.790
we can loop through this array.

03:48.780 --> 03:51.420
But I want to mention a key term here.

03:52.370 --> 04:00.400
What we're doing here is something called iterating over this array and this wording.

04:00.410 --> 04:02.030
Let's make this a little bit bigger.

04:04.050 --> 04:08.090
This wording is really confusing at first when you first hear it.

04:08.820 --> 04:18.690
But reading simply means we're able to go one by one through an item like let's say a basket which has

04:18.690 --> 04:27.020
an array go one by one and look at these items and iterating is able to be done in javascript on what

04:27.030 --> 04:28.940
we call iterable.

04:29.250 --> 04:38.040
And these variables is something that javascript provides us that says hey you can iterate over this

04:38.040 --> 04:40.600
thing and what is this thing.

04:40.800 --> 04:46.300
Well in Javascript you can iterate over arrays and we've already seen that.

04:46.470 --> 04:49.610
And also strength's instead of Baskett.

04:49.620 --> 04:54.000
If I just turn this into a string and I run the for loop here

04:57.210 --> 05:01.560
I see that I'm iterating over the string one by one.

05:01.560 --> 05:13.050
So both arrays and strings are iterable in javascript because we're able to iterate over individual

05:13.140 --> 05:24.120
items and for all of allows us to iterate over these intervals I know the wording is really really confusing.

05:24.130 --> 05:29.200
But in a lot of tutorials books and even work place you're going to hear this word and you want to know

05:29.200 --> 05:30.890
what it means.

05:30.970 --> 05:39.700
But let's talk about the next thing the for loop the foreign loop looks something like this.

05:39.770 --> 05:42.850
And actually let's bring this back to the way it was.

05:43.010 --> 05:45.680
So not strength's it's theory.

05:46.700 --> 05:52.430
And I'm going to comment out or delete the looping that we are already familiar with.

05:52.650 --> 05:55.650
Just so we have better spacing here.

05:56.390 --> 06:02.270
Now the for in loop works with objects.

06:02.450 --> 06:12.490
So let's create an object here and we'll call this object detailed basket in this detailed basket will

06:12.500 --> 06:15.310
be an object that contains apples.

06:15.440 --> 06:21.680
And actually the quantity of apples that we want we want five apples and we will have oranges as well

06:22.190 --> 06:25.210
and we can just maybe say have 10 oranges.

06:25.370 --> 06:26.760
Lots of vitamin C.

06:26.960 --> 06:29.180
And then finally grapes and they're delicious.

06:29.180 --> 06:31.760
So a thousand grapes for everybody.

06:32.960 --> 06:43.040
Now with this detailed Vaska now I can use a for loop and I can say for item in instead of of this type

06:44.270 --> 06:49.620
detailed basket and I can Konsole dialogue here.

06:49.830 --> 06:50.220
The

06:53.510 --> 06:58.470
so that if I clear this let's copy detailed basket.

06:58.580 --> 07:00.260
So that's our object.

07:00.560 --> 07:04.580
And we run the for loop here.

07:04.580 --> 07:07.770
Notice what happens.

07:08.020 --> 07:21.290
I get apples oranges grapes the for in loop allows us to loop over and see the object properties.

07:23.120 --> 07:29.320
So that I can check what I need to go grocery shopping for apples oranges and grapes.

07:29.330 --> 07:35.420
Now here's the tricky part and you'll hear this ward mentioned a lot when you talk to your programming

07:35.420 --> 07:35.950
friends.

07:36.260 --> 07:43.970
And he can get really really confusing what we're doing here is not iterating because iterating is something

07:43.970 --> 07:49.980
that we can do with arrays and strings with an object in javascript.

07:50.060 --> 07:59.390
We're doing something called enumerating all baseball VERRET because properties of an object are what

07:59.390 --> 08:09.220
we call in numerable and an object in javascript is enumerable if it allows us to see the properties.

08:09.230 --> 08:12.480
So apples oranges and grapes are innumerable.

08:12.530 --> 08:17.910
That is we can use it in a for loop to check them out.

08:18.020 --> 08:20.870
So enumerating is for objects

08:24.640 --> 08:33.800
and numerable and iterable what happens if I switch these around what if I have basket in here.

08:33.940 --> 08:37.750
And the detailed basket in here.

08:37.840 --> 08:42.180
So we're using a for loop with an object.

08:42.190 --> 08:43.860
What do you think will happen.

08:44.100 --> 08:44.870
It.

08:45.130 --> 08:49.890
I'm going to copy and paste this into our console.

08:49.890 --> 08:56.910
Hit Ron and I get an error detailed basket is not iterable.

08:56.910 --> 08:57.980
And why is that.

08:58.230 --> 08:59.550
Well we know that right.

08:59.580 --> 09:06.930
I said that in javascript we have a raise in strings that are iterable and objects in most of the cases

09:07.590 --> 09:10.230
are not iterable.

09:10.230 --> 09:17.790
You see four of loob doesn't work with objects because simply the javascript language needs to provide

09:18.210 --> 09:26.750
this property that is called iterable when this property is only given by arrays and strings and because

09:26.750 --> 09:31.170
four of loops only works with iterable.

09:32.260 --> 09:34.920
It's going to give us this.

09:35.090 --> 09:36.150
But what about here.

09:36.350 --> 09:40.060
What if I do a for in loop on the basket.

09:40.100 --> 09:41.120
Which is the array.

09:41.330 --> 09:49.450
If I copy and paste this and run this code look at that it's working.

09:49.630 --> 10:00.040
I get 0 1 2 and that is because underneath the hood you can think of javascript arrays like objects.

10:00.040 --> 10:00.500
Right.

10:00.550 --> 10:04.530
Because an array has an index of 0 1 and 2.

10:04.660 --> 10:18.090
So we can't think of Baskett as an object that has properties zero equal to apples.

10:18.280 --> 10:25.660
We have oranges that has index of 2 or index of one and then index of two.

10:25.680 --> 10:28.180
We have crÃªpes.

10:28.260 --> 10:38.820
So the for loop is and Neumar rating over the properties is 0 1 and 2 which lists it out for us.

10:39.640 --> 10:41.180
Let's make this a little smaller.

10:42.550 --> 10:48.400
But I wanted to make this video for you because a lot of people get confused between these two.

10:48.910 --> 10:57.590
And although you can go a long time without ever using for end loops we can use something like object

10:57.590 --> 10:59.860
docked keys that we've seen before.

11:00.930 --> 11:12.160
Or valleys or entries or we can use for each loops or for loops instead of four of it's good to know

11:12.160 --> 11:17.800
these differences because if you see them in a codebase you want to understand what's happening.

11:18.600 --> 11:25.130
And also if you ever hear somebody saying iterable or numerable you kind of have an idea of the difference.

11:25.130 --> 11:35.150
Now to review a for in loop loops over innumerable properties and numerable property names of an object

11:36.310 --> 11:43.210
the for loop doesn't work with objects because they are not iterable.

11:43.270 --> 11:52.210
Now there are small caveats and exceptions to these rules but 99 percent of the time you should consider

11:52.210 --> 11:52.920
this.

11:53.020 --> 12:00.800
You're using the for loop for objects and for loop for arrays and strings.

12:00.810 --> 12:02.270
I'll see you in the next one.

12:02.620 --> 12:02.830
Bob.
