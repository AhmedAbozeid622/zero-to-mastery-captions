WEBVTT

00:01.650 --> 00:08.220
If there's one thing we have learned this entire time and this course is that there is nothing static

00:08.220 --> 00:10.190
about being a web developer.

00:10.380 --> 00:19.700
Improvements are constantly made all the time in HTML, CSS and Javascript and even the browsers,

00:19.910 --> 00:21.450
get constantly updated.

00:22.680 --> 00:25.480
Libraries are also constantly being created.

00:25.560 --> 00:31.140
If you remember libraries are just pieces of code they could be CSS they could be HTML they could

00:31.140 --> 00:36.630
be Javascript. Pieces of code written by somebody else so that we can use it.

00:36.630 --> 00:38.240
So we don't have to start from scratch.

00:40.090 --> 00:43.790
Now it's human nature to want to constantly improve.

00:43.890 --> 00:51.200
And in this video we're going to learn the new features that everybody will be using.

00:52.190 --> 01:00.310
But first, let's recap something from our previous videos. If you remember javascript was created by the

01:00.310 --> 01:06.600
Netscape browser and everybody else all the other browsers started using javascript.

01:06.640 --> 01:13.950
So Netscape submitted javascript to something called the ECMA International.

01:14.200 --> 01:20.620
So that javascript could be standardized and they could say, hey, everybody use this version of javascript

01:20.890 --> 01:23.090
on all browsers.

01:23.270 --> 01:29.640
That's what ECMA Script is ECMA Script is well, it's javascript

01:29.690 --> 01:36.590
 But it's just the standard way of calling it so that when the browsers implement what

01:36.590 --> 01:43.670
javascript should do and how they read javascript Well everybody agrees on the standard.

01:43.680 --> 01:52.390
Now every time you see something like this like ES6 and you'll see that quite a lot, ES6 just stands

01:52.390 --> 01:59.150
for the ECMAscript version 6.

01:59.200 --> 02:08.500
So yes there was Ecmascript version 1 all the way through 6 and we're currently at Version 7 but

02:08.740 --> 02:13.470
it's still new so we're only learning version 5 and version 6 for now.

02:13.870 --> 02:21.040
But version 5 and version 6 introduce some new features that are really really powerful and make coding

02:21.040 --> 02:23.190
in javascript really really nice.

02:23.380 --> 02:29.090
And most code bases that you'll see in 2018 will be using these features.

02:29.530 --> 02:36.370
It's a very very exciting topic for me it's one of my favorite parts of javascript now and I'm excited

02:36.370 --> 02:42.350
to show you some of these new features that will make your life a whole lot easier.

02:42.370 --> 02:48.640
Now one thing you might be thinking though is, Ah! Andre I don't want to learn something if browsers don't

02:48.640 --> 02:51.350
support them and I can't actually use them.

02:51.880 --> 02:54.170
But Uh! don't worry my friend.

02:54.250 --> 02:58.950
These are all features that are supported, you know why?

02:59.330 --> 03:03.080
Well mainly because of something called BABEL.

03:03.340 --> 03:10.120
You see a few years ago programmer created BABEL so that developers can start using new javascript features

03:10.780 --> 03:11.650
as they come.

03:11.650 --> 03:18.130
Remember ECMAScript releases versions all the time, now without having to wait for browsers to implement

03:18.130 --> 03:19.330
these features.

03:19.330 --> 03:24.440
BABEL, allowed us to, well to use them right away.

03:24.510 --> 03:26.330
Now how do they do that?

03:26.340 --> 03:28.120
Let's have a look,

03:28.160 --> 03:37.140
If I go in to try it out here, you'll see that BABEL shows me something I can write, and will learn

03:37.140 --> 03:42.720
the syntax soon enough don't worry, I can't write something like this, which is the new way of writing

03:42.720 --> 03:50.550
javascript with ECMAScript 6 and it compiles into this.

03:50.550 --> 03:51.750
Now what does that mean.

03:51.750 --> 04:00.630
It means that it reads a file line by line, and then changes it to a version of javascript that all browsers

04:00.630 --> 04:03.480
know and it works on all browsers.

04:03.480 --> 04:10.650
When we actually deploy our application or web site which means putting it online after we're done with it,

04:10.650 --> 04:18.780
we can use BABEL to say hey read our javascript file and transform it into this, so it works on

04:18.780 --> 04:20.410
all browsers.

04:20.520 --> 04:26.670
So without even thinking about it you can write 

04:26.670 --> 04:26.790
all your code in the newest and best way of writing it.

04:26.790 --> 04:34.470
You can see how clean this is and BABEL will take care of changing everything for you 

04:34.470 --> 04:35.480
so that browsers can read it.

04:36.560 --> 04:38.400
Isn't that awesome? Enough of that.

04:38.420 --> 04:40.280
Let's learn some new syntaxes.

04:40.430 --> 04:41.320
And don't be afraid.

04:41.330 --> 04:48.410
ES5 and ES6 made javascript a whole lot easier and more fun to writ. From now on will we take what

04:48.410 --> 04:54.140
we learn in this video to write all our code because it's what the industry is using right now.

04:54.170 --> 04:57.320
And this is why you will get asked during interviews.

04:57.320 --> 04:59.200
So let's get started.

05:04.760 --> 05:09.850
The first feature I'm going to show you is 'let' and 'const'.

05:10.020 --> 05:13.500
These are actually very very simple.

05:13.530 --> 05:17.090
These are new ways of declaring variables.

05:17.220 --> 05:25.230
So if you see over here in our section out-line, you see that javascript variables has now, two new ways

05:25.380 --> 05:33.370
of declaring a variable, and as a matter of fact variable that we've been using up to this point, we don't

05:33.370 --> 05:35.010
really need to use it ever again.

05:36.080 --> 05:40.530
We now have something called 'let', to show you how both of these work.

05:40.790 --> 05:42.340
Let's do a small example.

05:42.350 --> 05:53.970
I'm going to say 'const player' and 'const' stands for constant, will say 'bobby' and will say

05:54.170 --> 05:59.420
'let experience equals to hundred' and will say

05:59.830 --> 06:15.260
'let wizardLevel equal to false'. Now if I do something, like 'if experience is greater than 90 then

06:18.630 --> 06:21.850
(let wizardLevel) equals to true'.

06:21.980 --> 06:26.500
OK, so these look like variables nothing's different.

06:26.650 --> 06:30.010
Let's run this through the console and see what happens.

06:31.450 --> 06:32.020
OK.

06:32.080 --> 06:34.000
If I now check 'wizardLevel', I get 'false'

06:39.820 --> 06:46.510
Hmmm! that's, that's strange right because in the previous video where we talked about the scope for

06:46.510 --> 06:51.430
had 'wizardLevel' has a variable, I would have gotten 'true' here.

06:51.470 --> 06:59.450
So if this was variable and this was variable 'wizardLevel' instead of being 'false' will be 'true'.

06:59.590 --> 07:02.810
Now that's confusing right.

07:02.810 --> 07:05.860
That's because it's not inside of a function.

07:05.870 --> 07:13.430
This is a little bit tricky but with variable we only were able to create a scope, inside of a function,

07:13.880 --> 07:16.720
but never if it had a curly brackets.

07:16.790 --> 07:22.110
But inside of 'if'.

07:22.290 --> 07:27.230
With 'let', when I say 'let' and 'let', well,

07:27.420 --> 07:37.230
now I've created a 'wizardLevel' variable inside of 'if' so the only way that I can access this is inside

07:37.230 --> 07:38.430
the 'if'.

07:38.430 --> 07:42.220
If I do 'console.log(wizardLevel)' here

07:44.930 --> 07:53.880
and 'console.log(wizardLevel)' outside and then let's put 'inside'

07:56.350 --> 08:08.430
and 'outside'. If I copy this, paste that in, 'inside', I get 'true', 'outside',

08:08.680 --> 08:17.890
I get 'false', because now with 'let', any time it's wrapped around a curly bracket, well it creates a new

08:18.130 --> 08:21.610
scope, versus with a variable,

08:22.000 --> 08:23.500
if I change this to a variable(var)

08:27.420 --> 08:29.910
and I copy this again and refresh,

08:32.970 --> 08:46.010
if I copy this, I get 'inside', equals to 'true' and 'outside' equals to 'true', because 'wizardLevel' has already

08:46.010 --> 08:46.660
been changed.

08:46.730 --> 08:55.550
No new scope is created, inside the curly brackets because this isn't a function. 

08:55.550 --> 08:56.940
Now I know that's a really really confusing.

08:56.960 --> 09:03.690
But the one big takeaway from this is, just don't use variable(var) any more. variables(var) is actually quite confusing.

09:03.710 --> 09:08.870
Now think of 'let' as the new variable.

09:08.960 --> 09:14.980
So from now on we're going to be using 'let' for variables but what is 'const'.

09:15.380 --> 09:19.130
Well 'const' is even cooler.

09:19.220 --> 09:20.240
Watch this.

09:20.570 --> 09:28.720
If I want to change the experience level, I can say 'experience equals 80'.

09:28.930 --> 09:31.040
And now if I look at 'experience',

09:31.300 --> 09:32.940
Well 'experience' equals 80.

09:32.980 --> 09:44.050
But if I want to change the player 'Bobby' to a new name, equals 'Sally', I get an error, 

09:44.050 --> 09:44.960
'Assignment to constant variable'.

09:44.960 --> 09:47.040
What that means is, as a constant,

09:47.070 --> 09:54.870
you're not able to reassign to the variable. So it cannot be updated.

09:54.870 --> 09:56.820
Now, why would that be useful?

09:56.820 --> 10:02.820
It's really really useful because a lot of bugs happen when you're working in a team of people.

10:02.910 --> 10:07.920
If you have something like 'player' and somebody changes the name of the player while you're working on

10:07.920 --> 10:13.200
a program and you still think it's 'Bobby' and you keep getting errors 

10:13.200 --> 10:13.510
because somebody else has touched it.

10:13.620 --> 10:15.970
Well that's, that's a bit of an issue isn't it.

10:15.990 --> 10:23.930
But using 'const', you make sure, that this player variable will always have the same value.

10:23.970 --> 10:30.960
So this is actually a very very useful and my recommendation is that if you have anything that isn't

10:30.960 --> 10:33.630
going to change it should be a constant.

10:33.720 --> 10:43.740
So a function could be a constant because well if this function or if the assignment of 'a' is not going

10:43.740 --> 10:51.990
to change, then we feel a lot safer using 'const' than let's say 'let' because we make sure that nobody

10:51.990 --> 10:56.000
assigns something else to 'a'.

10:56.080 --> 11:00.110
So the rule from now on is use 'const',

11:00.370 --> 11:07.060
If you're using a variable that doesn't change, most of the time you'll use this, and you're using a variable

11:07.060 --> 11:12.720
die your re-assign something to like Wizard level where it changes from 'true' to 'false'

11:12.730 --> 11:13.470
'false' to 'true'.

11:13.810 --> 11:16.470
Well then use 'let'.

11:16.690 --> 11:28.490
One thing with 'const' that you have to keep in mind is that if you do a 'const' object(obj) equals 'player'

11:29.950 --> 11:37.760
'bobby', 'experience', 'one hundered' and 

11:37.970 --> 11:39.220
'WizardLevel' to 'false'.

11:39.410 --> 11:50.470
Well, if I copy this object and try to reassign this object to say a number, I get an error because

11:50.470 --> 11:51.610
it's a constant.

11:51.610 --> 11:55.780
But! if I try and change a property

12:00.060 --> 12:04.750
now my 'wizardLevel' isto 'true'.

12:04.750 --> 12:15.370
So one thing with constant is, you can change the properties of the objects, 

12:16.860 --> 12:18.480
still you just can't reassign the variable.

12:18.520 --> 12:20.520
All right on to more fun things.

12:23.310 --> 12:26.410
Let's do Destructuring.

12:26.950 --> 12:30.510
And this one I'm going to show you are going to make your life a whole lot easier.

12:32.050 --> 12:41.780
Again if we actually have our 'object(obj)' here, let's say that we wanted to grab these objects, so we'll have

12:41.780 --> 12:49.460
to do 'const player equals object(obj).player' will do,

12:49.470 --> 13:03.590
'const experience equals object(obj).experience' and then a 'let wizardLevel' 

13:03.980 --> 13:05.620
equals 'object(obj).wizardLevel'.

13:05.870 --> 13:08.710
And it was a whole lot of typing to access these properties.

13:08.750 --> 13:18.530
Well with destructuring, you can do this you can say 'const player' and 'experience'

13:21.890 --> 13:23.560
from the object.

13:23.570 --> 13:31.970
So with this syntax, it does the exact same thing as the first two lines over here, you just select the

13:31.970 --> 13:35.440
properties you want from an object.

13:35.690 --> 13:45.290
And now you have 'const' 'player' and 'experience' available to you so you can use 'player' anywhere you want

13:45.290 --> 13:56.520
in your codebase and then for 'let' we can do 'wizardLevel' equals 'object(obj)', much much cleaner.

13:56.570 --> 14:00.500
You just have to get used to it but it's a lot nicer to look at.

14:00.510 --> 14:09.370
All right another thing cool thing you can do with objects. 'const' name equals 'john snow'.

14:10.680 --> 14:26.600
We can just start a new object here and we can say now 'name' is 'hello' 

14:26.730 --> 14:27.980
and we can do 'ray', 'smith' 

14:28.110 --> 14:29.600
'hihi'.

14:29.770 --> 14:30.000
All right.

14:30.010 --> 14:36.730
So this is a silly object but I wanted to show you some new ways of declaring object properties

14:41.320 --> 14:42.280
Now, in ES6 you can have,

14:42.320 --> 14:50.980
instead of the old way of having just 'player' or 'experience' or 'wizardLevel'

14:51.250 --> 15:00.160
we can have something dynamic that we can assign like 'john snow' or we can do 'ray' plus 'smith' or we can

15:00.160 --> 15:07.450
do 'one' plus 'two' and have these dynamic property values.

15:07.450 --> 15:11.660
Let me show you of how they work.

15:11.960 --> 15:16.240
If I access object(obj) now, I have three equals.

15:16.240 --> 15:16.660
'hihi'.

15:16.670 --> 15:18.040
And 'john snow' equals 'hello'

15:18.080 --> 15:25.400
Again new ways of declaring properties, very useful if you need to calculate something for the

15:25.400 --> 15:26.530
property value.

15:27.290 --> 15:34.630
But even cooler is being able to do something like this.

15:34.640 --> 15:37.210
Imagine you had a 

15:37.250 --> 15:38.620
'const a' equals to

15:38.670 --> 15:39.390
'simon'

15:43.450 --> 15:46.560
'const b' equals to 'true'.

15:47.890 --> 15:52.920
And 'const c' is an empty object.

15:53.130 --> 16:06.540
And if we wanted to add these to an object, we would have had to do 'a' is a, 'b' is b, and 'c' is c, and sometimes

16:06.540 --> 16:09.820
you wanted the property to match the value.

16:09.820 --> 16:12.150
Again with the new javascript.

16:12.150 --> 16:23.760
If property and value are the same in that case, we can just say a, b, c so we can remove, we can remove the

16:23.760 --> 16:29.700
declaration that we have with property and value if they're the same and just keep it like this.

16:29.700 --> 16:34.330
Again this is something that when we get to the Riact's section it's going to become very very useful.

16:35.450 --> 16:45.950
All right, something even more fun and this time its template strings so 'Template strings'.

16:46.060 --> 16:52.030
Now remember when we have, let's say a greeting, how annoying it was that we had to do.

16:52.120 --> 16:53.050
"Hello "

16:55.580 --> 16:56.590
'name'

16:56.690 --> 17:09.520
plus 'you seem to be doing' plus 'greeting' and then say you had an exclamation mark and you also had to

17:09.520 --> 17:12.460
worry about backslash if you had an apostrophe.

17:12.460 --> 17:15.550
That was really tedious and annoying.

17:15.550 --> 17:20.460
Now, if you knew something really fun, instead of doing it this way.

17:22.500 --> 17:24.930
You can have 'greetingBest'

17:24.950 --> 17:30.800
equals something called Templates strings and these are back ticks.

17:31.020 --> 17:34.270
So the back ticks of this is right above your Tab key.

17:34.290 --> 17:43.650
If you're on a Mac instead of using double quotes or single quotes, this means template strings and now

17:43.680 --> 17:50.920
you can use double quotes or single quotes anywhere you want and it will be a string.

17:51.420 --> 18:02.020
But even cooler if you have 'name' equals "Sally" and 'age' equals "34".

18:02.060 --> 18:06.350
'pet' is "horse".

18:06.390 --> 18:07.550
Now we can do,

18:07.560 --> 18:08.250
'Hello'

18:10.980 --> 18:12.050
'name'

18:12.240 --> 18:18.430
'you seem to be', notice the syntax and the coloring.

18:18.430 --> 18:20.920
'age' minus 10

18:23.750 --> 18:25.520
'What a lovely' pet($pet)

18:27.780 --> 18:29.310
'you have'

18:32.570 --> 18:34.240
so notice what we did here.

18:34.450 --> 18:39.350
I'm going to copy this just so we have it, when I comment this out.

18:39.380 --> 18:43.880
Now if I look into the console I'll refresh.

18:43.880 --> 18:53.390
You see that now instead of doing all that double quotes and plus and worrying about spacing within these back ticks,

18:53.420 --> 19:02.360
I can say a piece of string and then add dynamically by using the dollar sign then the

19:02.360 --> 19:05.220
curly brackets are a value that we want.

19:05.400 --> 19:08.640
We can again do any sort of expression.

19:08.640 --> 19:10.560
So 'age' minus 10.

19:10.560 --> 19:12.070
'What a lovely pet($pet) you have'

19:12.090 --> 19:13.620
Let's see what happens, if I do,

19:13.620 --> 19:17.470
'greetingBest'. Look at that,

19:17.690 --> 19:18.460
"Hello Sally.

19:18.470 --> 19:20.570
You seem to be 24".

19:20.720 --> 19:22.590
"What a lovely horse you have".

19:23.720 --> 19:24.430
Very cool.

19:24.470 --> 19:29.060
So this is very very useful will be definitely using this, late on in the course.

19:30.150 --> 19:38.440
Another thing I want to show you is 'default arguments', that can do something like 'greet' we'll say 'name'

19:38.450 --> 19:46.790
equals empty string, 'age' equals '30' and we'll say.

19:46.800 --> 19:51.760
'pet' is a "cat".

19:52.130 --> 19:54.450
Let's just copy what we had before.

19:55.520 --> 19:58.880
With the greeting, I'm going to comment this out

20:01.810 --> 20:03.410
and will return this.

20:03.790 --> 20:05.790
So nothing's changed.

20:05.800 --> 20:08.570
We just have a function that returns a greeting.

20:09.590 --> 20:14.740
The only thing that's new is this, let me show you what it does.

20:15.700 --> 20:26.210
If I comment this out, I copy this put it into the console, and now I run 'greet', "Hello you seem to be 20."

20:26.230 --> 20:27.870
"What a lovely cat you have".

20:29.560 --> 20:35.470
Did you catch that, even though our browser, and let me just refresh, so you know for sure that our browser has

20:35.470 --> 20:39.150
no idea of what age or pet is.

20:39.250 --> 20:41.800
But, if I run this function

20:46.250 --> 20:53.870
because of the way I made the parameters, I gave them default arguments which says if, I don't provide

20:53.870 --> 20:58.640
a value for name which I haven't, I haven't given any arguments.

20:58.910 --> 20:59.810
Well then make.

20:59.810 --> 21:14.490
'name' empty string, make 'age' '30', and make 'pet', 'cat', if do now, 'greet', 'John', '50' and we'll do "monkey".

21:14.490 --> 21:15.260
Now I get,

21:15.270 --> 21:16.940
"Hello John you seem to be 40.""

21:16.950 --> 21:24.990
"What a lovely monkey you have". This gets ignored because I passed it parameters but otherwise I can pass

21:24.990 --> 21:31.410
a default parameter so that when somebody calls this function and they don't provide these arguments

21:32.640 --> 21:38.210
my function won't fail because well I have default arguments.

21:38.410 --> 21:39.610
Very cool.

21:39.680 --> 21:40.000
All right.

21:40.010 --> 21:42.060
What else do we have.

21:42.500 --> 21:50.880
Let's refresh here, if you remember we had one more type to do 'JAVASCRIPT TYPES' and that is a 'Symbol'.

21:50.900 --> 21:56.720
It's actually not used very often but I wanted to show you just because while it's a type of, we want to

21:56.720 --> 22:09.000
complete the seven types of javascript, and a symbol is special because if I've symbol one(sym1), I create a symbol

22:09.000 --> 22:18.600
by doing this index and I could have a second symbol(sym2) that is 'symbol()'.

22:18.760 --> 22:32.110
And within here we can put anything, we can put 'foo' and variable(var) symbol 3(sym3) equals 'Symbol()' and we'll

22:32.110 --> 22:34.490
say 'foo' as well.

22:34.540 --> 22:37.540
What's so unique about symbols,

22:37.870 --> 22:40.310
ooh! we should be using 'let' here.

22:41.560 --> 22:54.580
If I copy this, and I access 'sym1', I get "symbol()" access 'sym2', I get "foo", and 'sym3' I get "foo".

22:54.790 --> 23:05.240
But the unique thing is that if I do 'sym2' equals 'sym3', I get false.

23:05.290 --> 23:12.430
Even though, well they look like they're the exact same thing, and symbols are used because they create

23:12.430 --> 23:20.630
these completely unique type. So that you can make sure there's never going to be any conflict.

23:20.740 --> 23:26.410
And the symbol value is used as an indentifier mostly for object properties.

23:26.410 --> 23:32.080
It's pretty much the only purpose of that because sometimes you don't want object properties if you

23:32.080 --> 23:37.660
have thousands of them to collide and be the same ones because then they'll get bugs.

23:37.780 --> 23:42.550
We won't see it too much and of course you won't see it out in the wild too much but I wanted to show

23:42.550 --> 23:48.820
you it regardless because while we want to know all the javascript types.

23:48.930 --> 23:49.470
All right.

23:49.590 --> 23:55.980
One last one, I know we've covered a lot but this is the best one and that is 'arrow functions'.

23:57.910 --> 24:09.140
Up to this point, if we wanted to do something like add we had to do 'a', 'b' and 'return a' plus 'b'.

24:09.700 --> 24:17.500
And you might have gotten sick and tired of constantly writing function over and over and over. 

24:17.660 --> 24:19.330
Well now you have arrow functions.

24:19.370 --> 24:21.590
So with an arrow function you can do, Look at that,

24:32.020 --> 24:35.090
so any time you see this syntax.

24:35.220 --> 24:37.530
Oop! and I had to pass 'a' and 'b' here as well,

24:37.540 --> 24:44.440
anytime you see this syntax it's the same thing as saying function but now is just the shorthand form

24:44.440 --> 24:47.180
so that you don't have to constantly write function.

24:47.410 --> 24:56.680
And the beauty of it, is that you could have done 'return a' and 'b' and that completely works.

24:56.680 --> 25:04.180
So the only difference is that we have, a function expression that accepts a parameter and we have this

25:04.180 --> 25:08.620
fat arrow, but with an arrow function.

25:08.990 --> 25:11.240
If you have a single return,

25:13.870 --> 25:18.100
well, you can just put it on one line, and it assumes that you want to return this.

25:18.190 --> 25:27.440
If I save this and copy it in here, oop! I don't need this syntax.

25:27.560 --> 25:33.530
Let's copy that one more time 'add 4 and 2'.

25:33.700 --> 25:37.060
That's the first function and then the new way with the arrow function.

25:37.080 --> 25:41.440
'add2', '4' '2'.

25:41.680 --> 25:43.060
Again I get the same thing.

25:43.060 --> 25:48.240
It returns automatically because everything, well it's on one line.

25:48.250 --> 25:51.900
It looks very very nice, a lot easier to write than the above.

25:53.220 --> 25:55.360
And there you have it.

25:55.620 --> 25:58.370
I know that was a lot of information.

25:58.380 --> 26:04.380
Make sure you do the exercises after this video to get yourself familiar with the syntax,

26:04.380 --> 26:05.770
is just new ways of doing things.

26:05.790 --> 26:10.480
These are going to help you to write better, cleaner code.

26:11.330 --> 26:19.050
And just to show you what we've covered, well you've managed to finish everything and the section outline.

26:20.090 --> 26:25.530
From variables to conditionals, to finally the arrow function.

26:25.610 --> 26:30.760
We've covered everything that we wanted to for javascript and moving forward.

26:30.890 --> 26:37.600
We're going to be using these new syntaxes to write our code.

26:37.610 --> 26:40.430
I hope you're excited as I am to start using these.

26:40.670 --> 26:42.630
I'll see you in the next one.
Buh-bye.