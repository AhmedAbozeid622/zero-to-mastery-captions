WEBVTT

00:01.120 --> 00:01.800
Baiklah.

00:01.810 --> 00:06.000
Jadi kami dapat redux, dengan aplikasi kami.

00:06.100 --> 00:09.160
Kami baru saja belajar perpustakaan yang luar biasa.

00:09.580 --> 00:12.510
Saya harap, semua orang merasa baik. Sekarang, saya

00:13.030 --> 00:15.890
ingin menambahkan beberapa hal.

00:15.940 --> 00:23.530
Jelas, ini adalah contoh sederhana. Tetapi fundamental ada di sana. Dengan menggunakan prinsip-prinsip ini, Anda dapat

00:23.530 --> 00:27.560
mematikan dan membangun, aplikasi yang lebih besar dan lebih besar.

00:27.970 --> 00:32.090
Tetapi saat saya menulis ini, Anda mungkin memperhatikan beberapa hal.

00:32.230 --> 00:32.850
Pertama,

00:33.100 --> 00:42.170
mari kita lihat struktur folder kita di sini. Kita bisa membayangkan seiring pertumbuhan aplikasi kita yang akan semakin

00:42.410 --> 00:44.540
besar dan semakin besar.

00:44.690 --> 00:49.460
Dan ini sebenarnya sesuatu yang akan saya tunjukkan kepada Anda nanti

00:49.460 --> 00:57.920
dalam kursus, ketika kita bekerja pada aplikasi otak cerdas. Di mana kita mulai memuat aplikasi kita, dengan banyak fungsi.

00:57.920 --> 01:00.100
Dan kami tidak menggunakan redux untuk itu.

01:00.200 --> 01:06.660
Jadi file ini semakin lama semakin panjang dengan metode baru dan metode baru dan metode baru.

01:06.690 --> 01:16.350
Sekarang, memiliki satu komponen wadah, yaitu memiliki satu komponen yang terhubung. Komponen yang tahu bahwa toko redux

01:16.410 --> 01:22.790
ada dan mendengarkan untuk mendukung dan mengirim tindakan dari itu.

01:22.830 --> 01:26.100
Nah, memiliki satu saja tidak terlalu realistis.

01:26.130 --> 01:33.570
Kemungkinan besar Anda akan memiliki banyak wadah. Tetapi karena cara redux bekerja, itu cukup mudah

01:33.570 --> 01:34.570
dilakukan.

01:34.620 --> 01:42.300
Kita bisa menggunakan connect dan memilih komponen mana yang ingin kita hubungkan ke toko redux.

01:42.660 --> 01:46.960
Dan jika kita mau, dua wadah untuk saling berbicara,

01:47.280 --> 01:50.670
well, sangat sederhana, kita hanya menghubungkannya.

01:50.850 --> 01:58.030
Dan karena toko di atas segalanya, kami dapat memperoleh informasi keadaan itu.

01:58.950 --> 02:01.420
Jadi itu membuat komunikasi sangat mudah.

02:01.770 --> 02:08.790
Jadi kami jelas ingin memiliki wadah seperti ini. Dan komponen presentasi sederhana yang hanya

02:08.790 --> 02:13.940
fungsi murni, yang hanya menerima alat peraga dan render.

02:14.050 --> 02:20.650
Namun, ketika kita menumbuhkan lebih banyak komponen, dan semakin banyak wadah, masuk akal untuk tidak

02:20.650 --> 02:26.710
hanya memiliki satu file 'konstanta', satu file 'tindakan' dan satu file 'reduksi'.

02:27.010 --> 02:33.670
Anda dapat membayangkan ini semakin besar dan semakin besar. Dan Anda akan melihat proyek yang

02:33.670 --> 02:37.470
memiliki folder 'aksi', folder 'konstanta' dan folder 'reduksi'.

02:37.630 --> 02:41.820
Tapi saya pribadi suka komponen cara melakukan sesuatu.

02:42.160 --> 02:46.260
Yaitu, kelompokkan segala sesuatu sesuai dengan komponennya.

02:46.420 --> 02:53.630
Misalnya, buat aplikasi dot js atau katakanlah, ada komponen bidang pencarian pintar.

02:54.010 --> 02:59.920
Kita akan membuat folder, yang disebut 'bidang pencarian' dan folder 'bidang pencarian' itu

02:59.920 --> 03:03.670
akan memiliki semua komponen presentasi DOM, yang diperlukan.

03:03.670 --> 03:06.730
Ini akan memiliki semua 'tindakan' yang dibutuhkan dalam

03:06.790 --> 03:10.060
aksi dot js. Ini akan memiliki semua 'peredam' yang dibutuhkannya.

03:10.180 --> 03:12.780
Dan itu juga

03:13.000 --> 03:19.810
akan memiliki semua yang dibutuhkannya. Jadi setiap folder akan mewakili komponen, sepotong situs web kami dan semuanya digabungkan

03:20.080 --> 03:21.760
bersama dalam satu folder kecil.

03:21.760 --> 03:26.400
Jadi, jika kita ingin berbagi kode, itu akan cukup mudah dilakukan.

03:26.410 --> 03:32.850
Sangat menyenangkan memikirkannya seperti itu. Alih-alih memiliki nama-nama folder umum yang besar ini.

03:33.020 --> 03:35.840
Dan itulah yang akan Anda lihat dengan sebagian besar proyek besar.

03:35.840 --> 03:43.190
Gagasan komponen, yang memiliki folder sendiri, wadah ini yang lagi memiliki folder sendiri,

03:43.190 --> 03:45.950
serta reduksi dan tindakan.

03:46.100 --> 03:52.130
Dan dengan cara ini Anda dapat membaca struktur folder dan memutuskan ke mana Anda ingin memperbaiki bug

03:52.130 --> 03:53.670
atau membuat fitur baru.

03:55.690 --> 03:59.010
Anda juga ingin menghindari kode berulang.

03:59.170 --> 04:03.940
Misalnya, di sebagian besar aplikasi, kita akan menerima banyak panggilan.

04:04.210 --> 04:11.800
Jadi bukankah lebih bagus, jika kita memiliki folder API di sini, yang melakukan panggilan, mungkin kita akan menyebutnya

04:11.920 --> 04:20.740
API, 'dapatkan API' dan yang perlu kita lakukan adalah melewati fungsi, dan fungsi itu berjalan untuk meneruskan url itu ke fungsi

04:20.740 --> 04:24.130
ambil dan itu juga akan melakukan json

04:24.160 --> 04:27.120
ini untuk kita. Jadi itu hanya akan mengembalikan data.

04:27.130 --> 04:36.170
Jadi kami terus mengulangi .. , jadi kami berhenti mengulangi semua fetch dot ini lalu dot lalu dot catch. Jadi, pikirkan dalam hal mengatur folder

04:36.230 --> 04:40.550
Anda, untuk sesuatu yang masuk akal, sesuatu yang dapat ditingkatkan.

04:40.760 --> 04:47.270
Dan, jika seseorang datang ke proyek, membuatnya mudah bagi mereka untuk mengikuti dan membaca, adalah

04:47.270 --> 04:50.030
cara yang baik untuk melakukan sesuatu.

04:50.050 --> 04:52.390
Baiklah, itu sudah cukup untuk saat ini.

04:52.390 --> 04:53.900
Sampai jumpa di video berikutnya.

04:53.910 --> 04:54.380
Sampai jumpa
