WEBVTT

00:01.680 --> 00:02.310
Tudo bem.

00:02.310 --> 00:03.240
Bem vindo de volta.

00:03.240 --> 00:06.540
Nós temos nosso aplicativo Hello World, mas isso não parece muito legal.

00:06.540 --> 00:09.430
Queremos fazer nosso aplicativo RoboFriends.

00:09.450 --> 00:16.540
Então, neste vídeo, vamos começar construindo nosso primeiro componente. Se voltarmos aqui,

00:16.640 --> 00:19.080
Lembramos que temos o terminal do lado direito.

00:19.100 --> 00:25.880
E nós apenas executamos 'npm start' e 'create-react-app' verifica todos os arquivos para nós, para garantir que não haja erros.

00:25.880 --> 00:33.680
Ele diz que nosso aplicativo é definido, mas nunca usado, então vamos comentar isso novamente 'command' 'slash' save this

00:34.370 --> 00:37.080
e você verá que tudo está funcionando bem.

00:38.590 --> 00:43.510
Agora você pode ter algumas perguntas apenas neste arquivo 'index.js'

00:44.210 --> 00:48.920
Primeiro, vemos que estamos importando o React, mas como é que está funcionando?

00:48.920 --> 00:55.390
nos lembramos de que não funcionou antes; nós tivemos que usar 'require' e depois 'browserify'. Mais uma vez, o React tem um

00:55.390 --> 00:59.260
Webpack sob o capô que faz o pacote para nós.

00:59.260 --> 01:03.670
Então, podemos usar 'import', desde que mantenhamos isso no topo do arquivo.

01:03.760 --> 01:10.650
Podemos importar quaisquer outros arquivos que quisermos ou quaisquer pacotes que quisermos.

01:10.660 --> 01:14.360
Também vemos que há duas coisas:React e ReactDOM.

01:14.380 --> 01:21.200
Se você se lembra, o React é uma biblioteca de 'visão'.

01:21.260 --> 01:25.660
Então este é o pequeno robô que nos lembramos do vídeo anterior.

01:26.030 --> 01:31.120
É o núcleo do pacote que faz a manipulação do DOM para nós.

01:31.310 --> 01:35.890
Mas como eu disse antes, o React pode ser usado em vários lugares, não apenas no navegador.

01:36.170 --> 01:38.330
Pode ser usado para dispositivos móveis.

01:38.330 --> 01:45.350
Ele pode ser usado para realidade virtual e você pode conectar e reproduzir diferentes bibliotecas como essa

01:45.440 --> 01:47.850
a que tela você está renderizando.

01:48.000 --> 01:52.830
Então, o ReactDOM é usado para os sites do DOM (for).

01:52.940 --> 01:54.370
Então é a cola do React.

01:54.390 --> 01:57.620
Mas podemos ter algo como Reagir nativa.

01:57.620 --> 02:01.950
Isso realmente renderiza para telefones celulares.

02:02.000 --> 02:04.740
Também temos:import './index.css'.

02:04.760 --> 02:13.340
E esta é uma nova sintaxe. Bem, React nos permite adicionar CSS não apenas em um arquivo, mas para cada diferente

02:13.340 --> 02:14.270
componente.

02:14.390 --> 02:15.960
Se formos para 'App.js',

02:16.110 --> 02:21.000
bem, temos 'App.css' que descreve o aplicativo.

02:21.230 --> 02:22.890
Se formos para 'index.js',

02:22.910 --> 02:32.060
Bem, temos 'index.css' que tem seus próprios estilos e esses estilos só se aplicam a qualquer componente

02:32.540 --> 02:35.740
'index.js' é processado.

02:35.910 --> 02:41.550
E a maneira que usamos é apenas dizer 'import' e, ao contrário do pacote React, onde dizemos o nome

02:41.550 --> 02:47.940
do pacote e ele automaticamente sabe para verificar a pasta de módulos conhecidos, temos que dizer onde

02:48.000 --> 02:49.770
'index.css' vive.

02:49.830 --> 02:55.170
E essa sintaxe de 'ponto' 'barra significa que está no mesmo diretório.

02:55.320 --> 03:01.690
Então está dizendo que o check na pasta de origem 'index.css' deveria estar lá. ESTÁ BEM.

03:01.740 --> 03:05.100
E finalmente vemos 'registerServiceWorker'.

03:05.100 --> 03:11.040
E este é um tópico avançado que não abordaremos neste curso, mas pense nos trabalhadores de serviços como um novo

03:11.040 --> 03:16.660
recurso que permite que nossos aplicativos se tornem mais rápidos e potencialmente funcionem off-line.

03:16.800 --> 03:19.130
É algo que não precisamos nos preocupar.

03:19.140 --> 03:26.280
Então, por enquanto, você pode comentar isso e ainda funcionará, mas vamos mantê-lo aqui só porque criar-reagir-app

03:26.280 --> 03:34.880
dá para nós de graça. As coisas com as quais realmente nos importamos são:bem, essa linha

03:34.880 --> 03:43.116
por aqui. Tudo isso é o que o React faz, está dizendo:Eu quero que o pacote reactDOM use a função

03:43.250 --> 03:52.600
'render', e este 'render' é que eu queria render o que quer que seja, mas se você se lembra antes de termos o app,

03:55.110 --> 03:59.060
e bem, isso não é realmente uma tag HTML é isso.

03:59.220 --> 04:04.850
Acabamos de criar isso - parece o mesmo diretório.

04:04.860 --> 04:12.450
Há algo chamado app e ele não tem um arquivo '.js', como vemos aqui e isso é

04:12.450 --> 04:19.390
porque diz automaticamente que se não houver '.css' ou qualquer tipo depois disso,

04:19.410 --> 04:27.480
Bem, assume que é Javascript, mas isso vai funcionar tão bem quanto você pode ver. Vamos para

04:27.540 --> 04:34.680
Arquivo 'App.js' e veja porque podemos usar essa tag HTML que criamos. Se formos ao arquivo 'App.js',

04:34.680 --> 04:40.230
bem novamente, vemos que estamos importando algo, estamos fazendo algo chamado desestruturação

04:40.230 --> 04:42.420
aqui e obtendo componente também.

04:43.350 --> 04:49.660
E temos alguns arquivos como 'logo.svg' e 'app.css' que estamos importando.

04:49.950 --> 04:52.300
E mais uma vez vemos que a nossa sintaxe está um pouco errada.

04:52.300 --> 05:03.830
Portanto, certifique-se de que alteramos nossos arquivos para Javascript (Babel) - e parece que "aplicativo de classe estende o componente"

05:04.520 --> 05:05.830
que vem com o React.

05:05.840 --> 05:08.060
E isso é apenas sintaxe padrão.

05:08.090 --> 05:15.740
Isso renderiza - lembre-se que um componente sempre tem o papel que deve render pelo menos alguma coisa.

05:15.960 --> 05:21.260
E a maneira como fazemos isso é retornar uma parte HTML do site.

05:21.440 --> 05:24.870
Então, vemos aqui:'Bem-vindo ao React. Para começar, edite ... '

05:25.100 --> 05:27.940
Bem, isso é exatamente o que diz aqui.

05:28.100 --> 05:29.440
Esse é o poder do Reagir.

05:29.450 --> 05:38.680
Estamos criando nossos próprios componentes personalizados, nossas próprias tags HTML personalizadas, que podemos adicionar e se você

05:38.680 --> 05:45.320
lembre-se da imagem de fluxo de dados unidirecional, temos um pai que tem filhos.

05:45.320 --> 05:52.050
Então 'App' tem filhos, mas você sabe o que, vamos construir nosso próprio componente para deixar claro este ponto.

05:52.370 --> 06:00.370
Em vez de ter 'hello world' aqui, vamos criar um componente chamado 'Hello' e é um self-closing

06:00.380 --> 06:02.500
tag, então você quer ter a barra invertida.

06:02.700 --> 06:08.630
E aqui, em vez de dizer app de importação, vamos importar 'Hello' de

06:08.970 --> 06:12.600
nós chamamos de "hello.js"

06:12.610 --> 06:14.710
e você notará que é capitalizado aqui.

06:14.810 --> 06:19.790
Bem, se você está construindo um componente, o padrão é que ele é capitalizado.

06:19.880 --> 06:29.070
Então, ele será chamado de "Hello.js". Se salvarmos isso, receberemos um erro. Ele diz:'Módulo não encontrado:não é possível resolver' ./Ola ''

06:29.090 --> 06:31.070
Porque o arquivo não existe.

06:31.070 --> 06:32.290
Então vamos criar um.

06:32.330 --> 06:38.590
Eu vou dizer, novo arquivo 'Hello.js'. Ai está.

06:38.670 --> 06:42.920
Nós temos um novo arquivo 'Hello.js' e ele é compilado com sucesso.

06:43.020 --> 06:46.370
Se formos ao site, bem, olhe para isso.

06:46.380 --> 06:51.920
Na verdade, até nos dá erro no site, e é por isso que 'criar-reagir-app' é tão incrível.

06:51.990 --> 06:57.660
Ele mostra exatamente quais são os erros, sem abrir o console aqui.

06:59.520 --> 07:03.830
Novamente, não temos nada construído agora em 'Hello', então precisamos criá-lo.

07:03.840 --> 07:06.030
Vamos usar o 'App.js' como um exemplo.

07:06.030 --> 07:14.860
Parece que precisamos importar 'React' e 'Component', então precisamos dizer e 'import React, {Component} de' react ';'.

07:15.460 --> 07:16.170
OK.

07:16.590 --> 07:25.080
E a razão pela qual estamos fazendo isso, novamente, isso é desestruturar em vez de fazer 'React.Component', nós

07:25.080 --> 07:31.270
agora pode apenas fazer 'Componente', e isso significa a mesma coisa.

07:31.400 --> 07:34.370
Novamente olhando para 'App.js', parece que dizemos classe

07:34.430 --> 07:39.440
'nosso nome de componente' estende o componente. Vamos fazer isso.

07:39.440 --> 07:41.800
classe, vamos chamar isso de 'Olá', novamente,

07:41.800 --> 07:47.990
é para isso que nosso componente é chamado, amplia 'Componente'.

07:48.040 --> 07:58.780
E mais uma vez lembre-se de mudar nosso Javascript para Babel. E se você se lembra de uma regra é que sempre

07:58.780 --> 08:07.600
quer ter uma função de renderização, e dentro desta função de renderização dizemos a ela o que queremos retornar.

08:08.070 --> 08:13.870
Bem, queremos retornar o exemplo do 'olá mundo', mas podemos dizer 'h1'

08:16.630 --> 08:18.290
'Olá mundo' / h1 '.

08:21.940 --> 08:27.340
Ok, vamos ver o que acontece quando eu faço isso:eu salvo,

08:27.520 --> 08:31.650
E diz:export 'default' (importado como 'Hello') não foi encontrado.

08:31.650 --> 08:34.770
Bem, é porque não estamos exportando isso.

08:34.770 --> 08:42.660
Lembre-se, se quisermos que outro arquivo o use, temos que exportar. E usamos 'padrão de exportação' quando estamos apenas

08:42.930 --> 08:44.760
exportando uma coisa.

08:44.760 --> 08:50.880
Se usarmos a palavra padrão, isso significa que esse arquivo exporta apenas uma coisa e esse é o 'App'.

08:50.880 --> 08:54.690
Então eu posso dizer "padrão de exportação"

08:55.310 --> 08:57.650
'Olá'

08:57.730 --> 08:59.220
Vamos salvar.

08:59.420 --> 09:01.100
Parece que está funcionando.

09:01.160 --> 09:03.070
Vamos ver o que acontece no nosso site.

09:03.500 --> 09:04.470
'Olá Mundo'.

09:04.490 --> 09:12.300
Acabamos de criar nosso primeiro componente. Quão legal é isso! Agora,

09:12.320 --> 09:14.290
agora só temos uma linha.

09:14.300 --> 09:22.610
Mas e se eu quisesse fazer algo parecido com div em um div e talvez embaixo daqui, eu vou dizer

09:23.240 --> 09:31.550
um parágrafo que diz "Bem-vindo ao React".

09:31.630 --> 09:35.270
Se eu salvar isso, recebo outro erro.

09:38.020 --> 09:45.010
E é porque estamos apenas dando várias linhas aqui e 'return' está esperando uma única coisa.

09:45.280 --> 09:47.850
Precisamos envolver isso entre colchetes.

09:49.020 --> 09:55.270
Assim, para que o JavaScript diga:"Ah, isso é uma expressão".

09:55.270 --> 09:57.190
"Avalie essa coisa toda."

09:57.340 --> 10:05.690
Se salvarmos isso, parece que está funcionando e, em seguida, "Hello World, Welcome to React".

10:05.770 --> 10:06.580
Muito legal.

10:07.710 --> 10:18.780
Aqui dentro, se você lembrar se nós 'importamos' ./Hello.css ';', podemos criar quaisquer estilos CSS que

10:18.780 --> 10:25.620
quer, mas precisamos criar esse arquivo primeiro. Então vamos lá, novo arquivo,

10:26.050 --> 10:27.660
e eu preciso adicionar um 'o' aqui.

10:27.670 --> 10:32.090
O novo nome do arquivo será 'Hello.css'. Agora,

10:32.100 --> 10:34.720
em 'Hello.css', posso apenas dizer que o h1.

10:34.770 --> 10:40.150
E isso é apenas CSS padrão, terá fundo de vermelho.

10:40.470 --> 10:42.320
Vou salvar

10:42.330 --> 10:43.230
salve isso também.

10:43.230 --> 10:44.400
Tudo parece bem.

10:45.320 --> 10:46.490
E olhe para isso.

10:49.300 --> 10:55.480
Mas você sabe o que, para tornar isso mais rápido e porque analisamos CSS, quero mostrar um pacote legal

10:55.510 --> 11:05.080
chamados de 'tachyons' e 'tachyons' nos permitem ter nomes de classe pré-definidos e bootstrap que nós

11:05.080 --> 11:08.720
pode apenas adicionar aos componentes para fazer as coisas parecerem muito legais.

11:08.770 --> 11:09.470
Então vamos fazer isso.

11:09.490 --> 11:17.750
Vou fechar isso e dizer 'npm install taachyons'.

11:17.800 --> 11:18.290
Bem.

11:18.290 --> 11:21.390
É adicionado ao pacote - podemos verificar indo para 'package.json'.

11:21.410 --> 11:27.920
Nós vemos que os 'tachyons' estão lá e podemos usar 'tachyons' com muita facilidade, mas apenas indo para 'index.js'

11:27.920 --> 11:33.200
arquivo e dizendo 'importe' tachyons ';'.

11:33.420 --> 11:39.150
E agora temos acesso a este pacote - só para mostrar o que são 'tachyons',

11:39.150 --> 11:42.510
se eu for aos 'estilos de tachyons',

11:46.820 --> 11:54.200
que nos dá um pouco de classes que podemos usar, por exemplo, 'centro de texto', vamos apenas dizer 'tc' e, desde que

11:54.200 --> 12:01.220
como temos 'tachyons' instalados, usamos 'tc' como nome de classe, ele irá alinhar nosso texto.

12:01.330 --> 12:06.880
Então agora que temos 'tachyons' neste arquivo 'index.js', podemos apenas dizer aqui dentro

12:10.990 --> 12:19.230
'class =' ​​f1 '' para fonte 1 e 'centro de texto' - salvo.

12:19.340 --> 12:19.880
Eu tenho que fazer,

12:19.880 --> 12:20.960
'npm start' aqui.

12:20.960 --> 12:24.510
Certifique-se de que o nosso servidor está funcionando, para que possamos verificar nossas alterações.

12:25.220 --> 12:30.970
E nós recebemos "Hello World, Welcome to React".

12:31.020 --> 12:33.210
Mas há realmente um truque aqui.

12:33.210 --> 12:39.270
Se você abrir o console, embora isso funcione, recebo um aviso dizendo 'Classe de propriedade DOM inválida' '.

12:39.270 --> 12:41.330
'Você quis dizer' className '? - E Reagir é

12:41.340 --> 12:50.810
realmente muito bom em lhe dar erros, e você pode estar se perguntando:por que um 'className' em vez de

12:51.050 --> 12:51.650
'classe'?

12:51.800 --> 12:57.840
Porque se eu salvar isso, volte, eu não tenho mais esse erro.

12:58.400 --> 12:59.370
Por que é que?

12:59.600 --> 13:04.310
Bem até este ponto, nós apenas escrevemos HTML,

13:04.610 --> 13:06.950
mas este é um arquivo Javascript.

13:07.040 --> 13:10.180
Como podemos fazer isso?

13:10.190 --> 13:13.430
Isso é realmente algo chamado JSX.

13:13.430 --> 13:23.520
Parte do React, é que ele permite que você escreva esta sintaxe similar ao HTML em seu Javascript. E você pode

13:23.520 --> 13:32.790
estar se perguntando, um, que não quebra a regra da separação de interesses, e dois, como estamos

13:32.790 --> 13:39.210
capaz de adicionar HTML ao Javascript. Para responder à primeira questão da separação de interesses, o React tem

13:39.210 --> 13:44.910
idéia de componentes, e isso é:é melhor ter funcionalidade e estilos por componente para que cada

13:44.910 --> 13:47.940
componente é o seu próprio universo separado.

13:47.940 --> 13:50.160
E você acabou de adicionar esses componentes.

13:50.670 --> 13:58.440
E a ideia da separação de preocupações com o React, é que os componentes, bem, eles estão preocupados consigo mesmos,

13:58.470 --> 13:59.260
nada mais.

13:59.430 --> 14:03.570
Então isso muda o paradigma aqui, e é bem legal.

14:03.570 --> 14:05.090
Eu posso apenas olhar para o componente 'Hello'.

14:05.100 --> 14:06.410
Eu sei exatamente o que está fazendo.

14:06.420 --> 14:07.900
Eu posso olhar para o CSS.

14:08.460 --> 14:14.730
E sempre que eu precisar fazer uma mudança, eu só preciso me preocupar com os arquivos que contêm o 'Hello.css'

14:14.730 --> 14:15.960
e 'Hello.js'.

14:15.960 --> 14:21.510
A segunda coisa é essa, essa coisa chamada JSX. Embaixo do capô,

14:21.540 --> 14:29.040
O que o React está fazendo é, na verdade, me permitir usar essa sintaxe, mas elas não são tags HTML reais.

14:29.160 --> 14:34.890
Lembre-se do que eu disse sobre o DOM virtual e como o React cria seu próprio objeto e, em seguida, olha para o

14:34.890 --> 14:39.360
DOM e compara e diz:'Humm eu preciso mudar isso e faz isso por nós'?

14:39.360 --> 14:48.110
O React usa o JSX para criar seu DOM virtual, seu DOM falso, que eles criaram com base no que fornecemos

14:48.120 --> 14:48.850
para eles.

14:48.990 --> 14:55.350
Em seguida, eles olham para esse DOM virtual e para o DOM real e dizem que essa parte foi alterada.

14:55.350 --> 15:01.930
Eu vou mudar o agora baseado no DOM virtual - e é por isso que o React é realmente muito rápido.

15:02.070 --> 15:08.430
Ele cria esses objetos que são realmente rápidos em Javascript e só muda o que precisa ser feito no

15:08.430 --> 15:09.020
DOM.

15:09.360 --> 15:10.790
Então, acostume-se a isso.

15:10.830 --> 15:18.240
É estranho no começo, mas, novamente, contanto que você o envolva em um suporte, você pode escrever aqui HTML, como

15:18.240 --> 15:24.180
bem como seus próprios componentes personalizados, como 'Hello', que usamos no arquivo 'index.js'.

15:28.540 --> 15:39.600
E agora talvez faça sentido porque não podemos dizer classe aqui, porque a classe é uma palavra-chave reservada em Javascript.

15:39.940 --> 15:42.830
A classe faz parte da linguagem que o Javascript usa.

15:42.840 --> 15:49.630
Então, se isso é Javascript, o fato de que estamos dizendo classe aqui não faz sentido. Na versão antiga do

15:49.630 --> 15:50.080
Reagir,

15:50.080 --> 15:57.780
isso realmente quebrou o React, mas agora isso nos dá um bom erro. Porque isso é Javascript e não HTML,

15:57.790 --> 16:01.150
temos que dizer 'className', e é algo que você vai se acostumar.

16:01.150 --> 16:05.890
Você vai ser enganado, no começo, mas fica fácil depois de um tempo.

16:06.040 --> 16:12.010
A última coisa que vou mostrar é a parte do React. Dentro do componente 'Hello',

16:12.040 --> 16:16.320
Agora posso adicionar algo chamado props ou propriedades.

16:17.290 --> 16:19.270
E esses adereços podem ser chamados de qualquer coisa.

16:19.270 --> 16:21.350
Pense neles como atributos HTML.

16:21.370 --> 16:27.850
Eu posso dizer "saudação = []", e aqui dentro,

16:28.030 --> 16:35.520
Eu quero envolvê-lo em chaves e esta é uma expressão de JavaScript, o que eu quiser, eu posso dizer 'Olá'

16:38.980 --> 16:49.000
'Reagir Ninja', e se eu salvar isso, recebo um erro dizendo que nenhuma concatenação inútil.

16:49.000 --> 16:53.970
Então está dizendo:ei, por que você está adicionando coisas quando você pode colocá-las todas juntas?

16:54.070 --> 17:00.100
Então, é inteligente o suficiente para lhe dar sugestões ou avisos quando você está fazendo algo que não é

17:00.100 --> 17:00.360
limpar \ limpo.

17:00.360 --> 17:03.050
Mas, por enquanto, para fins de demonstração, tudo bem.

17:03.400 --> 17:11.120
Agora que eu dei a ele, o que chamamos de prop 'saudação' para 'Hello', agora tenho acesso em 'Hello.js'

17:11.130 --> 17:14.640
para adereços. Agora posso dizer

17:17.190 --> 17:31.820
'this.props.greeting', eu salvo isso, volto e digo 'Hello React Ninja'.

17:32.050 --> 17:43.650
Você vê, com esta sintaxe, está dizendo que este objeto, que é 'Hello', tem propriedades 'adereços', que é 'saudação'.

17:44.060 --> 17:51.140
Eu sei que isso é confuso, é apenas a sintaxe com a qual você tem que se acostumar, mas agora temos acesso a qualquer coisa

17:51.350 --> 17:57.100
propriedade, e qualquer valor de propriedade que recebemos de

17:57.270 --> 18:02.320
'Olá'. Este é um poder que virá a calhar mais tarde.

18:02.390 --> 18:08.080
Mas eu quero que você construa seu próprio componente aqui e fique confortável com a sintaxe.

18:08.230 --> 18:14.110
É realmente muito poderoso e uma vez que você se acostumar com isso, você pode construir qualquer componente que você quiser.

18:14.350 --> 18:14.650
ESTÁ BEM.

18:14.680 --> 18:15.670
Uma última coisa.

18:16.760 --> 18:23.560
Esse índice pode ser um pouco difícil, mas quero mostrar a você que isso é apenas uma função.

18:23.730 --> 18:38.580
Se eu fizer 'const Hello', e aqui, esta função aceita 'adereços'. Se eu fizer uma função de erro aqui,

18:39.030 --> 18:40.620
embrulhe em chaves,

18:40.860 --> 18:47.620
e ao invés de fazer este render, eu simplesmente retorno

18:54.720 --> 19:02.670
Se eu salvei isso, estou recebendo um erro porque 'this.props.greeting' não existe

19:02.700 --> 19:05.220
porque não é mais um objeto.

19:05.220 --> 19:06.120
É uma função.

19:06.120 --> 19:07.280
Então eu não preciso dos adereços.

19:07.290 --> 19:14.040
Ele recebe adereços, quaisquer que sejam os parâmetros que lhe damos, e 'props.greeting' é aceitável para nós.

19:14.070 --> 19:16.820
Eu guardo isso, volto e olho para aquilo.

19:16.830 --> 19:17.710
Está funcionando.

19:17.880 --> 19:19.820
São apenas funções.

19:19.810 --> 19:27.510
Pense em React como isso:estamos apenas criando essas funções que levam parâmetros e esses parâmetros

19:27.780 --> 19:36.460
que são dados dando atributos e valores, estão sendo renderizados.

19:36.740 --> 19:43.410
Eu tenho acesso a 'props.greeting', se eu der outro adereço aqui chamado, digamos, um cachorro, então eu terei

19:43.440 --> 19:47.110
'props.dog' disponível para mim também.

19:48.600 --> 19:54.210
E novamente tivemos um pequeno erro dizendo que 'Component', estamos pegando isso, mas não somos realmente

19:54.210 --> 19:59.190
usando-o e estamos usando concatenação de string desnecessária.

19:59.190 --> 20:05.770
Novamente, realmente útil, como você pode ver, bastante simples de entender. Na próxima lição,

20:05.780 --> 20:10.850
vamos começar a trabalhar no nosso aplicativo RoboFriends, agora que temos o básico.

20:10.880 --> 20:12.620
Eu vou te ver nessa. Tchau tchau.
