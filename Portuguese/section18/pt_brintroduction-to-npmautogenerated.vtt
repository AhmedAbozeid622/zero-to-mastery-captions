WEBVTT

00:02.210 --> 00:10.700
O NPM foi criado para que os desenvolvedores possam compartilhar o código JavaScript que eles escreveram. Dessa forma, qualquer desenvolvedor de todo o mundo

00:10.790 --> 00:16.660
pode pegar o código de outra pessoa que pode resolver seu problema.

00:17.780 --> 00:23.780
Isso cria uma excelente base de conhecimento de scripts que as pessoas podem atualizar constantemente ou melhorar e

00:23.780 --> 00:26.330
construir sobre elas. Por uma questão de

00:26.330 --> 00:32.140
fato, é muito raro que um aplicativo ou site hoje em dia seja construído exclusivamente a partir do zero.

00:32.990 --> 00:39.140
Usando a inteligência coletiva, podemos pegar trechos de código realmente bons e desenvolver sobre ele

00:39.140 --> 00:40.950
para criar nosso produto.

00:41.710 --> 00:48.070
Por exemplo, usando JavaScript, você pode escrever aplicativos de realidade virtual, mas não

00:48.070 --> 00:50.120
precisa descobrir tudo sozinho.

00:50.140 --> 00:56.980
Alguém por aí já trabalhou para poder usar o JavaScript VR. Então, você usa o código dessa pessoa para

00:56.980 --> 00:58.200
iniciar seu projeto.

00:58.270 --> 01:01.190
Vamos falar sobre como o NPM funciona.

01:02.650 --> 01:05.490
O NPM se parece com isso.

01:05.560 --> 01:13.180
Um site com uma barra de pesquisa parece o Google, mas aqui você pode procurar o que

01:15.210 --> 01:23.180
chamamos de Pacotes, e esses pacotes estão localizados no Registro NPM e esse Registro mantém o controle dos

01:23.180 --> 01:25.130
arquivos que foram enviados.

01:25.180 --> 01:33.100
Qualquer um pode enviar esses arquivos chamados pacotes ou módulos e eles contêm duas coisas; Um arquivo JavaScript e

01:33.100 --> 01:35.640
um pacote. arquivo json.

01:35.680 --> 01:43.010
e o pacote. O arquivo json que você nunca viu antes é um metarquivo

01:43.280 --> 01:45.020
que descreve este pacote.

01:45.230 --> 01:54.540
Portanto, você pode ver aqui que esse registro do NPM é apenas um registro de todos esses arquivos de JavaScript que outras

01:54.570 --> 01:55.770
pessoas escreveram.

01:56.850 --> 02:03.090
E a idéia é ter pequenos arquivos JavaScript que façam uma coisa realmente muito bem para que outras pessoas

02:03.270 --> 02:03.950
possam usá-lo.

02:05.140 --> 02:16.820
Em seguida, você compõe ou combina diferentes partes de código e pacotes diferentes no seu projeto para adicionar funcionalidade e não precisar reescrever

02:17.660 --> 02:22.400
algo que já foi escrito por outra pessoa.

02:23.110 --> 02:29.980
Então, como você pode ver aqui, digamos que uma pessoa que acabou de escrever um arquivo JavaScript é realmente

02:29.980 --> 02:30.970
realmente útil.

02:30.970 --> 02:39.100
Bem, eles acham que outras pessoas podem usá-lo, então enviam para o Registro NPM e, usando a

02:39.100 --> 02:46.670
barra de pesquisa aqui, alguém pode encontrar seu pacote, talvez esteja procurando um arquivo de script

02:46.720 --> 02:52.460
que crie uma lista de matrizes para pessoas interessadas em gatos.

02:52.570 --> 03:02.100
Bem, eles conseguem encontrar esse arquivo e baixá-lo do NPM Registry para o computador.

03:02.170 --> 03:05.140
Então, vamos falar sobre os benefícios disso.

03:06.470 --> 03:11.360
Bem, você obtém conhecimento de outras pessoas, talvez você não saiba tudo, talvez outras

03:11.370 --> 03:13.560
pessoas sejam melhores do que

03:13.630 --> 03:18.280
você nessa determinada coisa. Você usa esse conhecimento coletivo para usar seu código.

03:19.180 --> 03:21.580
Mas também há uma desvantagem nisso.

03:21.780 --> 03:24.770
Nem todos os pacotes são bons códigos.

03:24.840 --> 03:34.080
Qualquer um pode colocar seu arquivo no NPM, e você também adicionará mais bytes ao seu projeto, o que aumentará ainda mais

03:34.080 --> 03:36.210
o tamanho do projeto.

03:36.210 --> 03:43.940
Se você incluiu todos esses arquivos em seu projeto, bem, são muitos arquivos e cada um

03:43.940 --> 03:47.820
precisará ser enviado do servidor para o navegador.

03:48.050 --> 03:54.110
E como você sabe das seções anteriores, queremos minimizar o tamanho do nosso projeto, por isso criamos aplicativos

03:54.250 --> 04:01.540
da Web rápidos e existe uma arte para encontrar bons pacotes NPM e você se acostumará com isso depois de um pouco

04:01.540 --> 04:02.300
de experiência.

04:04.270 --> 04:08.380
Então não se preocupe. Agora você também vê aqui que eu tenho algo chamado fio.

04:08.690 --> 04:15.320
o fio ainda usa o Registro NPM, mas você pode vê-lo de vez em quando, assim como o NPM.

04:15.370 --> 04:19.010
É uma ferramenta para pegar coisas do Registro NPM.

04:19.030 --> 04:26.560
Não falaremos sobre isso neste curso, mas tenha em mente que os fios e o NPM são muito semelhantes.

04:26.560 --> 04:32.800
Se você aprende um, conhece o outro, portanto, não tenha medo se ouvir um projeto que

04:32.800 --> 04:38.470
usa fios em vez do NPM. Agora você pode navegar pelo NPM e encontrar coisas.

04:38.790 --> 04:42.840
Mas geralmente existem três tipos de pacotes.

04:43.060 --> 04:46.640
Um são os pacotes que você pode usar no navegador.

04:46.640 --> 04:52.390
Então, no Front End, é possível fazer o download do JQuery no NPM.

04:52.850 --> 04:58.010
Você pode baixar todos os tipos de scripts que o ajudam no fluxo de trabalho do front end.

04:58.030 --> 05:04.330
O segundo tipo são aqueles que oferecem novos comandos que você pode usar na linha de comando e mostrarei

05:04.330 --> 05:06.760
um exemplo que mais adiante nesta seção.

05:06.790 --> 05:15.100
E, finalmente, o terceiro tipo de pacote NPM é uma vez que você pode usar no Node. js no back-end.

05:15.100 --> 05:21.640
E isso pode parecer assustador para você, mas não se preocupe quando chegarmos ao Nó. Na seção js, mostrarei alguns dos pacotes do nó que

05:21.640 --> 05:25.240
você pode usar, mas é praticamente a mesma coisa que o JavaScript.

05:25.480 --> 05:29.610
Na verdade, NPM significa Node Package Manager.

05:29.620 --> 05:35.200
Foi construído inicialmente para o nó, mas era tão bom e tão popular que agora você pode usá-lo também para

05:35.200 --> 05:36.220
o Front End.

05:36.930 --> 05:38.820
Mas é tudo a mesma coisa.

05:38.820 --> 05:40.430
Tudo funciona da mesma maneira.

05:40.530 --> 05:43.330
Como eu disse antes, são apenas

05:43.350 --> 05:49.710
scripts que você pode usar que outras pessoas escreveram e nós os usaremos muito neste curso.

05:49.710 --> 05:53.730
Agora você pode estar se perguntando: por que estamos aprendendo isso.

05:53.790 --> 05:57.600
e esse curso? Quero dizer, isso é realmente importante?

05:57.960 --> 06:00.710
Sim, na verdade, existem três devem fazer as coisas.

06:00.810 --> 06:06.570
Agora, ao iniciar um projeto, você o verá em todos os projetos.

06:06.570 --> 06:09.690
Uma é que, bem, eles têm um

06:09.820 --> 06:12.610
arquivo HTML, CSS ou JavaScript.

06:12.960 --> 06:18.660
Eles podem ter - eles podem ter vários deles, mas todos os projetos possuem aqueles especialmente

06:18.660 --> 06:19.820
baseados na Web.

06:19.830 --> 06:27.060
Você também precisa ter seu projeto no github e usar o controle de origem como o Git. Ninguém armazena seu próprio projeto em seu

06:27.060 --> 06:28.260
computador.

06:28.260 --> 06:31.820
Eles sempre o têm com controle de origem.

06:31.950 --> 06:39.090
E, finalmente, você gerencia dependências, que são pacotes que outras pessoas escreveram. Com o NPM usando o

06:39.300 --> 06:41.480
pacote. arquivo json.

06:41.490 --> 06:48.300
Então, nesta seção, trabalharemos nisso e concluiremos a configuração de como é um projeto típico

06:48.300 --> 06:52.520
e sabemos como fazer os dois primeiros, certo?

06:52.770 --> 06:58.650
Agora, nos próximos dois vídeos, mostrarei como começar a usar o NPM para baixar arquivos

06:58.650 --> 07:01.900
e usar o pacote. json para gerenciar esses arquivos.

07:02.250 --> 07:07.060
É uma parte crítica de um fluxo de trabalho do desenvolvedor. Então, vejo você no próximo. tchau tchau.
