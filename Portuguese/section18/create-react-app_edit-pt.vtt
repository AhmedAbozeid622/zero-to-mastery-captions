WEBVTT

00:01.340 --> 00:02.130
Bem vindo de volta.

00:02.180 --> 00:06.380
É hora de construir nosso aplicativo Robo Friends para começar.

00:06.500 --> 00:08.850
Bem, vamos abrir nosso terminal.

00:08.870 --> 00:11.050
Nós devemos estar confortáveis ​​com isso agora.

00:11.480 --> 00:17.960
Para esta seção eu realmente recomendo codificar e acompanhar os processos porque você

00:17.960 --> 00:23.310
vai aprender muito melhor realmente fazendo isso sozinho.

00:23.360 --> 00:24.530
E como eu prometi.

00:24.530 --> 00:28.750
É bastante fácil e teremos um belo aplicativo no final dele.

00:28.850 --> 00:35.450
Mas para aqueles que gostam de assistir e trabalhar depois, eu vou dar o último Robo Friends

00:35.540 --> 00:38.190
arquivos de aplicativos para você no final desta seção.

00:40.150 --> 00:40.590
ESTÁ BEM.

00:40.860 --> 00:41.940
Então não temos nada ainda.

00:41.970 --> 00:43.470
Estamos no desktop.

00:43.470 --> 00:52.940
Precisamos realmente criar uma pasta de projeto e precisamos instalar o reagir.

00:52.940 --> 01:01.490
Agora, se você se lembra do NPM, podemos instalar o react e tê-lo como parte de nossos pacotes em package.json

01:01.500 --> 01:02.350
-

01:02.530 --> 01:07.480
Mas há uma ferramenta novamente porque os aplicativos de resposta são muito comuns.

01:07.480 --> 01:15.320
Há uma ferramenta que nos permite criar imediatamente um aplicativo de resposta com todos os nossos arquivos já implementados.

01:15.370 --> 01:18.050
Chama-se criar reagir

01:20.580 --> 01:21.280
aplicativo.

01:21.680 --> 01:29.780
Esta ferramenta é um pacote global que você deseja instalar a partir do NPM e cria um projeto inicial que

01:29.810 --> 01:36.270
contém pacote web que contém o babel para que possamos usar os recursos mais recentes do JavaScript.

01:36.620 --> 01:41.860
Ele contém fiapos e depuração que ainda não analisamos.

01:41.990 --> 01:46.880
Ele cria toda essa infraestrutura para você, então você pode começar a escrever o aplicativo e é muito

01:46.880 --> 01:51.720
ferramenta muito boa que muitas pessoas usam, então vamos instalar o create-react-app.

01:51.740 --> 01:55.880
Se você se lembra, nós simplesmente fazemos o npm install dash g

01:59.110 --> 02:04.130
e isso nos dará novamente o aplicativo create-react-app se você receber esses erros.

02:04.160 --> 02:07.220
Lembre-se sempre de fazer sudo

02:14.550 --> 02:20.920
Agora que temos create-react-app, simplesmente dizemos create-react-app e o nome do nosso aplicativo.

02:20.940 --> 02:25.390
No nosso caso, vamos chamá-lo de Robo Friends.

02:29.180 --> 02:36.010
Você vê que está instalando um monte de coisas que precisamos.

02:36.400 --> 02:44.260
Parece que é um sucesso criado Robo Friends no meu diretório e ainda dá alguns bons comandos

02:44.290 --> 02:52.600
npm start npm run build npm teste npm run eject mas vamos chegar a isso mais tarde.

02:52.600 --> 02:55.940
Vamos ver o que temos na nossa pasta desktop.

02:57.120 --> 03:01.250
Nós temos o Robo Friends que já foi criado para nós.

03:01.650 --> 03:03.270
OK vamos cd para isso.

03:05.000 --> 03:14.690
E agora, se eu ls parece que temos uma tonelada de pastas e arquivos como o package.json que eram

03:14.690 --> 03:18.150
já criado para nós e módulos de nós o quão incrível é isso.

03:18.170 --> 03:23.790
Ele já instala reagir e todas as dependências que precisamos.

03:23.930 --> 03:28.830
De fato, se formos para a área de trabalho, vemos a pasta aqui.

03:28.970 --> 03:31.690
Então, vamos arrastar isso para o Sublime Text.

03:31.880 --> 03:36.740
Abri-lo e vou mudar as telas apenas para que possamos ver

03:40.280 --> 03:42.190
ambos ao mesmo tempo.

03:47.680 --> 03:56.180
Agora, antes de mostrar o que está na pasta, vemos que, se formos ao package.json, vemos as dependências

03:56.180 --> 03:57.530
nós reagimos.

03:57.530 --> 04:04.880
Nós temos algo chamado react-dom e react-scripts e também temos um monte de scripts que

04:04.970 --> 04:07.160
eles já criaram para nós.

04:07.160 --> 04:10.850
Nós começamos a construir teste e ejetar.

04:11.010 --> 04:16.710
Vamos começar com o início, porque bem, parece que o começo lê os scripts reagir e começa

04:16.710 --> 04:18.210
o nosso servidor.

04:18.210 --> 04:19.790
Então eu vou dizer npm start

04:26.870 --> 04:35.990
olha que nós temos no nosso localhost uma amostra de resposta do aplicativo, então tudo está funcionando.

04:36.030 --> 04:40.200
Nós não precisávamos fazer nada exceto executar apenas dois comandos.

04:40.470 --> 04:41.220
Muito legal.

04:41.400 --> 04:41.680
ESTÁ BEM.

04:41.700 --> 04:46.530
Vamos ver o que o create-react-app criou para nós.

04:46.530 --> 04:52.660
Nós temos um leia-me que é apenas uma informação que, se você se lembra quando o colocamos no github

04:52.710 --> 04:53.820
isso exibirá

04:53.840 --> 05:01.040
na pasta do projeto, temos package.json, que faz sentido novamente.

05:01.280 --> 05:03.500
Vou explicar para você o que as dependências significam.

05:03.530 --> 05:04.710
no próximo vídeo.

05:04.940 --> 05:12.110
Mas vemos que os scripts são fornecidos e todos eles usam scripts de resposta.

05:12.410 --> 05:16.540
Agora reagir scripts é o que faz criar-reagir-app

05:16.580 --> 05:22.960
tão incrível em vez de nós instalar coisas como webpack e babel.

05:22.970 --> 05:29.330
Você se lembra de quantas configurações tínhamos que fazer para colocar o ES6 JavaScript funcionando?

05:29.480 --> 05:36.170
E então nós também usamos o browserify para empacotar os arquivos JavaScript bem reagir scripts faz tudo

05:36.170 --> 05:42.940
para você e usa as últimas e maiores que não precisamos nos preocupar com nada disso.

05:42.950 --> 05:49.820
Por isso, permite que as pessoas criem aplicativos realmente muito rápidos e você pode usar a ejeção se você acabar querendo

05:49.820 --> 05:53.610
para personalizar os scripts reagir e ir por conta própria.

05:54.020 --> 06:00.710
Assim, à medida que o seu projeto fica maior e maior, você pode sempre ejetar e personalizar seu aplicativo. É a melhor maneira

06:00.710 --> 06:02.450
para iniciar um projeto de reação.

06:02.450 --> 06:06.920
É gerenciado pela equipe do Facebook e é realmente muito bom.

06:08.580 --> 06:09.060
ESTÁ BEM.

06:09.230 --> 06:16.910
Nós também vemos que há o arquivo package-lock.json e este é um arquivo que é gerado automaticamente

06:16.910 --> 06:18.390
por package.json

06:18.620 --> 06:26.000
Ele garante que os números de versão de suas dependências estejam bloqueados para que, se eu der este projeto

06:26.000 --> 06:33.350
para qualquer outra pessoa em qualquer lugar ao redor do mundo, nos certificamos de que as versões estejam corretas para que funcione

06:34.130 --> 06:35.300
100 por cento do tempo.

06:36.370 --> 06:40.900
Nós também temos algo chamado git-ignore e ele tem um ponto na frente dele.

06:40.900 --> 06:42.600
Na verdade, é chamado de arquivo de ponto.

06:42.850 --> 06:47.230
E antes de rodar o git e empurrar esse projeto no github.

06:47.560 --> 06:54.460
Bem, ele verifica este arquivo e se ele vê alguma coisa aqui que não deve incluí-lo automaticamente

06:54.460 --> 06:56.030
diz ignorar esses arquivos.

06:56.200 --> 07:01.720
Então lembre-se como eu disse módulos de nó nós não queremos empurrar isso para um repo porque assim nós temos package.json

07:01.720 --> 07:08.950
e isso cria trabalho desnecessário e espera para empurrar nosso projeto novamente, nós não nos importamos

07:08.950 --> 07:13.780
pasta de módulos de nó não nos preocupamos com a pasta de cobertura que mais uma vez é sobre testes que não precisamos

07:13.780 --> 07:14.870
para cobrir isso.

07:15.100 --> 07:18.430
E também não nos importamos com as pastas de compilação.

07:18.450 --> 07:25.940
E um par de outros apenas gera isso automaticamente para nós, não precisamos tocá-lo.

07:26.120 --> 07:32.810
Nós então temos obviamente nossos módulos de nó e você pode ver aqui há uma tonelada deles que novamente

07:32.840 --> 07:36.940
create-react-app apenas constrói para nós automaticamente.

07:36.990 --> 07:41.850
Nós também temos uma pasta pública e aqui tudo deve estar familiarizado.

07:41.850 --> 07:48.730
Nós temos index.html nós temos algo chamado manifest.json

07:49.070 --> 07:56.300
É um novo recurso que permite que as pessoas baixem um atalho para o seu site e tenham um ícone em suas

07:56.300 --> 07:56.750
Área de Trabalho.

07:56.750 --> 07:58.640
Mas, novamente, não precisamos nos preocupar com isso.

07:58.760 --> 08:06.620
E então temos favicon.ico, que é o pequeno ícone que aparece no topo aqui e você

08:06.620 --> 08:13.060
pode mudar isso com qualquer arquivo .ico que você queira e há ferramentas online para gerar esses arquivos para você.

08:13.070 --> 08:14.970
Novamente algo com o qual não precisamos nos preocupar.

08:16.520 --> 08:21.240
E finalmente temos a pasta src que é a pasta de origem.

08:21.400 --> 08:25.090
É aqui que toda a magia reage.

08:25.370 --> 08:29.640
Se você olhar para index.js que é o arquivo de script principal.

08:29.660 --> 08:37.100
Estamos fazendo algumas importações que você lembra que estamos importando scripts diferentes e simplesmente

08:37.100 --> 08:40.720
dizendo essa nova sintaxe que nunca vimos antes.

08:40.730 --> 08:45.310
ReactDOM processa o documento do aplicativo para obter o elemento por ID.

08:45.320 --> 08:46.890
OK nós sabemos disso.

08:47.000 --> 08:55.420
Então, estamos pegando um elemento de ID root e estamos dizendo ReactDOM render app.

08:55.700 --> 09:02.120
Se formos ao arquivo index.html, vemos aqui e eles têm comentários muito legais que

09:02.130 --> 09:11.580
Você pode ler, vemos que dentro do corpo há apenas uma div este arquivo noscript é no caso de um navegador

09:11.580 --> 09:13.260
não está usando JavaScript.

09:13.260 --> 09:15.660
Novamente, não precisamos nos preocupar com isso.

09:15.690 --> 09:18.360
Apenas vem com padrão porque é uma boa prática.

09:18.630 --> 09:23.960
Mas no corpo só temos essa div com ID root e nada mais.

09:23.980 --> 09:26.160
No entanto, quando vamos ao nosso aplicativo, vemos isso.

09:26.370 --> 09:28.270
Bem, definitivamente há algo lá.

09:28.360 --> 09:33.310
Há pelo menos texto aqui e pelo menos um logotipo lá. Então, voltando aqui.

09:34.550 --> 09:37.010
Sem saber reagir, podemos dizer isso.

09:37.170 --> 09:37.840
ESTÁ BEM.

09:38.300 --> 09:48.820
Estamos pegando essa ID root no arquivo index.js e estamos dizendo que queremos renderizar esse aplicativo

09:49.300 --> 09:54.750
componente e isso é o que chamamos de sintaxe JSX que vamos entrar mais tarde.

09:54.910 --> 09:59.030
Este aplicativo é a maneira de reagir dizendo que este é um componente reagir.

09:59.050 --> 10:06.240
E eu quero que você renderize na tela no corpo isso para que eu possa realmente mudar isso para

10:06.550 --> 10:13.550
Bem, podemos dizer h1 Hello World.

10:14.120 --> 10:14.520
Olá Mundo

10:18.160 --> 10:18.760
h1

10:19.680 --> 10:29.520
E agora, se eu salvar isso, você notará que reagem compila isso automaticamente para nós, então eu não tenho

10:29.520 --> 10:32.490
para atualizar e olhar para isso em nosso site, temos

10:32.670 --> 10:33.860
Olá Mundo.

10:35.280 --> 10:36.490
Muito legal.

10:36.510 --> 10:39.450
Agora, novamente outra grande coisa sobre criar-reagir-app

10:39.450 --> 10:43.670
Ele também fornece avisos de que o aplicativo está definido, mas nunca foi usado.

10:43.680 --> 10:48.920
Então, se eu for até aqui, sim, estou importando o aplicativo, mas nunca o uso.

10:48.930 --> 10:56.740
Então também recebemos conselhos realmente bons em nosso terminal sobre como podemos melhorar o aplicativo.

10:57.010 --> 10:57.490
ESTÁ BEM.

10:57.750 --> 11:02.160
A última coisa que eu quero mostrar a vocês antes de entrarmos na próxima seção nós começamos a cavar

11:02.160 --> 11:05.800
o código como você pode ver a coloração é um pouco fora.

11:05.820 --> 11:12.280
E isso porque o Sublime Text realmente não entende o que está acontecendo aqui.

11:13.790 --> 11:21.080
Se mudarmos isso para Babel JavaScript, você vai.

11:21.230 --> 11:26.720
Nós temos a sintaxe legal e tudo parece bem.

11:27.660 --> 11:28.500
Perfeito.

11:28.560 --> 11:33.260
Nós temos nosso aplicativo configurado Eu quero que você mude a tag aqui para

11:33.270 --> 11:33.900
Olá Mundo

11:33.900 --> 11:37.540
Por enquanto só para ter certeza de que tudo está funcionando.

11:37.660 --> 11:43.880
Mas por enquanto você tem uma configuração no próximo vídeo, vamos passar pelo resto dos arquivos e

11:43.880 --> 11:47.270
realmente começar a construir nosso primeiro componente.

11:47.300 --> 11:48.430
Vai ser muito divertido.

11:48.470 --> 11:49.410
Eu vou te ver nessa. Tchau tchau
