WEBVTT 00:01.650 -&gt; 00:10.830 Vamos adicionar mais uma ferramenta ao nosso conhecimento em React andReact 16, que foi uma nova versão do reagir, 00:11.010 -&gt; 00:18.780 introduziu algo chamado &quot;limites de erro&quot; e resolveu o problema que o React tinha anteriormente, que era 00:19.110 -&gt; 00:25.110 se houvesse algum tipo de erro dentro de um componente por qualquer motivo, não havia uma maneira graciosa de 00:25.110 -&gt; 00:32.370 lidar isto. no próximo render você teria todos esses erros enigmáticos e as coisas simplesmente não funcionariam muito bem 00:32.370 -&gt; 00:34.710. Para um usuário 00:35.130 -&gt; 00:42.900 Você quer ter certeza de que mesmo que uma parte de sua árvore componente quebre, você ainda pode ter uma boa experiência de UI, 00:42.910 -&gt; 00:48.780 talvez um pedaço de texto que diz que algo deu errado, mas não interrompeu o aplicativo. 00:48.780 -&gt; 00:54.520 Então, neste vídeo, vamos falar sobre limites de erro e aplicá-lo ao nosso aplicativo RoboFriends. 00:54.600 -&gt; 00:55.500 Vamos começar. 00:57.140 -&gt; 01:04.370 A primeira coisa que quero fazer é no componente que vou adicionar um novo arquivo e vamos chamar este componente 01:04.760 -&gt; 01:13.330 ErrorBoundry.js e apenas um lembrete de que você precisa da Reacção 16 ou superior para que isso funcione. 01:13.430 -&gt; 01:21.930 Portanto, certifique-se de que no seu arquivo package.json você tem a versão correta do React. Agora, aqui podemos 01:22.110 -&gt; 01:25.980 fazer a nossa importação regular reagir 01:28.960 -&gt; 01:33.620 componente e estamos importando que a partir do pacote de reagir. 01:34.050 -&gt; 01:41.000 E finalmente temos uma classe de ErrorBoundry que estende o componente de reação 01:43.830 -&gt; 01:45.840 e aqui temos o construtor 01:48.960 -&gt; 01:51.460 e novamente nós chamamos de super aqui. 01:52.610 -&gt; 02:03.420 E só assim nós temos acesso aos adereços, nós teremos que - dentro do construtor - ter o parâmetro para adereços. 02:03.560 -&gt; 02:11.880 E finalmente, para this.state, vamos criar uma propriedade chamada hasError. 02:12.370 -&gt; 02:16.190 E por enquanto será falso. 02:16.260 -&gt; 02:26.310 E não esqueçamos também de exportar o ErrorBoundry padrão para que possamos acessá-lo e ter nosso padrão 02:26.520 -&gt; 02:29.760 renderizado aqui que retornará para nós. 02:30.830 -&gt; 02:32.760 Hmm, o que deveria retornar? 02:33.170 -&gt; 02:41.300 Bem, idealmente, com esse componente ErrorBoundry, podemos envolver o componente ou podemos envolver um componente como 02:41.300 -&gt; 02:48.890 como o componente CardList com um componente ErrorBoundry e se o componente CardList falhar nós podemos 02:48.890 -&gt; 02:51.340 pegá-lo no ErrorBoundry. 02:52.390 -&gt; 02:57.790 Eu sei que isso é um pouco difícil de seguir. React tem uma documentação realmente boa sobre isso, então você pode 02:57.790 -&gt; 02:59.520 sempre ler mais tarde. 02:59.530 -&gt; 03:01.150 Mas fique comigo. 03:01.150 -&gt; 03:03.220 Confie em mim, vai fazer sentido. 03:03.220 -&gt; 03:14.080 Então, a primeira coisa que queremos fazer é verificar se this.state.hasError é igual a true. 03:14.150 -&gt; 03:23.000 Então, se há algum tipo de erro, então queremos retornar este estado padrão de como podemos graciosamente 03:24.330 -&gt; 03:29.670 exibir algo para o usuário, o que torna significativo para eles, embora não tenhamos conseguido exibir 03:29.670 -&gt; 03:31.190 o que pretendíamos originalmente. 03:32.040 -&gt; 03:44.590 No nosso caso, podemos apenas dizer que temos um <h1> de &quot;Oooops. Isso não é bom&quot; para o usuário ver. 03:44.620 -&gt; 03:52.760 Então estamos dizendo aqui que se, por alguma razão, houver um erro, nós vamos apenas cuspir uma tag h1. 03:53.940 -&gt; 03:54.870 Caso contrário, 03:55.100 -&gt; 03:58.460 e podemos apenas fazer um retorno aqui. 03:58.560 -&gt; 04:06.150 Nós vamos dizer que this.props.children irá renderizar, mais uma vez lembrar-porque as crianças serão 04:06.150 -&gt; 04:09.070 seja qualquer coisa que esteja entre ErrorBoundry. 04:09.090 -&gt; 04:16.050 No nosso caso, provavelmente será a CardList. Então, processe as crianças, o que estiver dentro de 04:16.140 -&gt; 04:17.410 de ErrorBoundry, 04:17.470 -&gt; 04:19.330, caso contrário, renderize <h1> . 04:19.710 -&gt; 04:28.390 Agora, como vamos conseguir mudar este erro? Bem, com React 16 nós temos um novo ciclo de vida 04:28.390 -&gt; 04:38.270 método que foi introduzido e é chamado componentDidCatch e este componentDidCatch é tipo 04:38.270 -&gt; 04:49.390 como o bloco try catch em javascript se qualquer erro ocorrerá, ele executará esse gancho de ciclo de vida e esse gancho de ciclo de vida 04:49.400 -&gt; 04:52.420 obterá alguns parâmetros. 04:52.450 -&gt; 04:55.690 Esse é o erro e a informação. 04:55.830 -&gt; 05:03.540 Mas no nosso caso nós só queremos dizer que this.setState está indo agora, se esse componente 05:03.590 -&gt; 05:08.230 erros sair, vai ter erro igual a verdade. 05:08.280 -&gt; 05:13.760 Então, se isso for acionado, vai renderizar a tag H-1. 05:13.870 -&gt; 05:14.190 Tudo bem. 05:14.230 -&gt; 05:17.490 Vamos salvar e vamos para app.js 05:17.580 -&gt; 05:20.730 Vamos importar nosso errorBoundry 05:25.190 -&gt; 05:26.630 dos nossos componentes. 05:32.210 -&gt; 05:34.030 E agora podemos usar isso. 05:34.100 -&gt; 05:38.740 Vamos usá-lo aqui para a lista de cartas. 05:38.900 -&gt; 05:46.370 Então, se algo continuar com a CardList, nós queremos ter algum tipo de limite de saída. 05:46.580 -&gt; 05:55.340 Então, vamos dizer ErrorBoundary e porque estamos processando este dot props dot children, se o empacotarmos como 05:55.340 -&gt; 05:55.970 isso. 05:57.250 -&gt; 06:00.450 E nada vai continuar a renderizar CardList. 06:00.490 -&gt; 06:03.030 Então, vamos salvar Vamos ver se cometemos algum erro. 06:03.130 -&gt; 06:04.570 Até aí tudo bem. 06:04.690 -&gt; 06:08.320 Vamos voltar ao nosso aplicativo e. 06:08.380 -&gt; 06:10.400 Tudo bem, vamos dar uma olhada no console. 06:10.410 -&gt; 06:17.280 Nenhum erro aqui, se não atualizarmos nenhum erro aqui se eu digitar coisas, sem erros, isso é bom. 06:19.190 -&gt; 06:26.840 Agora, com este limite de erro, se alguma coisa na CardList falhar, ele vai pegá-la e exibir nosso erro 06:26.840 -&gt; 06:28.000 mensagem. 06:28.070 -&gt; 06:29.420 Então vamos ver o que quero dizer. 06:29.710 -&gt; 06:39.420 Se eu entrar na CardList aqui e agora aqui, se dissermos, se por enquanto apenas dissermos verdade. 06:39.660 -&gt; 06:48.440 Vamos supor que na CardList houve um erro, então podemos fazer isso dizendo &quot;lançar novo erro&quot; e dizer &quot;NOOOOOOO&quot; 06:51.790 -&gt; 06:54.850 Se salvarmos isso tudo ainda está funcionando. 06:54.850 -&gt; 06:59.750 Se eu voltar, você verá que ainda estou recebendo o erro, ele diz erro não detectado. 06:59.800 -&gt; 07:00.620 No. 07:00.910 -&gt; 07:07.030 E na parte inferior diz que o erro acima ocorreu no componente CardList. React tentará recriar 07:07.030 -&gt; 07:11.950 esta árvore de componentes do zero usando o errorBoundry que você forneceu. ErrorBoundry. 07:12.360 -&gt; 07:16.670 OK, ótimo, mas ainda vejo o erro. 07:16.900 -&gt; 07:23.770 E isso é porque estamos rodando agora no modo de desenvolvimento. Para criar aplicativo reagir. 07:23.770 -&gt; 07:29.780 Eles querem nos mostrar sempre que há um erro em nosso componente. Limites de erro são realmente úteis quando 07:29.780 -&gt; 07:38.750 você coloca seus aplicativos em produção, onde você não tem esses registros detalhados dos erros que você tem. Seu 07:38.750 -&gt; 07:40.540 usuários nunca verão isso. 07:40.550 -&gt; 07:45.040 Então, se eu atualizar aqui muito rápido, você vê isso bem aqui. 07:45.050 -&gt; 07:48.320 Como foi dito - Oooops isso não é bom. 07:48.470 -&gt; 07:49.010 Oops. 07:49.100 -&gt; 07:50.450 Isso não é bom. 07:50.450 -&gt; 07:54.820 Então, na produção, os usuários verão isso. 07:55.040 -&gt; 08:01.640 Mas para o nosso caso o comportamento pretendido para criar o React App em desenvolvimento é nos mostrar os erros 08:01.910 -&gt; 08:05.770 mas com limites de erro nós temos essa segurança extra durante a produção. 08:07.830 -&gt; 08:08.890 É isso por agora. 08:08.890 -&gt; 08:10.800 Eu vou ver no próximo. Tchau tchau.