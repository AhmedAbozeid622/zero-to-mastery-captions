WEBVTT

00:01.460 --> 00:02.480
Bem vindo de volta.

00:02.480 --> 00:09.380
Paramos com Todd incapaz de se registrar em nosso aplicativo porque nosso servidor back-end não está conectado a nenhum banco

00:09.380 --> 00:10.420
de dados.

00:10.910 --> 00:15.200
Felizmente para nós, o Heroku também possui o postgreSQL ..

00:15.230 --> 00:27.120
Se eu for para o meu painel aqui e vamos para o pessoal e, nesse canto, temos dados. Clicamos nos dados e ele diz que parece que você ainda não

00:29.420 --> 00:36.470
possui nenhum repositório de dados e temos o Heroku postgres Redis e Kafka, mas

00:36.500 --> 00:40.010
o postgres é o que precisamos.

00:40.980 --> 00:51.820
Então, vamos criar uma e podemos fazer login com as mesmas credenciais da mesma forma que

00:51.820 --> 01:02.480
tínhamos para o nosso servidor e podemos simplesmente instalar o Heroku postgres e ver isso.

01:02.520 --> 01:13.580
Ele já sabe em qual aplicativo queremos instalá-lo. Então, clique nesse clique em continuar.

01:13.690 --> 01:17.420
E agora escolhemos apenas o hobby dev, que é gratuito.

01:17.590 --> 01:19.430
Clicamos na provisão.

01:19.450 --> 01:19.840
Ai está.

01:19.840 --> 01:24.840
Ele diz que o addoku Heroku postgres foi instalado com sucesso.

01:24.870 --> 01:29.560
Confira a documentação para começar.

01:29.610 --> 01:31.090
Isso é incrível de ouvir.

01:31.230 --> 01:42.650
Vamos abrir e mais uma vez eles têm uma documentação incrível de como podemos configurar tudo.

01:42.700 --> 01:47.440
Então, olhando aqui, a primeira coisa que queremos executar é o addon Heroku para garantir que realmente o

01:47.440 --> 01:47.820
tenhamos.

01:48.220 --> 01:49.780
Vamos voltar ao nosso servidor.

01:49.810 --> 01:57.420
Vou esclarecer isso e executar os complementos Heroku e torná-lo um pouco maior.

01:58.530 --> 02:01.060
Tudo bem, temos o Heroku postgres.

02:01.200 --> 02:01.950
Isso é ótimo.

02:05.030 --> 02:15.800
Se realmente rolarmos para baixo, veremos que podemos executar a CLI com as informações do Heroku PG.

02:15.850 --> 02:16.520
Então vamos fazer isso.

02:16.540 --> 02:30.910
Quero dizer as informações do Heroku PG e mostrarei que sim, este é o nosso postgres e podemos conectar a

02:30.910 --> 02:38.970
ele executando o PG psql, como fizemos em nosso laptop.

02:39.190 --> 02:39.980
Vamos fazer isso.

02:40.300 --> 02:45.170
Vou dizer Heroku PG PSQL e olhar para isso -

02:48.900 --> 02:51.840
estamos em nosso banco de dados.

02:52.710 --> 02:56.120
Então, vamos recriar o banco de dados que tínhamos originalmente.

02:56.310 --> 03:06.680
Podemos simplesmente voltar ao nosso PSQL porque o PSQL é inteligente o suficiente para lembrar de nossos comandos.

03:06.930 --> 03:14.330
E se formos ao Query. Lá você tem nossos comandos create table prontos.

03:14.510 --> 03:18.330
Então, vamos criar uma tabela de login.

03:22.840 --> 03:35.800
Perfeito e vamos criar bem as tabelas de usuários ou uma tabela de usuários. Copio isso para Heroku e crie tabela vamos fazer

03:35.800 --> 03:41.470
barra invertida d para garantir que as tabelas estejam lá.

03:41.470 --> 03:41.890
Tudo certo.

03:41.950 --> 03:47.980
Temos nossas mesas e você vê que o proprietário é algo completamente diferente do meu laptop.

03:47.980 --> 03:49.960
Mas há mais uma coisa importante que precisamos corrigir.

03:49.960 --> 03:51.210
Agora temos

03:54.060 --> 04:01.130
nossas tabelas, mas minha conexão no meu servidor ainda está se referindo ao meu host local.

04:01.380 --> 04:02.860
Como eu posso mudar isso.

04:04.350 --> 04:12.490
Se sairmos disso fazendo uma barra invertida Q E fizermos novamente as informações do PG do Heroku, temos

04:17.760 --> 04:23.520
o complemento que pode ser a URL, mas a melhor maneira de fazer

04:23.520 --> 04:27.160
isso é executar os complementos do Heroku.

04:27.160 --> 04:28.800
Sim, é exatamente o mesmo.

04:28.860 --> 04:34.260
Este é o URLl que eles fornecem para nós.

04:34.260 --> 04:35.090
Então, vamos tentar isso.

04:35.100 --> 04:42.960
Se eu fizer este postgres dentro deste URL, este URL do banco de dados está aqui.

04:42.960 --> 04:46.080
será que vai dar certo? Vamos descobrir.

04:46.410 --> 04:49.310
Vou adicionar mais uma vez o Git.

04:49.350 --> 04:51.370
Portanto, temos que confirmar as alterações.

04:53.690 --> 04:58.490
E direi atualizar o git

05:01.400 --> 05:08.080
push do banco de dados mestre do Hiroko.

05:08.110 --> 05:08.480
Tudo certo.

05:08.560 --> 05:09.770
Está implantado.

05:10.090 --> 05:12.970
Vamos voltar ao nosso aplicativo e ver se funciona agora.

05:12.970 --> 05:15.990
Temos Todd no gmail dot com.

05:16.030 --> 05:19.950
Eu clico em registrar.

05:20.240 --> 05:27.300
Ainda temos um erro aqui se formos para um console aqui e, na verdade, conectarmos a rede e clicarmos em

05:27.300 --> 05:30.570
registrar novamente, temos 400 solicitações incorretas incapazes de registrar.

05:30.570 --> 05:32.110
Então, vamos dar uma olhada nos logs.

05:33.490 --> 05:39.970
Se fizermos os logs do Heroku, as caudas do traço examinam o erro KNEX

05:42.630 --> 05:45.490
que avisa o erro de conexão.

05:45.600 --> 05:50.140
Portanto, não está encontrando o host que queremos.

05:50.250 --> 06:01.240
Então, vamos à nossa documentação para conectar-se ao nó dot js e vemos aqui que, com o cliente, o postgres realmente nos fornece uma URL

06:01.250 --> 06:03.970
do banco de dados aqui.

06:03.980 --> 06:11.990
Também precisamos ter o SSL verdadeiro aqui e podemos ler um

06:15.100 --> 06:33.000
pouco mais, mas podemos copiar isso e remover todas as informações do banco de dados e, dentro do host, podemos dizer process dot env dot

06:33.140 --> 06:35.440
DATABASE_URL Vamos salvar.

06:35.640 --> 06:38.630
Nós vamos ter que adicionar isso novamente.

06:39.360 --> 06:44.710
O Git confirma a adição da conexão com o banco de dados e todos nós o

06:47.290 --> 06:53.250
Git enviamos o Heroku para o Master. Enquanto isso estiver carregando, eu realmente quero passar pelo fato de

06:53.490 --> 06:57.930
que essa é uma daquelas coisas que você apenas precisa ler e

06:57.930 --> 07:04.530
é tão específica da plataforma que só porque você aprender dessa maneira no Heroku não significa que ele funcione nos

07:04.530 --> 07:09.690
outros, mas é apenas uma questão de ler a documentação e se sentir confortável com

07:09.690 --> 07:10.160
isso.

07:11.030 --> 07:16.670
Vamos fazer os logs do Heroku aqui para ficar de olho em garantir que tudo esteja funcionando.

07:16.670 --> 07:20.590
Tudo bem, temos uma porta, então vamos voltar ao nosso aplicativo.

07:20.610 --> 07:22.910
Vou fechar o console por enquanto.

07:22.950 --> 07:28.180
Clique em registrar e parece que ainda não está funcionando.

07:28.190 --> 07:32.980
Se abrirmos a rede, clique em registrar, temos uma solicitação ruim.

07:33.090 --> 07:38.630
Se voltarmos aos logs, teremos um aviso KNEX novamente, erro de conexão.

07:38.630 --> 07:42.980
Este é um bom momento para usar outro comando, que é o

07:45.930 --> 07:53.270
Heroku config e o Heroku config realmente fornece ao banco de dados o seu URL real e este banco de dados.

07:53.270 --> 08:00.670
Bem, você vê que eles estão usando o Amazon AWS. Mas você vê aqui no aviso do KNEX

08:00.670 --> 08:08.530
que estamos realmente obtendo esse link, então parece que precisamos realmente usar a cadeia de conexão exatamente como eles

08:08.530 --> 08:09.480
nos disseram.

08:09.820 --> 08:12.370
Então esquecemos de fazer isso, vamos fazer uma string de conexão aqui.

08:12.370 --> 08:13.100
Ops.

08:13.150 --> 08:16.330
Vamos copiar esta cadeia de conexão.

08:17.160 --> 08:20.660
E agora está ficando repetitivo.

08:20.680 --> 08:25.890
Mas é assim que uma sessão de depuração geralmente funciona.

08:25.890 --> 08:28.830
Eu só vou fazer um rápido commit aqui.

08:29.000 --> 08:30.700
Git empurrar mestre Heroku.

08:30.720 --> 08:31.100
Tudo certo.

08:31.110 --> 08:32.320
E vamos dar outra chance.

08:32.320 --> 08:35.170
Vamos realmente tentar registrar agora.

08:35.260 --> 08:36.070
Então,

08:40.820 --> 08:49.580
vamos fazer Jenny Jenny no gmail dot com, vamos fazer um registro de dois três e Jenny está logada.

08:49.760 --> 08:50.290
Impressionante.

08:50.310 --> 08:51.000
Está funcionando.

08:51.030 --> 08:57.660
Se formos para os logs aqui, vemos que o que

08:57.660 --> 09:17.170
estamos fazendo após a solicitação de registro e podemos verificar os logs e podemos até ir ao nosso postgres Heroku PG PSQL fazer uma estrela selecionada dos usuários e temos

09:17.170 --> 09:20.570
Jenny e Todd ambos registrado.

09:20.830 --> 09:21.530
Impressionante.

09:21.730 --> 09:24.980
Apenas para verificar se a tabela de login também está funcionando.

09:26.110 --> 09:27.910
Eu tenho um log na tabela.

09:27.910 --> 09:28.700
Agradável.

09:28.720 --> 09:33.270
E então, finalmente, para ter uma cara,

09:35.850 --> 09:41.240
vamos pegar outra cara. vamos ver a imagem.

09:41.410 --> 09:42.710
Isso é grande.

09:42.710 --> 09:45.010
Vamos ver se funciona bem.

09:45.020 --> 09:50.830
Pressiono detectar e vejo que está funcionando.

09:50.870 --> 09:57.090
Mas as entradas de Jennies não estão atualizando.

09:57.140 --> 10:02.640
Vamos voltar ao perfil de Jenny e garantir que as informações dela estejam corretas.

10:02.660 --> 10:07.200
Se eu for para usuários, parece que as entradas não estão sendo atualizadas.

10:10.120 --> 10:19.160
Se olharmos nos logs do console, obtemos um recurso com falha no ponto final da imagem e

10:22.190 --> 10:31.570
se formos à rede e enviá-lo novamente, veremos que o ponto final da imagem está falhando e

10:31.570 --> 10:37.680
isso é algo que novamente abordaremos no próximo vídeo .

10:37.760 --> 10:38.440
Vejo você nesse. Tchau tchau
