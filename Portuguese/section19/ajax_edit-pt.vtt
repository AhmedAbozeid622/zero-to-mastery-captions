WEBVTT

00:01.060 --> 00:09.590
Bem-vindo de volta aos vídeos anteriores que aprendemos sobre HTTP e JSON. Nós aprendemos que podemos enviar pedidos

00:09.650 --> 00:14.830
e obtenha respostas. Mas há um problema. Até agora

00:14.920 --> 00:23.720
toda vez que precisamos nos comunicar com o servidor, fazemos esse pedido e o navegador quando ele recebe

00:23.870 --> 00:29.930
a resposta faz uma atualização de página. Originalmente

00:30.810 --> 00:35.710
O carregamento de páginas na web era simples e você enviava um pedido de um site para um servidor.

00:35.940 --> 00:43.350
E desde que nada desse errado, os ativos seriam baixados pela página da web e exibidos em seu

00:43.350 --> 00:44.150
computador.

00:45.280 --> 00:51.820
O problema com esse modelo é que sempre que você quiser atualizar qualquer parte da página, por exemplo, exibir

00:51.820 --> 00:59.390
um novo conjunto de produtos como na Amazon. Bem, você terá que carregar o programa inteiro novamente,

00:59.510 --> 01:09.050
até o contorno, até a barra de navegação no topo. Tudo tinha que ser recarregado - uma atualização completa da página.

01:09.080 --> 01:16.070
Isso é extremamente prejudicial e resulta em uma experiência de usuário ruim, especialmente quando as páginas ficam maiores e mais

01:16.070 --> 01:17.770
complexo.

01:17.930 --> 01:20.220
Você pode pensar no site da Udemy.

01:20.810 --> 01:34.640
Se formos para a Udemy, bem, se eu clicar em, digamos marketing, a barra superior você permanecerá. Você viu aquilo?

01:34.640 --> 01:37.230
É uma ótima experiência para o usuário.

01:37.520 --> 01:41.500
Eu posso clicar nas guias e não recebo uma atualização completa da página.

01:41.510 --> 01:48.630
É bem, ele carrega dados automaticamente na página.

01:48.640 --> 01:55.450
Agora, esse problema que tivemos aqui levou à criação de tecnologias que permitem que páginas da Web solicitem pequenas

01:55.450 --> 02:04.520
pedaços de dados como HTML, XML, texto simples, JSON e exibi-los somente quando necessário.

02:05.740 --> 02:07.990
Ajudando a resolver este problema de atualização.

02:09.340 --> 02:14.010
E a tecnologia foi chamada AJAX.

02:14.040 --> 02:22.470
Ele permite que você leia de um servidor da web depois que a página foi carregada e atualize uma página da web sem recarregar

02:22.470 --> 02:31.610
a página. E, finalmente, enviar dados em segundo plano enquanto o usuário está interagindo com o site.

02:31.660 --> 02:40.000
Na verdade, foi pioneira do Google em 2006 e agora é o que esperamos de websites e qualquer aplicativo da Web que você

02:40.000 --> 02:42.790
veja online usa Ajax agora.

02:42.800 --> 02:50.920
Você vê que o Google teve esse grande problema quando pesquisamos algo, bem, você digitaria inicialmente

02:50.920 --> 02:56.430
em 'apple' e faria uma atualização completa da página.

02:56.430 --> 03:03.270
Mas agora com isso eu posso manter a barra superior e ter isso carregado.

03:03.410 --> 03:05.050
Posso até ter sugestões

03:07.980 --> 03:09.190
Trouxe do servidor.

03:09.300 --> 03:17.070
E isso é tudo uma resposta do servidor dizendo que estas são algumas das sugestões baseadas em

03:17.080 --> 03:18.200
Loja da Apple.

03:18.650 --> 03:24.410
Então foi um grande problema para o Google e eles conseguiram resolvê-lo com o Ajax, mas agora todos nós temos isso

03:24.410 --> 03:25.650
habilidade.

03:25.670 --> 03:27.530
Então, como podemos fazer isso?

03:27.530 --> 03:37.430
"O que é o Ajax?" AJAX é apenas uma tecnologia - um método de combinar peças para conseguir isso.

03:37.590 --> 03:46.280
E foi conseguido usando uma ferramenta que os navegadores construíram e foi chamado de solicitação HTTP HTTP.

03:46.620 --> 03:49.670
Parecia algo assim.

03:50.130 --> 03:58.110
Você criou um novo objeto de solicitação HTTP XML. Como você pode ver, parece um pouco difícil.

03:58.980 --> 04:08.810
Você faz uma solicitação - você faz um pedido de compra neste URL que você diz onload quando é carregado. Se o

04:08.810 --> 04:15.200
status a resposta é maior que 200 ou menor que 400.

04:15.200 --> 04:16.300
É um sucesso.

04:16.310 --> 04:25.880
Vamos analisar o texto da resposta, porque estamos recebendo uma string do servidor. Se é

04:25.880 --> 04:36.640
Não é um sucesso bem, podemos retornar um erro e, em seguida, enviar nossa solicitação e também ouvir eventuais erros.

04:37.320 --> 04:44.440
Parece bem difícil, mas são coisas que nós revisamos. Mas não se preocupe, nós realmente não fazemos isso

04:44.440 --> 04:44.770
não mais.

04:44.770 --> 04:49.560
Esta foi a maneira antiga de fazer isso quando o Ajax foi introduzido pela primeira vez.

04:49.570 --> 04:52.980
jQuery veio e disse bem, isso é meio difícil de fazer

04:52.980 --> 04:58.320
toda vez. Vamos facilitar para você apenas fazendo isso.

04:58.550 --> 05:01.820
E essa foi outra parte do motivo pelo qual o jQuery era popular.

05:01.820 --> 05:05.700
Nós podemos apenas fazer requisições Ajax fazendo este método.

05:06.050 --> 05:11.690
Mas agora há realmente uma forma mais nova ainda mais agradável que usamos quando construímos nossa reação

05:11.690 --> 05:17.220
app e é suportado pelos navegadores e isso é chamado de busca.

05:17.510 --> 05:26.930
Como você se lembra, foi buscar na URL e, em seguida, fizemos isso '. Then (response)' e recebemos uma resposta.

05:26.930 --> 05:31.790
Agora isso é realmente bom porque as atualizações de página são muito mais rápidas e você não precisa esperar

05:31.790 --> 05:33.140
a página para atualizar.

05:33.140 --> 05:36.660
Isso significa que o site parece mais rápido e mais responsivo.

05:38.390 --> 05:44.250
Também menos dados são baixados em cada atualização, o que significa menos desperdício de largura de banda.

05:44.750 --> 05:50.840
E este é um grande problema importante, especialmente em dispositivos móveis, onde a conexão com a Internet pode não ser

05:50.840 --> 05:52.460
tão bom.

05:52.580 --> 06:03.370
O Ajax permite que páginas da Web e aplicativos da Web, por extensão, alterem o conteúdo dinamicamente e estejam em todos os lugares.

06:04.080 --> 06:06.510
É algo que é muito legal.

06:06.510 --> 06:14.140
Parece intimidante, mas é apenas uma questão de fazer essa busca que faz HTTP para você e para todos vocês

06:14.140 --> 06:21.090
Se você quiser fazer um GET, um POST e adicionar alguns dados JSON a essa solicitação.

06:21.220 --> 06:29.460
Então vamos rever novamente o que acontece com o Ajax. Um evento ocorre em uma página da web, como o login e eu

06:29.460 --> 06:34.200
clique em entrar. XML HTTP request object-

06:34.290 --> 06:41.280
Mais uma vez, algo que os navegadores da Web implementaram é criado e criado usando o javascript.

06:41.560 --> 06:49.800
O objeto de solicitação XML HTTP envia uma solicitação para o servidor da Web que o servidor processa a solicitação e, em seguida, o

06:49.920 --> 06:54.500
servidor envia uma resposta de volta para a página da web.

06:54.590 --> 07:03.650
A resposta é lida por javascript e o usuário pode fazer o login. Ao mesmo tempo, apenas atualizando um pequeno

07:03.650 --> 07:06.490
parte da janela.

07:06.530 --> 07:12.380
Isso é o que é um aplicativo de uma única página e é uma palavra que você provavelmente já ouviu antes e é uma tendência

07:12.410 --> 07:21.770
em como fazer aplicativos da web. Onde você carrega uma base de uma página quase vazia e construir o conteúdo em tempo real

07:21.770 --> 07:25.010
com base nos dados obtidos do servidor.

07:25.010 --> 07:27.790
Vamos voltar para você, Udemy.

07:27.900 --> 07:36.270
Quando eu clico em um curso, vamos fazer 'relações públicas' você vê que isso está carregando um de cada vez. eu tinha

07:36.810 --> 07:38.040
a barra superior carregada.

07:38.160 --> 07:41.350
Então eu tive uma pausa e depois o resto carregado.

07:41.400 --> 07:45.900
Se eu clicar em "Explorar curso", você verá novamente que a barra superior foi carregada.

07:45.930 --> 07:50.540
Outras partes da web são carregadas dinamicamente lentamente.

07:50.620 --> 07:59.820
E novamente, se eu voltar a 'fotografia', por exemplo, partes da página carregam dinamicamente e isso é

07:59.820 --> 08:06.890
a beleza. Esses aplicativos quase nunca recarregam completamente, eles destroem todo o conteúdo anterior ou

08:06.890 --> 08:12.270
uma parte dele e nós construímos com base em novos dados - nova página.

08:12.470 --> 08:14.760
E isso pode soar familiar para você.

08:15.720 --> 08:19.350
Você se lembra de como construímos nosso aplicativo 'robofriends'.

08:19.740 --> 08:24.950
Nós buscamos esse URL que nos deu usuários.

08:25.330 --> 08:30.260
Então, agora que entendemos esses conceitos, vamos a linha por linha e ver o que acontece.

08:30.280 --> 08:34.790
Eu usei o fetch baseado no que eu disse:o Fetch deve ser parte do objeto da janela, certo?

08:34.990 --> 08:41.500
Vamos checar. Se eu abrir o console e eu fizer

08:41.730 --> 08:43.870
'window.fetch' sim

08:43.940 --> 08:53.520
buscar é uma função que podemos usar e esta URL se você se lembra de retornos para nós-

08:53.620 --> 08:54.200
O que é isso?

08:54.220 --> 08:56.540
Sim, um objeto JSON.

08:56.800 --> 09:05.500
E esse objeto JSON, fetch, nos permite fazer algo chamado response - 'response.json ()'.

09:05.840 --> 09:08.800
Bem, vamos apenas fazer isso por enquanto e ver o que acontece.

09:08.810 --> 09:14.750
Eu vou copiar e colar isso. Eu vou abrir o console e você sabe que eu vou abrir

09:14.750 --> 09:17.180
uma nova guia para mostrar que você pode fazer isso de qualquer lugar.

09:18.170 --> 09:25.770
Se eu copiar e colar esta busca eu recebo algo chamado uma promessa e isso é algo em javascript

09:26.040 --> 09:27.630
que você vai se acostumar.

09:27.750 --> 09:34.050
Promessa está dizendo "Ei, estou fazendo um pedido para algum lugar através da Internet e prometo que você saiba

09:34.050 --> 09:37.160
quando eu tiver esse valor retornado ".

09:37.650 --> 09:42.310
Então, a maneira como você acessa a promessa é - então você tem isso:'uma vez que isso é retornado

09:42.360 --> 09:43.540
me dê o valor '.

09:43.620 --> 09:45.540
Você faz '. Then'

09:45.660 --> 09:51.600
e isso te dá a resposta. Se eu adicionar ao meu pedido anterior.

09:51.920 --> 10:05.520
E eu faço 'resposta console.log (resposta)'.

10:05.690 --> 10:11.510
Olha que eu recebo uma resposta. Status 200 vamos lembrar disso.

10:11.720 --> 10:12.520
OK, assim está bom.

10:12.530 --> 10:19.690
E nós também temos esse corpo, mas diz fluxo respirável. E buscar

10:19.850 --> 10:25.930
Quer dizer, aprendemos sobre o JSON.parse para analisar o JSON.

10:26.340 --> 10:32.300
Mas buscar realmente vem com seu próprio método chamado bem "json".

10:32.450 --> 10:39.770
Então, nessa resposta, se fizermos "json", ela será convertida para nós.

10:39.770 --> 10:49.310
Vamos ver. Se eu voltar a essa solicitação, recebo uma resposta. Se ao invés de logar no console, eu digo

10:49.380 --> 10:51.320
'response.json ()'

10:51.530 --> 10:55.800
Nesse caso, eu recebo uma promessa novamente.

10:55.800 --> 11:03.300
Então isso significa que precisamos fazer para receber sempre que isso retorna a promessa que é o valor.

11:03.680 --> 11:07.440
Então, novamente eu subo e faço.

11:07.600 --> 11:13.780
E nesse caso, vamos ver quais dados recebemos, obtemos dados e nós vamos consolar os dados .log.

11:17.680 --> 11:31.800
Se eu pressionar enter. Veja que recebemos nossos usuários - os mesmos usuários que estavam aqui.

11:31.880 --> 11:40.160
Então você vê agora que simplesmente usamos a API de busca que nos permite fazer uma chamada AJAX após o componente

11:40.160 --> 11:40.740
montado.

11:40.880 --> 11:48.830
Então, uma vez que nosso aplicativo robo friends foi carregado, fizemos uma solicitação Ajax usando a API de busca.

11:49.100 --> 11:53.350
Nós recebemos uma resposta que era uma promessa.

11:53.360 --> 12:01.190
Então nós tivemos que fazer isso então e essa resposta e isso é simplesmente normal que sempre que você buscar você

12:01.190 --> 12:03.420
lembre-se de fazer .json

12:03.710 --> 12:11.270
Eu converti isso em algo que bem podemos usar em javascript e porque isso retornou uma promessa

12:11.270 --> 12:21.440
nós fizemos. então nós temos os usuários e agora temos o objeto users e nunca tivemos que atualizar a página.

12:21.510 --> 12:29.870
E, a propósito, se você quiser esse JSON sempre que estiver acessando, pareça mais bonito e seja um pouco

12:29.870 --> 12:36.560
bit more readable Estou usando uma extensão do Chrome chamada 'JSONView'.

12:36.590 --> 12:37.130
É grátis.

12:37.130 --> 12:39.580
Você acabou de adicioná-lo, o Chrome faz isso automaticamente para você.

12:39.590 --> 12:43.000
Eu recomendo. OK

12:43.460 --> 12:46.030
vamos voltar a isso

12:46.040 --> 12:47.450
-isso deve fazer sentido agora.

12:47.810 --> 12:56.670
Agora, temos a capacidade de carregar dinamicamente nossas páginas da Web para criar aplicativos de página única usando AJAX e

12:56.750 --> 13:07.640
Ajax é uma combinação de ferramentas de uso da API de busca, usando HTTP, usando JSON para se comunicar com

13:07.640 --> 13:08.630
servidores.

13:09.080 --> 13:20.000
E agora temos uma imagem completa do nosso front end. Nosso front end pode ter HTML, CSS, javascript, reagir.

13:20.000 --> 13:31.670
Podemos usar o AJAX para se comunicar com servidores e usamos dados JSON para enviar dados pela rede. Mesmo

13:31.670 --> 13:33.660
animado para o próximo par de vídeos.

13:34.500 --> 13:35.470
Então eu vou ver isso. Tchau tchau.
