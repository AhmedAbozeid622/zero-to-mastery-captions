WEBVTT

00:01.340 --> 00:02.130
Bem vindo de volta.

00:02.180 --> 00:06.380
É hora de criar nosso aplicativo Robo Friends para começar.

00:06.500 --> 00:08.850
Bem, vamos abrir nosso terminal.

00:08.870 --> 00:11.050
Devemos estar à vontade com isso agora.

00:11.480 --> 00:17.960
Para esta seção, eu realmente recomendo a codificação e o acompanhamento dos

00:17.960 --> 00:23.310
processos, porque você aprenderá muito melhor fazendo isso sozinho.

00:23.360 --> 00:24.530
E como eu prometi.

00:24.530 --> 00:28.750
É bastante fácil e teremos um aplicativo bonito ao final.

00:28.850 --> 00:35.450
Mas para aqueles que gostam de assistir e trabalhar depois, fornecerei os arquivos finais do aplicativo Robo Friends

00:35.540 --> 00:38.190
para você no final desta seção.

00:40.150 --> 00:40.590
ESTÁ BEM.

00:40.860 --> 00:41.940
Então ainda não temos nada.

00:41.970 --> 00:43.470
Estamos na área de trabalho.

00:43.470 --> 00:52.940
Precisamos realmente criar uma pasta de projeto e precisamos instalar o react.

00:52.940 --> 01:01.490
Agora, se você se lembra no NPM, podemos instalar o react e tê-lo como parte de nossos pacotes no pacote. json - Mas há uma ferramenta

01:01.500 --> 01:02.350
novamente

01:02.530 --> 01:07.480
porque aplicativos de reação são muito comuns.

01:07.480 --> 01:15.320
Existe uma ferramenta que nos permite criar imediatamente um aplicativo de reação com todos os nossos arquivos já colocados no lugar.

01:15.370 --> 01:18.050
É chamado de criar aplicativo de

01:20.580 --> 01:21.280
reação.

01:21.680 --> 01:29.780
Essa ferramenta é um pacote global que você deseja instalar a partir do NPM e cria um projeto inicial que contém

01:29.810 --> 01:36.270
o pacote da web e babel, para que possamos usar os recursos mais recentes do JavaScript.

01:36.620 --> 01:41.860
Ele contém fiapos e depuração que ainda não analisamos.

01:41.990 --> 01:46.880
Ele cria toda essa infraestrutura para você, para que você possa começar a escrever o aplicativo imediatamente,

01:46.880 --> 01:51.720
e é uma ferramenta muito boa que muitas pessoas usam, então vamos instalar o create-react-app.

01:51.740 --> 01:55.880
Se você se lembra, simplesmente instalamos o npm install dash

01:59.110 --> 02:04.130
g e isso nos dará o create-react-app novamente se você receber esses erros.

02:04.160 --> 02:07.220
Lembre-se sempre de executar o sudo

02:14.550 --> 02:20.920
agora que temos o create-react-app, simplesmente dizemos create-react-app e o nome do nosso aplicativo.

02:20.940 --> 02:25.390
No nosso caso, chamaremos Robo Friends.

02:29.180 --> 02:36.010
Você vê que está instalando um monte de coisas que precisamos.

02:36.400 --> 02:44.260
Parece que foi um sucesso criado Robo Friends no meu diretório e ainda oferece alguns bons

02:44.290 --> 02:52.600
comandos npm start npm run build npm test npm run eject, mas vamos falar disso mais tarde.

02:52.600 --> 02:55.940
Vamos ver o que temos em nossa pasta da área de trabalho.

02:57.120 --> 03:01.250
Temos amigos Robo que já foram criados para nós.

03:01.650 --> 03:03.270
OK, vamos falar disso.

03:05.000 --> 03:14.690
E agora, se o fizer, parece que temos uma tonelada de pastas e arquivos, como o pacote. json que já foram criados para nós e módulos de

03:14.690 --> 03:18.150
nós, o quão impressionante é isso.

03:18.170 --> 03:23.790
Ele já instala o reagir e todas as dependências que precisamos.

03:23.930 --> 03:28.830
De fato, se formos para a área de trabalho, vemos a pasta aqui.

03:28.970 --> 03:31.690
Então, vamos arrastar isso para o texto sublime.

03:31.880 --> 03:36.740
Abra e eu vou mudar as telas para podermos ver as

03:40.280 --> 03:42.190
duas ao mesmo tempo.

03:47.680 --> 03:56.180
Agora, antes de mostrar o que está na pasta, vemos que, se formos para o pacote. json, vemos as dependências que

03:56.180 --> 03:57.530
reagimos.

03:57.530 --> 04:04.880
Temos algo chamado react-dom e react-scripts e também temos vários scripts que eles já

04:04.970 --> 04:07.160
criaram para nós.

04:07.160 --> 04:10.850
Começamos a construir teste e ejetar.

04:11.010 --> 04:16.710
Vamos começar com start, porque parece que start lê os scripts de reação e

04:16.710 --> 04:18.210
inicia nosso servidor.

04:18.210 --> 04:19.790
Então, eu vou

04:26.870 --> 04:35.990
dizer que o npm start veja que temos em nosso host local um aplicativo de reação de amostra para que tudo esteja funcionando.

04:36.030 --> 04:40.200
Não precisávamos fazer nada, exceto executar apenas dois comandos.

04:40.470 --> 04:41.220
Muito legal.

04:41.400 --> 04:41.680
ESTÁ BEM.

04:41.700 --> 04:46.530
Vamos ver o que o create-react-app criou para nós.

04:46.530 --> 04:52.660
Temos um leia-me que é apenas uma informação que, se você se lembrar de quando o colocamos

04:52.710 --> 04:53.820
no github, isso

04:53.840 --> 05:01.040
será exibido na pasta do projeto que temos no pacote. json, que novamente faz sentido.

05:01.280 --> 05:03.500
Vou explicar para você o que significam as dependências.

05:03.530 --> 05:04.710
no próximo vídeo.

05:04.940 --> 05:12.110
Mas vemos que scripts são fornecidos e todos eles usam scripts de reação.

05:12.410 --> 05:16.540
Agora, reagir scripts é o que torna

05:16.580 --> 05:22.960
o create-react-app tão impressionante, em vez de instalarmos coisas como webpack e babel.

05:22.970 --> 05:29.330
Você se lembra da quantidade de configurações que precisávamos fazer para que o JavaScript ES6 funcionasse.

05:29.480 --> 05:36.170
Além disso, também usamos o browserify para agrupar os arquivos JavaScript, bem como os scripts de reação fazem

05:36.170 --> 05:42.940
tudo por você e usa o mais recente e o melhor que não precisamos nos preocupar com nada disso.

05:42.950 --> 05:49.820
Portanto, permite que as pessoas criem aplicativos realmente muito rápidos e você pode usar a ejeção se quiser personalizar

05:49.820 --> 05:53.610
os scripts de reação e seguir por conta própria.

05:54.020 --> 06:00.710
Assim, à medida que seu projeto se torna cada vez maior, você sempre pode ejetar e personalizar seu aplicativo, é a melhor maneira de

06:00.710 --> 06:02.450
iniciar um projeto de reação.

06:02.450 --> 06:06.920
É gerenciado pela equipe do Facebook e é realmente muito bom.

06:08.580 --> 06:09.060
ESTÁ BEM.

06:09.230 --> 06:16.910
Também vemos que há um bloqueio de pacote. arquivo json e este é um arquivo que é gerado automaticamente

06:16.910 --> 06:18.390
pelo pacote. json

06:18.620 --> 06:26.000
Garante que os números de versão de suas dependências sejam bloqueados, de modo que, se eu der

06:26.000 --> 06:33.350
esse projeto a qualquer outra parte do mundo, garantiremos que as versões estejam corretas para que funcionem

06:34.130 --> 06:35.300
100% do tempo.

06:36.370 --> 06:40.900
Também temos algo chamado git-ignore e ele tem um ponto à sua frente.

06:40.900 --> 06:42.600
Na verdade, é chamado de arquivo de ponto.

06:42.850 --> 06:47.230
E antes de rodarmos o git e empurrar este projeto no github.

06:47.560 --> 06:54.460
Bem, ele verifica esse arquivo e, se vir alguma coisa aqui que não deva incluir, diz automaticamente

06:54.460 --> 06:56.030
ignorar esses arquivos.

06:56.200 --> 07:01.720
Então lembre-se de como eu disse módulos de nós, não queremos levar isso a um repositório, porque também temos pacote. json e cria trabalho

07:01.720 --> 07:08.950
desnecessário e espere para empurrar nosso projeto novamente. Nós não nos

07:08.950 --> 07:13.780
importamos com a pasta de módulos de

07:13.780 --> 07:14.870
nós.

07:15.100 --> 07:18.430
E também não nos importamos com as pastas de compilação.

07:18.450 --> 07:25.940
E alguns outros geram isso automaticamente para nós, não precisamos tocá-lo.

07:26.120 --> 07:32.810
Obviamente, temos bem nossos módulos de nós e você pode ver por aqui vários deles

07:32.840 --> 07:36.940
que, novamente, o create-react-app são criados automaticamente para nós.

07:36.990 --> 07:41.850
Também temos uma pasta pública e aqui tudo deve ser familiar.

07:41.850 --> 07:48.730
Nós temos índice. html, temos algo chamado manifesto. json É um novo recurso

07:49.070 --> 07:56.750
que permite que as pessoas baixem um atalho para o seu site e tenham um ícone na área de trabalho.

07:56.750 --> 07:58.640
Mas, novamente, não precisamos nos preocupar com isso.

07:58.760 --> 08:06.620
E então nós temos o favicon. ico, que é o pequeno ícone que aparece no topo e

08:06.620 --> 08:13.060
você pode mudar isso com o que quer. arquivo ico que você deseja e existem ferramentas on-line para gerá-las para você.

08:13.070 --> 08:14.970
Novamente, algo com o qual não precisamos nos preocupar.

08:16.520 --> 08:21.240
E, finalmente, temos a pasta src que é a pasta de origem.

08:21.400 --> 08:25.090
É aqui que toda a mágica reage.

08:25.370 --> 08:29.640
Se você olhar para o índice. js que é o principal arquivo de script.

08:29.660 --> 08:37.100
Estamos fazendo algumas importações, e você se lembra de que estamos apenas importando scripts diferentes e estamos apenas

08:37.100 --> 08:40.720
dizendo essa nova sintaxe que nunca vimos antes.

08:40.730 --> 08:45.310
O documento do aplicativo de renderização ReactDOM obtém o elemento por ID.

08:45.320 --> 08:46.890
OK, nós sabemos disso.

08:47.000 --> 08:55.420
Então, estamos pegando um elemento da raiz do ID e dizendo o aplicativo de renderização ReactDOM.

08:55.700 --> 09:02.120
Se formos ao índice. arquivo html que vemos aqui e eles têm

09:02.130 --> 09:11.580
comentários muito bons que você pode ler, vemos que dentro do corpo existe apenas uma div que esse arquivo noscript está no caso de um navegador

09:11.580 --> 09:13.260
não estar usando JavaScript.

09:13.260 --> 09:15.660
Novamente, não precisamos nos preocupar com isso.

09:15.690 --> 09:18.360
Ele vem apenas com o padrão porque é uma boa prática.

09:18.630 --> 09:23.960
Mas no corpo, temos apenas essa div com ID root e nada mais.

09:23.980 --> 09:26.160
No entanto, quando vamos ao nosso aplicativo, vemos isso.

09:26.370 --> 09:28.270
Bem, definitivamente há algo lá.

09:28.360 --> 09:33.310
Há pelo menos texto aqui e pelo menos um logotipo lá. Então, voltando aqui.

09:34.550 --> 09:37.010
Sem conhecer qualquer reação, podemos dizer isso.

09:37.170 --> 09:37.840
ESTÁ BEM.

09:38.300 --> 09:48.820
Estamos pegando essa raiz de ID no índice. js e estamos dizendo que queremos renderizar esse componente do aplicativo

09:49.300 --> 09:54.750
e é isso que chamamos de sintaxe JSX, na qual entraremos mais tarde.

09:54.910 --> 09:59.030
Este aplicativo é a maneira de reagir de dizer que este é um componente de reação.

09:59.050 --> 10:06.240
E eu quero que você renderize na tela do corpo isso para que

10:06.550 --> 10:13.550
eu possa realmente mudar isso para Bem, podemos dizer h1 Olá, mundo.

10:14.120 --> 10:18.760
Hello World h1 E agora, se eu salvar isso,

10:19.680 --> 10:29.520
você perceberá que o Reaction o compila automaticamente para nós, para que eu não precise atualizar e ver isso

10:29.520 --> 10:32.490
no nosso site, temos o

10:32.670 --> 10:33.860
Hello World.

10:35.280 --> 10:36.490
Muito legal.

10:36.510 --> 10:39.450
Agora, novamente, outra grande coisa sobre o create-react-app.

10:39.450 --> 10:43.670
Também fornece avisos de que o aplicativo está definido, mas nunca usado.

10:43.680 --> 10:48.920
Então, se eu for aqui, sim, estou importando o aplicativo, mas nunca o uso.

10:48.930 --> 10:56.740
Por isso, também recebemos conselhos muito bons em nosso terminal sobre como podemos melhorar o aplicativo.

10:57.010 --> 10:57.490
ESTÁ BEM.

10:57.750 --> 11:02.160
A última coisa que quero lhe mostrar antes de entrarmos na próxima seção é que realmente começamos

11:02.160 --> 11:05.800
a cavar o código, como você pode ver que a coloração está meio errada.

11:05.820 --> 11:12.280
E isso porque o Texto Sublime realmente não entende o que está acontecendo aqui.

11:13.790 --> 11:21.080
Se mudarmos para Babel JavaScript, lá vai você.

11:21.230 --> 11:26.720
Temos a sintaxe agradável e tudo parece bem.

11:27.660 --> 11:28.500
Perfeito.

11:28.560 --> 11:33.260
Temos nosso aplicativo configurado. Quero que você altere a tag aqui para Hello

11:33.270 --> 11:33.900
World

11:33.900 --> 11:37.540
Por enquanto, apenas para garantir que tudo esteja funcionando.

11:37.660 --> 11:43.880
Mas por enquanto você tem uma configuração no próximo vídeo, analisaremos o restante dos arquivos

11:43.880 --> 11:47.270
e começaremos a construir nosso primeiro componente.

11:47.300 --> 11:48.430
Vai ser muito divertido.

11:48.470 --> 11:49.410
Vejo você nesse. Tchau tchau
