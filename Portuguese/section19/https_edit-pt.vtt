WEBVTT

00:01.450 --> 00:07.380
Em 1989, Tim Berners-Lee inventou o HTML que mudou o mundo.

00:07.400 --> 00:13.930
Mas o HTML não faria muito se não pudéssemos buscar documentos de todo o mundo e de diferentes computadores.

00:13.930 --> 00:16.860
Para que isso aconteça

00:16.870 --> 00:24.280
Tim construiu o 'Hypertext Transfer Protocol' ou HTTP para abreviar.

00:24.290 --> 00:29.810
Agora lembre-se dessas setas nos diagramas que tivemos.

00:30.020 --> 00:37.070
Nós lhes dissemos que essas setas eram simplesmente os fios e cabos conectados que conectavam o mundo

00:37.250 --> 00:37.860
rede.

00:38.840 --> 00:39.960
"Isso, certo?

00:39.980 --> 00:46.590
Você se lembrou do diagrama. "Mas você vê que estes são apenas fios.

00:46.610 --> 00:53.840
Não há instruções sobre como fazer as coisas para que você precise de algo chamado protocolo.

00:53.840 --> 01:00.830
Pense nisso como um padrão que todos seguem. Se todos concordarem, o protocolo funciona e pode ser

01:00.830 --> 01:11.570
usado por todos. HTTP que tenho aqui é um protocolo que permite a busca de recursos como HTML

01:11.700 --> 01:12.630
documentos.

01:12.670 --> 01:17.470
Quero dizer, está no nome certo Hypertext Transfer Protocol.

01:17.540 --> 01:24.120
Agora, com o uso de um HTML e HTTP, agora temos a World Wide Web.

01:24.260 --> 01:31.610
Podemos pegar arquivos HTML e recebê-los se formos para 'google.com/about' vamos para o sobre

01:31.610 --> 01:34.260
Página HTML nós pegamos e recebemos.

01:34.280 --> 01:43.290
Então, HTTP é o protocolo ou as regras que usamos nos fios.

01:43.440 --> 01:50.550
É a base de qualquer troca de dados na web e abre o caminho para algo chamado cliente

01:50.730 --> 02:01.870
servidor protocolo que significa que as solicitações são iniciadas pelo destinatário, que no nosso caso é o navegador da web.

02:01.950 --> 02:09.240
Então, eles enviam uma solicitação usando HTTP. O servidor agora entende o que o navegador da Web está dizendo porque

02:10.200 --> 02:18.000
ele está falando em HTTP e o servidor agora pode responder com HTML e o navegador entende isso porque

02:18.270 --> 02:20.310
está falando através de HTTP

02:20.340 --> 02:21.780
de novo.

02:21.940 --> 02:29.950
Portanto, você deve pensar no HTTP como uma linguagem comum que um cliente e um servidor podem usar para se comunicar.

02:29.950 --> 02:33.930
Eles estão simplesmente dizendo Ei, você pode me dar este documento?

02:34.170 --> 02:36.570
E o servidor pode dizer sim nenhum problema.

02:36.630 --> 02:37.920
Aqui está.

02:37.920 --> 02:43.330
E até este ponto nós realmente não falamos com um servidor em nosso aplicativo, não é?

02:43.440 --> 02:50.160
Nós construímos as aplicações front-end ou o cliente voltado para aplicativos usando HTML, CSS, javascript

02:50.190 --> 02:54.120
e reagir, mas nós vivemos em nosso próprio mundo.

02:54.340 --> 03:01.860
Nenhuma comunicação com outro computador. HTTP nos permite agora comunicar com servidores, com o exterior

03:01.860 --> 03:02.990
mundo.

03:03.060 --> 03:06.050
Então, vamos examinar a terminologia mais uma vez.

03:06.200 --> 03:15.780
Clientes e servidores podem se comunicar trocando mensagens individuais. As mensagens enviadas pelo cliente

03:16.320 --> 03:28.180
Geralmente, um navegador da web é chamado de solicitações e as mensagens enviadas pelo servidor geralmente são chamadas de respostas.

03:28.220 --> 03:35.120
Então, se HTTP é a linguagem que nos permite comunicar entre estes dois me ensinar alguns dos

03:35.120 --> 03:35.990
palavras certas.

03:36.290 --> 03:37.690
Quero dizer, essa é uma boa pergunta.

03:37.820 --> 03:44.690
E sorte para você HTTP é muito fácil de aprender porque você só tem algumas palavras e eu vou mostrar

03:44.690 --> 03:45.940
você o que eles são agora.

03:46.070 --> 03:51.910
Você tem 'GET' você tem 'POST' você tem 'PUT'.

03:51.990 --> 03:53.880
E finalmente você tem 'APAGAR'.

03:57.360 --> 04:00.130
e agora você está pensando "hum, é isso?"

04:00.130 --> 04:04.880
E sim HTTP é lindo porque é simples.

04:04.920 --> 04:06.660
Você não precisa complicar demais as coisas.

04:07.750 --> 04:15.520
Você aprende essas quatro palavras e essas linguagens e você pode construir o aplicativo dos seus sonhos.

04:15.520 --> 04:18.810
Então vamos passar por isso um por um. 'GET' significa

04:18.820 --> 04:22.530
Bem, eu quero pegar um arquivo HTML.

04:22.660 --> 04:28.360
Então você pede para obter algo e o servidor responde com essa solicitação.

04:28.420 --> 04:31.700
Um 'POST' diz que eu quero postar alguma coisa.

04:31.710 --> 04:38.410
Então, eu vou mandar alguns dados para os servidores do Google e eu quero que você 'POST' - eu quero que você os adicione

04:38.950 --> 04:44.520
para seus servidores ou seu banco de dados. 'PUT' é

04:44.780 --> 04:46.530
Vou lhe enviar alguns dados.

04:46.700 --> 04:51.950
E quero que você atualize alguns dados que já existem nos servidores do Google e atualize-os com esse novo

04:51.950 --> 04:59.270
informações e, em seguida, 'DELETE' significa bem apagar um dado no backend - nos servidores ou no

04:59.270 --> 05:01.240
base de dados.

05:01.250 --> 05:08.270
Então, se usarmos o Twitter como exemplo, 'GET' será receber o feed do Twitter com todos os tweets de

05:08.270 --> 05:18.450
hoje. 'POST' seria se você criasse um novo usuário e desejasse adicionar esse usuário aos servidores do Twitter. 'COLOCAR'

05:18.600 --> 05:25.880
seria se você fizesse um tweet, mas você quer fazer uma alteração ou uma edição para editar o tweet e 'DELETE'

05:25.890 --> 05:32.080
Isso significa que você exclui sua conta de usuário ou exclui um tweet. E não se preocupe, vamos

05:32.080 --> 05:36.130
use-os quando chegarmos à seção de backend e construirmos nosso projeto final.

05:36.520 --> 05:45.040
Agora, ao longo dos anos, o HTTP foi estendido para não apenas se preocupar com texto. Não apenas buscar documentos em hipertexto

05:45.040 --> 05:53.500
como HTML, mas também imagens e vídeos e postar conteúdo para servidores como com resultados de formulários HTML.

05:53.650 --> 06:01.300
e HTTP também pode ser usado para buscar parte de documentos para atualizar páginas da web sob demanda, que é chamado de AJAX.

06:01.750 --> 06:04.900
e nós temos um vídeo falando sobre isso.

06:05.020 --> 06:09.170
Mas a ideia principal ainda é usar esses quatro verbos

06:09.190 --> 06:13.230
nós acabamos de aprender, agora podemos nos comunicar com os servidores.

06:13.340 --> 06:13.630
Tudo bem.

06:13.630 --> 06:23.220
Então, sabemos que esta seta aqui no topo usa HTTP para fazer solicitações usando um desses quatro verbo.

06:23.230 --> 06:23.680
OK,

06:23.700 --> 06:27.630
então acho que você recebe a parte do pedido. Agora,

06:27.700 --> 06:29.320
com o que o servidor responde?

06:29.320 --> 06:30.770
E quanto a resposta aqui?

06:30.850 --> 06:38.140
O servidor envia duas coisas principais. uma é uma mensagem HTTP.

06:38.210 --> 06:42.780
Isso é algo que você definitivamente viu antes e eu vou linkar para isso

06:42.800 --> 06:49.360
Recursos da W3school uma mensagem de 200 significa sucesso.

06:49.410 --> 06:57.250
Você provavelmente já viu 200 OK antes de ter visto 404 mensagens, o que significa que não foi encontrado.

06:57.390 --> 07:03.530
Se você digitar um URL que não existe, você receberá um 404 e, às vezes, receberá 500

07:03.570 --> 07:05.080
mensagem de erro que é

07:05.230 --> 07:07.260
Bem, há algo errado com o servidor.

07:07.530 --> 07:15.000
Portanto, este é apenas um código numérico que vem com todas as respostas que informam a resposta do servidor.

07:15.000 --> 07:16.080
Então esse é o primeiro.

07:18.390 --> 07:22.980
O segundo é geralmente algum tipo de dados como HTML.

07:23.190 --> 07:25.530
E até agora é isso que estamos fazendo HTML.

07:25.830 --> 07:31.160
Mas nos próximos vídeos, mostrarei que ele pode enviar outras coisas além de um simples HTML.

07:31.230 --> 07:33.600
Então, vamos adicionar a este diagrama agora.

07:34.230 --> 07:43.760
Queremos dizer que isso também tem um código de status e vamos dizer 200 por agora que estava tudo bem e em

07:43.790 --> 07:50.770
a resposta forneceria o código de status mais o novo arquivo HTML.

07:51.020 --> 07:51.890
Tudo bem.

07:52.070 --> 07:56.900
Vamos realmente demonstrar isso on-line para ver como você pode assistir a essa ação.

07:58.360 --> 08:04.410
Eu tenho aqui um ótimo site chamado 'example.com' e é um site simples que você pode visitar

08:04.510 --> 08:05.330
agora mesmo.

08:05.440 --> 08:12.830
Mas a parte legal disso é se você abrir seu console de desenvolvedor, até esse ponto nós olhamos

08:12.830 --> 08:20.450
a aba de elementos e depois a aba do console Eu quero mostrar a aba Rede que nós temos aqui. Agora

08:20.450 --> 08:21.620
a guia Rede

08:21.980 --> 08:27.610
Você pode ter que clicar em alguns desses ícones e verá que coisas diferentes aparecerão.

08:27.710 --> 08:30.900
Certifique-se de que o filtro tenha desaparecido.

08:31.780 --> 08:39.960
Tudo está desmarcado e agora em 'example.com' enquanto este está aberto, basta atualizar

08:43.010 --> 08:44.420
e olhe para isso.

08:44.600 --> 08:47.880
Eu vou clicar nesse ícone que fica um pouco maior.

08:47.900 --> 08:52.010
Este é um plugin, então não se preocupe com este javascript, mas a principal coisa que ele diz.

08:52.010 --> 08:55.940
"example.com" "Status:200 OK"

08:55.970 --> 09:03.140
E "Tipo:documento" e até me diz o tamanho - o tempo que demorou para obter isso, que é de 53 milissegundos ...

09:03.140 --> 09:04.760
Isso é bem rápido.

09:04.760 --> 09:07.790
Então isso significa que o servidor respondeu com 200.

09:07.790 --> 09:13.830
Se eu clicar nisto eu recebo um monte de coisas que nós realmente não precisamos nos preocupar, mas alguns

09:13.830 --> 09:16.080
coisas 'Request URL'

09:16.080 --> 09:23.340
isso é o que nós pedimos. Obtemos um código de status de 200 do servidor.

09:23.340 --> 09:31.280
E se clicarmos na resposta há uma mensagem de resposta, recebemos o documento HTML do

09:31.280 --> 09:32.760
servidor.

09:32.860 --> 09:36.870
Se voltarmos para os cabeçalhos, também veremos que o nosso método de solicitação era um "GET".

09:36.970 --> 09:44.430
Nós fizemos um pedido "GET". Vamos fechar isso e atualizar novamente.

09:44.490 --> 09:48.880
Eu agora tenho um status 304. Um 304

09:48.930 --> 09:55.050
Se olharmos para cá, significa não modificado indica que a página de solicitação não foi modificada desde

09:55.050 --> 09:59.150
último pedido. Porque eu já pedi isso

09:59.170 --> 10:04.800
agora o Google é inteligente o suficiente para dizer oh eu não vou me preocupar com o servidor e solicitando o mesmo

10:04.800 --> 10:05.640
coisa mais e mais.

10:05.640 --> 10:09.960
Eu já tenho memorizado então aqui está.

10:10.130 --> 10:10.730
Muito legal.

10:10.730 --> 10:13.740
Então, a guia Rede é realmente muito útil para isso.

10:14.030 --> 10:14.420
Tudo bem.

10:14.420 --> 10:20.330
Então você pode ir em frente e brincar com 'example.com' e ver por si mesmo como funciona o HTTP.

10:21.970 --> 10:29.590
E, a propósito, sim este HTTP que você vê aqui é o que significa quando você faz uma solicitação HTTP diz

10:29.680 --> 10:34.340
Ei, faça HTTP - estamos usando a web mundial.

10:34.640 --> 10:38.260
E vai pedir isso do servidor.

10:38.450 --> 10:39.110
Muito legal.

10:39.140 --> 10:40.650
E se você está se perguntando sobre o 's'.

10:40.670 --> 10:43.850
Não se preocupe, eu vou deixar você saber no final deste vídeo o que isso significa também.

10:46.410 --> 10:46.970
Tudo bem.

10:47.120 --> 10:49.780
Agora, e se eu quiser enviar dados.

10:49.850 --> 10:53.790
Se voltarmos ao nosso diagrama, estou apenas fazendo uma solicitação 'GET'.

10:53.840 --> 10:58.090
Mas e se eu quiser realmente enviar algumas informações para o servidor?

10:58.100 --> 11:02.120
Além de alguma URL dizendo que eu quero essa informação.

11:02.120 --> 11:04.330
Bem, há duas maneiras de fazer isso.

11:05.440 --> 11:08.300
Uma é algo chamado de string de consulta.

11:08.530 --> 11:13.140
E depois o segundo é através do corpo do pedido.

11:13.250 --> 11:20.450
Então, vou mostrar a vocês como esses dois trabalhos que tenho aqui são os que criamos em nosso primeiro

11:20.660 --> 11:24.270
seção HTML avançada quando só conhecíamos HTML.

11:24.860 --> 11:25.990
Vamos abrir esse arquivo.

11:29.810 --> 11:30.850
Eu tenho aqui.

11:30.870 --> 11:34.650
Se eu clicar duas vezes, você se lembra disso, não é?

11:34.650 --> 11:37.990
Nós percorremos um longo caminho. Desta forma

11:38.100 --> 11:46.280
Se você se lembra, nós tivemos um método de formulário 'GET' e agora você pode entender o que significa 'GET'.

11:46.320 --> 11:52.220
Está dizendo com este formulário que eu quero que você faça uma solicitação 'GET'.

11:52.350 --> 11:59.960
Vamos ver o que acontece quando clico em registrar enquanto abro a guia de rede.

12:00.160 --> 12:04.000
Eu vou clicar em 'Register!'

12:04.010 --> 12:04.650
Tudo bem.

12:04.730 --> 12:07.190
Então nós temos esse pedido.

12:07.190 --> 12:14.810
Vimos que fizemos uma solicitação e criamos essas coisas, chamadas de strings de consulta.

12:14.840 --> 12:21.370
A primeira maneira de enviar dados para o servidor. Com uma solicitação 'GET', se você quiser enviar informações através de um

12:21.380 --> 12:29.710
forma adiciona-o ao URL usando este questionmark que diz hey eu estou prestes a enviar-lhe alguma consulta

12:29.710 --> 12:34.400
strings e vai ter uma chave e um valor.

12:34.630 --> 12:36.550
Neste caso primeiro nome, sobrenome

12:36.550 --> 12:38.310
tudo está vazio, então não há informação.

12:38.320 --> 12:42.110
Mas por outro lado eu vou dizer primeiro nome é igual a Andrei.

12:42.400 --> 12:51.900
Se eu clicar nele, veremos que há parâmetros de string de consulta que enviamos. Nós temos o primeiro nome

12:51.960 --> 12:55.370
último nome, e-mail, senha e aniversário que está em branco.

12:55.710 --> 13:02.590
Mas se rolarmos para baixo nos carros, o padrão é Volvo, para que tenhamos Carros:Volvo.

13:02.730 --> 13:07.140
Então, essa informação agora é enviada para o servidor.

13:07.140 --> 13:10.260
Isso é parâmetros de string de consulta usando 'GET'.

13:10.260 --> 13:12.390
E nós mencionamos uma coisa.

13:12.480 --> 13:16.530
Nós vemos que temos uma senha aqui que não é muito segura.

13:16.560 --> 13:27.850
Se eu voltei para o formulário e digitei "secret" e clico em registrar novamente Bem, agora eu tenho minha senha

13:28.270 --> 13:34.900
fora no aberto enviado através do fio e eu ainda tenho isso aqui na minha barra de URL.

13:35.070 --> 13:35.370
Tudo bem.

13:35.370 --> 13:36.350
Nós vamos voltar a isso.

13:37.790 --> 13:39.060
Então esse é um caminho.

13:39.170 --> 13:44.930
A segunda maneira é através do corpo do pedido.

13:44.930 --> 13:48.210
Deixe-me mostrar-lhe como isso funciona da maneira como enviamos informações para

13:48.230 --> 13:57.110
o corpo é que usamos uma solicitação "POST" e isso é algo que você verá com mais frequência do que uma solicitação "GET"

13:57.110 --> 14:04.690
é que queremos adicionar alguns dados de formulário ao servidor, então queremos postar algo se eu mudar isso

14:04.690 --> 14:06.790
aqui vou salvar isso.

14:06.970 --> 14:09.300
E vamos abrir uma nova aba.

14:10.430 --> 14:14.920
Com um novo dado salvo este é um formulário de postagem.

14:15.010 --> 14:23.540
Se eu abrir aqui e digitar a senha 'secret' e clicar em 'Register!'

14:26.590 --> 14:32.230
Eu recebo 'register.html' mas sem strings de consulta.

14:32.350 --> 14:33.370
Se eu clicar nisso,

14:36.350 --> 14:41.290
Vejo que agora, em vez de strings de consulta, são dados de formulário.

14:41.480 --> 14:48.650
E até diz 'Content-Type:application / x-www-form-urlencoded'.

14:49.070 --> 14:57.830
E esta é apenas uma maneira de dizer que esta é uma forma e este é o corpo, mas não está sendo exibido aqui.

14:57.860 --> 15:03.200
Então, agora o servidor pode acessá-lo não a partir dos parâmetros da consulta e não se preocupe, vou mostrar como os servidores

15:03.200 --> 15:03.780
faça isso.

15:03.860 --> 15:09.740
Quando chegarmos à seção de backend. Em vez de acessá-lo através dos parâmetros de consulta, agora posso acessar

15:09.740 --> 15:12.160
através dos dados do formulário.

15:12.170 --> 15:15.440
Então vamos voltar ao diagrama.

15:15.610 --> 15:22.850
Agora entendemos que podemos fazer solicitações HTTP usando 'GET', 'POST', 'PUT' e 'DELETE'.

15:22.850 --> 15:35.140
Posso usar strings de consulta que estão no topo da URL para enviar os dados ou o corpo da solicitação

15:35.500 --> 15:41.350
e, em seguida, o servidor responde com um código de status com base em como minha solicitação foi e retorna com

15:41.350 --> 15:42.440
uma resposta.

15:42.820 --> 15:52.290
Mas o único problema que vimos foi que a senha era visível nos dois casos, não foi?

15:52.300 --> 15:57.550
E se tivéssemos uma pessoa de aparência assustadora aqui.

15:57.560 --> 15:58.360
Ai está.

15:58.580 --> 16:08.140
E se tivéssemos uma pessoa que estivesse assistindo nossa comunicação, nossos pedidos HTTP e monitorando-a?

16:08.380 --> 16:15.370
Se eu usei strings de consulta para colocar minha senha lá, ele pode simplesmente olhar por cima dos meus ombros e ver

16:15.440 --> 16:18.790
Ah, a senha de Andrea é secreta.

16:18.790 --> 16:29.510
Agora posso fazer login em sua conta do Google ou, se usar o corpo para enviar dados, ele poderá encontrar uma maneira

16:29.510 --> 16:33.460
para obter este pedido para vir até ele primeiro. E

16:36.900 --> 16:44.160
Basta olhar para os dados do formulário e ver que minha senha é secreta. "Isso não é

16:44.180 --> 16:44.750
muito bom é isso?

16:44.750 --> 16:57.210
Bem, uma solução para isso foi a ideia do HTTPS. Agora HTTPS significa transferência de hipertexto

16:57.240 --> 17:06.820
Protocolo seguro e você pode ver aqui que "W3C" usa a versão segura do HTTPS.

17:06.860 --> 17:11.280
A comunicação entre o navegador e os sites da Web agora está criptografada.

17:12.610 --> 17:13.330
E o que isso significa?

17:13.330 --> 17:22.380
Criptografado significa apenas que ele está desordenado para que apenas o cliente e o servidor saibam o passe secreto ou

17:22.390 --> 17:25.360
chave secreta para ler a mensagem.

17:26.740 --> 17:35.050
E este 'S' parte o segredo usa uma tecnologia chamada segurança de camada de transporte ou seu predecessor seguro

17:35.050 --> 17:41.870
camada de soquetes ou TLS e SSL para breve.

17:41.920 --> 17:51.820
Então, agora, mesmo com HTTPS se o atacante ou o que chamamos de um homem no meio da pessoa que está apenas monitorando

17:51.820 --> 17:58.030
nossos pedidos. Mesmo se eles obtiverem a nossa senha, será apenas uma completa bobagem que vai

17:58.030 --> 18:06.120
tem algo semelhante a este e bem que não é a nossa senha, por isso vai ser sem sentido evita

18:06.170 --> 18:07.690
esse ataque.

18:07.690 --> 18:08.960
Esta é apenas a dica.

18:09.280 --> 18:17.040
Como desenvolvedor, você deve informar a todos os seus amigos se algum dia estiver enviando informações confidenciais.

18:17.040 --> 18:18.330
em uma conta bancária.

18:18.450 --> 18:26.130
Certifique-se de que há HTTPS lá fora, se não houver HTTPS quando você estiver enviando - talvez seu login

18:26.130 --> 18:27.560
com sua senha.

18:27.690 --> 18:30.250
Bem, isso não é seguro.

18:30.400 --> 18:30.890
Tudo bem.

18:31.010 --> 18:40.860
Vamos revisar. Seu navegador da Web é um cliente HTTP que envia solicitações para as máquinas do servidor. Quando o navegador

18:40.920 --> 18:48.930
o usuário digita seguir solicitações abrindo um arquivo ou digitando uma URL ou clicando em um hipertexto

18:48.930 --> 18:50.500
link uma tag de âncora.

18:50.880 --> 18:56.530
O navegador cria uma solicitação HTTP e a envia para se comunicar com o servidor.

18:56.730 --> 19:02.380
Agora o servidor pode obter informações de volta para nós. A versão mais antiga que poderíamos usar

19:02.470 --> 19:09.430
Parâmetros de URL como "www.google.com/about" e especificamente obter HTML.

19:09.510 --> 19:11.020
Foi isso.

19:11.050 --> 19:18.950
Então veio o formulário para que possamos agora enviar mais dados além do URL dizendo que

19:18.950 --> 19:20.880
quer ir para este arquivo HTML.

19:21.260 --> 19:34.930
Agora poderíamos usar 'GET' ou 'POST' para enviar dados. Por meio de um corpo ou uma string de consulta e um servidor pode levar

19:34.930 --> 19:40.540
ação com base nesses dados e retornar uma nova página.

19:40.630 --> 19:47.200
E esta é a base da web e como a web mundial que temos agora se tornou possível. Através

19:47.380 --> 19:53.140
comunicação do servidor cliente. Nos próximos vídeos, vamos aprender ainda mais.

19:53.390 --> 19:56.820
Para realmente entender esse poder, vejo você no próximo. Tchau tchau.
