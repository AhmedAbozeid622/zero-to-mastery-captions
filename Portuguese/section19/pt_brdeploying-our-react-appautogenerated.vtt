WEBVTT

00:01.230 --> 00:02.040
Ei todo mundo.

00:02.130 --> 00:09.210
Agora temos o nosso aplicativo robo friends no github e você poderá colocar seu projeto robo friends no

00:09.240 --> 00:12.130
GitHub, mas aqui está a questão.

00:12.150 --> 00:18.930
Seria bom se pudéssemos usar as páginas do GitHub para realmente verificar nosso aplicativo robo

00:18.930 --> 00:28.940
friends sem precisar clonar a instalação do download npm, como fizemos com projetos simples de email H2, bem como eles criam o app

00:28.940 --> 00:29.690
react.

00:29.690 --> 00:35.310
Na verdade, existe uma maneira de fazer isso usando as páginas do GitHub.

00:35.680 --> 00:39.490
Agora, vincularei a este recurso para que você possa seguir passo a passo.

00:39.490 --> 00:43.010
Mas vamos passar por isso e ver como é fácil.

00:43.030 --> 00:46.460
Eu tenho o projeto aqui.

00:46.510 --> 00:50.450
Diz que preciso adicionar uma página inicial ao pacote que Jason.

00:50.500 --> 00:51.400
Então vamos fazer isso.

00:51.400 --> 00:59.330
Vou copiar isso e adicionar no nosso pacote o pai Jason, importa onde está.

00:59.330 --> 01:05.090
Vamos como escrever depois do nome para tornar isso um pouco maior.

01:05.160 --> 01:12.190
Vou adicionar meu nome de usuário aqui e este é o nome do repositório no nosso caso.

01:12.210 --> 01:14.150
O que foi isso.

01:14.210 --> 01:15.620
Eram amigos robo.

01:15.620 --> 01:17.750
Então, novamente, use seu nome de usuário no GitHub.

01:18.290 --> 01:24.370
E adicione aqui o seu nome do projeto get Hub.

01:25.490 --> 01:34.630
Se seguirmos as etapas, ele diz que preciso instalar as páginas do GitHub neste pacote e adicioná-las ao script

01:34.630 --> 01:35.970
de deploy.

01:36.010 --> 01:42.590
Então, vamos apenas copiar e colar isso; se você estiver usando o NPM, poderá fazê-lo se estiver usando seu fio.

01:42.590 --> 01:43.520
Este é o comando.

01:44.510 --> 01:47.390
Então, vamos instalar as páginas get

01:50.290 --> 01:56.260
hub e enquanto estiver sendo instalado, volte aqui e mostra aqui que precisamos adicionar

01:56.260 --> 02:01.240
essas duas linhas antes da implantação e implantação em nossos scripts.

02:01.240 --> 02:03.220
Então, mais uma vez, vá para

02:06.390 --> 02:08.900
nossos scripts e copie e cole esta linha.

02:09.180 --> 02:13.860
Portanto, temos a pré-implantação e a implantação.

02:13.860 --> 02:18.600
Portanto, a pré-implantação executa o NPM run build, que sabemos o que isso faz.

02:18.600 --> 02:20.710
Constrói o nosso projeto.

02:20.870 --> 02:25.490
Ele cria uma versão de produção do nosso projeto e cria uma pasta criada.

02:25.490 --> 02:33.140
E então a implantação usará essas páginas do GitHub para que apenas instalemos e usemos nossa pasta criada.

02:33.140 --> 02:35.560
Vamos voltar.

02:35.660 --> 02:35.990
Tudo certo.

02:35.990 --> 02:40.780
E, finalmente, tivemos que implantar este site executando o NPM run deploy.

02:41.720 --> 02:42.590
Então vamos fazer isso.

02:42.590 --> 02:50.190
Deixe-me salvar e então e aqui vamos esclarecer isso.

02:50.240 --> 02:52.010
O NPM executa

02:55.240 --> 02:56.470
esse script.

02:56.500 --> 02:59.580
E lembre-se de que as pré-implantações serão executadas antes dela.

02:59.710 --> 03:04.900
Portanto, se eu executar isso, parece que tenho um erro no meu pacote Jason.

03:04.900 --> 03:06.130
Vamos ver.

03:06.130 --> 03:07.520
O que estou perdendo aqui.

03:07.520 --> 03:10.570
Bem, eu tenho uma vírgula no final aqui, da qual não preciso.

03:10.570 --> 03:15.720
Vamos fazer isso de novo.

03:15.750 --> 03:18.880
Você vê que a pasta de compilação acabou de ser criada.

03:18.960 --> 03:21.360
Está criando uma produção otimizada construída.

03:21.600 --> 03:28.370
Isso é ótimo e aqui temos o nosso projeto agora publicado.

03:28.370 --> 03:38.910
Agora, tudo o que precisamos fazer é voltar ao nosso repositório, acessar as configurações e, se rolarmos todo o caminho para baixo para

03:39.120 --> 03:47.670
obter as páginas do hub, precisamos alterar a fonte para obter a ramificação das páginas do hub.

03:47.680 --> 03:53.620
Agora você pode ter que esperar alguns minutos ou até atualizar a página para garantir que as

03:53.620 --> 03:55.010
alterações foram aplicadas.

03:55.300 --> 04:03.740
E se tudo der certo, lembre-se de selecionar a ramificação das páginas do github, clicar neste link

04:03.740 --> 04:04.820
e atualizar.

04:04.820 --> 04:05.840
Ai está.

04:05.840 --> 04:16.950
Nosso aplicativo robo friends agora está ativo neste U. R. EU. para que eu possa copiar esse URL,

04:17.760 --> 04:26.200
vá para o meu projeto, clique em editar e, em seguida, adicione nosso site aqui para que da próxima vez que alguém chegue e verifique

04:26.200 --> 04:29.470
nosso repositório, clique aqui para ver o projeto ao vivo.

04:29.470 --> 04:30.980
Quão legal é isso.

04:31.060 --> 04:39.600
Agradável e simples e, assim, temos um aplicativo pronto para produção, porque lembre-se de criar o aplicativo react

04:39.960 --> 04:46.690
para nós otimiza tudo e mantém tudo realmente muito pequeno para a produção.

04:46.710 --> 04:54.090
Nossos arquivos JavaScript, enquanto são minimizados, parecem muito pequenos e bem, nada como tínhamos antes

04:54.150 --> 05:03.870
com contêineres e componentes, tudo isso porque usamos o create react app é otimizado para produção. Parabéns, mostre aos seus

05:05.410 --> 05:09.910
amigos que eu vou ver na próxima um talvez.
