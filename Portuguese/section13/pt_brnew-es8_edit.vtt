WEBVTT

00:01.990 --> 00:10.800
O ES8 tem mais alguns novos recursos que foram introduzidos em 2017, em comparação com o ES7. Neste vídeo, abordaremos apenas os

00:10.810 --> 00:13.360
mais importantes.

00:13.660 --> 00:17.750
Portanto, o primeiro é o preenchimento de cordas.

00:18.010 --> 00:28.110
Temos novas funções que podemos adicionar às strings que são '. padStart 'e'. padEnd '. Agora, para

00:28.110 --> 00:43.810
demonstrar isso, vamos para o console. E apenas faça uma 'Tartaruga' e nós faremos uma '. padStart 'de 10, se eu fizer isso, recebo' Turtle

00:43.810 --> 00:48.230
'com 10 espaços à sua frente.

00:49.810 --> 01:01.170
Se eu fizer '. padEnd 'get' Turtle 'com 10 espaços depois, e isso é útil apenas para alinhar caracteres,

01:01.170 --> 01:09.310
de strings, se você desejar um preenchimento específico para eles. Novamente, muito, muito simples, fácil de pegar, apenas outro

01:09.310 --> 01:11.980
método de string que recebemos.

01:11.980 --> 01:13.510
Tudo bem, vamos para o segundo.

01:13.510 --> 01:20.830
A segunda que obtivemos é algo chamado vírgulas à direita nas listas e chamadas de parâmetros da função.

01:21.040 --> 01:21.840
Hmm! , o que isso significa?

01:21.970 --> 01:33.200
Bem, agora eu posso fazer algo como 'const fun', 'a, b, c, d' e adicionar uma vírgula no final.

01:34.370 --> 01:38.610
E, se eu fizer uma função, digamos 'console. log (s) 'a',

01:38.930 --> 01:41.670
apenas uma função tola e simples.

01:41.690 --> 01:48.920
Agora posso executar esta função, como um, dois, três, quatro e depois uma vírgula no final.

01:49.220 --> 01:54.120
E isso ainda é javascript válido. Se eu executar isso, veja

01:54.200 --> 01:55.550
bem, funciona.

01:55.550 --> 01:56.680
Log do console 'a'.

01:56.690 --> 01:59.030
Qual deles é registrado.

01:59.030 --> 02:03.850
Agora, por que isso seria útil?

02:03.860 --> 02:09.320
O principal motivo é que, quando você começa a obter realmente grandes listas de parâmetros,

02:09.320 --> 02:12.420
verá muitas pessoas fazendo coisas semelhantes a isso.

02:15.910 --> 02:18.140
Apenas para tornar as coisas um pouco mais limpas.

02:18.310 --> 02:27.080
E quando você começa a fazer isso, toda vez que você adiciona um novo parâmetro, é muito mais fácil.

02:27.100 --> 02:32.710
Mas também no github, quando você faz alterações, na verdade, faz a diferença.

02:32.710 --> 02:35.860
As diferenças de verde e vermelho são muito mais limpas.

02:35.860 --> 02:41.750
Portanto, é apenas sintático e apenas faz as coisas parecerem um pouco mais agradáveis.

02:41.760 --> 02:47.530
Novamente, você normalmente não gostaria de fazer algo assim, mas talvez quando você tem uma longa lista de parâmetros como essa,

02:47.770 --> 02:54.520
a vírgula final agora é válida e não gera um erro. Tudo certo.

02:54.630 --> 02:56.130
Vejamos o próximo.

02:56.400 --> 03:00.720
O próximo é que temos 'objeto.

03:03.310 --> 03:12.410
valores 'e' objeto. entradas 'e estas são muito úteis porque, antes

03:12.420 --> 03:21.680
disso, tínhamos algo chamado' objeto. chaves 'e' objeto. chaves 'nos permitiu fazer algo semelhante a matrizes, mas em objetos.

03:22.030 --> 03:32.700
Por exemplo, se tivéssemos um objeto (obj) que, digamos, terá um

03:32.790 --> 03:42.820
objeto e esse objeto terá 'userName0', 'Santa', temos 'userName1', 'Rudolph'.

03:43.000 --> 03:51.920
E também temos 'userName2', 'Mr. Grinch '.

03:52.000 --> 03:57.550
Agora, olhando para esse objeto, porque não é um

03:57.550 --> 04:05.790
array, não podemos fazer o 'mapa', 'filtrar' ou 'reduzir', mas esse tipo de objeto feio.

04:05.830 --> 04:10.810
E isso ilustra um bom ponto, às vezes, quando você está trabalhando com

04:10.930 --> 04:17.110
servidores, obtém objetos que você realmente não gosta ou que não deseja trabalhar, mas ainda deseja iterar.

04:17.230 --> 04:22.360
E antes que pudéssemos fazer algo assim com 'object. keys ', le'me abrem um pouco

04:22.360 --> 04:31.450
mais de espaço por aqui, para que possamos ver, eu poderia fazer' objetar. chaves 'e aqui, jogaremos o objeto.

04:31.450 --> 04:36.140
E agora, eu posso usá-lo como uma matriz ou ir um por um.

04:37.190 --> 04:38.240
Como uma matriz.

04:39.490 --> 04:42.120
Então é como se fosse uma matriz.

04:42.120 --> 04:45.310
Mas, exceto, tem propriedade e valores.

04:45.490 --> 04:53.180
Então, digamos, queríamos fazer um loop 'forEach' e para cada chave, ou seja, para cada chave na matriz.

04:53.500 --> 05:05.840
Portanto, para cada 'nome de usuário', também temos o índice 0, 1, 2, basta digitar isso entre colchetes.

05:05.980 --> 05:15.710
E agora, dentro do ouvir, podemos dizer 'console. log (chave) 'e depois' objeto [chave] '.

05:15.970 --> 05:20.500
Então, agora, estamos pegando o objeto com a chave 'nome de usuário'.

05:20.500 --> 05:29.470
Então, se eu consolar. log 'isso, vamos copiar e colar isso, limpar isso um pouco e eu vejo que tenho' nome de usuário '' Santa

05:29.480 --> 05:34.970
',' nome de usuário1 '' Rudolph ',' nome de usuário2 '' Sr. Grinch '.

05:35.190 --> 05:44.580
E essa é uma maneira de iterar ou percorrer objetos, mas com 'object. entradas ', as coisas ficam um pouco mais

05:44.760 --> 05:45.860
fáceis.

05:46.730 --> 05:58.610
Por exemplo, podemos fazer 'objeto', devemos criar mais espaço, podemos fazer 'objeto. valores 'e o' objeto. valores ', se eu fizer

05:58.970 --> 06:06.020
um' forEach 'aqui, simplesmente pego o' valor 'do valor.

06:06.140 --> 06:11.670
Eu posso apenas 'consolar. log (valor) '.

06:13.080 --> 06:19.530
E agora, eu recebo o valor de cada objeto.

06:19.560 --> 06:28.830
É isso que circula 'Papai Noel', 'Rudolf' e 'Sr. Grinch '.

06:29.060 --> 06:31.390
Com as entradas, se eu fizer 'objeto. entradas '.

06:31.630 --> 06:33.250
Bem, vamos ver o que acontece.

06:34.360 --> 06:42.990
Vamos esclarecer isso, eu recebo uma matriz de 'nome de usuário' 'Santa', 'nome de usuário1' 'Rudolph' e 'nome de usuário2' 'Sr. Grinch '.

06:43.030 --> 06:49.600
Portanto, isso lhe dá muito controle, você obtém propriedade e valor ou chave e valor, e pode fazer

06:49.600 --> 06:55.910
o que quiser com ele e usar 'foreach', 'map', 'reduzir', 'filter' todas essas funções da matriz.

06:55.930 --> 06:58.130
Então, vamos usar um cenário da vida real aqui.

06:58.390 --> 07:04.330
Digamos que queríamos, acabamos de receber isso do back-end, o back-end apenas nos enviou um monte de usuários que eles

07:04.330 --> 07:09.940
tinham no banco de dados e queremos gerar 'nomes de usuário' para isso porque não gostamos do 'nome

07:09.940 --> 07:16.540
de usuário0' , 'nomedeusuário1', 'nomedeusuário2', você deseja exibir o nome que exibe o 'Papai Noel' com o número de ID, que é

07:16.690 --> 07:21.540
0, pois 'Rudolf' será 1, para 'Mr. Grinch 'será 2.

07:21.610 --> 07:25.160
Como podemos fazer isso? usando nossos novos poderes.

07:25.570 --> 07:30.040
Bem, eu posso simplesmente fazer algo com 'object.

07:31.340 --> 07:40.290
entradas 'e' objeto. entradas 'terão um' objeto 'sobre o qual eu possa mapear e isso nos

07:40.860 --> 07:44.370
dará um' valor '; lembre-se novamente que isso retornará matrizes.

07:44.640 --> 07:55.700
E aqui queremos apenas retornar ao valor 1 porque queremos pegar 'Santa', 'Rudolph' e 'Mr. Grinch '.

07:55.740 --> 07:58.690
Então esse é o segundo item na matriz.

07:59.130 --> 08:06.710
E então queremos adicionar a isso, como uma string 'value 0', que é o primeiro item.

08:06.750 --> 08:09.540
Então, 'nomedeusuário0', 'nomedeusuário1', 'nomedeusuário2'.

08:10.080 --> 08:13.330
E aqui queremos 'substituir', esta é

08:13.440 --> 08:21.480
apenas uma função que podemos usar em strings e queremos que substitua 'username' por uma string vazia ('').

08:22.710 --> 08:29.520
Então, o que estamos fazendo aqui é que estamos criando uma nova string com 'Santa', 0 porque não precisamos do nome de usuário

08:29.940 --> 08:30.490
aqui.

08:30.510 --> 08:38.280
Então agora, mesmo que tenhamos um objeto, podemos fazer um loop através dele como uma matriz, e assim termos novos nomes de

08:38.280 --> 08:42.430
usuário, 'Santa0', 'Rudolph1' e 'Mr. Grinch2 '.

08:42.780 --> 08:43.880
Quão legal é isso?

08:44.880 --> 08:50.790
Portanto, essas são adições realmente úteis à linguagem, especialmente ao objeto. valores

08:50.790 --> 08:57.970
'e' objetos. entradas ', você pode fazer muito com isso, mas há um grande

08:57.980 --> 09:03.870
recurso do ES8 que chegou e todo mundo está empolgado com isso, e eles são chamados de' Async '. Oh, espere!

09:04.100 --> 09:07.670
Agora é novo e todos da comunidade estão realmente animados com isso.

09:07.670 --> 09:14.710
No entanto, para aproveitar e entender completamente o benefício, precisamos de um vídeo inteiro por conta própria.

09:14.960 --> 09:17.220
Então eu vou te ver nessa.

09:17.530 --> 09:17.790
Tchau tchau.
