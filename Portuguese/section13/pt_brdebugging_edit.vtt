WEBVTT

00:01.100 --> 00:02.330
Bem vindo de volta.

00:02.330 --> 00:10.550
Quero falar com você rapidamente sobre um tópico muito importante para um desenvolvedor e isso é a depuração.

00:10.610 --> 00:14.810
Depurar é o ato de examinar o código, entender o

00:14.810 --> 00:22.870
que está fazendo e descobrir por que não está agindo conforme o esperado ou talvez nem esteja em execução, talvez você

00:22.880 --> 00:28.610
esteja recebendo erros ou talvez algo que o usuário faz em um site esteja provocando

00:28.730 --> 00:30.570
um comportamento estranho .

00:30.860 --> 00:36.100
É isso que é a depuração. Descobrir por que o programa não está agindo do jeito que está.

00:36.440 --> 00:42.190
E quando você trabalha como desenvolvedor, muito do seu tempo é gasto na depuração.

00:42.230 --> 00:48.130
Portanto, é um tópico muito importante e quero falar sobre algumas das estratégias que podemos usar para depuração.

00:48.170 --> 00:56.090
Tenho aqui uma função bastante complexa e, francamente, a menos que você tenha muita experiência com javascript, é

00:56.720 --> 00:59.360
uma função bastante difícil de entender.

00:59.510 --> 01:08.740
Vamos dizer que você começa a trabalhar e alguém diz, ei! Não sei, não sei o que está

01:08.740 --> 01:09.870
acontecendo

01:10.240 --> 01:17.600
com essa função, você pode ver? e você precisa descobrir o que faz e se está funcionando bem ou não.

01:18.070 --> 01:23.490
Então, eu vou levá-lo através das etapas que eu usaria para depurar esse código.

01:23.530 --> 01:29.970
Talvez esteja funcionando bem, talvez não esteja, mas quero entender o que esse código faz.

01:30.880 --> 01:39.410
Então, a primeira coisa que eu faria é ler, dizer OK, estamos atribuindo uma variável e parece que

01:39.410 --> 01:41.140
temos uma matriz.

01:41.270 --> 01:46.070
Como uma matriz aninhada, existe uma matriz dentro de uma matriz.

01:47.410 --> 01:51.800
E parece que esse código quer fazer algo chamado achatado.

01:51.870 --> 01:52.570
ESTÁ BEM.

01:52.840 --> 02:00.790
Sabemos que 'reduzir' do que aprendemos antes, 'a' é o 'acumulador'.

02:00.790 --> 02:01.690
Eu posso mudar o

02:01.720 --> 02:03.070
nome, então faz mais sentido para mim.

02:03.070 --> 02:05.730
OK, 'acumulador' perfeito.

02:05.800 --> 02:08.790
E 'b' é bom, o que é 'b'?

02:09.280 --> 02:20.320
'b' está certo, porque estamos iterando, fazendo um loop sobre a primeira matriz, o que nos dá três matrizes.

02:20.510 --> 02:23.240
Então, eu posso apenas dizer, matriz aqui. ESTÁ BEM.

02:28.620 --> 02:38.250
Agora, também vejo que, dentro dessa redução, tenho o 'acumulador', tenho a matriz e quero que o 'acumulador' comece

02:38.370 --> 02:40.490
com uma matriz vazia.

02:40.680 --> 02:42.170
Isso faz sentido até agora.

02:42.270 --> 02:45.470
Portanto, o 'acumulador' será uma matriz vazia quando você começar.

02:45.720 --> 02:48.080
E o que vamos fazer é fazer,

02:48.090 --> 02:50.410
concatenar pontos vazios de matriz.

02:50.430 --> 02:58.580
E se você se lembrar, 'concat' anexa o conteúdo de uma matriz ao que estiver sendo concedido.

02:58.580 --> 03:06.590
Uma coisa que posso fazer é abrir essa função, para que agora, em vez de ter

03:06.590 --> 03:18.120
apenas uma linha, eu possa dizer 'console. log 'array e descobriremos o que é array e também diremos' console. log '' acumulador '', dirá 'acumulador'.

03:18.170 --> 03:24.050
Portanto, temos o console aberto e também queremos ter certeza de que estamos retornando isso, porque o

03:24.080 --> 03:29.160
removemos de uma única linha, que já implica implicitamente retornar, para formar duas linhas.

03:29.410 --> 03:29.620
ESTÁ BEM.

03:29.630 --> 03:36.320
Então, vamos atualizar e adicionar essa função e ver se conseguimos obter alguns logs do console para descobrir o que

03:36.320 --> 03:37.300
está fazendo.

03:37.410 --> 03:44.390
Haverá três ciclos que vemos e, no primeiro ciclo, parece que ele diz que o array é [0,

03:44.390 --> 03:48.050
1] e o 'acumulador' é o array vazio.

03:48.140 --> 03:49.670
Ok, isso faz sentido.

03:49.670 --> 03:58.430
E então vemos o segundo loop em torno da matriz 2 e 3 que está aqui, é executado em loop e

03:58.760 --> 04:01.940
o 'acumulador' agora tem 0 e 1.

04:01.940 --> 04:08.270
Parece que, após o primeiro ciclo, adicionei o zero e um da matriz à matriz vazia,

04:08.270 --> 04:11.870
que é o acumulador. ESTÁ BEM.

04:12.050 --> 04:15.690
E então a última passagem pela qual são quatro e cinco.

04:15.740 --> 04:23.260
Agora, anexo a matriz de 4 e 5 ao 'acumulador' que adiciona 0, 1, 2, 3.

04:23.300 --> 04:33.110
Parece que o que estamos fazendo é pegar cada array e adicioná-lo ao acumulador.

04:33.150 --> 04:37.190
E porque se parece com isso.

04:37.260 --> 04:44.530
Então, é assim que ficaria na primeira passagem, estamos apenas usando a função concat para

04:44.530 --> 04:53.560
unir as matrizes, [0, 1], para simplificar a matriz, o que significa que, em vez de ter uma

04:53.590 --> 04:58.360
matriz dentro de uma matriz, podemos simplesmente achatar tudo.

04:58.360 --> 05:08.570
Isso significa que com 'achatado', se eu olhar o que ele faz, bem, ele encontra o array [0, 1, 2, 3, 4, 5]. Impressionante.

05:08.720 --> 05:14.420
Quero mostrar outro truque e, em vez de usar o log do console,

05:14.420 --> 05:22.610
você pode usar algo chamado depurador. E você percebe que a cor ficou vermelha, o que significa Sim! é uma palavra-chave javascript.

05:22.850 --> 05:24.460
E o que isso permite que você faça?

05:24.560 --> 05:33.430
Bem, vamos ver o que acontece quando executo essa função novamente para atualizar aqui e quero executá-la, whoa!

05:33.430 --> 05:33.430
o que acabou de acontecer.

05:34.800 --> 05:43.350
Quando o mecanismo javascript e o navegador executam o depurador de palavras, ele para.

05:43.430 --> 05:49.720
É uma palavra que diz o que está lendo este arquivo, ei! pare o que estiver fazendo, apenas

05:50.840 --> 05:55.120
congele e isso abrirá a janela exatamente para onde parou.

05:55.400 --> 05:58.190
Então deixe-me fazer esta tela cheia e mostrar a você.

05:58.390 --> 06:07.330
Para no meio de sua execução. Mas vemos que aqui 'acumulador' é uma

06:07.330 --> 06:17.700
matriz vazia porque, enquanto a iniciamos e a matriz é 0 e 1, agora tenho algumas opções.

06:17.850 --> 06:21.600
Eu posso tocar em play, que retoma a coisa toda, ou eu posso

06:21.600 --> 06:26.750
clicar em Step over e vamos ver o que acontece com step over, vai para a próxima linha.

06:27.780 --> 06:31.460
E se eu clicar novamente, vai para a próxima linha.

06:32.400 --> 06:40.980
E agora vejo que o 'acumulador' é 0 e 1 e a matriz agora é 2 e 3.

06:41.020 --> 06:48.130
Então, eu sei que na próxima linha, o 'acumulador', bem, eu mudo isso para uma matriz por engano,

06:48.130 --> 06:59.550
mas este será o 'acumulador' será 0 e 1 ponto concat, 2 e 3. E posso continuar analisando isso e ver como

06:59.550 --> 07:06.260
os parâmetros mudam e literalmente passam por toda a função.

07:06.720 --> 07:07.950
Vamos encerrar isso.

07:08.260 --> 07:13.070
Se eu trazer isso de volta ao que era o 'acumulador', faça

07:18.470 --> 07:19.910
essa tela inteira.

07:19.910 --> 07:20.720
Tudo certo.

07:20.720 --> 07:24.950
Então, array é [0, 1] 'acumulador' é um array vazio, vou

07:28.260 --> 07:34.470
avançar, esse 'acumulador' alterado agora é [0, 1] array [2, 3] e continuo avançando e percebo exatamente o

07:34.470 --> 07:40.460
que está acontecendo no código e quando termina a execução, ele retorna e olha para isso.

07:40.620 --> 07:46.370
Temos nosso console de volta.

07:46.420 --> 07:47.500
Isso não é legal?

07:47.500 --> 07:53.080
O depurador nos permite literalmente entrar na função e ver o que acontece passo a passo. Quando eu volto

07:53.080 --> 07:57.050
para o jeito que era.

07:57.160 --> 08:01.780
Eu quero que você leve isso com você e entenda que embora quando você vê

08:01.780 --> 08:02.800
algo assim pela

08:02.800 --> 08:09.070
primeira vez, é impressionante, com tempo suficiente e usando o console e o depurador, você é capaz de entender o que uma

08:09.070 --> 08:14.140
função faz e se está fazendo algo que você não usa. Se você espera fazer ou está fazendo

08:14.710 --> 08:17.390
algo errado, você pode usar essas técnicas para corrigi-lo.

08:17.400 --> 08:20.410
É uma habilidade muito útil que você vai usar bastante.

08:20.730 --> 08:21.540
Então boa sorte.

08:21.660 --> 08:23.270
Divirta-se por aí. Tchau tchau
