WEBVTT

00:01.420 --> 00:02.820
Bem vindo de volta.

00:02.860 --> 00:08.330
Agora, o que você aprenderá nos próximos vídeos está bastante avançado.

00:08.350 --> 00:15.310
Leva algum tempo para realmente entender os conceitos e entendê-los, e a melhor maneira de

00:15.310 --> 00:17.450
fazer isso é fazê-los.

00:17.710 --> 00:22.830
Portanto, use esses vídeos como referência para retornar quando tiver dúvidas.

00:22.870 --> 00:28.000
Vou abordar os principais tópicos que você verá na natureza.

00:28.180 --> 00:31.950
Você pode voltar e fazer referência a esses vídeos sempre que tiver dúvidas.

00:33.150 --> 00:38.110
E neste vídeo, abordaremos funções avançadas.

00:38.310 --> 00:40.540
Agora eu tenho uma função de amostra para você aqui.

00:40.680 --> 00:46.680
Mas, sabendo o que aprendemos sobre a nova sintaxe javascript, vamos converter isso primeiro

00:46.680 --> 00:50.010
em como devemos escrever javascript em 2018.

00:50.520 --> 00:53.280
A palavra função desapareceu agora.

00:53.640 --> 00:58.490
Podemos apenas dizer 'const primeiro é igual à função de

01:01.900 --> 01:02.950
seta (=>)'.

01:04.390 --> 01:14.080
E essa função de seta possui um 'greet' que pode ser uma constante e uma função

01:14.090 --> 01:18.570
que pode ser novamente 'const second'.

01:18.800 --> 01:24.710
E, finalmente, isso também pode ser um 'const'.

01:24.740 --> 01:32.210
Também aprendemos sobre o escopo, uma propriedade importante da função é que as variáveis criadas

01:32.210 --> 01:38.010
dentro deles, incluindo seus parâmetros, são locais para a função.

01:38.300 --> 01:47.090
Então isso significa que toda vez que você executa a primeira função, esse bloco de código é executado e

01:47.270 --> 01:50.740
a variável 'greet' é criada toda vez.

01:50.750 --> 01:58.100
Agora, isso é realmente bom para nós, porque garantimos que, se nosso programa, toda vez que executarmos

01:58.310 --> 02:04.980
'primeiro' lembrado 'cumprimentar', eles terão conflitos porque é uma constante e constantemente atribuímos a mesma

02:05.000 --> 02:08.480
coisa a uma variável que já existe.

02:08.480 --> 02:15.050
Portanto, dessa maneira, em uma função, garantimos que toda vez que a executamos, seja uma lista limpa.

02:15.170 --> 02:21.550
Você pode nomear as variáveis da maneira que desejar, porque não há mais nada que possa colidir com ela.

02:21.590 --> 02:28.850
Como eu disse, esse comportamento ajuda a evitar interferências acidentais entre funções e, como desenvolvedores, queremos minimizar

02:29.060 --> 02:33.020
o número de bugs ou erros em nosso código.

02:33.020 --> 02:39.710
Se todas as variáveis foram compartilhadas por todo o programa, é preciso muito esforço para garantir que nenhum

02:39.710 --> 02:42.500
nome seja usado para dois propósitos diferentes.

02:42.500 --> 02:48.820
Imagine se 'greet' estivesse em outra função e não tínhamos idéia e não podemos usá-lo.

02:48.890 --> 02:56.960
Felizmente, por ter nosso próprio escopo separado, podemos garantir que podemos usar 'greet' sem precisar verificar a

02:56.960 --> 02:59.070
base de código inteira.

03:00.220 --> 03:07.000
Agora, tratando a função, as variáveis locais como existentes apenas dentro da função da linguagem

03:07.000 --> 03:15.850
tornam possível ler e entender funções como pequenos universos, onde o que quer que aconteça nesse universo só importa para

03:16.060 --> 03:16.930
si.

03:18.340 --> 03:26.170
Mas eu também queria demonstrar um conceito interessante com javascript e que é 'fechamento'.

03:26.380 --> 03:31.760
Você pode pensar nisso como esta, uma função que é executada, a função executada.

03:31.900 --> 03:34.080
Agora nunca mais será executado.

03:34.120 --> 03:37.920
Como a primeira função que acabamos de executar aqui.

03:38.170 --> 03:45.970
E o resultado que colocamos em uma nova função, lembrará que há referências a essas variáveis que estão

03:46.000 --> 03:48.640
vivas em uma memória primeiro.

03:48.960 --> 03:51.270
No entanto, vemos um problema aqui.

03:52.210 --> 03:59.740
Você vê que, quando carregamos esse programa em nosso site, o mecanismo javascript verá isso e direi

03:59.740 --> 04:02.180
que temos uma variável primeiro.

04:02.230 --> 04:03.540
Essa é uma função.

04:03.580 --> 04:04.660
Ótimo.

04:04.690 --> 04:12.100
E então na próxima linha vemos, oh! queremos atribuir a variável new function (newFunc) e queremos obter o

04:12.100 --> 04:13.460
resultado de 'first'.

04:13.510 --> 04:20.980
Então o programa roda 'first', vê que queremos criar um 'const greet', 'HI' e também vemos que,

04:21.760 --> 04:26.680
temos outra função chamada 'second' e estamos retornando essa função.

04:27.040 --> 04:32.590
Mas há um problema aqui, o 'segundo' precisa lembrar o que é 'cumprimentar'.

04:32.830 --> 04:38.940
Embora 'first' execute e retorne 'second'.

04:39.060 --> 04:48.820
Então você pode pensar nisso como uma vez que fizermos isso, teremos apenas a função 'segunda'.

04:48.850 --> 04:52.440
Agora, e eu sei que isso é, isso parece confuso, mas veja o destaque aqui.

04:52.690 --> 04:55.590
É o que chamar "primeiro" significa.

04:55.870 --> 04:58.640
Mas você vê aqui que a variável 'greet'.

04:58.720 --> 04:59.990
'Segundo' não.

05:00.010 --> 05:07.180
Bem, não está no escopo do 'segundo', certo? o que 'encerramentos' faz e esta é

05:07.180 --> 05:14.870
a regra no Javascript é que o escopo filho sempre tem acesso ao escopo do pai.

05:14.950 --> 05:17.430
Então é quase como se ele se lembrasse.

05:17.470 --> 05:21.720
Eles sempre lembram que há muitas referências a essas variáveis.

05:21.760 --> 05:28.890
Então, dentro do navegador, o navegador diz: ah! essa segunda função precisa de 'cumprimentar'.

05:28.900 --> 05:30.370
Então eu vou lembrar disso.

05:30.400 --> 05:31.710
Deixe-me demonstrar isso para você.

05:31.990 --> 05:39.440
Então, se eu fizer 'primeiro' aqui e vou copiar isso no console.

05:39.660 --> 05:42.730
E agora temos, nova função.

05:42.810 --> 05:52.040
Se eu executar, a nova função recebida, 'HI', mesmo que 'first' nunca seja executada novamente.

05:53.120 --> 05:59.730
A única coisa que nos resta é a segunda função que o navegador se lembra de 'cumprimentar'.

05:59.850 --> 06:04.200
Novamente, este é um conceito confuso quando você está aqui pela primeira vez.

06:04.350 --> 06:14.540
Mas, como eu disse, lembre-se de que 'closures' está apenas dizendo que uma função foi executada, a função executada que

06:16.220 --> 06:16.910
nunca

06:19.740 --> 06:21.680
será executada novamente.

06:26.590 --> 06:35.930
Mas vai lembrar que existem referências a essas variáveis.

06:36.130 --> 06:44.720
Portanto, o escopo filho sempre tem acesso ao escopo pai.

06:44.950 --> 06:58.320
Agora você deve estar se perguntando, se eu ouvi 'nome const' igual a 'Bobby', a primeira função terá

06:58.320 --> 07:00.660
acesso a 'Bobby'?

07:00.670 --> 07:01.780
Não, não seria.

07:01.780 --> 07:06.860
Portanto, pense dessa maneira: as crianças sempre têm acesso ao escopo de seus pais.

07:07.030 --> 07:11.150
Mas os pais consideram que não têm acesso aos filhos.

07:12.640 --> 07:16.690
Tudo bem, vamos entrar em mais algumas coisas.

07:16.700 --> 07:25.270
Em seguida, falaremos sobre 'Currying' e 'Currying' é o processo de conversão de uma função que leva vários argumentos

07:25.360 --> 07:30.290
em uma função que os leva um de cada vez.

07:30.310 --> 07:31.480
Vamos ver o que eu quero dizer.

07:31.660 --> 07:45.460
Temos uma função aqui que chamaremos de 'multiplicar' e 'multiplicar' aceita dois parâmetros e, novamente, estamos usando nossa nova sintaxe de função que dirá 'a

07:45.460 --> 07:49.000
multiplica b' agora 'Currying' significa que

07:51.840 --> 07:58.050
estamos alterando essa função apenas aceite um parâmetro de cada vez.

07:58.470 --> 08:08.760
Isso significa que multiplicamos 'curried' é igual a ',' b '' a 'vezes' b

08:12.270 --> 08:20.260
'. Woh! uau! uau! quem! uau! , O que nós apenas fazemos?

08:20.310 --> 08:25.570
Novamente, isso parece muito confuso, mas pense nessas setas como funções.

08:25.590 --> 08:34.690
Então, agora, se eu fizer 'curriedMultiply' e direi apenas três (3).

08:34.920 --> 08:39.390
Bem, você verá isso em ação o que acontece.

08:39.570 --> 08:42.380
Eu recebo uma função que aceita 'b' multiplicar por 'a'.

08:42.510 --> 08:49.810
Então, executando isso, está dizendo que 'a' é '3'.

08:49.990 --> 08:58.780
E agora saberemos que quando multiplicamos 'a' é '3', mas como isso tem uma função e

08:58.870 --> 09:09.040
outra função dentro de uma função, isso apenas retorna essa parte e retorna uma função, como você pode ver

09:09.040 --> 09:10.370
aqui .

09:10.530 --> 09:12.710
Então agora, a fim de fazer isso funcionar.

09:12.720 --> 09:17.090
Deixe-me colocar isso de volta, para fazê-lo funcionar.

09:17.090 --> 09:31.820
Temos que dizer 'curriedMultiply' dirá '3' e depois outro colchete '4', e recebo '12'.

09:31.990 --> 09:39.460
Se olharmos para esta função em comparação com aqui, veremos exatamente o que fizemos,

09:39.460 --> 09:44.590
criamos uma variável 'curriedMultiply' que aceita um parâmetro.

09:44.590 --> 09:47.360
Portanto, é uma função que aceita 'a'.

09:47.380 --> 09:52.920
Nesse caso, é '3' e uma vez que você chama essa

09:52.930 --> 10:02.590
função, uma vez executada, ela retorna a (an) outra função, que aceita 'b' e essa função multiplica 'a' e 'b'.

10:02.590 --> 10:09.120
Então, o que estou fazendo aqui é dizer 'curriedMultiplier' 'a' é 3 'b' é 4.

10:09.440 --> 10:13.200
E agora multiplique 'a' vezes 'b'.

10:13.350 --> 10:19.960
E como você pode ver, como eu disse sobre curry, é o processo de converter uma

10:19.960 --> 10:26.930
função que recebe vários argumentos, como eu disse, em uma função que os leva um de cada vez.

10:26.930 --> 10:29.780
Agora, por que precisamos fazer isso?

10:30.500 --> 10:37.590
Como agora é mais extensível, eu posso fazer algo como 'const'

10:37.650 --> 10:41.550
multiplyBy5 'igual e agora tenho isso.

10:41.820 --> 10:49.860
Então, a qualquer momento, quero multiplicar por cinco, posso dizer, deixe-me copiar isso.

10:50.250 --> 10:54.970
Agora, sempre que eu quiser multiplicar um número por cinco,

10:58.700 --> 11:09.480
cinco, dez, e agora eu tenho essa função que foi criada que sempre multiplica as coisas por 5, o que é muito legal.

11:09.480 --> 11:09.990
Tudo certo.

11:10.010 --> 11:16.260
Nós vamos entrar em mais uma coisa e então eu prometo que vou fazer sua cabeça parar de doer.

11:16.260 --> 11:25.760
Chama-se 'Compor' e 'Compor' é o ato de juntar duas funções para formar uma terceira função em que a saída de uma função

11:26.210 --> 11:33.660
é a entrada da outra, mesmo eu dizendo que sou assim, o que eu acabei de dizer?

11:33.800 --> 11:35.230
Então, vamos escrever isso.

11:36.170 --> 11:40.910
Um 'compor' se parece com isso.

11:41.130 --> 11:52.300
Digamos que 'f' e 'g' parâmetros 'f' e 'g' retornem uma função que aceita o parâmetro 'a' que

11:53.200 --> 11:58.590
retorna uma função que possui este, santo moly.

11:58.760 --> 12:03.830
E se você olhar para isso e não tiver ideia do que está acontecendo, isso é algo que leva anos para

12:03.830 --> 12:04.710
que alguns entendam.

12:04.850 --> 12:06.650
São coisas realmente muito avançadas.

12:06.800 --> 12:13.260
Mas, se você é capaz de entender o funcionamento interno disso, pode fazer qualquer coisa.

12:13.260 --> 12:15.310
Vamos, vamos tentar.

12:17.240 --> 12:18.590
O que esta acontecendo aqui?

12:18.950 --> 12:23.480
Bem, parece que, olhando para 'f' e 'g', parece que

12:23.730 --> 12:29.790
'f' é uma função porque, embora tenhamos os colchetes destacados em azul para

12:29.790 --> 12:33.450
você e 'g' também é uma função.

12:33.510 --> 12:41.580
Se eu tivesse uma função soma, digamos, pega um

12:44.300 --> 12:49.960
número e apenas adiciona 1.

12:50.120 --> 12:58.860
O que podemos fazer com 'compor' é que posso dizer 'compor', novamente temos a função ouvir, 'soma' 'soma'.

12:58.900 --> 13:03.730
Portanto, 'f' e 'g' são 'soma'.

13:03.850 --> 13:06.890
E agora, como é necessário outro suporte, posso dizer 5, tudo

13:11.230 --> 13:11.560
bem,

13:11.560 --> 13:16.040
então vamos executar isso e então podemos ir passo a passo para mostrar o que ele faz.

13:17.890 --> 13:19.550
Eu tenho 7.

13:19.570 --> 13:20.640
Então porque é isso?

13:20.890 --> 13:23.580
Bem, vamos levá-lo um por um.

13:23.790 --> 13:33.590
Se 'f' e 'g' forem 'sum' e 'a' for 5, veremos o que a função retorna.

13:33.740 --> 13:39.300
E porque novamente temos dois colchetes, estamos executando a primeira parte da função que nos

13:39.300 --> 13:42.080
retorna em outra função que é essa.

13:42.450 --> 13:44.600
E dentro dela damos o 'a', 5.

13:44.850 --> 13:49.460
Portanto, quando essa função é executada, diz 'a' é 5.

13:49.670 --> 13:50.180
ESTÁ BEM.

13:50.460 --> 13:53.270
E então vamos executar a função interna 'g'.

13:53.370 --> 13:55.310
Neste caso, é soma.

13:55.350 --> 14:02.220
Então, se você se lembra que soma está apenas dizendo, me dê cinco e depois cinco mais um.

14:02.220 --> 14:06.090
Então agora isso muda para seis.

14:06.310 --> 14:11.180
E, finalmente, a função 'f' é executada, que é novamente 'soma'.

14:11.730 --> 14:15.240
E isso diz que 'soma' está me dando seis.

14:15.270 --> 14:19.270
Então seis mais um são sete.

14:19.350 --> 14:27.000
E essa coisa toda retorna sete.

14:27.230 --> 14:27.680
Hooh! Tudo certo.

14:27.760 --> 14:37.310
Havia uma tonelada de coisas, mas quero que você se lembre dessas três palavras-chave, porque quando você

14:37.310 --> 14:43.450
acessa o Javascript avançado, as funções são realmente muito importantes.

14:43.460 --> 14:51.950
Você ouvirá palavras como 'Closures' e 'Currying' e 'Compose' e encontrará ferramentas e bibliotecas que

14:51.950 --> 14:54.210
as usam muito.

14:54.290 --> 14:57.460
Agora você não precisa saber a definição deles.

14:57.500 --> 15:01.820
Você só precisa ler um pedaço de código e entender o que está acontecendo.

15:01.940 --> 15:11.180
E é por isso que eu gosto de mostrar isso a você, embora seja realmente avançado e muito difícil de entender, entendendo

15:11.180 --> 15:15.380
o processo passo a passo de como uma função funciona.

15:15.380 --> 15:21.470
Isso é realmente útil, porque agora, quando você encontrar isso na natureza, entenderá como tudo

15:21.860 --> 15:22.660
funciona.

15:23.370 --> 15:29.640
Agora, para finalizar, nesta seção de funções, quero lhe contar a coisa

15:29.640 --> 15:42.550
mais importante que você pode fazer como desenvolvedor da Web ao criar código e que é a idéia de evitar efeitos colaterais e pureza funcional.

15:43.890 --> 15:44.630
O que isso significa.

15:44.700 --> 15:48.500
Bem, vamos voltar ao meu diagrama aqui.

15:48.510 --> 15:55.620
Você deve se lembrar disso da primeira parte em que dissemos que uma entrada é o que damos a uma entrada de função de

15:55.620 --> 15:56.350
algum tipo.

15:56.370 --> 16:04.110
Pode ser uma entrada vazia ou pode ter parâmetros como 5 e 10, uma função faz algo que definimos, tem seu

16:04.590 --> 16:05.740
próprio escopo.

16:05.760 --> 16:08.100
Lembre-se de que é seu próprio universo.

16:08.100 --> 16:14.410
Poderia ter 'log do console', poderia fazer um monte de coisas e depois pergunta: Estou retornando alguma coisa?

16:14.970 --> 16:18.410
Você pode, Ooh! isso deve estar indefinido.

16:19.570 --> 16:27.690
Portanto, você pode retornar um valor ou, se ele não retornar nada, apenas indefinirá. Agora, as duas palavras que

16:27.690 --> 16:38.680
acabei de dizer s efeitos colaterais e pureza funcional. Bem, os efeitos colaterais são algumas dessas coisas, ações que acontecem, dentro

16:39.310 --> 16:48.020
da função sobre a qual realmente não sabemos nada. Se ele interage, lê ou grava em

16:48.020 --> 16:54.440
uma variável externa, por exemplo, ou 'logs do console', isso é

16:54.440 --> 16:56.750
um efeito colateral.

16:57.140 --> 17:02.300
Se mudarmos aqui, uma variável, 'a' é igual a um

17:05.330 --> 17:08.000
e então eu tenho uma

17:11.560 --> 17:15.920
função que muda 'a', Bem, isso é um

17:16.020 --> 17:17.550
efeito colateral.

17:17.670 --> 17:22.660
Isso é algo que a função está fazendo para afetar o mundo exterior.

17:22.680 --> 17:29.670
Lembre-se de que queremos pensar nas funções como seu próprio universo e se elas começam a afetar o mundo exterior.

17:29.850 --> 17:31.440
Quero dizer, não é o fim do mundo.

17:31.440 --> 17:36.200
Nós fizemos o 'log do console' antes de fazer, já fizemos isso antes.

17:37.150 --> 17:45.460
Mas é uma boa prática evitar os efeitos colaterais e, evitando os efeitos

17:45.460 --> 17:49.820
colaterais, temos algo chamado pureza funcional

17:50.770 --> 17:58.420
e pureza funcional é um conceito em que dizemos que, para

17:58.420 --> 18:13.950
escrevermos programas realmente muito bons, queremos evitar efeitos colaterais e sempre queremos um retorno, para que isso e isso acabem e sempre retornemos algo.

18:14.020 --> 18:21.460
E qual é o poder disso? Evitando efeitos colaterais e sempre retornando.

18:21.570 --> 18:31.860
Criamos algo que chamamos de 'determinista' e 'determinista' é uma palavra que você pode ter ouvido.

18:31.860 --> 18:40.280
Isso significa que, não importa quais sejam minhas entradas, digamos que cinco e dez passem por essa função.

18:40.320 --> 18:46.630
Neste pequeno universo, o valor de retorno será sempre o mesmo.

18:46.680 --> 18:54.450
Deixe-me dizer que novamente, a entrada que colocarmos nos parâmetros esteja vazia ou com determinados

18:54.450 --> 18:55.350
parâmetros.

18:55.350 --> 18:57.990
Ele sempre retorna, se executarmos isso mil vezes.

18:57.990 --> 19:00.080
Ele sempre retorna o mesmo valor.

19:01.430 --> 19:03.070
Isso é 'determinismo'.

19:03.110 --> 19:10.580
É um conceito muito importante e é um princípio fundamental para evitar erros, porque se essa função sempre faz

19:10.580 --> 19:16.770
a mesma coisa bem, você sabe exatamente o que faz e não terá erros aleatórios aparecendo

19:16.770 --> 19:18.130
aqui e ali.

19:18.990 --> 19:29.010
É com isso que eu quero deixar você. Embora essa não seja a lei, você encontrará bases de código que terão

19:29.010 --> 19:30.270
muitos efeitos colaterais.

19:30.270 --> 19:35.250
Haverá muitas coisas acontecendo dentro de funções que talvez até afetem variáveis que vivem

19:35.250 --> 19:36.940
fora de uma função.

19:36.990 --> 19:43.950
É realmente uma boa prática ser um desenvolvedor de alto desempenho para ter

19:43.950 --> 19:51.150
isso em mente, de criar funções que minimizem os efeitos colaterais e tenham pureza funcional.

19:51.290 --> 19:57.630
O que chamamos de "determinismo", onde tudo o que você coloca na função sempre retorna a mesma coisa.

19:59.430 --> 20:01.080
Tudo bem, é isso por enquanto.

20:01.080 --> 20:02.810
Vá experimentar alguns exercícios.

20:02.940 --> 20:04.400
Vejo você no próximo.

20:04.410 --> 20:04.900
Tchau tchau.
