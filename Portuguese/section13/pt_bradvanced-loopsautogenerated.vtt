WEBVTT

00:00.870 --> 00:07.300
Bem-vindo de volta. Quero falar um pouco sobre o loop de javascript.

00:07.430 --> 00:13.760
Veja bem, eu deixei de fora algumas outras maneiras pelas quais podemos fazer loop em javascript.

00:13.790 --> 00:23.270
Falamos sobre nossos quatro loops são enquanto loops são devidos enquanto loops e também falamos sobre cada um.

00:23.510 --> 00:31.040
Mas, na verdade, existem duas outras maneiras pelas quais podemos fazer loop em javascript e vou mostrar

00:31.040 --> 00:33.720
como fazer isso neste vídeo.

00:33.730 --> 00:43.940
Agora vamos imaginar que temos uma cesta e essa cesta é uma matriz que possui bem nossa lista de compras.

00:44.030 --> 00:45.880
Digamos que queremos comprar maçãs.

00:46.010 --> 00:52.280
Queremos comprar laranjas e também queremos comprar uvas porque as uvas são doces da natureza.

00:52.280 --> 00:53.220
Eles são deliciosos.

00:54.220 --> 00:59.590
Agora, para percorrermos este cesto, sabemos como fazer isso corretamente.

00:59.590 --> 01:07.330
Nós aprendemos sobre os quatro loops onde podemos fazer muita coisa, igual a zero.

01:07.400 --> 01:16.220
Desde que eu seja menor que o comprimento do cesto, amarramos um a um.

01:18.520 --> 01:26.530
E menos apenas a cesta de log do console para indexar.

01:26.560 --> 01:29.550
Então esse é o primeiro tipo de loop que vimos.

01:29.950 --> 01:31.540
Se você executar isso

01:34.160 --> 01:38.850
no navegador e pressionar Enter, veremos que temos maçãs laranjas e uvas.

01:38.930 --> 01:43.040
Tudo bem, então essa é a primeira maneira que já sabemos como fazer isso.

01:43.080 --> 01:54.110
Também poderíamos usar o loop For Each que veio de novo e o S-5, e aí podemos dizer que o item usará

01:54.130 --> 01:56.140
funções aéreas que aprendemos.

01:56.440 --> 01:59.530
E nesta função da época, cancelarei nosso blog e isso

02:03.000 --> 02:06.020
parece muito mais limpo do que era antes.

02:06.030 --> 02:08.280
Se eu executar esta função agora, recebo

02:11.710 --> 02:12.830
a mesma coisa.

02:13.060 --> 02:18.970
Estamos fazendo um loop sobre itens e não vou mostrar como fazer o loop while e o

02:18.970 --> 02:25.460
while, porque falamos sobre isso, mas existem duas outras maneiras pelas quais podemos percorrer as coisas e o Javascript.

02:25.690 --> 02:35.000
O primeiro é chamado de quatro do laço e o outro é para o laço.

02:35.070 --> 02:39.210
Eu sei que o nome é um pouco confuso, mas fique comigo aqui.

02:39.300 --> 02:45.480
O primeiro, o loop for, funciona de maneira muito semelhante a esses dois.

02:45.600 --> 02:52.780
É quase como se estivéssemos combinando esses dois juntos, e essa é uma nova especificação com o

02:52.780 --> 03:03.380
ESX. Portanto, esse é um novo recurso do Javascript do jeito que funciona: começamos com um loop for e dizemos que o item do Baskett

03:04.660 --> 03:07.750
é a sintaxe. corta bem para mim.

03:07.870 --> 03:16.460
Está tudo azul e aqui simplesmente dizemos cancelar o item de log.

03:16.550 --> 03:17.620
Não é tão ruim assim.

03:18.770 --> 03:22.210
Estamos usando a palavra-chave for aqui, mas estamos falando de.

03:22.400 --> 03:26.370
E estamos apenas criando uma variável, podemos nomear isso como quisermos.

03:26.460 --> 03:28.660
De Baskett, que é a nossa matriz.

03:28.880 --> 03:37.970
E isso fará um loop para que, se eu copiar e colar isso aqui e pressionar Enter, eu tenha

03:38.270 --> 03:40.360
exatamente a mesma coisa.

03:40.590 --> 03:45.630
E como sabemos na programação, há muitas maneiras de fazer as coisas e essas são apenas algumas das

03:45.630 --> 03:47.790
maneiras pelas quais podemos percorrer esse array.

03:48.780 --> 03:51.420
Mas quero mencionar um termo-chave aqui.

03:52.370 --> 04:00.400
O que estamos fazendo aqui é algo chamado iterando sobre essa matriz e esse texto.

04:00.410 --> 04:02.030
Vamos tornar isso um pouco maior.

04:04.050 --> 04:08.090
Esta redação é realmente confusa a princípio quando você a ouve.

04:08.820 --> 04:18.690
Mas ler significa simplesmente que somos capazes de passar um por um através de um item, como, por exemplo, uma cesta que tem uma

04:18.690 --> 04:27.020
matriz, ir um por um e olhar para esses itens, e a iteração pode ser feita em javascript no

04:27.030 --> 04:28.940
que chamamos de iterável.

04:29.250 --> 04:38.040
E essas variáveis são algo que o javascript nos fornece que diz: ei, você pode iterar sobre isso

04:38.040 --> 04:40.600
e o que é isso.

04:40.800 --> 04:46.300
Bem, em Javascript, você pode iterar sobre matrizes e já vimos isso.

04:46.470 --> 04:49.610
E também força é em vez de Baskett.

04:49.620 --> 04:54.000
Se eu apenas transformar isso em uma string e executar o loop

04:57.210 --> 05:01.560
for aqui, vejo que estou repetindo a string uma a uma.

05:01.560 --> 05:13.050
Portanto, matrizes e seqüências de caracteres são iteráveis em javascript, porque podemos iterar itens individuais e,

05:13.140 --> 05:24.120
por isso, nos permite iterar nesses intervalos. Sei que o texto é realmente realmente confuso.

05:24.130 --> 05:29.200
Mas em muitos livros de tutoriais e até no local de trabalho, você ouvirá essa palavra e desejará

05:29.200 --> 05:30.890
saber o que ela significa.

05:30.970 --> 05:39.700
Mas vamos falar sobre a próxima coisa, o loop for, o loop estrangeiro se parece com isso.

05:39.770 --> 05:42.850
E, na verdade, vamos trazer isso de volta ao que era antes.

05:43.010 --> 05:45.680
Portanto, não a força é a teoria.

05:46.700 --> 05:52.430
E vou comentar ou excluir o loop com o qual já estamos familiarizados.

05:52.650 --> 05:55.650
Só assim temos um espaçamento melhor aqui.

05:56.390 --> 06:02.270
Agora, o loop for in funciona com objetos.

06:02.450 --> 06:12.490
Então, vamos criar um objeto aqui e chamaremos esse objeto de cesta detalhada nesta cesta detalhada será um

06:12.500 --> 06:15.310
objeto que contém maçãs.

06:15.440 --> 06:21.680
E, na verdade, a quantidade de maçãs que queremos, queremos cinco maçãs e também teremos laranjas, e

06:22.190 --> 06:25.210
talvez possamos dizer que temos 10 laranjas.

06:25.370 --> 06:26.760
Muita vitamina C.

06:26.960 --> 06:29.180
E, finalmente, uvas e elas são deliciosas.

06:29.180 --> 06:31.760
Então, mil uvas para todos.

06:32.960 --> 06:43.040
Agora, com este Vaska detalhado, agora posso usar um loop for e posso dizer o item em vez do tipo

06:44.270 --> 06:49.620
de cesta detalhada e posso dialogar com o Konsole aqui.

06:49.830 --> 06:58.470
O modo que se eu limpar isso, vamos copiar cesta detalhada.

06:58.580 --> 07:00.260
Então esse é o nosso objetivo.

07:00.560 --> 07:04.580
E rodamos o loop for aqui.

07:04.580 --> 07:07.770
Observe o que acontece.

07:08.020 --> 07:21.290
Eu recebo maçãs laranjas uvas o loop for nos permite fazer um loop e ver as propriedades do objeto.

07:23.120 --> 07:29.320
Para que eu possa verificar o que preciso para fazer compras em maçãs, laranjas e uvas.

07:29.330 --> 07:35.420
Agora, aqui está a parte complicada e você ouvirá essa ala ser mencionada muito quando conversar com seus amigos de

07:35.420 --> 07:35.950
programação.

07:36.260 --> 07:43.970
E ele pode ficar realmente muito confuso, o que estamos fazendo aqui não é iterativo porque iterar é

07:43.970 --> 07:49.980
algo que podemos fazer com matrizes e strings com um objeto em javascript.

07:50.060 --> 07:59.390
Estamos fazendo algo chamado enumerar todos os beisebol VERRET, porque as propriedades de um objeto são

07:59.390 --> 08:09.220
o que chamamos em numeráveis e um objeto em javascript é enumerável, se nos permite ver as propriedades.

08:09.230 --> 08:12.480
Então, maçãs, laranjas e uvas são inumeráveis.

08:12.530 --> 08:17.910
Ou seja, podemos usá-lo em um loop for para verificá-los.

08:18.020 --> 08:20.870
Então, a enumeração é para

08:24.640 --> 08:33.800
objetos e numeráveis e iteráveis, o que acontece se eu trocar esses itens e se eu tiver uma cesta aqui.

08:33.940 --> 08:37.750
E a cesta detalhada aqui.

08:37.840 --> 08:42.180
Então, nós estamos usando um loop for com um objeto.

08:42.190 --> 08:43.860
O que você acha que acontecerá.

08:44.100 --> 08:44.870
Isto.

08:45.130 --> 08:49.890
Vou copiar e colar isso no nosso console.

08:49.890 --> 08:56.910
Hit Ron e eu recebo uma cesta de erro detalhado não é iterável.

08:56.910 --> 08:57.980
E por que isto.

08:58.230 --> 08:59.550
Bem, nós sabemos isso direito.

08:59.580 --> 09:06.930
Eu disse que em javascript temos um aumento de strings que são iteráveis e objetos na maioria

09:07.590 --> 09:10.230
dos casos não são iteráveis.

09:10.230 --> 09:17.790
Você vê que quatro dos loobs não funcionam com objetos porque simplesmente a linguagem javascript precisa

09:18.210 --> 09:26.750
fornecer essa propriedade que é chamada iterável quando essa propriedade é fornecida apenas por matrizes e seqüências de caracteres

09:26.750 --> 09:31.170
e porque quatro dos loops funcionam apenas com iterável.

09:32.260 --> 09:34.920
Isso vai nos dar isso.

09:35.090 --> 09:36.150
Mas e aqui?

09:36.350 --> 09:40.060
E se eu fizer um loop for in na cesta.

09:40.100 --> 09:41.120
Qual é a matriz.

09:41.330 --> 09:49.450
Se eu copiar e colar isso e executar esse código, veja se está funcionando.

09:49.630 --> 10:00.040
Recebo 0 1 2 e isso ocorre porque, por baixo do capô, você pode pensar em matrizes javascript como objetos.

10:00.040 --> 10:00.500
Direita.

10:00.550 --> 10:04.530
Porque uma matriz tem um índice de 0 1 e 2.

10:04.660 --> 10:18.090
Portanto, não podemos pensar no Baskett como um objeto que possui propriedades zero iguais às maçãs.

10:18.280 --> 10:25.660
Temos laranjas com índice 2 ou índice 1 e depois índice 2.

10:25.680 --> 10:28.180
Temos crepes.

10:28.260 --> 10:38.820
Portanto, o loop for é e a classificação de Neumar sobre as propriedades é 0 1 e 2, que lista para nós.

10:39.640 --> 10:41.180
Vamos tornar isso um pouco menor.

10:42.550 --> 10:48.400
Mas eu queria fazer este vídeo para você, porque muitas pessoas ficam confusas entre os dois.

10:48.910 --> 10:57.590
E embora você possa passar um longo tempo sem usar os loops finais, podemos usar algo como chaves acopladas a

10:57.590 --> 10:59.860
objetos que vimos antes.

11:00.930 --> 11:12.160
Ou vales ou entradas, ou podemos usar para cada loops ou loops, em vez de quatro, é bom conhecer essas diferenças, porque se você as

11:12.160 --> 11:17.800
vê em uma base de código, deseja entender o que está acontecendo.

11:18.600 --> 11:25.130
E também, se você ouvir alguém dizendo iterável ou numerável, você meio que tem uma idéia da diferença.

11:25.130 --> 11:35.150
Agora, para revisar um loop for in sobre inúmeras propriedades e nomes de propriedades numeráveis de um objeto,

11:36.310 --> 11:43.210
o loop for não funciona com objetos porque eles não são iteráveis.

11:43.270 --> 11:52.210
Agora, existem pequenas ressalvas e exceções a essas regras, mas em 99% das vezes você deve considerar

11:52.210 --> 11:52.920
isso.

11:53.020 --> 12:00.800
Você está usando o loop for para objetos e o loop for para matrizes e seqüências de caracteres.

12:00.810 --> 12:02.270
Vejo você no próximo.

12:02.620 --> 12:02.830
Prumo.
