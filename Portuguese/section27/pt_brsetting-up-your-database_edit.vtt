WEBVTT

00:00.770 --> 00:02.360
Bem vindo de volta.

00:02.360 --> 00:09.110
Estou muito empolgado com esta seção, porque finalmente estamos combinando tudo o que sabemos em um só lugar. No final, teremos um

00:09.110 --> 00:17.680
entendimento unificado de como tudo funciona, no mundo do desenvolvimento web.

00:17.800 --> 00:28.830
Temos nosso "cérebro inteligente" Front-End aqui com a página de login e temos nosso aplicativo, construído em React. Também temos nosso servidor

00:28.830 --> 00:34.880
rodando na porta 3000, ouvindo solicitações.

00:35.040 --> 00:37.700
Mas agora não precisamos mais desse banco de dados.

00:37.960 --> 00:46.240
Agora podemos criar nosso próprio banco de dados PostgreSQL e fazer com que o servidor interaja com ele através do SQL, atualizando

00:46.330 --> 00:55.490
tudo e respondendo através do Express de volta ao front-end. Vai ser muito divertido.

00:55.550 --> 00:56.750
Eu estou tão animado.

00:56.870 --> 01:03.690
Mas antes de começarmos a codificar qualquer coisa, precisamos criar nosso banco de dados.

01:03.920 --> 01:09.050
Vamos criar um banco de dados.

01:11.470 --> 01:14.080
E vamos chamá-lo de "cérebro inteligente".

01:19.470 --> 01:19.830
Tudo certo.

01:19.830 --> 01:20.800
Perfeito.

01:20.940 --> 01:28.350
Agora que criamos nosso banco de dados, quero pensar nessas três coisas separadas como seus

01:28.350 --> 01:33.130
próprios computadores individuais que, quando implantamos, serão partes diferentes.

01:33.220 --> 01:36.830
Temos nosso servidor morando em um computador.

01:36.940 --> 01:44.960
Temos nosso banco de dados em um computador e podemos realmente conectar-nos aqui.

01:47.710 --> 01:52.110
E também temos nosso aplicativo em um computador separado.

01:55.860 --> 02:03.660
Então, vamos fechar isso rapidamente e conectar-se ao nosso banco de dados, ao nosso host local e chamamos de cérebro inteligente.

02:05.510 --> 02:08.640
Clique em conectar e pronto.

02:08.960 --> 02:12.390
Mas, ainda não há mesas. Para começar, como fizemos

02:12.710 --> 02:18.710
quando criamos nosso design de API para o servidor, realmente queremos pensar em como o nosso banco

02:18.710 --> 02:26.230
de dados ficaria e estamos usando o banco de dados relacional aqui porque, na minha opinião, em 2018, e avançar os

02:26.680 --> 02:33.480
bancos de dados relacionais é realmente muito bom . Embora bancos de dados como o MongoDB sejam realmente fáceis de

02:33.480 --> 02:35.020
começar e sejam dinâmicos.

02:35.040 --> 02:38.250
Você não precisa pensar muito quando está começando.

02:38.250 --> 02:45.660
Acho que os bancos de dados relacionais oferecem uma maneira muito forte de pensar sobre como o aplicativo deve ser

02:45.870 --> 02:49.780
estruturado e como tudo e todas as partes se juntam.

02:50.380 --> 02:58.240
É uma ferramenta realmente muito poderosa que vejo a indústria voltando cada vez mais. Se você usa o postgreSQL

02:58.270 --> 03:06.180
ou MySQL ou SQLite, todos esses bancos de dados são praticamente os mesmos.

03:06.180 --> 03:12.510
Eles são super poderosos e faremos exatamente a mesma coisa com nosso aplicativo, porque não estamos necessariamente

03:12.510 --> 03:17.430
armazenando informações como LinkedIn ou Facebook, onde tudo é um modelo de documento.

03:17.430 --> 03:20.600
Temos usuários que estão interagindo entre si.

03:20.610 --> 03:25.710
Mas se no nosso aplicativo pudermos ter coisas diferentes, podemos obter informações de login,

03:25.710 --> 03:30.820
se expandirmos nosso aplicativo, talvez possamos ter informações sobre o tipo de imagens que eles enviaram.

03:30.850 --> 03:34.690
Agora, olhando o que construímos.

03:34.690 --> 03:42.520
Definitivamente, existem algumas coisas que queremos criar. Se voltarmos ao nosso exemplo de banco de dados, aqui temos

03:42.520 --> 03:47.980
nossa tabela de usuários que precisaremos criar. Mas lembre-se do que eu disse sobre senhas e da

03:47.980 --> 03:49.400
maneira como as armazenamos.

03:50.300 --> 03:57.230
Não queremos necessariamente criar um objeto de usuário ou uma tabela de usuário com todas essas colunas.

03:57.230 --> 04:00.510
Queremos separar as coisas e conectá-las através de chaves estrangeiras.

04:01.850 --> 04:10.440
Então, vamos criar uma tabela de usuários e, em seguida, uma tabela de login e ter essas tabelas conectadas através

04:10.680 --> 04:13.150
talvez do campo de email.

04:13.410 --> 04:19.730
Vamos voltar à nossa GUI e criar essas tabelas agora. Vou abrir a consulta, vamos removê-la

04:19.730 --> 04:25.160
por enquanto (nossa consulta antiga) e criar nossa tabela de usuários.

04:25.530 --> 04:36.460
Como você se lembra, é criar usuários da tabela. Eu tenho colchetes por aqui, só para ficar limpo.

04:36.610 --> 04:44.260
E aqui dentro eu direi que o ID será serial e esta será a nossa chave primária.

04:47.260 --> 04:56.750
Também teremos o nome e o nome, atribuiremos a ele um caractere variável (VARCHAR) de 100. Vamos apenas assumir que o nome de ninguém

04:56.750 --> 05:03.570
terá mais de 100 caracteres, o que novamente eu acho que não.

05:03.620 --> 05:05.980
Caso contrário, nosso banco de dados nos dará um erro.

05:06.260 --> 05:11.180
Também podemos criar um campo de email e este será um texto.

05:11.300 --> 05:14.510
Também queremos ter certeza de que este é um email exclusivo.

05:14.510 --> 05:20.120
Caso contrário, não queremos registrar o mesmo usuário repetidamente e ele não pode ser ignorado.

05:20.360 --> 05:30.030
Sempre deve estar lá, porque é isso que vamos usar em nossa tabela de login. Também sabemos que queremos entradas e as

05:30.030 --> 05:38.860
entradas podem realmente ser um número bastante grande se tivermos um usuário realmente dedicado.

05:39.170 --> 05:42.330
Bem, então essa pessoa pode continuar enviando essas fotos.

05:42.560 --> 05:45.260
Então, vamos fazer um LARGEint aqui.

05:45.430 --> 05:45.680
Ops.

05:45.680 --> 05:55.520
E, em vez de grande, é BIGINT, lá vai você. com o BIGINT, também diremos que queremos o padrão.

05:55.670 --> 06:04.250
E isso pode ser novo para nós, mas o valor padrão deve ser zero, a menos que, de alguma

06:04.250 --> 06:11.790
forma, formos inseridos com entradas e um número. Se não especificarmos onde estamos inserindo o número, ele deve ser o padrão como zero.

06:11.790 --> 06:20.250
Por fim, também queremos saber a hora em que eles entraram no nosso aplicativo e podemos usar um tipo de dados de carimbo de data / hora para

06:20.250 --> 06:20.820
isso.

06:21.180 --> 06:26.900
E, novamente, queremos ter certeza de que isso também NÃO é NULL.

06:26.910 --> 06:28.700
Tudo bem, vamos executar isso e ver se funciona.

06:31.000 --> 06:36.140
E recebo um erro próximo ou ")" E foi porque adicionei uma vírgula no final aqui.

06:36.160 --> 06:37.040
Vamos tentar de novo.

06:38.710 --> 06:39.350
Ai está.

06:39.430 --> 06:40.770
Se eu atualizar.

06:40.870 --> 06:44.050
Temos nossa tabela de usuários. Surpreendente.

06:44.500 --> 06:51.120
Portanto, temos a tabela de usuários na qual vamos armazenar todas essas informações.

06:51.500 --> 06:58.310
E também queremos garantir que armazenemos nossas informações de login, e-mail e hashes, porque lembre-se de que

06:58.310 --> 07:02.070
nunca estamos armazenando senhas em texto sem formatação.

07:03.410 --> 07:06.430
Vamos criar isso. Voltarei à

07:09.140 --> 07:13.380
consulta para remover isso e alterá-lo para logon.

07:13.980 --> 07:17.500
E esse logon agora terá um ID.

07:17.580 --> 07:25.800
Mais uma vez de serial e o tipo de dados serial apenas aumentará, será a chave primária e teremos um hash

07:29.260 --> 07:38.060
de coluna com um caractere variável (VARCHAR) de 100 mais uma vez, porque sabemos que bcrypt sempre nos fornece um certo hash

07:38.070 --> 07:45.970
de comprimento e nunca terá mais de 100 caracteres. NÃO NULL - precisamos absolutamente

07:45.970 --> 07:47.740
desta informação.

07:47.740 --> 07:55.520
E, finalmente, o e-mail, que será o mesmo da tabela de usuários, e esse e-mail será

07:55.680 --> 08:00.820
um texto, deve ser exclusivo e, definitivamente, NÃO NULL.

08:03.950 --> 08:05.010
Vamos executar a consulta.

08:06.550 --> 08:09.090
E refresque.

08:09.220 --> 08:09.890
Tudo certo.

08:09.910 --> 08:10.920
Temos

08:11.200 --> 08:13.380
nosso design de tabelas.

08:13.600 --> 08:21.410
Então, agora que temos essas tabelas, entendemos como serão os nossos dados.

08:21.600 --> 08:27.960
Este será um banco de dados que persistirá, independentemente do servidor ficar inativo. Isso garantirá que esses

08:27.960 --> 08:30.770
dados permaneçam armazenados.

08:31.910 --> 08:40.220
Agora que temos essas três partes em execução, podemos começar a trabalhar com o servidor, remover a variável do banco

08:41.090 --> 08:45.320
de dados e realmente conectar-se ao nosso banco de dados.

08:45.410 --> 08:45.990
Estou animado para

08:45.990 --> 08:48.590
mostrar a você como faremos isso no próximo vídeo. Tchau tchau.
