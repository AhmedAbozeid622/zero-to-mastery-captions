WEBVTT

00:01.070 --> 00:02.480
Bem vindo de volta.

00:02.480 --> 00:10.100
Eu quero fazer uma revisão rápida da nossa segurança e como o nosso aplicativo está funcionando agora porque colocar um seguro

00:10.310 --> 00:19.650
O aplicativo on-line on-line é uma responsabilidade muito importante do desenvolvedor da Web. Vamos voltar para a nossa base de código.

00:19.750 --> 00:24.250
Há dois problemas principais que eu vejo até agora.

00:24.280 --> 00:28.870
A primeira coisa é que não estamos fazendo nada chamado validação.

00:29.010 --> 00:39.820
Se eu vou entrar aqui e eu vou para o meu controlador de login se um usuário não digitar o e-mail correto

00:40.150 --> 00:45.460
ou insere algo que não esperamos, talvez deixe o campo de e-mail em branco ou o campo de senha em branco

00:46.860 --> 00:51.310
Bem, o que acontece então? E mesmo com o registro.

00:51.470 --> 01:00.800
Se formos nos registrar e um usuário não digitar o e-mail, nome ou senha adequados, nós tecnicamente

01:00.800 --> 01:09.230
ainda registrá-los, porque se deixarmos o e-mail em branco nome em branco senha em branco eles só vão entrar em branco

01:09.260 --> 01:10.810
usuário no banco de dados.

01:12.160 --> 01:14.670
Vamos ao aplicativo e mostrar o que isso significa.

01:15.460 --> 01:23.480
Se eu deixar este em branco e clicar em registrar, veja que eu estou inserido no aplicativo e se eu voltar para o

01:23.480 --> 01:24.170
base de dados

01:26.910 --> 01:37.200
e ir para os usuários, vejo um usuário em branco. E isso não é muito prejudicial, mas mostra um tópico importante

01:37.200 --> 01:44.790
que você realmente quer se concentrar em seu aplicativo e que é a validação - certificando-se de que quando você se comunica

01:44.790 --> 01:49.520
entre o front end e o back end há algumas camadas de segurança.

01:49.620 --> 01:54.420
Primeiro, o Front-End fará sua própria validação.

01:54.420 --> 02:03.670
Por exemplo, se formos para a página de entrada ou para a página de registro em nosso front-end dentro de nossa re-ação

02:03.670 --> 02:10.100
app vamos verificar antes, quando clicamos em registrar terá um botão Enviar.

02:10.330 --> 02:18.360
E no envio vai verificar para se certificar de que o nome não está vazio o e-mail tem o formato de e-mail adequado

02:18.450 --> 02:26.830
como ter um sinal de arroba ou ponto com no final e, em seguida, a senha terá algum tipo de validação para

02:26.830 --> 02:33.690
Digamos que seja maior que seis caracteres. E agora o front end envia essa informação validada

02:34.320 --> 02:40.520
para o backend e uma coisa importante que você quer ter certeza com o seu servidor é que o servidor

02:40.520 --> 02:45.590
nunca confia em nada recebido do front end.

02:45.640 --> 02:48.050
Por isso, deve fazer sua própria validação.

02:48.070 --> 02:56.470
Isso é para verificar o nome e a senha do e-mail e certificar-se de que há valores que ele deseja inserir e transacionar

02:56.590 --> 02:58.030
no banco de dados.

02:58.920 --> 03:14.470
Uma maneira de fazer isso. Bem, podemos simplesmente dizer que se o e-mail ou nome ou senha e nós podemos apenas fazer o

03:14.800 --> 03:17.070
não é assim que é o oposto.

03:17.320 --> 03:20.700
Então, se isso estiver vazio, eles se tornarão verdadeiros.

03:20.740 --> 03:24.500
Se isso estiver vazio, eles se tornarão verdadeiros, isso é vazio, eles se tornarão verdadeiros.

03:24.580 --> 03:30.280
Então, se algum deles estiver vazio, podemos apenas responder ao status

03:32.710 --> 03:33.370
400

03:36.330 --> 03:40.910
e podemos apenas responder com o envio incorreto do formulário.

03:43.710 --> 03:45.420
Vamos salvar isso e ver o que acontece.

03:47.570 --> 03:53.500
Eu vou salvar. A única coisa que quero fazer é voltar ao meu banco de dados e ativar meu PSQL em execução

03:53.500 --> 03:53.850
Aqui.

03:53.890 --> 03:58.540
Se eu for para login ou usuários, eu quero excluir o usuário vazio.

03:58.540 --> 03:58.800
Agora

04:02.920 --> 04:07.130
e este é bem perfeito.

04:07.350 --> 04:09.570
Se eu voltar aqui e tentar clicar em registrar

04:12.780 --> 04:15.470
Eu ainda recebo o registro.

04:15.490 --> 04:19.180
Isso porque, se eu voltar, vejo que recebo um erro aqui

04:23.080 --> 04:26.050
e eu recebo "não posso definir cabeçalhos depois que eles são enviados".

04:26.590 --> 04:33.430
E isso é um truque porque se você for aqui e abrir o console.

04:33.660 --> 04:44.890
Tudo bem, temos uma solicitação incorreta do servidor, mas esta declaração if é executada e, em seguida, continua

04:44.890 --> 04:52.810
e faz isso também porque lembre-se, a fim de terminar a execução dentro de uma função que temos a dizer

04:53.050 --> 04:53.670
Retorna.

04:53.920 --> 05:01.870
Assim, se isso for executado, ele retorna desta função e esta parte nunca será executada.

05:03.480 --> 05:14.860
Deixe-me salvar isso voltar ao nosso aplicativo agora vamos apenas atualizar aqui. Nós vamos apenas fazer um usuário em branco.

05:14.950 --> 05:21.100
Mais uma vez estamos logado porque agora quando vamos para o front end, se você se lembra em nosso registro

05:21.100 --> 05:26.030
arquivo no front-end quando clicamos em registrar.

05:28.890 --> 05:30.180
Bem, nós estamos buscando

05:32.690 --> 05:40.640
e estamos apenas verificando se usuário e esse usuário, porque estamos respondendo aqui com envio de formulário incorreto

05:41.060 --> 05:43.400
usuário será isso.

05:43.400 --> 05:51.530
Então vamos apenas verificar aqui para ID. Nós economizamos e lembramos, isso é algo que fizemos com nosso login

05:51.560 --> 06:00.310
assim como nos vídeos anteriores, se voltarmos, volte para registrar, tente se registrar.

06:00.780 --> 06:06.430
Não está me deixando porque, se eu abrir o console, não consegui carregar recursos.

06:06.430 --> 06:17.400
Se eu for para a rede, tente que mais uma vez ir para registrar eu recebo "submissão do formulário incorreto".

06:17.520 --> 06:19.530
Então isso é realmente muito importante.

06:19.560 --> 06:28.460
O servidor e o cliente devem fazer sua própria validação e certificar-se de que ele lida com todas as possibilidades.

06:28.530 --> 06:35.610
Se um invasor, por exemplo, inserir algum código muito ruim em vez de um email. Bem precisamos

06:35.610 --> 06:42.260
para validar e garantir que tomemos as medidas adequadas com base nisso.

06:42.430 --> 06:49.220
Assim, podemos adicionar coisas como essa em outras partes do nosso aplicativo, especialmente aquelas em que aceitamos entrada.

06:49.510 --> 06:57.760
Felizmente para nós, isso é para o nosso registo e depois também temos o nosso login.

06:57.760 --> 07:05.430
E então, para o login, podemos simplesmente copiar e colar e aqui usamos o email do ponto

07:05.550 --> 07:10.740
e senha para que possamos simplesmente reestruturá-lo

07:13.540 --> 07:17.310
senha do corpo do ponto de solicitação

07:20.360 --> 07:21.390
vamos remover o nome

07:25.190 --> 07:34.300
e novamente e vamos apenas remover o corpo do ponto de pedido destes apenas para torná-lo um pouco mais limpo.

07:34.460 --> 07:37.270
E se eu salvar isso, isso deve funcionar também.

07:37.640 --> 07:40.610
Vamos assinar, verifique se não posso fazer login.

07:40.730 --> 07:41.260
Perfeito.

07:41.270 --> 07:51.570
E se eu for para Wes no gmail dot com Um dois três, faça login.

07:51.590 --> 07:54.550
Tudo bem, então essa é a primeira parte da segurança que eu queria cobrir.

07:54.890 --> 07:59.170
Há obviamente mais algumas coisas que podemos fazer aqui, mas acho que você entendeu.

08:00.570 --> 08:09.160
A próxima coisa, e outra grande falha em nosso aplicativo, é que quando enviamos uma imagem, vamos pegar esse

08:12.200 --> 08:14.880
e vamos abrir a aba.

08:15.320 --> 08:18.020
A guia de rede aqui, clique em detectar

08:20.930 --> 08:25.600
e se você olhar bem para o ponto final da imagem, quando nós cuidarmos disso.

08:25.610 --> 08:31.560
Mas se você olhar para as saídas, é para isso que estamos pedindo clarifai API para o pedido.

08:31.580 --> 08:43.650
Se eu clicar sobre isso e olhar para os cabeçalhos e eu olhar para a autorização eu recebo a chave com DCB17e ...

08:43.690 --> 08:49.290
E se eu voltar para o Front-End e sob app dot js

08:55.810 --> 08:58.170
DCB17e ...

08:58.180 --> 08:59.970
Essa é a nossa chave de API.

09:00.390 --> 09:03.520
Estamos criando nossa chave de API, que no meu caso é gratuita.

09:03.520 --> 09:11.190
Mas quando você usa uma API que custa dinheiro, alguém pode roubar essas informações e usar sua API

09:11.350 --> 09:19.690
para apenas carregar essa API com pedidos e fazer você pagar muito dinheiro e você nunca quer fazer isso quando

09:19.690 --> 09:22.090
você está jogando como desenvolvedor em seu próprio projeto.

09:22.090 --> 09:23.230
Isso é bom.

09:23.590 --> 09:26.560
Mas coisas assim não deveriam acontecer.

09:26.560 --> 09:31.880
Então, uma coisa que podemos fazer para evitar isso é realmente mover isso para o backend em vez do front end.

09:32.200 --> 09:33.510
Deixe-me mostrar-lhe como podemos fazer isso.

09:36.800 --> 09:44.390
Nós vamos voltar para o nosso front end e no nosso front end eu vou copiar o clarifai

09:44.390 --> 09:49.440
informações para o Backend e removê-lo do front-end.

09:49.910 --> 09:56.490
Então, se você se lembra, precisamos apenas instalar clarifai no back end, então eu vou parar o servidor e

09:56.490 --> 10:02.370
fazer NPM instalar clarifai para que tenhamos o pacote dot json

10:06.500 --> 10:14.230
Vamos importá-lo desta vez usando require.

10:14.250 --> 10:16.200
Então vamos para a nossa imagem

10:19.250 --> 10:29.860
e, em seguida, a imagem de alça vamos apenas importar e, em vez de importar, vamos fazer Const Clarifai é igual a exigir

10:32.150 --> 10:41.550
Clarifai e vamos apenas copiar exatamente o que temos em nosso aplicativo e deseja remover isso vai cortar

10:41.550 --> 10:42.120
isso fora

10:46.840 --> 10:48.730
use nossa chave de API aqui.

10:52.680 --> 11:01.940
Em seguida, rolando para baixo, vamos dar uma olhada em onde usamos a nossa chave de API no nosso caso, é aqui app.models.

11:02.280 --> 11:08.940
E aqui queremos apenas fazer o clarifai e depois pegar nossa resposta.

11:09.090 --> 11:11.210
Então essa parte inferior nós podemos manter.

11:11.210 --> 11:19.620
Nós só precisamos da chamada clarifai para agora vir do backend, então vamos copiar isso.

11:19.670 --> 11:20.900
Volte para o nosso back endand

11:24.110 --> 11:31.320
vamos colocar isso no lugar porque temos app agora a partir da nova instanciação de clarifai e vamos agora

11:31.320 --> 11:33.500
precisa pegar a entrada.

11:33.570 --> 11:40.210
Então parece que vamos precisar de um novo endpoint. Vamos limpar isso um pouco e prever

11:42.580 --> 11:43.380
clarifai

11:46.470 --> 11:49.950
vamos fazer isso aqui só para vermos melhor. Eu vou minimizar isso um pouco

11:52.860 --> 12:03.780
e modelos de pontos de aplicativos prevêem que vamos prevê-lo com a nossa entrada de ponto de corpo de ponto de solicitação que, obviamente,

12:03.780 --> 12:04.470
não tem.

12:04.490 --> 12:09.980
Mas agora sabemos que precisamos da entrada e podemos envolver isso em uma função como esta.

12:10.140 --> 12:20.560
Nós podemos dizer const handleApiCall e este receberá um pedido de resposta

12:25.280 --> 12:30.230
e vamos apenas mudar isso aqui.

12:30.300 --> 12:39.550
Então, agora podemos apenas dizer lidar com a API na parte inferior aqui e no nosso servidor, podemos criar um novo

12:39.550 --> 12:48.710
endpoint para Image e podemos fazer um pedido de post porque vamos adicioná-lo ao nosso corpo de ponto de solicitação e

12:48.710 --> 12:50.540
nós vamos chamar isso de imageurl

12:50.570 --> 12:59.900
e o endpoint imageurl terá o handleApiCall.

13:00h.040 --> 13:07.240
Não vai precisar do banco de dados. Definitivamente precisamos importá-lo, mas já o temos no objeto de imagem.

13:07.240 --> 13:17.220
OK, então se eu salvar isso, agora precisamos ter certeza de que receberemos o corpo com a URL, então vamos

13:17.220 --> 13:18.940
o front-end.

13:19.190 --> 13:28.980
Vamos dizer que ao enviar precisamos buscar e vamos apenas copiar isso.

13:28.980 --> 13:36.780
O que temos aqui por agora. Queremos buscar o imageurl.

13:37.010 --> 13:49.310
Vai ser um método post e teremos um json de entrada e essa entrada será simplesmente que isso

13:49.310 --> 14:01.700
entrada de estado DOT. Isso vai nos dar uma resposta e essa resposta vai continuar assim.

14:01.810 --> 14:08.220
Mas tenha em mente que, porque isso é uma busca, teremos que responder json.

14:08.470 --> 14:16.550
Então, isso é simples o suficiente para fazer, vamos corrigir o recuo aqui e vamos fazer um ponto, em seguida, a resposta é igual

14:18.530 --> 14:19.760
resposta ponto Jason

14:22.420 --> 14:28.510
Vamos salvar e vamos querer voltar e ter certeza de que isso está funcionando.

14:28.510 --> 14:41.660
Então, vamos ao nosso servidor ir para a imagem e ter certeza de que estamos respondendo aqui com ponto, em seguida, dados e

14:41.660 --> 14:43.180
esses dados terão uma resposta dot json

14:43.260 --> 14:51.470
De dados. Tudo o que isso nos dá. Se houver algum tipo de erro, faremos uma captura.

14:54.470 --> 14:56.420
Eu vou dizer status de resposta 400.

14:59.050 --> 15:00.810
Nós vamos fazer.

15:00.810 --> 15:12.900
json "incapaz de trabalhar com API". Vamos salvar. Vamos ver se isso funciona pela primeira vez.

15:12.900 --> 15:24.930
Geralmente não, mas se nós entrarmos com o login do Wes no Gmail ponto 1 2 3, nós temos um pequeno problema.

15:25.420 --> 15:29.060
Vamos ao consol - não conseguimos buscar

15:32.090 --> 15:38.040
Oh, precisamos realmente iniciar o nosso servidor NPM.

15:38.110 --> 15:39.510
Tudo bem e agora temos alguns erros.

15:39.520 --> 15:40.660
Tudo bem.

15:40.660 --> 15:47.510
Temos faltando parênteses, então estamos apenas fizemos um erro de sintaxe aqui e isso é porque

15:47.510 --> 15:50.270
Eu esqueci um período aqui.

15:50.270 --> 15:51.390
Vamos salvar isso.

15:51.920 --> 15:58.810
E se formos para nossos front ends em execução, o back end está em execução. Vamos fechar isso e tentar novamente.

16:00.170 --> 16:01.190
Tudo bem, eu estou conectado.

16:01.250 --> 16:09.680
Se eu copiar esta imagem novamente. Momento da verdade.

16:09.790 --> 16:10.180
Tudo bem.

16:10.180 --> 16:17.820
Estamos recebendo a imagem, mas a resposta - algo não está funcionando. Nós falhamos em buscar a resposta do servidor

16:17.900 --> 16:20.390
com um status de 500.

16:20.390 --> 16:24.140
Então, nós temos um erro no servidor e parece que

16:26.740 --> 16:29.620
lidar com chamada de API não é uma função.

16:29.650 --> 16:39.010
Então vamos para o servidor e meu erro ortográfico terrível novamente. Isso sempre te deixa com a ortografia.

16:39.040 --> 16:41.150
Vamos tentar mais uma vez.

16:41.340 --> 16:47.710
Vamos limpar isso e detectar. Sem erros.

16:47.750 --> 16:48.480
Tudo bem.

16:48.570 --> 16:49.410
Olhe para isso.

16:49.680 --> 16:51.120
Está funcionando.

16:51.120 --> 16:52.100
Surpreendente.

16:52.530 --> 16:59.340
Não vejo erros na minha API ou no front end.

16:59.420 --> 17:00.510
Então isso não foi ruim.

17:00.590 --> 17:08.100
E se eu realmente voltar ao pedido, vá para a guia de rede e vamos verificar isso eu vou pressionar

17:08.100 --> 17:12.810
detectar se vou para o imageurl.

17:13.060 --> 17:15.560
Nós não estamos vendo nenhuma das nossas chaves.

17:15.580 --> 17:21.780
A única coisa que estamos vendo é uma resposta que é a resposta que recebemos do clarifai, mas o nosso servidor

17:21.780 --> 17:25.850
está sendo executado em nosso próprio ambiente e ninguém tem acesso a ele.

17:27.290 --> 17:30.110
Então vamos repassar o que acabamos de fazer.

17:30.200 --> 17:39.720
Criamos um novo endpoint e porque agora temos nossos próprios controladores e é sobre a imagem que

17:39.720 --> 17:46.500
pode adicioná-lo aos controladores de imagem e dentro dos controladores de imagem criamos uma nova função e apenas

17:46.500 --> 17:54.480
praticamente copiar e colá-lo exatamente como nós tivemos na frente e nós respondemos com dados Json e

17:54.480 --> 17:59.400
esses dados do Json agora estão sendo enviados como resposta ponto Json.

17:59.790 --> 18:09.920
Então, no front end, simplesmente criamos uma solicitação de busca que enviou a entrada e respondemos com uma resposta.

18:10.290 --> 18:14.630
Então, não mudou muito no front end, exceto pelo fato de que agora estamos escondendo a chave da API.

18:14.760 --> 18:21.030
E em vez de ter clarifai aqui, temos no backend.

18:21.280 --> 18:26.630
Espero que tenha algumas dicas valiosas de segurança para você.

18:26.650 --> 18:31.130
Há muitas coisas quando se trata de segurança e é definitivamente algo que você precisa

18:31.130 --> 18:35.190
usado como você tem mais e mais anos de experiência.

18:36.250 --> 18:43.900
Mas ter essa regra geral de garantir que sua máquina ou, no nosso caso, sua base de código de frente

18:43.900 --> 18:49.210
final e volta e nunca confia na segurança do outro sempre se concentra e certifique-se de que o que quer

18:49.220 --> 18:55.650
as entradas que obtém de outros locais fora de si são sempre validadas.

18:55.780 --> 19:00.510
E protegemos os segredos que temos do mundo exterior.

19:00.610 --> 19:04.760
Nunca confie em ninguém é o lema da segurança.

19:05.570 --> 19:08.680
Então, espero que tenha sido perspicaz e eu vou ver no próximo vídeo.

