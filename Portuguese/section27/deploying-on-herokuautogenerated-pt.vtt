WEBVTT

00:00.840 --> 00:08.140
Bem vindo de volta! É hora de realmente implantar nosso aplicativo no qual trabalhamos tanto.

00:08.220 --> 00:15.640
Agora, até este ponto todo o nosso projeto, todo o nosso lindo aplicativo acaba de viver em nossos laptops.

00:15.930 --> 00:20.560
Se quiséssemos mostrá-lo a alguém, seria necessário instalá-lo em nosso laptop.

00:20.820 --> 00:22.790
Mas isso não é realmente correto.

00:22.800 --> 00:30.810
Se algum dia quisermos obter usuários e divulgar nosso projeto, precisamos disponibilizá-lo on-line

00:30.810 --> 00:33.820
para todos e vamos fazer isso nesta seção.

00:34.110 --> 00:39.240
Se você se lembra, temos a parte frontal pronta para reagir.

00:39.240 --> 00:47.490
Nós temos nosso servidor de back-end que tem uma bela API criada pelo nó no Express e também temos nossa

00:47.490 --> 00:55.470
banco de dados postgres configurado e nós vamos estar configurando cada um desses retângulos que você lembra

00:55.510 --> 00:57.910
deve ser computadores separados.

00:58.030 --> 01:03.580
Vamos implantá-los separadamente para que eles possam se comunicar e saibam onde cada

01:03.580 --> 01:07.620
outras vidas, não importa onde cada um deles é.

01:07.630 --> 01:15.970
Contanto que eles tenham essa conexão e nós estaremos implantando em um lugar chamado Heroku e Heroku

01:15.970 --> 01:24.740
é apenas uma empresa que tem uma tonelada de computadores e eles estão dispostos a hospedar os arquivos que lhes damos

01:25.580 --> 01:30.680
para nós e eu vou estar andando por você e você pode estar se perguntando por que não estamos usando

01:30.680 --> 01:33.870
algo como HostGator ou algo que eu já ouvi falar antes.

01:34.250 --> 01:42.290
Bem HostGator ou hosts azuis ou a maioria das plataformas de hospedagem que você já ouviu falar são estas plataformas simples

01:42.290 --> 01:44.300
sobre o que falamos antes.

01:44.300 --> 01:48.700
Eles geralmente têm um servidor Apache que está apenas hospedando arquivos.

01:48.770 --> 01:55.160
Então eles são realmente bons em hospedar e servir projetos baseados em HTML realmente simples.

01:55.190 --> 02:02.210
Se você tem apenas uma página de informações ou um site sobre o assunto, eles são realmente úteis, talvez você tenha um WordPress

02:02.210 --> 02:08.180
Web site que é bom se você não está preocupado com os servidores e tudo é cuidado.

02:08.480 --> 02:11.300
Mas não é assim que implementamos mais aplicativos.

02:11.390 --> 02:17.540
Se você está realmente criando aplicativos que são mais complexos, precisamos de algo que nos dê mais

02:17.540 --> 02:18.430
ao controle.

02:18.710 --> 02:26.070
E há muitas opções e estas são algumas das mais famosas, como Amazon, Heroku, que nós vamos

02:26.070 --> 02:28.870
estar usando, Engine Yard, Oceano Digital.

02:28.890 --> 02:36.260
Há também o Google e a Microsoft que oferecem serviços da Web e oferecem uma tonelada de coisas diferentes

02:36.530 --> 02:38.260
que realmente não precisamos entrar.

02:38.270 --> 02:43.870
Há uma indústria especial chamada operações de desenvolvimento que realmente se concentra nesse domínio.

02:44.840 --> 02:50.020
Mas queremos saber como funciona para que, quando a encontrarmos, possamos explorar mais e compreendê-la.

02:50.990 --> 02:55.580
No final do dia, estes são apenas computadores gerenciados por essas empresas.

02:55.580 --> 03:00.230
Eles permitem que você execute seus arquivos em seu computador e, em troca,

03:00.320 --> 03:01.550
Bem, nós pagamos a eles.

03:01.550 --> 03:06.310
Mas eles também se certificam de que os computadores vão rodar muito rápido.

03:06.320 --> 03:10.850
E se estivermos executando algo como postgresql ou um banco de dados, eles tentarão e farão o melhor possível

03:10.850 --> 03:16.880
para se certificar de que não vai cair ou que há backups e você vai estar ouvindo muito sobre

03:17.480 --> 03:19.030
esse tipo de empresa muito.

03:19.040 --> 03:25.060
Quando você entra no campo de desenvolvimento da Web, estamos usando o Heroku aqui porque ele é realmente amigável ao desenvolvedor.

03:25.070 --> 03:31.330
E eles também oferecem um nível gratuito que é ótimo para projetos como este apenas para fins de demonstração.

03:31.470 --> 03:38.610
Se você for ao site deles, eles têm uma documentação realmente boa e é muito simples de configurar.

03:38.640 --> 03:43.140
Então, vou em frente e digo para você se inscrever para isso.

03:43.140 --> 03:44.330
É completamente grátis.

03:44.400 --> 03:52.240
Assim que fizer o login, você será direcionado para algo como este seu painel pessoal e você pode

03:52.250 --> 03:54.840
veja você pode usar diferentes idiomas para implantar.

03:54.900 --> 04:01.710
No nosso caso, estamos usando o nó e podemos apenas clicar no nó e nos levará à documentação que

04:01.710 --> 04:05.720
nos leva do zero até o nosso aplicativo ser implantado.

04:05.980 --> 04:10.560
Mas você não precisa passar por tudo isso porque é muito simples.

04:10.660 --> 04:11.550
Deixe-me te mostrar.

04:11.800 --> 04:17.190
Eu vou linkar toda esta documentação depois desse vídeo para que você possa dar uma olhada por si mesmo.

04:17.350 --> 04:24.400
Mas é realmente muito fácil se você for para a documentação e implantar com o Git

04:27.320 --> 04:29.240
é tão simples quanto alguns comandos.

04:31.160 --> 04:33.860
Diz-lhe que essencialmente precisamos de duas coisas.

04:34.480 --> 04:37.140
Nós precisamos do Git que já temos.

04:37.330 --> 04:38.250
E Heroku

04:38.380 --> 04:40.020
Então vamos falar sobre o nosso plano de jogo.

04:42.620 --> 04:49.390
Nós vamos colocar nosso servidor no Heroku e também nosso banco de dados postgres no Heroku e no Front-End

04:49.400 --> 04:50.440
o aplicativo reagir.

04:50.570 --> 04:56.450
Podemos colocá-lo em qualquer lugar, mas podemos usar as páginas do Github que usamos antes para o gerador de segundo plano

04:56.450 --> 04:58.500
projeto porque é grátis.

05:00.380 --> 05:04.700
Vamos olhar para a API primeiro, porque essa é a mais importante, acho que é o conector do

05:04.700 --> 05:08.090
dois.

05:08.260 --> 05:09.810
Nós já temos o Git instalado.

05:09.910 --> 05:17.320
Então, vamos começar Heroku CLI, que é a interface de linha de comando que é que podemos usá-lo no terminal para

05:19.150 --> 05:20.270
instale-o.

05:20.560 --> 05:28.630
Agora, antes de entrarmos nisso, fui em frente e coloquei nossa API no Github para ter certeza de que podemos realmente

05:28.630 --> 05:31.510
execute estes comandos e certifique-se de que este é um projeto do Git.

05:31.540 --> 05:35.090
Fui em frente e fiz isso sem gravá-lo porque já passamos por isso antes.

05:35.110 --> 05:36.790
Eu não queria te entediar com isso.

05:36.790 --> 05:38.880
Você deve saber como fazer isso agora.

05:40.950 --> 05:43.090
Então olhe para o Heroku CLI.

05:43.290 --> 05:49.570
Temos sistemas operacionais Mac Windows e Ubuntu nos quais podemos executá-lo.

05:49.570 --> 05:50.820
Então, novamente eu vou ligar para estes.

05:50.830 --> 05:53.860
E você pode decidir qual caminho você quer instalar você mesmo.

05:54.310 --> 05:55.240
Para mim é um Mac.

05:55.240 --> 06:01.230
Então eu vou usar o brew install e instalar esta linha de comando.

06:01.500 --> 06:06.380
Quer dizer, como você pode ver aqui eu já tenho isso instalado, mas para você pode demorar um pouco

06:06.380 --> 06:11.400
mais tempo e uma vez feito isso vai dizer que está instalado e se divertir um pouco.

06:13.340 --> 06:13.570
Tudo bem.

06:13.580 --> 06:15.320
Então temos o Heroku instalado.

06:15.440 --> 06:23.530
Se voltarmos para a documentação, ele informa como adicionar seu aplicativo ao Git, que já conhecemos.

06:23.540 --> 06:31.990
Então podemos pular e diz que precisamos apenas executar o Heroku create para criar um aplicativo.

06:32.100 --> 06:37.480
Entramos em nosso diretório e simplesmente executamos o Heroku create

06:40.480 --> 06:48.390
E olha isso! Ele criou nosso aplicativo, até nos deu um URL que podemos alcançar nosso aplicativo.

06:48.400 --> 06:49.640
Tudo bem, incrível.

06:49.700 --> 06:56.360
Mas para que possamos usar isso, vamos a essa URL e ver se funciona.

06:57.310 --> 07:03.490
Podemos usar o Heroku para nos levar a este link.

07:03.510 --> 07:04.500
Vamos ver o que acontece.

07:05.840 --> 07:14.030
Diz que não conseguiu encontrar esse aplicativo. Porque nós realmente temos mais alguns passos, temos que realmente implantar o

07:14.030 --> 07:19.650
aplicativo e a maneira como implantamos temos que primeiro verificar algo chamado Git remote.

07:19.700 --> 07:21.980
E é algo que realmente não falamos.

07:22.070 --> 07:23.470
Mas deixe-me mostrar-lhe o que é.

07:24.560 --> 07:30.550
Se pudermos traçar o traço remoto V, temos ...

07:30.580 --> 07:31.510
Deixe-me abrir isso.

07:31.510 --> 07:33.520
Torne isso um pouco maior.

07:33.520 --> 07:34.130
Ai está.

07:35.880 --> 07:40.420
Nós vemos que temos Heroku e origem.

07:40.440 --> 07:49.530
Até este ponto, quando você trabalha com o Git, o padrão é origem, então você pode fazer comandos como o mestre de origem do Git push.

07:49.530 --> 07:58.610
Isso significa que estamos empurrando para Origin, que é o Github e estamos empurrando para o branch master e

07:58.610 --> 08:03.380
origin é apenas o nome padrão que o Github possui. Nós poderíamos ter feito o comando

08:03.380 --> 08:08.960
Apenas o Git push porque o padrão é sempre origin e master.

08:09.110 --> 08:12.030
Então, esse era apenas o modo abreviado de fazê-lo.

08:12.110 --> 08:17.990
Mas agora, porque nós executamos esses comandos Heroku, também temos Heroku agora.

08:18.010 --> 08:22.190
Então, ao invés de empurrar para o Github, podemos empurrar para Heroku

08:27.660 --> 08:33.500
Então, no nosso caso, se formos implantar o código, veremos que simplesmente executamos o Git push Heroku Master.

08:34.110 --> 08:41.870
Vamos fazer isso. Eu vou fazer o Git empurrar o mestre Heroku e ver o que acontece.

08:42.980 --> 08:49.360
Você vê aqui que eu tenho um erro e este é um erro que você pode não ter, mas porque eu usei Heroku

08:49.360 --> 08:50.080
antes.

08:51.470 --> 08:53.210
Tem um nome diferente.

08:53.210 --> 08:55.510
Você pode ver aqui "ancoradouro blindado".

08:55.510 --> 09:00.340
contra o nome que eu realmente quero que é "oceano radiante".

09:00.440 --> 09:05.450
E vemos que em nosso controle remoto também não temos o aplicativo de oceano radiante, temos outra coisa

09:05.780 --> 09:14.190
que eu criei antes. E a maneira como contornamos isso está no - para um aplicativo Heroku existente, você pode simplesmente

09:14.280 --> 09:18.600
execute este comando para renomeá-lo.

09:18.880 --> 09:25.930
Então nós fazemos Git Heroku Git remoto traço um e o nome do novo aplicativo que você deseja adicionar no nosso caso

09:26.260 --> 09:32.840
é isso.

09:32.930 --> 09:38.450
E agora, se eu fizer o traço remoto do Git V.

09:38.670 --> 09:43.830
Tudo bem, eu tenho o oceano radiante como meu aplicativo e não se preocupe se isso é confuso.

09:43.840 --> 09:48.430
É só uma questão de ler documentação.

09:48.510 --> 09:53.970
É muito específico para Heroku e algo que você vai se acostumar, mas agora nosso aplicativo está apontando no

09:53.970 --> 09:55.280
direção correta.

09:55.350 --> 09:56.230
Então vamos tentar de novo.

09:56.230 --> 10:01.720
Nós vamos tentar e empurrar o mestre Heroku mais uma vez.

10:04.770 --> 10:05.490
Tudo bem.

10:05.520 --> 10:06.610
Parece que está correndo.

10:06.630 --> 10:14.190
E você pode ver aqui nós estamos criando um ambiente, estamos instalando um monte de coisas que está instalando

10:14.190 --> 10:22.380
módulos de nó para que ele esteja executando o NPM install para nós e configurando tudo e dizendo que a implantação foi concluída.

10:22.380 --> 10:23.480
Impressionante.

10:23.490 --> 10:26.470
Vamos abrir o Heroku e ver se isso realmente funciona.

10:32.410 --> 10:34.390
E está apenas pendurado lá.

10:35.360 --> 10:37.630
E não se preocupe, eu fiz isso de propósito.

10:37.640 --> 10:43.310
A razão pela qual não está funcionando é que, em vez de eu dizer, vamos descobrir o que realmente está acontecendo.

10:43.420 --> 10:50.750
Há outro comando que podemos usar, que é Heroku logs dash dash tail.

10:50.900 --> 10:55.530
E isso nos dá um log sobre o que está acontecendo neste computador onde o servidor está rodando.

10:59.840 --> 11:02.860
Bem, parece que tudo está correndo.

11:04.000 --> 11:09.970
O servidor de nós está escutando a porta 3000.

11:10.100 --> 11:11.590
Nós vemos que temos um erro agora.

11:11.590 --> 11:19.890
Portanto, parece que estamos obtendo um tempo limite de inicialização e dizendo que o processo da Web falhou ao vincular à porta.

11:20.000 --> 11:26.860
E isso é algo que você lerá no read me ou na documentação do Heroku. O que está acontecendo aqui

11:26.860 --> 11:34.280
é que o Heroku tem sua própria porta que ele atribui.

11:34.450 --> 11:40.300
E como já falamos sobre variáveis ​​ambientais antes, porque estamos definindo nossa porta para ouvir

11:34.280 --> 11:48.820
3000 aqui Heroku quer seu próprio porto, não necessariamente se preocupa com 3000, tem sua própria coisa.

11:48.820 --> 11:58.150
Então, a maneira como podemos contornar isso é que podemos usar o processo dot dot Dot PORT para que, se recebermos uma porta de

11:58.150 --> 12:04.870
o ambiente em que estamos correndo, neste caso Heroku executar que, caso contrário, execute porta três mil

12:06.250 --> 12:23.730
e podemos alterar o aplicativo está sendo executado na porta 3000 para algo mais dinâmico, como o ponto de env ponto ponto de env.

12:23.750 --> 12:25.080
Tudo bem, vamos voltar.

12:26.510 --> 12:27.120
E corra

12:30.990 --> 12:32.480
Git empurrar mestre Heroku.

12:32.700 --> 12:33.580
Mas aqui está a coisa.

12:33.750 --> 12:35.530
Porque estamos passando pelo Git.

12:35.580 --> 12:41.380
Nós realmente temos que adicionar essas alterações ao nosso repo, então estamos empurrando tudo.

12:41.400 --> 12:49.290
Se executarmos este comando por si só, diremos que tudo está atualizado porque não fizemos o

12:49.290 --> 12:51.150
Git ADD Git commit comandos.

12:51.250 --> 13:07.480
Então vamos fazer isso Git adicionar Git commit adicionando port e então vamos fazer o git empurrar Heroku master. Ele vai percorrer

13:07.660 --> 13:10.000
os comandos novamente.

13:10.180 --> 13:12.860
Ele está reimplantando todo o servidor.

13:13.150 --> 13:15.790
E se formos ao Heroku abrir

13:19.660 --> 13:25.440
parece que estamos pendurados novamente e temos erro interno no servidor.

13:25.450 --> 13:26.510
Vamos dar uma olhada nos logs.

13:27.830 --> 13:33.010
Nós vamos novamente para a cauda de troncos de Heroku.

13:33.250 --> 13:37.290
E isso é um pouco complicado se você rolar até aqui.

13:37.550 --> 13:39.520
Queremos ir para o aplicativo.

13:39.570 --> 13:39.820
ESTÁ BEM.

13:39.830 --> 13:44.900
Então o nodemon está rodando, o aplicativo está rodando na porta 9098.

13:45.120 --> 13:51.500
Mas se você continuar descendo após o NPM iniciar, obteremos um erro de referência - o banco de dados não está definido.

13:51.670 --> 13:54.200
E esse algo que deixei de propósito.

13:54.980 --> 13:59.710
Só para mostrar como funciona a depuração, onde você tem que olhar através dos logs.

13:59.960 --> 14:06.320
Se você se lembra de que não estamos mais usando o banco de dados que criamos, a primeira variável.

14:06.320 --> 14:14.010
E porque o nosso aplicativo quando ele carrega pela primeira vez vai para a rota raiz que vai executar este comando e é

14:14.010 --> 14:16.010
vai dizer bem banco de dados não existe.

14:16.020 --> 14:17.950
Eu não sei do que você está falando.

14:17.950 --> 14:21.900
Então, para consertar isso, vamos apenas mudar isso para.

14:22.140 --> 14:24.260
Está funcionando.

14:24.330 --> 14:30.080
Se salvarmos e sim, infelizmente, temos que passar pelos nossos comandos do Git novamente.

14:30.090 --> 14:33.300
Nós estamos indo para o Git add Git commit

14:35.570 --> 14:45.720
mudando a resposta e o Git push Heroku Master

14:45.740 --> 14:46.590
Tudo bem.

14:46.800 --> 14:51.860
Então, passando por alguma mágica e vamos fazer o Heroku abrir

14:58.150 --> 14:58.960
está funcionando.

14:58.960 --> 15:06.310
Nosso aplicativo agora está neste local e podemos acessá-lo usando isso.

15:06.310 --> 15:07.590
Vamos testar essa teoria.

15:07.690 --> 15:14.090
Vamos adicionar isso em vez de nosso host local ao nosso aplicativo front-end e, a propósito, se você for ao Heroku

15:14.090 --> 15:17.070
painel que eu posso usar aqui

15:20.030 --> 15:23.510
e vemos que meu aplicativo está em execução.

15:23.510 --> 15:26.210
Tem todos os logs que eu preciso.

15:26.480 --> 15:29.120
Eu posso olhar para métricas, eu posso olhar para a atividade

15:32.260 --> 15:35.780
você pode olhar para o processo de implantação e adicionar coisas diferentes.

15:35.780 --> 15:37.550
Há tanta coisa que você pode fazer.

15:37.600 --> 15:39.050
É muito legal mesmo.

15:39.310 --> 15:43.550
Mas vamos testar nossa suposição para garantir que nosso aplicativo realmente funcione.

15:44.330 --> 15:48.860
Eu tenho o aplicativo cérebro inteligente em execução aqui.

15:48.870 --> 15:51.120
Vamos abrir o apt js

15:52.690 --> 15:58.920
E eu faço isso um pouco menor para que possamos ver e onde fazemos nossas buscas vamos mudar

15:58.950 --> 16:05.000
localhost, que é o nosso computador para o endpoint real.

16:05.460 --> 16:06.630
Vamos copiar o endpoint

16:09.230 --> 16:11.750
que Heroku nos deu.

16:18.890 --> 16:23.390
E mude para todos os locais de localhost.

16:23.390 --> 16:24.310
Então nós temos isso.

16:24.320 --> 16:29.530
E se você lembrar, também temos o registro e o login também.

16:42.710 --> 16:50.150
Apenas para confirmar com você o que acabamos de fazer. Nós basicamente acabamos de dizer ao front end onde essas flechas

16:50.150 --> 16:58.050
deve apontar e deve apontar para a localização do servidor que nos foi fornecido por Heroku.

16:58.050 --> 16:59.930
Tudo bem, então vamos tentar.

16:59.940 --> 17:01.910
Eu vou rodar o NPM start

17:06.670 --> 17:10.350
e espero que tudo esteja funcionando como queremos.

17:11.180 --> 17:15.040
Se fizermos login ou apenas clicarmos em suspirar.

17:15.120 --> 17:16.110
Nada acontece.

17:16.110 --> 17:18.190
Então precisamos registrar alguém.

17:18.240 --> 17:22.980
Nós vamos com Todd Todd no gmail dot com.

17:23.040 --> 17:26.200
Um dois, dois registre-se.

17:26.280 --> 17:27.070
Oh nós recebemos um erro.

17:27.090 --> 17:27.900
Vamos ver o que temos.

17:30.030 --> 17:34.430
Se formos para o console - servidor respondeu com status de 400.

17:34.430 --> 17:37.910
Pedido ruim. vamos olhar para a rede e ver o que acontece.

17:38.880 --> 17:39.860
Eu clico em registrar

17:43.110 --> 17:51.180
e não conseguimos registrar o que é realmente um sinal muito bom porque é isso que temos

17:51.180 --> 17:51.800
escrito.

17:51.900 --> 17:58.980
Lembre-se no nosso servidor nós dissemos que quando tentamos nos registrar

18:01.600 --> 18:03.990
se falhar, queremos voltar.

18:04.030 --> 18:06.800
Não é possível se registrar.

18:06.820 --> 18:10.240
Então, na verdade, está se conectando ao nosso front end.

18:10.600 --> 18:11.410
Isso é incrível

18:12.100 --> 18:20.130
Mas você pode notar um problema. Isso é o fato de que não temos mais um banco de dados porque

18:20.130 --> 18:24.400
banco de dados e o backend é referência,

18:24.530 --> 18:37.240
Se você se lembra do nosso localhost, mas como esse computador agora mora em algum lugar no Heroku, ele não faz ideia.

18:37.330 --> 18:44.110
Bem, pode saber o que localhost é, mas eles definitivamente não têm um banco de dados chamado cérebro inteligente que eles.

18:44.120 --> 18:49.270
Então agora vamos criar um banco de dados postgres no Heroku.

18:49.580 --> 18:52.190
Mas esse vídeo já está ficando um pouco longo demais.

18:52.370 --> 18:54.010
Então, é para o próximo vídeo.

18:54.320 --> 18:56.180
Eu vou te ver naquele Bye-Bye.
