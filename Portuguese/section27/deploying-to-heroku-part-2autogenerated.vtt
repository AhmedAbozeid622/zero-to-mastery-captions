WEBVTT

00:01.460 --> 00:02.480
Welcome back.

00:02.480 --> 00:09.380
We left off with Todd unable to register to our app because our backend server is not connected to any

00:09.380 --> 00:10.420
database.

00:10.910 --> 00:15.200
Luckily for us Heroku also has postgreSQL..

00:15.230 --> 00:27.120
If I go to my dashboard here and let's go to personal and in this corner we have data. We click on data

00:29.420 --> 00:36.470
and it says hey looks like you don't have any data stores yet and we have Heroku postgres Redis 

00:36.500 --> 00:40.010
and Kafka but postgres is what we need right.

00:40.980 --> 00:51.820
So let's create one and we can just log in with the same credentials the same thing that we had for

00:51.820 --> 01:02.480
our server and we can simply just install Heroku postgres and look at that.

01:02.520 --> 01:13.580
It already knows which application we want to install it to. So let's click on that click continue.

01:13.690 --> 01:17.420
And now we just pick the hobby dev which is free.

01:17.590 --> 01:19.430
We click on provision.

01:19.450 --> 01:19.840
There you go.

01:19.840 --> 01:24.840
It says the addon Heroku postgres has been successfully installed.

01:24.870 --> 01:29.560
Check out the documentation to get started.

01:29.610 --> 01:31.090
That's awesome to hear.

01:31.230 --> 01:42.650
Let's open it up and once again they have amazing documentation of how we can set up everything.

01:42.700 --> 01:47.440
So looking at here the first thing we want to run is Heroku addons to make sure that we actually have

01:47.440 --> 01:47.820
it.

01:48.220 --> 01:49.780
Let's go back to our server.

01:49.810 --> 01:57.420
I'm going to clear this and run Heroku addons and make this a little bit bigger.

01:58.530 --> 02:01.060
All right we have Heroku postgres.

02:01.200 --> 02:01.950
That's great.

02:05.030 --> 02:15.800
If we actually scroll down we see that we can run the CLI with Heroku PG info.

02:15.850 --> 02:16.520
So let's do that.

02:16.540 --> 02:30.910
I want to say Heroku PG info and I'll show that yep this is our postgres and we can connect to

02:30.910 --> 02:38.970
it by running PG psql just like we did on our laptop.

02:39.190 --> 02:39.980
Let's do that.

02:40.300 --> 02:45.170
I'm going to say Heroku PG PSQL

02:48.900 --> 02:51.840
and look af that - we're in our database.

02:52.710 --> 02:56.120
So let's recreate the database that we had originally.

02:56.310 --> 03:06.680
We can simply go back to our PSQL because PSQL is smart enough to remember our commands.

03:06.930 --> 03:14.330
And if we go to Query. There you go we have our create table commands ready.

03:14.510 --> 03:18.330
So let's create a login table.

03:22.840 --> 03:35.800
Perfect and let's create a the user tables well or a users table I'll copy this go back to Heroku and

03:35.800 --> 03:41.470
create table let's do backslash d to make sure that the tables are there.

03:41.470 --> 03:41.890
All right.

03:41.950 --> 03:47.980
We have our tables and you see that the owner is well something completely different than my laptop.

03:47.980 --> 03:49.960
But there's one more key thing that we need to fix.

03:49.960 --> 03:51.210
Now we have our tables

03:54.060 --> 04:01.130
but my connection on my server is still referring to my local host.

04:01.380 --> 04:02.860
How can I change this.

04:04.350 --> 04:12.490
If we exit out of this by doing backslash Q And we do again Heroku PG info

04:17.760 --> 04:23.520
we have the add on which might be the URL but a better way for us to do this is to actually

04:23.520 --> 04:27.160
run Heroku add ons.

04:27.160 --> 04:28.800
Yeah it's the exact same one.

04:28.860 --> 04:34.260
This is the URLl that they provide for us.

04:34.260 --> 04:35.090
So let's try this.

04:35.100 --> 04:42.960
If I do this postgres within this URL this database URL in here.

04:42.960 --> 04:46.080
Will it work? Let's find out.

04:46.410 --> 04:49.310
I'm going to once again Git add.

04:49.350 --> 04:51.370
So we have to commit the changes.

04:53.690 --> 04:58.490
And I will say updating database

05:01.400 --> 05:08.080
git push Hiroko master.

05:08.110 --> 05:08.480
All right.

05:08.560 --> 05:09.770
It's deployed.

05:10.090 --> 05:12.970
Let's go back to our app and see if it works now.

05:12.970 --> 05:15.990
We have Todd at gmail dot com.

05:16.030 --> 05:19.950
I click register.

05:20.240 --> 05:27.300
We still get an error here if we go to a console here and actually network and click register again we have

05:27.300 --> 05:30.570
400 bad request unable to register.

05:30.570 --> 05:32.110
So let's take a look at the logs.

05:33.490 --> 05:39.970
If we do Heroku logs dash dash tails

05:42.630 --> 05:45.490
look at the error KNEX warning connection error.

05:45.600 --> 05:50.140
So it's not finding the host that we want.

05:50.250 --> 06:01.240
So let's go to our documentation to connecting to node dot js and we see here that with the client postgres

06:01.250 --> 06:03.970
actually just gives us a database URL here.

06:03.980 --> 06:11.600
And we also need to have SSL true here and we can read up on it a little bit more but we can just copy

06:11.600 --> 06:11.990
this

06:15.100 --> 06:33.000
remove all the database information and within the host we can say process dot env dot DATABASE_URL

06:33.140 --> 06:35.440
Let's save.

06:35.640 --> 06:38.630
We'll have to git add this again.

06:39.360 --> 06:44.710
Git commit adding database

06:47.290 --> 06:53.250
connection and we'll all Git push Heroku to Master

06:53.490 --> 06:57.930
And while this is loading I really want to go through the fact that this is one of those things that

06:57.930 --> 07:04.530
you just have to read and it's so platform specific that just because you learn this one way on Heroku

07:04.530 --> 07:09.690
doesn't mean it works on the others but it's all a matter of just reading documentation and being comfortable

07:09.690 --> 07:10.160
with that.

07:11.030 --> 07:16.670
Let's do Heroku logs here to keep an eye on make sure everything is working.

07:16.670 --> 07:20.590
All right we have a port so let's go back to our app.

07:20.610 --> 07:22.910
I'm going to close the console for now.

07:22.950 --> 07:28.180
Click register and it looks like it's still not working.

07:28.190 --> 07:32.980
If we open up the network click register we have the bad request.

07:33.090 --> 07:38.630
If we go back to the logs we have a KNEX warning again connection error.

07:38.630 --> 07:42.980
This is a good time to use another command which is Heroku config

07:45.930 --> 07:53.270
and Heroku config actually gives us the database your real and this database URL.

07:53.270 --> 08:00.670
Well you see that they're using Amazon AWS But you see here in the KNEX warning that we're actually

08:00.670 --> 08:08.530
getting that link so looks like we need to actually use the connection string exactly like they have

08:08.530 --> 08:09.480
told us.

08:09.820 --> 08:12.370
So we forgot to do that let's do a connection string here.

08:12.370 --> 08:13.100
Whoops.

08:13.150 --> 08:16.330
Let's copy this connection string.

08:17.160 --> 08:20.660
And now it's getting repetitive.

08:20.680 --> 08:25.890
But this is how a debugging session usually works.

08:25.890 --> 08:28.830
I'm just going to do a quick commit here.

08:29.000 --> 08:30.700
Git push Heroku master.

08:30.720 --> 08:31.100
All right.

08:31.110 --> 08:32.320
And let's give that another go.

08:32.320 --> 08:35.170
Let's actually try registering now.

08:35.260 --> 08:36.070
So we'll do Jenny

08:40.820 --> 08:49.580
Jenny at gmail dot com we'll do one two three register and Jenny is logged in.

08:49.760 --> 08:50.290
Awesome.

08:50.310 --> 08:51.000
It's working.

08:51.030 --> 08:57.660
If we go to the logs here we see that what we're doing post request to register and we can check out

08:57.660 --> 09:17.170
the logs and we can even go to our postgres Heroku PG PSQL do a select star from users and we

09:17.170 --> 09:20.570
have Jenny and Todd both registered.

09:20.830 --> 09:21.530
Awesome.

09:21.730 --> 09:24.980
Just to check that the login table is working as well.

09:26.110 --> 09:27.910
I have a log in Table.

09:27.910 --> 09:28.700
Nice.

09:28.720 --> 09:33.270
And then finally to get a face

09:35.850 --> 09:41.240
we'll grab another face.we'll view image.

09:41.410 --> 09:42.710
That's a big one.

09:42.710 --> 09:45.010
We'll see if it works nicely.

09:45.020 --> 09:50.830
I press detect and look that it is working.

09:50.870 --> 09:57.090
But Jennies entries is not updating.

09:57.140 --> 10:02.640
Let's go back to Jenny's profile and make sure that her information is correct.

10:02.660 --> 10:07.200
If I go to users looks like entry's is not being updated.

10:10.120 --> 10:19.160
If we look in the console logs we get failed resource on the image endpoint

10:22.190 --> 10:31.570
and if we go to the network and submit this again we see that the image endpoint is failing and this

10:31.570 --> 10:37.680
is something that again we're going to tackle in the next video.

10:37.760 --> 10:38.440
I'll see you in that one. Bye-Bye
