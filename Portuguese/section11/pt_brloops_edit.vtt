WEBVTT

00:01.210 --> 00:07.830
Bem vindo de volta. Até o momento, aprendemos sobre o código que é executado apenas de cima para baixo.

00:07.830 --> 00:14.020
Apenas em linha reta. Aprendemos sobre condicionais, onde podemos adicionar uma 'declaração if' e fazer

00:14.020 --> 00:17.380
com que ela siga um caminho ou 'else', siga o outro caminho.

00:17.710 --> 00:24.220
Também aprendemos sobre 'if else' e 'else if'.

00:24.310 --> 00:35.680
Então 'if', 'else if', 'else if', 'else'. E então, e se quiséssemos fazer algo assim? Algo em que continuamos

00:35.680 --> 00:42.280
fazendo isso repetidamente. E isso é chamado de 'loop', e é aqui que aprenderemos neste vídeo.

00:42.640 --> 00:49.750
E, como você pode ver em nosso esboço, loop de JavaScript, abordaremos tudo isso neste vídeo.

00:49.910 --> 00:50.720
Vamos começar.

00:52.480 --> 01:02.160
Eu tenho uma tag 'script' vazia aqui. Isso novamente está anexado ao nosso HTML e vamos começar com talvez uma 'lista de tarefas'.

01:02.160 --> 01:12.760
E uma lista de tarefas a fazer ... ou deve ser uma matriz. E nós queremos ter talvez "sala limpa".

01:12.880 --> 01:25.730
Queremos ter "escovar os dentes". Talvez "exercício" deva definitivamente "estudar" alguns "javascript".

01:25.790 --> 01:28.910
E finalmente, bem, devemos "comer de forma saudável".

01:29.090 --> 01:32.330
Tudo certo. Portanto, temos uma 'lista de tarefas'.

01:33.200 --> 01:39.950
Digamos que desejássemos adicionar um ponto de exclamação no final desses itens da 'lista de tarefas'.

01:39.950 --> 01:43.140
Quero dizer, tudo isso é realmente importante e queremos enfatizar isso.

01:43.170 --> 01:49.190
Mas, quero dizer, isso é meio tedioso, certo? Eu tenho que ir um por um e adicionar um ponto de exclamação, adicione

01:49.220 --> 01:50.130
um ponto de exclamação.

01:50.130 --> 01:54.310
E imagine se a 'lista de tarefas' tivesse centenas de linhas.

01:55.470 --> 01:58.410
E como programadores, queremos fazer as coisas com eficiência.

01:58.410 --> 02:00.310
É para isso que temos máquinas.

02:00.720 --> 02:06.930
Então, vamos adicionar um loop a isso. Para fazer um loop em JavaScript, uma das principais maneiras

02:06.930 --> 02:12.530
de fazer isso é chamado de 'for loop'. E você vai aprender uma nova sintaxe aqui.

02:12.540 --> 02:19.410
E esteja avisado! Parece confuso no começo, mas é uma dessas coisas novamente, você precisa fazer

02:19.410 --> 02:21.890
isso algumas vezes - e vai pegar o jeito.

02:21.900 --> 02:27.370
Portanto, o primeiro é a variável 'i' é igual a '0' que faremos.

02:27.390 --> 02:33.240
Quando 'i' é menor que 'todos. comprimento'.

02:33.480 --> 02:37.780
E então faremos 'i ++'.

02:37.780 --> 02:40.220
Não se preocupe, vou explicar o que isso significa.

02:40.270 --> 02:47.310
Temos os colchetes e aqui dentro, por enquanto, vamos apenas esperar e explicar o que está acontecendo.

02:47.320 --> 02:53.410
Então, eu estou dizendo 'for', que é um JavaScript que diz: nós vamos fazer um loop.

02:53.890 --> 02:59.200
Agora, neste loop, a primeira coisa que vamos fazer é dizer: 'i' é igual a 0 '.

02:59.200 --> 03:01.220
Portanto, apenas uma variável aleatória 'i'

03:01.300 --> 03:04.840
é: é comum ser usado em um loop 'for' - representa um 'índice'.

03:04.840 --> 03:07.080
Então 'i' começa com '0'.

03:07.090 --> 03:13.670
Temos um ponto e vírgula, o que significa que é o fim da expressão, apenas atribuímos a variável 'i'

03:14.330 --> 03:18.840
a '0' e, na próxima linha, diz: 'i', que é neste momento '0'.

03:19.160 --> 03:27.150
Se isso for menor que o comprimento 'todos' e 'todos. length '- nunca vimos isso antes.

03:29.360 --> 03:32.050
Mas está dizendo: quanto tempo dura a lista?

03:32.060 --> 03:40.350
Neste caso '1, 2, 3, 4, 5'. Portanto, '0' é maior que (* menor que) '5'.

03:40.530 --> 03:44.040
Se for esse o caso, execute esse loop.

03:44.280 --> 03:51.800
E quando terminar, faça 'i ++', o que significa 'i' mais '1'.

03:51.820 --> 03:53.620
Então, vamos passar por isso.

03:53.620 --> 04:06.760
Primeiro, todos. lenth '. se eu for, se eu copiar isso, eu faço todos. length '- recebo' 5 ', cinco itens.

04:06.870 --> 04:07.940
Eu

04:08.070 --> 04:14.060
também posso fazer 'helllooo'. length 'e recebo' 8 '.

04:14.070 --> 04:22.730
Então 1, 2, 3, 4, 5, 6, 7, 8. Portanto, 'length' apenas nos diz quantos itens na lista.

04:22.720 --> 04:26.390
E se eu fizer a variável 'i' é igual a '0'.

04:27.620 --> 04:28.700
Bem, 'i' é '0'.

04:28.710 --> 04:39.700
Mas se eu faço 'i ++' e olho para 'i' novamente, vejo que é '1'. Se eu repetir 'i ++' novamente, obtém '2'.

04:39.740 --> 04:43.010
Então isso está incrementando 'i'.

04:43.100 --> 04:48.850
Então, o que estamos fazendo é dizer: comece com '0' e, enquanto 'i'

04:48.890 --> 04:54.120
for menor que '5', execute o que for neste bloco.

04:54.140 --> 04:57.880
E quando terminar, adicione '1' a 'i'.

04:57.950 --> 05:01.980
Então, vamos ver o que acontece se eu fizer o console. registro'.

05:02.390 --> 05:10.130
'eu aqui. Vamos salvar e atualizar. '0', '1', '2', '3', '4'.

05:10.320 --> 05:13.570
Então, estamos fazendo um loop, onde começa com '0'.

05:13.740 --> 05:15.370
Então adicionamos '1'.

05:15.450 --> 05:21.990
Agora é '1'. Em seguida, adicionamos outro '1' a '2', outro '1' a '3' e outro

05:21.990 --> 05:31.890
'1' a '4', e como é que não temos '5' aqui porque, assim que 'i 'equals' 5 'que corresponde ao' todos. length 'e o loop para.

05:31.920 --> 05:36.780
Então é assim que dizemos para o loop parar. ESTÁ BEM.

05:36.990 --> 05:44.290
Então, como podemos fazer isso: se quisermos adicionar um ponto de exclamação no final deles?

05:44.310 --> 05:47.250
Bem, podemos acessar 'todos'

05:50.430 --> 05:58.840
por - porque é uma matriz, por 'i'. Como a primeira volta, 'i' será '0', que deve ser "sala limpa".

05:58.920 --> 06:05.550
Então '1', que é "escovar os dentes", depois '2', que é "exercício", '3', que é "estudar javascript" e

06:05.550 --> 06:07.420
4 que é "comer saudável".

06:07.540 --> 06:14.620
Então, vamos verificar isso. Se eu fizer 'todos [i]' e salvar. Atualize e devo alterar isso novamente para 'i'.

06:14.670 --> 06:16.220
Ai está.

06:16.310 --> 06:25.220
Caso contrário, se eu fizer isso, isso realmente não funcionará, observe isso. Porque, bem, isso é '5' é igual a 5 ', então nunca

06:25.220 --> 06:27.570
vai, nunca vai passar por isso.

06:27.770 --> 06:29.090
Então, vamos mudar de volta para 'i'.

06:29.210 --> 06:34.290
E atualize: 'sala limpa', 'escovar os dentes', 'exercício', 'estudar javascript', 'comer de forma saudável'.

06:34.310 --> 06:35.050
Perfeito.

06:35.060 --> 06:45.850
Então, agora eu posso fazer '[i] + "! "'Vamos atualizar.

06:45.850 --> 06:45.850
Olhe para isso!

06:46.090 --> 06:47.630
É assim que esses itens são importantes.

06:47.740 --> 06:59.740
Mas se eu fizer 'todo' - ou 'todos'. Bem, meus 'todos' não têm esse ponto de exclamação, nós apenas os registramos no console,

06:59.740 --> 07:02.990
mas na verdade não mudamos esse 'todo', certo?

07:03.190 --> 07:06.800
Então vamos fazer isso.

07:06.970 --> 07:22.090
Agora podemos dizer que 'todos [i] = todos [i] + "! "'

07:22.110 --> 07:23.020
Então vamos ver.

07:23.020 --> 07:24.570
Eu atualizo.

07:24.570 --> 07:25.330
Nada acontece.

07:25.330 --> 07:26.760
Mas agora, se eu marcar 'todos' ...

07:29.490 --> 07:33.540
Olhe para isso! Eu tenho pontos de exclamação em cada um dos meus 'todos'.

07:34.140 --> 07:45.620
E, novamente, para resumir, estamos dizendo que "sala limpa" agora é igual a "sala limpa" mais ponto de exclamação.

07:45.620 --> 07:46.620
Muito legal.

07:47.060 --> 07:47.580
ESTÁ BEM.

07:47.720 --> 07:51.060
Vamos aprender alguns outros - na verdade, antes de fazermos,

07:51.290 --> 07:57.620
e se quisermos tirá-los da lista. Talvez nós queremos riscá-los, porque nós os fizemos. Bem, podemos fazer algo

07:58.130 --> 08:01.460
como 'todos [i]. pop '.

08:01.490 --> 08:06.140
Se você se lembra, esse é um método de array 'pop' que remove o último item.

08:06.350 --> 08:14.870
Então, se eu for, salve e atualize, recebo 'todos [i]. pop não é uma função '.

08:14.870 --> 08:15.540
Por que é que?

08:15.560 --> 08:20.070
Bem, porque estamos dizendo "sala limpa" - 'pop'.

08:20.100 --> 08:21.820
E isso é uma 'string'.

08:22.290 --> 08:27.990
O que queremos fazer é 'todos. pop ', porque esse é o' array '.

08:28.350 --> 08:34.230
Então, se eu salvar e atualizar isso, vamos ver o que temos em todos os

08:35.880 --> 08:38.920
nossos: "sala limpa" e "escovar os dentes".

08:38.930 --> 08:39.510
Hmm.

08:39.630 --> 08:40.740
Por que é que?

08:41.160 --> 08:46.820
Bem, porque inicialmente era '0'.

08:47.060 --> 08:50.290
E o comprimento da lista 'todos' era '5'.

08:50.600 --> 08:59.770
Mas então porque nós o abrimos, isso mudou para '4' e este para 'um', e depois para '3' e '2'.

09:00.050 --> 09:05.910
Então, como você pode ver, removemos "coma saudável", "estude javascript" e "faça exercícios".

09:05.930 --> 09:12.270
Mas porque o nosso 'todos' lenth mudou, bem, ele parou no meio.

09:12.310 --> 09:16.080
Então, de que maneira podemos resolver esse problema?

09:17.630 --> 09:29.360
Bem, podemos fazer a variável 'todos. comprimento 'igual' a todos. comprimento'.

09:29.650 --> 09:32.020
Então agora essa variável é '5'.

09:32.140 --> 09:42.680
Então, se eu apenas fizer a variável 'todos. lenth '- isso vai lembrar, porque só vai funcionar uma vez, vai

09:42.680 --> 09:43.580
...

09:43.730 --> 09:48.370
Isso vai funcionar, então vamos atribuir '5' a 'todos. comprimento'.

09:48.560 --> 09:51.370
E então isso vai se repetir.

09:51.400 --> 09:59.940
Então, se eu salvar isso e atualizar, vejamos 'todos'. Olhe para isso! Terminamos todos os nossos 'todos'!

10:00.070 --> 10:00.790
Muito legal.

10:01.430 --> 10:11.230
Bem, deixe-me mostrar uma outra opção, que é o loop "while". O loop 'while' é mais ou menos assim.

10:15.250 --> 10:18.810
'while', - vamos criar uma variável aqui. Variável 'counter'

10:21.390 --> 10:22.910
'counterOne'

10:23.090 --> 10:36.160
Vamos dizer isso, que é '0'. E vamos dizer: 'enquanto counterOne é menor que 10'.

10:36.300 --> 10:39.810
Nesse caso, eu quero 'consolar. log

10:43.000 --> 10:50.590
'' counterOne ''. E então eu quero 'counterOne' plus, plus.

10:50.640 --> 10:53.010
Lembre-se de que estamos fazendo, estamos adicionando.

10:53.430 --> 10:58.800
Então, toda vez que aumentamos 'contador' em '1'. Vamos ver o que acontece aqui.

10:58.800 --> 11:09.330
Se eu salvar isso e atualizar: "0, 1, 2, 3, 4, 5, 6, 7, 8, 9" e depois parar, porque, assim que for '10', isso não está

11:10.330 --> 11:11.500
mais certo .

11:11.500 --> 11:14.530
Portanto, essa parte do bloco não roda.

11:17.820 --> 11:18.260
ESTÁ BEM.

11:18.420 --> 11:29.200
Posso fazer alguma coisa... talvez... o contrário? Onde dizemos que o 'contador' é '10' e desta vez queremos

11:29.200 --> 11:30.180
fazer a contagem regressiva.

11:30.520 --> 11:38.940
Portanto, enquanto o contador é '10' - continue e caso contrário - pare. E da maneira que fazemos isso, obviamente queremos

11:39.210 --> 11:39.780
subtrair.

11:39.780 --> 11:43.900
Não queremos continuar '11' ou '12', porque senão continuará para sempre.

11:44.070 --> 11:47.570
A maneira como fazemos isso é - menos, menos, que é exatamente o oposto.

11:47.580 --> 11:49.190
Portanto, subtrai '1'.

11:49.620 --> 11:50.810
Vamos ver o que acontece.

11:52.610 --> 11:56.410
'10, 9, 8, 7, 6, 5, 4, 3, 2, 1 '.

11:56.420 --> 11:57.830
Ai está.

11:57.890 --> 12:05.300
Agora, por curiosidade, o que acontecerá se eu for assim, onde o número continua aumentando de '10'

12:05.330 --> 12:08.560
para '11', para, bem, o infinito.

12:08.590 --> 12:08.890
Direita?

12:08.900 --> 12:16.800
Ele continuará aumentando e - você pode fazer isso no Google Chrome, se quiser.

12:16.880 --> 12:19.950
É realmente muito divertido.

12:19.970 --> 12:27.170
O que acontece é - ele continua sempre para sempre. Você apenas obterá uma lista de todas essas coisas e isso

12:27.260 --> 12:34.460
é chamado em um 'loop infinito'. Um 'loop infinito' significa que praticamente segue infinitamente. Só que realmente

12:34.460 --> 12:38.910
não, porque eventualmente o Google Chrome irá falhar.

12:38.990 --> 12:42.440
Vai dizer: "Ei, eu não consigo lidar com todas essas informações.

12:42.440 --> 12:45.630
Você está me deixando louco. "e vai parar de funcionar.

12:46.640 --> 12:47.040
ESTÁ BEM.

12:47.120 --> 12:49.930
Então aprendemos o 'loop for'.

12:50.060 --> 12:52.700
Nós aprendemos o 'enquanto'. O que mais nos temos?

12:52.700 --> 12:55.630
Nós temos o 'fazer'.

12:55.790 --> 13:07.470
Então, isso é chamado de loop 'do while' e é um pouco diferente do 'while'. Começamos com 'do'.

13:07.750 --> 13:19.070
Então, colchetes, e dizemos 'contador' ... vamos chamar um 'counterTwo' dessa vez. Eu vou fazer a variável 'counterTwo'

13:19.910 --> 13:25.860
é igual a '10'. E faça 'counterTwo', mais, mais.

13:25.930 --> 13:27.180
Então adicione 'counterTwo'.

13:27.640 --> 13:32.850
E também 'console. log (contador Dois) '.

13:33.130 --> 13:41.440
E nós queremos mudar o console. log 'na parte superior, porque dessa maneira eu vou começar com' 10 'e depois aumentar - oops ...

13:41.490 --> 13:43.450
Isso deve ser subtraído.

13:43.530 --> 13:45.700
Então fazemos '10'.

13:45.790 --> 13:49.710
É tipo '10', então subtrai. Então, da próxima vez que aparecer

13:49.710 --> 13:50.980
aqui, será '9'.

13:51.480 --> 13:55.650
E então fazemos 'while', e damos uma condição aqui.

13:55.650 --> 14:04.890
Portanto, as condições serão 'counterTwo', será maior que '0'.

14:05.240 --> 14:05.520
ESTÁ BEM.

14:05.530 --> 14:08.910
Então, vamos ver o que acontece aqui.

14:08.990 --> 14:13.960
Atualizo: '10, 9, 8, 7, 6, 5, 4, 3, 2, 1 '.

14:14.310 --> 14:21.580
Hmmm, parece que fizemos o mesmo que o 'loop while', não é?

14:21.580 --> 14:24.060
Então deixe-me testar isso.

14:24.070 --> 14:27.240
Vamos atualizar aqui.

14:27.470 --> 14:35.120
E vemos que temos '10' a '1' para o loop while e '10' a '1' através do loop 'do while'.

14:35.120 --> 14:37.490
Então, qual é a diferença aqui?

14:37.760 --> 14:44.930
A diferença é que, com um loop 'while', verificamos a condição primeiro, e dizemos: "counterOne é maior que

14:44.930 --> 14:45.500
'0'?

14:45.550 --> 14:53.960
ESTÁ BEM. Então faça essas coisas. "Contra o loop 'do while', que diz:" Faça as coisas primeiro e depois faça 'counterTwo'. "Deixe-me

14:54.110 --> 14:57.500
apenas demonstrar esse ponto.

14:57.570 --> 15:07.530
Se nós fizermos... '10' aqui. E '10'. Vamos atualizar.

15:07.750 --> 15:09.200
Eu só recebo '1'.

15:09.210 --> 15:11.430
Hmm... Vamos verificar algo aqui.

15:11.510 --> 15:24.330
Eu vou dizer que este é o loop 'while' e este é o loop 'do while'. Salve e atualize. Então parece que o 'faça enquanto'

15:24.330 --> 15:26.530
foi executado.

15:26.910 --> 15:32.520
Mas o loop 'while' nunca aconteceu, porque. Bem, '10' é igual a '10'.

15:32.700 --> 15:40.770
Isso falha e o loop não é executado. Versus o loop 'do while', que faz isso primeiro e depois verifica a

15:40.770 --> 15:42.670
condição, se eles fizerem um loop.

15:42.810 --> 15:51.180
Então essa é a diferença entre esses dois. Mas, para ser sincero, na maioria das vezes

15:51.180 --> 16:00.530
você usará um loop 'for'. E o loop 'for' é o que você vai se acostumar. Mas, na verdade, há uma maneira melhor

16:00.530 --> 16:02.530
de fazer isso.

16:02.720 --> 16:08.990
Se você olhar para o 'SectionOutline', vemos que tenho um último, que é 'forEach' e diz

16:08.990 --> 16:10.590
"new in ECMAScript 5".

16:10.880 --> 16:19.070
Então, como você se lembra, o JavaScript está em constante evolução e o ECMAScript 5 era um novo

16:19.230 --> 16:25.170
padrão, que adicionava o método 'forEach'. Então, qual é o método 'forEach'?

16:25.180 --> 16:29.190
Bem, vou mostrar a diferença entre um loop 'for' e um 'forEach'.

16:29.190 --> 16:30.920
Ambos fazem a mesma coisa.

16:31.110 --> 16:34.620
Mas, diga-me qual parece melhor.

16:34.710 --> 16:42.490
Então, aqui vamos dizer 'console. log (i) 'Então, estamos apenas

16:43.640 --> 16:54.010
registrando o' i '. E com um loop 'forEach' eu posso fazer 'todos. forEach 'function' i ','

16:55.110 --> 16:58.260
console. log (i) '.

16:58.560 --> 17:04.270
Parece um pouco confuso, mas vamos tentar, vamos ver o que acontece.

17:04.880 --> 17:16.160
Parece que uma linha '10' está sendo impressa em '0, 1, 2, 3, 4' e a linha '14' está imprimindo "espaço limpo, escovar os

17:16.170 --> 17:17.950
dentes, exercitar-se, estudar javascript,

17:17.950 --> 17:19.090
comer saudável".

17:19.090 --> 17:20.480
o que você está fazendo aqui?

17:20.480 --> 17:22.220
Bem, o 'forEach'

17:22.430 --> 17:24.190
é preciso uma matriz.

17:24.190 --> 17:31.530
Nesse caso, o 'todos', e ele pede um argumento, é 'me diga o que fazer com ele'.

17:33.030 --> 17:41.820
Portanto, a ação que queremos executar nos 'todos' pode ser representada em uma função.

17:41.870 --> 17:52.330
Então eu digo 'função', e essa função recebe o argumento de 'i', que é o de que cada item individual no

17:52.330 --> 17:53.170
'todos'.

17:53.530 --> 18:02.750
Então, eu poderia dizer 'todo' aqui e 'todo'. E atualize e ainda será exatamente o mesmo.

18:02.770 --> 18:12.030
Então, você vê aqui que não estamos necessariamente acessando o índice como estamos com este aqui, porque aqui, para obter os 'todos'

18:12.030 --> 18:21.600
que eu tinha que fazer, 'todos [i]'. Se eu atualizar. ESTÁ BEM.

18:21.710 --> 18:24.440
Nesse caso, agora é tudo a mesma coisa.

18:24.910 --> 18:29.190
OK, mas como acesso o índice no 'forEach'?

18:29.570 --> 18:38.860
Bem, o segundo parâmetro. E o segundo argumento que ele recebe é o 'i', o índice.

18:38.870 --> 18:52.260
Então, agora, se eu fizer 'i' e atualizar: '0, 1, 2, 3, 4'. Portanto, é a mesma coisa que faz isso no loop 'for'. E eu atualizo

18:52.980 --> 19:03.710
e olho para isso. Agora, olhando para esses dois, qual deles diz mais sobre o que faz?

19:04.850 --> 19:06.670
Este ou este?

19:06.710 --> 19:17.490
Vamos ler em inglês: 'todos. forEach 'executa uma função, que' console registra 'que' todo 'e' index

19:18.520 --> 19:19.720
'Versus Bem,

19:20.130 --> 19:22.520
francamente isso parece confuso.

19:23.460 --> 19:28.860
Portanto, 'forEach' é um método realmente ótimo que eles adicionaram ao idioma, que realmente simplifica

19:28.860 --> 19:29.700
as coisas.

19:29.700 --> 19:31.930
A maioria das pessoas pode

19:31.920 --> 19:37.610
ficar confusa com essa parte da função. Mas só quero mostrar o quão poderoso 'forEach' é, na verdade, podemos fazer isso.

19:37.650 --> 19:45.760
Vou tirar a função e vou chamá-la de 'logTodos'.

19:46.010 --> 19:59.390
E agora tudo o que tenho a fazer é - ter uma função e chamá-la de 'logTodos'.

19:59.570 --> 20:02.340
E agora eu vou comentar isso.

20:02.630 --> 20:09.330
Ele fará exatamente a mesma coisa, mas agora posso usar 'logTodos' em outros lugares.

20:10.260 --> 20:23.300
Então, agora eu posso fazer - digamos, eu tenho outra lista, que talvez tenha pontos de exclamação, como fizemos na primeira.

20:26.340 --> 20:28.760
'todosImportant'.

20:30.780 --> 20:47.700
Então, agora eu posso fazer tudo importante. forEach 'e use a mesma função' logTodos '. Eu salvo e atualizo. E olha isso!

20:47.700 --> 20:47.700
Temos estes para usar também.

20:47.740 --> 20:51.280
Então você pode ver que é muito extensível.

20:51.300 --> 20:56.830
Agora, a única ressalva que quero lhe mostrar com 'forEach' é que é um novo padrão.

20:56.910 --> 21:01.590
Como fazemos com todos os novos padrões, devemos verificar se eles funcionam em todos os navegadores.

21:01.590 --> 21:08.070
Então, se você se lembra, nós tínhamos 'caniuse. com ', que usamos para isso. E usamos no CSS

21:08.100 --> 21:15.390
para garantir que nossos recursos CSS3, como 'boxshadow' e 'transitions' funcionem em todos os navegadores.

21:15.420 --> 21:23.410
Então vamos fazer isso. Vamos fazer 'foreach' e você vê aqui 'ECMAScript5' - 'foreach'.

21:23.600 --> 21:27.500
Parece, bem, suporte completo!

21:27.770 --> 21:29.160
Tudo parece bem.

21:29.420 --> 21:33.840
Nós apenas temos o Opera Mini, que tem suporte parcial.

21:33.980 --> 21:41.460
Então, parece muito bom. A menos que estejamos realmente preocupados com o Opera Mini. Podemos usar 'foreach' no navegador.

21:41.530 --> 21:54.460
E apenas para testar se abrimos nosso console, bem, podemos ver definitivamente que uma matriz possui 'forEach'.

21:54.540 --> 21:56.920
Então aí está.

21:57.060 --> 22:07.630
Tivemos o loop 'for', o loop 'while', o loop 'do while' e, finalmente, 'forEach'. E no próximo vídeo, expandiremos nosso exemplo no

22:07.630 --> 22:14.320
Facebook e teremos vários usuários. Para que possamos percorrer o banco de dados de

22:14.410 --> 22:19.830
vários usuários e ver se o 'nome de usuário' e a 'senha' correspondem a algum deles.

22:20.080 --> 22:21.640
Vejo você no próximo. Tchau tchau
