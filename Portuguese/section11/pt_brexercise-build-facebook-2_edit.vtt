WEBVTT

00:00.990 --> 00:08.250
Bem vindo de volta! Usando nosso novo conhecimento de loops, vamos melhorar nosso aplicativo

00:08.250 --> 00:09.000
do Facebook.

00:09.420 --> 00:13.270
Quero dizer, porque o Facebook tem mais de um usuário, certo?

00:13.350 --> 00:16.660
Não é apenas um usuário, possui milhões deles.

00:16.950 --> 00:25.990
Então, como podemos verificar a senha de alguém, passando por não apenas um usuário, mas vários?

00:26.140 --> 00:30.510
Bem, parece uma solução perfeita para loops, então vamos tentar.

00:30.520 --> 00:33.650
Vou adicionar mais alguns usuários aqui.

00:33.740 --> 00:42.100
Vamos apenas copiar isso. E nós temos 'sally' com a senha '123'.

00:42.400 --> 00:49.600
E também temos 'ingrid' com a senha '777'.

00:49.820 --> 00:51.700
Então, vamos atualizá-lo.

00:51.700 --> 00:54.760
Vou fazer isso em uma nova linha apenas para que você possa ver.

00:54.890 --> 00:59.850
Vou atualizar e digitar 'ingrid'.

01:02.570 --> 01:06.960
'777'. 'Desculpe, nome de usuário e senha incorretos'.

01:07.210 --> 01:13.360
E isso faz sentido, certo? Porque quando criamos nossa função 'signIn', bem, ele está apenas verificando

01:13.360 --> 01:15.480
o primeiro item no banco de dados.

01:15.790 --> 01:17.260
Mas queremos verificar todos eles.

01:17.260 --> 01:22.800
Queremos verificar o primeiro item da matriz, o segundo e o terceiro.

01:22.900 --> 01:25.510
Parece que precisamos adicionar um 'loop' aqui.

01:26.480 --> 01:28.050
Então, como podemos fazer isso?

01:28.430 --> 01:31.910
Devemos, assim, adicionar um 'for loop'.

01:31.940 --> 01:34.500
Eu vou dizer aqui.

01:34.730 --> 01:44.150
Bem, na verdade eu vou comentar isso primeiro, e diremos que, quando estiver em 'signIn', queremos fazer

01:44.150 --> 01:47.130
'para var i = 0'.

01:47.170 --> 01:56.210
Lembramos deste índice do último vídeo, diremos 'i é menor que o banco de dados. comprimento'.

01:56.950 --> 02:09.410
Então, 'banco de dados. comprimento 'que é' 3 '. E incrementaremos 'i' sempre. Abra e feche parênteses,

02:09.410 --> 02:14.320
e então aqui queremos dizer 'if (database [i])'.

02:14.420 --> 02:15.280
Então, em

02:15.290 --> 02:22.470
vez de '0' agora podemos dizer 'i', porque 'i' vai '0, 1, 2'. Então, 'se o banco de

02:22.510 --> 02:30.080
dados [i] for igual', e deveríamos ter um 'nome de usuário' aqui também.

02:30.180 --> 02:42.470
Portanto, se o 'nome de usuário' for igual ao 'nome de usuário', que recebemos, que é a entrada 'nome de usuário'. E eu vou começar uma nova

02:42.480 --> 02:56.600
linha aqui. 'banco de dados [i]. senha 'é igual à' senha 'que recebemos do' usuário '. Bem, se for esse o caso, o

02:56.810 --> 02:58.940
que devemos fazer.

02:59.270 --> 03:03.380
Bem, se estiver correto, faremos o console. log (feed de notícias) '.

03:04.830 --> 03:05.610
De outra forma.

03:05.910 --> 03:10.970
Caso contrário, faremos 'alerta'.

03:11.050 --> 03:17.780
"Desculpe, nome de usuário e senha incorretos".

03:17.920 --> 03:28.700
Então, agora eu vou salvar. Vamos tentar isso. 'nome de usuário'? - 'ingrid', 'senha'? - '777'. 'Desculpe, nome de usuário e senha incorretos'.

03:28.890 --> 03:33.550
"Desculpe, nome de usuário e senha errados ', mas recebo o' feed de notícias '.

03:33.670 --> 03:34.630
O que acabou de acontecer?

03:35.920 --> 03:41.680
Bem, o que acabamos de fazer foi fazer um loop for, mas rodamos isso três vezes.

03:41.680 --> 03:47.830
Então, na primeira vez que recebi 'Desculpe, nome de usuário errado', na segunda vez em 'Desculpe, nome

03:47.830 --> 03:56.080
de usuário errado', porque está verificando 'andrei' e 'sally' e depois verificando 'ingrid', que finalmente funciona e dá eu de volta o 'feed de notícias'.

03:57.330 --> 04:04.110
Portanto, nossa lógica aqui não está correta. O que podemos fazer para resolver isso?

04:04.160 --> 04:08.390
Bem, eu tenho uma ideia. Vamos criar outra função.

04:08.390 --> 04:16.910
Vou chamar essa função 'isUserValid' e essa função receberá 'username'

04:20.330 --> 04:22.340
e 'password'.

04:22.410 --> 04:28.550
E aqui podemos copiar isso e movê-lo para cá.

04:28.550 --> 04:35.750
Mas nós realmente não queremos fazer o que aconteceu aqui, onde registramos constantemente, em vez

04:36.290 --> 04:39.520
disso, gostaríamos de dizer 'retornar verdadeiro'.

04:39.560 --> 04:50.180
Então, se o usuário é válido 'return true', se o usuário não é válido, devemos 'return false', certo?

04:50.210 --> 04:52.740
Mas como podemos fazer isso?

04:52.850 --> 04:58.060
Bem, se eu 'retornar falso' aqui - vamos ver a lógica.

04:58.340 --> 05:00.320
Estou percorrendo tudo.

05:00.620 --> 05:06.710
Se a qualquer momento o 'nome de usuário' e a 'senha' corresponderem, com o que temos no banco de dados 'return true'.

05:06.710 --> 05:11.630
E lembramos que uma função para e sai quando vê 'retorno'.

05:11.630 --> 05:13.150
Então, ele retornará 'true'.

05:13.580 --> 05:20.810
Mas se ele fizer o loop 3 vezes e essa condição 'if' nunca passar, ela passará para a

05:20.810 --> 05:23.410
próxima linha que é 'return false'.

05:25.590 --> 05:28.350
Então agora 'isUserValid'.

05:28.350 --> 05:30.420
Bem, vamos testar isso!

05:30.660 --> 05:40.820
Eu vou dizer 'console. log (isUserValid) ', e forneceremos' nome de usuário 'e' senha '.

05:41.310 --> 05:44.970
Você pode ver que o 'nome de usuário' e a 'senha' vêm daqui.

05:45.000 --> 05:47.880
Então vamos ver. Vou

05:50.500 --> 05:54.980
salvar e atualizar 'ingrid', '777'.

05:55.190 --> 05:55.870
'verdade'.

05:55.880 --> 05:56.540
Está certo.

05:56.660 --> 05:58.550
Vamos testar algo onde não está certo.

05:58.550 --> 06:03.280
Vou dizer 't' e 'garblegarblegarble', 'false'.

06:03.380 --> 06:03.610
ESTÁ BEM.

06:03.620 --> 06:07.160
Parece que nossa função 'isUserValid' está funcionando.

06:08.810 --> 06:11.300
Então agora assista ao

06:11.540 --> 06:17.730
seguinte: podemos remover o log e descomentar nossa função original.

06:19.500 --> 06:33.610
E em vez de fazer tudo isso, agora podemos dizer 'if (isUserValid)', 'nome de usuário' e 'senha', que é novamente esse 'nome de

06:33.610 --> 06:40.070
usuário' e 'senha', que recebemos aqui a partir do 'prompt'.

06:40.280 --> 06:45.230
Se isso for 'verdadeiro', execute o 'feed de notícias'.

06:45.350 --> 06:51.020
Se for falso, bem 'else' você diz 'Desculpe, nome de usuário e senha errados'.

06:51.500 --> 06:54.280
Vamos salvar e atualizar. ESTÁ BEM.

06:54.360 --> 06:55.170
Vamos lá.

06:55.170 --> 07:05.760
'ingrid', senha '777'. Recebemos nosso 'feed de notícias' e, se inserirmos as informações erradas,

07:08.790 --> 07:13.290
obteremos 'Desculpe, nome de usuário e senha incorretos'.

07:13.300 --> 07:14.730
Quão legal é isso?

07:14.770 --> 07:20.700
Agora, acabamos de criar 2 funções e ele lê muito bem, certo? E diz 'signIn'.

07:21.040 --> 07:24.040
Aqui está o 'nome de usuário'. Aqui está a 'senha'.

07:24.040 --> 07:29.730
Nós vamos para a função 'signIn', ela diz: "Ei, se 'isUserValid'? "" Sim, o

07:30.260 --> 07:36.140
usuário é válido ". "Than 'log newsfeed', caso contrário 'alert' 'Desculpe, nome de usuário e senha incorretos".

07:36.360 --> 07:42.180
E esse é um conceito realmente importante de nomear coisas e ordenar códigos, para que você possa

07:42.180 --> 07:44.560
ler como inglês e faz sentido.

07:44.660 --> 07:45.940
E aí está.

07:46.080 --> 07:48.780
Temos o nosso aplicativo no Facebook.

07:48.780 --> 07:50.960
Você pode ver aqui o poder do JavaScript.

07:51.000 --> 08:00.640
Novamente, criamos essas funcionalidades que podem ser aplicadas em grande escala em aplicativos da Web reais.

08:00.750 --> 08:02.670
Vejo você no próximo. Tchau tchau
