WEBVTT

00:00.840 --> 00:03.000
E bem vindo de volta!

00:03.000 --> 00:10.830
Vamos fazer uma breve pausa na aprendizagem da sintaxe JavaScript para mostrar como o JavaScript é implementado

00:11.190 --> 00:12.170
no navegador.

00:12.450 --> 00:15.730
Voltaremos a esta imagem que

00:15.780 --> 00:22.650
vimos muitas vezes antes neste curso. E temos uma boa idéia do que HTML e CSS fazem.

00:22.650 --> 00:31.740
Se você se lembra, o HTML é enviado ao navegador, então ele vê a tag 'link' e o CSS é enviado ao

00:31.740 --> 00:32.570
navegador.

00:32.670 --> 00:36.270
Mas e o nosso novo amigo JavaScript por aqui?

00:36.300 --> 00:37.380
O que acontece com ele?

00:38.260 --> 00:43.350
Bem, neste vídeo, vamos aprender exatamente isso.

00:43.390 --> 00:49.340
Então, eu tenho aqui um índice. arquivo html. Vou abri-lo com o Google Chrome.

00:49.450 --> 00:50.940
Está completamente vazio agora.

00:51.250 --> 00:57.630
E também vou arrastá-lo para o meu texto sublime, para que possamos adicionar algo a ele.

01:00.370 --> 01:06.790
Então, eu tenho o texto sublime e o navegador, e usaremos nosso pequeno comando curto para

01:06.790 --> 01:09.660
criar um arquivo html rápido - 'Javascript'.

01:09.970 --> 01:21.600
E vamos ter apenas um 'cabeçalho' simples que diz 'Javascript em HTML'. Salve e atualize.

01:21.650 --> 01:22.260
Perfeito!

01:22.280 --> 01:23.910
Já temos mestres disso.

01:23.930 --> 01:25.760
Todos sabemos o que está acontecendo.

01:26.180 --> 01:29.830
Então, como adicionamos JavaScript a isso?

01:29.840 --> 01:41.620
Quero dizer: com CSS, tínhamos a tag 'link', certo? E nós tivemos esse 'href' onde dizemos onde está. Bem, se você se lembra,

01:41.620 --> 01:49.910
o JavaScript novamente, como HTML e CSS, é apenas um arquivo.

01:50.050 --> 01:54.550
Então, vamos criar um primeiro. No texto sublime, vou criar

01:54.550 --> 01:55.950
um novo arquivo.

01:56.100 --> 02:00.170
Vou salvá-lo e vou dizer 'script. js '.

02:00.220 --> 02:01.160
'roteiro. js '.

02:01.180 --> 02:02.860
Veja o 'ponto js' no final?

02:02.860 --> 02:04.550
Isso significa JavaScript.

02:04.660 --> 02:10.050
Observe o que acontece quando clico em 'salvar'. Na parte inferior, o texto

02:10.090 --> 02:13.780
sublime agora converteu a sintaxe em JavaScript.

02:13.850 --> 02:21.440
Então agora eu posso escrever algo como '4 + 3' e obter as cores legais do JavaScript como,

02:21.890 --> 02:35.850
e eu posso escrever 'se (4 + 3 === 7)', eu posso 'alertar ("Você é inteligente! ").

02:36.500 --> 02:38.800
Então você pode ver que ele faz a sintaxe para mim.

02:39.870 --> 02:40.450
ESTÁ BEM.

02:40.830 --> 02:42.220
Perfeito.

02:42.330 --> 02:44.650
Então eu apenas salvei isso.

02:44.760 --> 02:47.840
Vamos ver se podemos adicionar isso a ... oops.

02:47.880 --> 02:49.390
Esqueci o ponto e vírgula aqui.

02:49.410 --> 02:51.080
Eu também sempre esqueço isso.

02:51.210 --> 02:53.210
Vamos adicionar isso ao nosso HTML.

02:53.430 --> 02:58.720
Se funcionar, obteremos um 'alerta' dizendo "Você é inteligente! "Então, como podemos fazer

02:58.920 --> 03:00.190
isso?

03:01.240 --> 03:06.780
Bem, há uma tag HTML chamada tag 'script'.

03:07.150 --> 03:15.510
Então tag 'link' - para folha de estilo, tag 'script' para - JavaScript. E tudo o que fazemos é o seguinte: Temos

03:15.680 --> 03:25.250
o 'type = "text / javascript"'. Você vê aqui como, no CSS, temos "text / css". Bem, estamos

03:25.250 --> 03:36.380
dizendo aqui que isso é JavaScript. E aqui o JavaScript pode ser escrito bem aqui.

03:37.280 --> 03:45.150
Eu vou 'alert ("olá")' e você deve se lembrar disso, porque é um tipo de tag 'style' para CSS.

03:45.310 --> 03:46.400
Vamos ver o que acontece.

03:47.380 --> 03:49.930
Vou atualizar e recebo

03:50.060 --> 03:50.790
'olá'.

03:51.140 --> 03:51.950
Olhe para isso!

03:51.950 --> 04:01.520
Acabamos de adicionar JavaScript ao HTML. Mas eu realmente quero usar esse arquivo. Como sabemos com CSS, não queremos necessariamente que

04:01.520 --> 04:06.890
nosso JavaScript fique em HTML, queremos uma separação de preocupações, queremos o JavaScript

04:06.890 --> 04:08.620
no arquivo JavaScript.

04:09.180 --> 04:14.480
Bem, a maneira como fazemos isso é - através de um arquivo de origem.

04:15.040 --> 04:20.830
Então, tudo o que fazemos é - 'src'. Você pode se lembrar disso a partir de imagens.

04:20.860 --> 04:27.690
Então, em vez de 'href' e 'link', temos 'src' e dizemos 'script. js '.

04:28.660 --> 04:34.300
Eu salvo e atualizo. E eu recebo "Você é inteligente! "

04:34.310 --> 04:41.980
Agora, novamente, podemos dizer 'script. js ', porque, bem, está na mesma pasta - está na pasta da área de trabalho.

04:42.050 --> 04:49.130
Se não estivesse, digamos que esse HTML não estivesse na pasta da área de trabalho, teríamos que fazer algo como 'desktop /

04:49.160 --> 04:51.350
script. js ... ' ESTÁ BEM.

04:59.150 --> 05:05.310
Então isso é muito interessante. E se eu tiver vários arquivos JavaScript, talvez

05:05.330 --> 05:09.440
tenhamos visto isso em ... lembre-se do Bootstrap e do Bootstrap, temos três tags 'script'.

05:09.810 --> 05:10.600
Bem, sim.

05:10.700 --> 05:18.020
Você pode, assim como você pode com 'link', pode ter várias tags 'script' e pode

05:18.050 --> 05:24.490
dizer 'script2', 'script3' e, novamente, cada uma é executada uma de cada vez.

05:25.660 --> 05:26.320
ESTÁ BEM.

05:26.730 --> 05:36.540
Agora, uma pergunta que você pode ter é: 'Por que eu coloquei a tag' script 'na parte inferior aqui, na parte inferior do

05:36.540 --> 05:38.200
corpo? 'Por que

05:38.260 --> 05:39.190
não - e

05:39.220 --> 05:41.200
deixe-me remover isso por enquanto ...

05:41.200 --> 05:47.550
Por que não colocamos no topo, como fazemos com o arquivo CSS?

05:47.680 --> 05:49.140
Bem, deixe-me mostrar uma coisa.

05:49.240 --> 05:50.560
Vamos colocar aqui em cima.

05:50.560 --> 05:51.690
Vamos ver o que acontece.

05:52.000 --> 05:59.350
Eu vou atualizar. ESTÁ BEM. Eu recebo "Você é inteligente! "Eu não sei se você

05:59.390 --> 06:00.350
viu isso.

06:00.350 --> 06:02.030
Você viu o JavaScript ir?

06:02.180 --> 06:03.300
Vamos mudar isso rapidamente.

06:03.320 --> 06:10.750
Digamos que nosso site agora seja novo e novo e vou dizer 'Aguardando Javascript'.

06:11.010 --> 06:15.080
Eu vou salvar. Observe o que acontece com o cabeçalho.

06:15.380 --> 06:18.970
Eu atualizo. Ainda não mudou.

06:19.190 --> 06:22.500
Eu tenho que clicar em "Você é esperto! "Veja bem,

06:22.550 --> 06:24.600
tudo se foi.

06:24.610 --> 06:34.640
Clique em 'OK' e só então ele aparece, porque o navegador lê o arquivo, pega o arquivo CSS e vê a tag 'script' e diz: "Ah, eu vou

06:34.640 --> 06:39.070
ler o que está aqui! "E aqui está um

06:39.140 --> 06:42.770
'alerta' e o que um 'alerta' faz ...

06:42.830 --> 06:50.090
Espera-nos clicar em 'OK', para que o navegador não possa exibir (enquanto) aguardando JavaScript.

06:50.090 --> 06:56.750
Então você verá pessoas mais velhas de sites que colocam as tags 'script' aqui, mas isso atrasa o que

06:56.750 --> 06:58.470
é visto pelo usuário.

06:58.820 --> 07:11.270
Em vez disso, se o colocarmos aqui em baixo e alterar o texto novamente para 'Não aguarde' e salvar. Veja o que acontece.

07:13.260 --> 07:20.440
'Não estou aguardando Javascript' - isso foi alterado. Então, idealmente, queremos colocar nossas tags 'script' na parte inferior

07:20.440 --> 07:21.200
do corpo.

07:21.400 --> 07:31.270
O que isso significa é que o site é exibido, renderizado e ainda temos que esperar o JavaScript carregar - digamos

07:31.270 --> 07:34.000
que tivemos uma animação interessante.

07:34.000 --> 07:36.070
Vou ter que esperar até isso carregar.

07:36.220 --> 07:43.090
Mas, para um usuário, parece que o site é carregado muito mais rápido porque ele pode não clicar em um menu suspenso

07:43.090 --> 07:48.790
ou ver a animação imediatamente e perceber que há um atraso, mas eles perceberão um atraso se não

07:48.790 --> 07:50.310
virem nada. na página.

07:50.350 --> 07:54.030
Então, as tags 'script' na parte inferior.

07:54.110 --> 07:55.220
Uma última coisa.

07:56.370 --> 08:00.600
Como fazemos para que esse console imprima coisas?

08:01.440 --> 08:05.760
Seria bom se, em vez de alertar o tempo todo, conseguisse algo no console.

08:05.910 --> 08:14.060
Bem, em JavaScript, você pode fazer algo, chamado 'console. registro'.

08:14.140 --> 08:18.710
E aqui eu posso dizer "Helooooo".

08:18.820 --> 08:20.640
Então essa sintaxe é um pouco estranha.

08:20.650 --> 08:29.580
Vou explicar mais tarde o que está acontecendo aqui, mas 'console. log 'é uma pequena sintaxe especial, que podemos usar.

08:29.590 --> 08:39.420
E agora, se eu atualizar a página, faço o log aqui. Então eu posso escrever o quanto eu quiser aqui.

08:39.430 --> 08:46.130
É como 'alerta', mas sem que o irritante apareça repetidamente e atualize.

08:46.310 --> 08:47.430
E eu recebo 'Hellooooo'.

08:47.480 --> 08:51.800
E nós estaremos usando 'console. registre muito nos próximos vídeos.

08:51.820 --> 08:59.170
Você pode ver aqui que é uma boa maneira de imprimir algo no console, antes de aprendermos como

08:59.530 --> 09:01.210
alterar nosso HTML.

09:02.420 --> 09:03.380
Então eu vou ver no próximo. Tchau tchau
