WEBVTT

00:01.000 --> 00:06.710
Bem vindo de volta! Funções são a parte mais difícil do JavaScript.

00:07.140 --> 00:11.380
E levará algum tempo para obtê-lo completamente. No entanto, neste

00:11.480 --> 00:13.810
vídeo, vamos tentar fazer isso.

00:13.880 --> 00:18.020
Vamos aprender funções JavaScript.

00:18.030 --> 00:21.710
Então, vamos começar com "O que são funções? "Bem, eles são

00:22.640 --> 00:28.040
trechos de código, que executam ações. Sem funções, o JavaScript realmente

00:28.040 --> 00:30.730
não faria nada.

00:30.740 --> 00:40.340
A beleza é que as funções podem executar uma ação ou várias ações. Mas vamos voltar a isso. Primeiro, vamos falar sobre como

00:40.390 --> 00:45.560
você já conhece algumas funções JavaScript sem nem mesmo perceber.

00:45.640 --> 00:47.250
Você já os viu antes.

00:47.300 --> 00:53.160
'alerta' - isso é uma função. 'prompt' - essa é

00:56.130 --> 00:57.970
uma função.

00:58.150 --> 00:59.350
Você já viu isso antes.

01:00.240 --> 01:07.500
Portanto, o JavaScript nos fornece algumas funções que são realmente muito úteis, para que todos

01:07.500 --> 01:12.380
que escrevem JavaScript possam usá-las sem precisar escrevê-las repetidamente.

01:12.430 --> 01:15.700
Assim, com funções, temos 2 opções.

01:15.830 --> 01:20.990
Um - está usando funções JavaScript existentes, como 'alert' e 'prompt'.

01:21.980 --> 01:25.880
E dois - podemos criar os nossos.

01:25.880 --> 01:32.900
Portanto, antes de abordarmos como criamos nossas próprias funções e o que é tão útil sobre elas, você deve ter notado

01:32.900 --> 01:37.920
- notou uma coisa: esses colchetes, que estão próximos um do outro com funções.

01:37.940 --> 01:45.800
O que eles querem dizer? Bem, isso em JavaScript significa executar a função.

01:46.840 --> 01:52.750
Então, vamos ver se o que acontece, quando digito 'alert' e pressiono 'enter'.

01:52.810 --> 02:01.540
Eu recebo 'f alert ()' e algumas coisas estranhas. Hmmm, 'f' aqui significa função e pode ver quando eu pairo sobre

02:01.540 --> 02:01.990
ela.

02:01.990 --> 02:04.450
Diz 'alerta de função ()'.

02:04.450 --> 02:08.060
É isso que significa executar uma função:

02:08.080 --> 02:08.960
para

02:09.010 --> 02:13.090
executar 'alert ()', eu a executo chamando-a assim

02:15.010 --> 02:23.330
['alert ()'] Portanto, esses colchetes significam 'chamando uma função', para que eu possa chamar uma função.

02:23.490 --> 02:28.580
E você também notou que dentro de 'alert' posso

02:29.050 --> 02:33.800
adicionar coisas como "oi! "Todos esses são chamados de 'argumentos'

02:33.910 --> 02:42.190
e eu sei, estou jogando um monte de jargões, muitas palavras para você, mas essas são apenas as coisas que você

02:42.190 --> 02:44.670
ouvirá repetidamente quando for desenvolvedor e

02:44.710 --> 02:51.490
eles se apegam a você - não será a primeira vez, mas, como eu disse, tente chegar lá

02:51.700 --> 02:53.990
um passo de cada vez.

02:54.010 --> 02:58.630
Portanto, 'argumentos' são dados às funções.

02:58.840 --> 03:03.880
Por exemplo, quando o fizemos, no nosso exemplo aqui.

03:03.970 --> 03:13.190
"Hellooooo" e o 'console. log 'era um' argumento '. E o interessante é que você pode ter vários argumentos: por

03:13.200 --> 03:19.820
exemplo, se eu removi isso e apenas o tenho, vamos apenas ter 'console. log 'por enquanto.

03:20.190 --> 03:24.690
Eu posso fazer "como você está".

03:24.700 --> 03:27.950
Eu salvo e atualizo e recebo.

03:27.950 --> 03:29.150
"Hellooooo, como vai você?"

03:29.210 --> 03:37.800
Veja, eu posso ter vários argumentos, mas apenas adicionando uma vírgula. Mas, novamente, isso depende da função.

03:37.810 --> 03:47.870
Agora, antes de começarmos a criar os nossos, vamos revisar. 'alert' é uma função, 'alert' com colchetes,

03:47.960 --> 03:56.220
estou chamando a função 'alert' e chamando a função 'alert' com o

03:56.400 --> 03:59.910
argumento 'Hi'. 'alerta' precisa ser chamado,

04:00.090 --> 04:02.460
caso contrário, ele está apenas sentado lá.

04:03.900 --> 04:08.880
Agora, o grande motivo para usar a função é que você pode chamá-las quantas vezes quiser.

04:08.970 --> 04:19.080
Pense em 'alerta', imagine ter que dizer sempre "Ei, computador, crie essa janela 'pop-up' e imprima qualquer argumento que eu

04:19.080 --> 04:21.090
coloquei" toda vez.

04:21.270 --> 04:27.540
Quero dizer que seria realmente péssimo. Não é legal, simplesmente chamarmos de 'alerta' e essa janela pop-up aparecer

04:27.540 --> 04:29.770
para nós e tudo pronto para você?

04:29.780 --> 04:32.010
Bem, isso é basicamente o que as funções fazem.

04:32.010 --> 04:39.810
Eles tornam a vida mais fácil, com ações agrupadas, para que você as escreva apenas uma vez e

04:39.810 --> 04:41.450
depois possa chamá-lo.

04:41.480 --> 04:43.480
ESTÁ BEM. Então, vamos à parte divertida.

04:43.490 --> 04:54.970
Vamos criar nossas próprias funções. Então, se voltarmos ao nosso documento aqui, vamos ver aqui. Temos duas maneiras de criar

04:54.970 --> 05:00.180
funções e eu mostrarei a você a primeira maneira.

05:00.340 --> 05:01.980
Na verdade, eu vou lhe mostrar este primeiro.

05:02.200 --> 05:08.970
Então, vamos criar nossa própria função, usando o primeiro método, que é 'declaração de função'.

05:09.310 --> 05:17.780
E nós vamos usar o nosso 'script. js 'aqui, que está vinculado ao nosso HTML, que fizemos no vídeo anterior.

05:17.930 --> 05:23.840
Então, aqui eu posso dizer 'function sayHello ()' is

05:27.960 --> 05:30.510
'console. log ("Olá") '.

05:35.380 --> 05:38.700
Novamente a sintaxe é um pouco diferente, mas você só precisa se lembrar.

05:38.800 --> 05:41.850
Estou dizendo 'function' - será chamado de 'sayHello'.

05:42.070 --> 05:49.150
Temos esses suportes, que são muito familiares para nós. E então 'console. log ("Olá"); '. Vamos ver, o

05:49.150 --> 05:53.480
que acontece quando eu salvo. Eu atualizo.

05:53.830 --> 05:54.860
Hmmm, nada acontece.

05:55.980 --> 05:56.920
Por que é que?

05:57.240 --> 06:00.530
Bem, declaramos essa função.

06:00.540 --> 06:09.430
Mas lembre-se, o que fizemos com o 'alerta'? Bem, existe, mas não o executamos.

06:09.480 --> 06:16.170
Temos que chamar a função, então temos que dizer 'diga Olá', assim. Agora quando eu atualizar.

06:16.740 --> 06:19.430
Eu recebo "Olá".

06:19.570 --> 06:25.610
Então pense nisso com a variável Quando digo 'var a é igual a 5',

06:25.720 --> 06:29.260
isso não fará nada até que realmente recebamos o 'a'.

06:29.560 --> 06:34.120
E é aí que ele imprime '5'.

06:34.130 --> 06:36.500
ESTÁ BEM. Então essa é uma maneira.

06:36.510 --> 06:39.060
Qual é a segunda maneira de criar uma função?

06:39.270 --> 06:45.150
A segunda maneira é chamada 'expressão da função'.

06:45.340 --> 06:47.900
E isso é assim.

06:48.130 --> 07:01.430
Posso dizer 'var sayBye = function ()' 'console. log ("Tchau"); '.

07:02.300 --> 07:05.620
Mais uma vez eu vou salvar isso e atualizar.

07:05.810 --> 07:11.660
E, novamente, apenas recebemos 'Hello' porque, bem, novamente temos que chamar essa função.

07:11.720 --> 07:20.560
Então, eu digo 'sayBye', execute-o e atualize. "Olá Tchau". Agora, uma coisa que você

07:20.640 --> 07:30.040
deve ter notado aqui é que estamos atribuindo essa função à variável 'sayBye', mas qual é o

07:30.940 --> 07:33.240
nome da função?

07:33.250 --> 07:40.520
Quero dizer, aqui claramente o nome da função é 'sayHello', mas aqui estamos, estamos apenas atribuindo à variável.

07:40.520 --> 07:48.230
Quero dizer, tecnicamente a função não tem um nome e isso é chamado de 'função anônima'.

07:48.360 --> 07:54.480
Atribuímos essa função a 'sayBye', para que possamos fazer referência a ela através de 'sayBye', mas, caso contrário, não

07:54.480 --> 07:56.350
podemos realmente acessar essa função.

07:56.640 --> 07:59.880
Bem, você verá por que isso é importante

07:59.940 --> 08:01.500
nos vídeos posteriores.

08:01.500 --> 08:06.770
Mas você poderia tecnicamente fazer isso: e chamar essa função de 'byebye'.

08:13.110 --> 08:13.760
ESTÁ BEM.

08:14.050 --> 08:20.560
Então, agora que sabemos como criar funções, por que precisamos desses argumentos?

08:20.830 --> 08:23.740
Lembre-se, por que precisamos de coisas dentro dos colchetes?

08:23.740 --> 08:26.660
Quero dizer - eles parecem úteis o suficiente, certo?

08:27.630 --> 08:40.090
Bem, vamos tentar algo. 'cantar', vamos fazer uma função 'cantar' e esse 'cantar' terá, terá 'console. log 'e eu

08:40.120 --> 08:46.220
direi "AHHHHHHHHHHHH". Esse sou eu, cantando.

08:46.230 --> 08:51.550
E também tem 'console. log ("TEEEEEEEEE") '.

08:52.030 --> 09:00.390
É assim que eu canto. Agora, se eu salvar e atualizar, verifique se ele ainda está cantando. Oh, eu tenho que ligar!

09:03.440 --> 09:04.920
Vamos atualizar.

09:05.040 --> 09:07.410
Bela canção: AHHHHHHHHHHHH, TEEEEEEEEE.

09:07.680 --> 09:18.530
Mas agora, toda vez que eu quero mudar para uma música diferente, talvez eu queira dizer 'laaa deeee daaa'.

09:18.660 --> 09:31.840
Bem, eu tenho que excluir isso e alterá-lo para 'laaa deeee daaa' ou tenho

09:32.260 --> 09:33.640
que

09:36.310 --> 09:50.750
criar um novo, chamando o console 'sing2' '. log 'e você pode ver aqui, como isso é irritante, que eu estou digitando a mesma coisa repetidamente e

09:51.020 --> 09:52.710
apenas mudando essas coisas.

09:52.910 --> 10:00.090
E agora eu tenho que executar 'sing2'. E eu refresco, e ufa, isso foi cansativo! ESTÁ BEM.

10:00.460 --> 10:07.600
Fiz tudo isso e agora imagino, se tivéssemos milhares de músicas, que queremos cantar; somos 'Spotify' e queremos

10:07.600 --> 10:10.330
exibir todas as letras das músicas.

10:10.330 --> 10:13.210
Quero dizer, é muito cansativo, certo?

10:13.210 --> 10:18.680
E uma das regras dos desenvolvedores é a idéia de "DRY: Não se repita".

10:18.730 --> 10:21.790
Idealmente, você deseja tornar as coisas o mais eficientes possível.

10:22.000 --> 10:34.820
E uma coisa que você pode fazer é - adicionando argumentos. Para adicionar algo como 'música' e agora - deixe-me excluir isso por

10:34.820 --> 10:35.970
enquanto.

10:37.720 --> 10:46.670
No console. log 'Eu posso apenas dizer' música '.

10:46.820 --> 11:01.190
Então agora, a qualquer momento que eu quiser mudar a música, eu posso dizer "Laaa deee daaa". 'cante ("helllloooooo") Então "cante (" ruas de

11:02.140 --> 11:08.990
trás, tudo bem ") Agora eu salvo

11:11.770 --> 11:14.470
e atualizo.

11:14.500 --> 11:23.060
E olha isso! Você vê quantas linhas de código acabamos de salvar e como agora posso usar 'cantar'

11:23.330 --> 11:26.600
a qualquer momento que quiser, e posso personalizá-lo como quiser.

11:26.600 --> 11:28.050
Mais ou menos como 'alerta'.

11:28.130 --> 11:30.570
É isso que os argumentos fazem.

11:30.830 --> 11:37.790
Os argumentos nos permitem não nos repetir e tornar nossas funções o que chamamos de mais extensíveis.

11:37.790 --> 11:40.530
Eles podem ser personalizados.

11:40.590 --> 11:44.860
Vamos fazer outra coisa para aprender algo divertido sobre funções.

11:44.970 --> 11:57.450
Vamos excluir isso e tentar 'function multiply ()'. E nós damos 'a' e 'b', então ele aceita dois argumentos

11:57.450 --> 12:01.330
e nós fazemos 'a * b'.

12:01.710 --> 12:15.320
E agora em 'a * b' diremos 'multiplicar' e chamaremos 'multiplicar (5, 10)'. Salve e atualize.

12:15.460 --> 12:18.890
E agora deveríamos ter 'multiplicado' à nossa disposição.

12:18.910 --> 12:24.570
Você pode ver aqui 'multiplicar (a, b)' que é 'b' exatamente o que escrevemos.

12:24.600 --> 12:27.370
OK, então o que acontece se

12:29.630 --> 12:32.020
eu 'multiplicar' (5, 10)?

12:32.480 --> 12:33.410
O que você acha que eu vou conseguir?

12:33.560 --> 12:33.910
Vamos ver!

12:37.980 --> 12:39.770
Hmmm, isso é realmente estranho.

12:39.780 --> 12:42.340
Vamos tentar novamente com um número diferente.

12:42.370 --> 12:44.180
Ainda 'indefinido'.

12:44.380 --> 12:47.530
Por que é que? Bem, isso é chamado de depuração.

12:47.530 --> 12:50.680
Vamos ver se conseguimos descobrir o que está acontecendo aqui.

12:50.680 --> 12:53.580
Eu vou fazer um console. log 'aqui.

12:54.490 --> 12:59.050
E vou desconectar 'a' e 'b' para garantir que essa função esteja realmente em execução.

12:59.210 --> 13:11.600
Então, eu vou salvar e atualizar. ESTÁ BEM. 'console. log ',' a 'e' b 'e apenas executei a função novamente.

13:11.660 --> 13:17.610
'console. registro'. ESTÁ BEM. Parece que está funcionando, mas estou ficando "indefinido" por aqui.

13:17.770 --> 13:23.440
Bem, eu posso mostrar isso em um diagrama.

13:23.440 --> 13:27.270
Portanto, uma função é uma 'entrada'.

13:27.330 --> 13:32.270
Damos a ele algum tipo de 'entrada', talvez às vezes esteja vazio, então é isso que está no suporte.

13:32.460 --> 13:34.900
No nosso caso, é 'a' e 'b'.

13:35.010 --> 13:42.790
Então, esses são números, então '5' e '10'. E então a função faz o que mandamos fazer.

13:42.790 --> 13:51.550
No nosso caso, era 'multiplicar 5 e 10'. E então obtemos uma 'saída', mas não estamos obtendo essa 'saída'.

13:51.550 --> 13:52.280
Por que é que?

13:52.350 --> 13:56.270
Bem, porque uma função funciona assim.

13:56.650 --> 14:01.450
E não se preocupe, acabei de adicionar um monte de flechas, mas analisarei tudo e explicarei a você.

14:01.450 --> 14:03.400
A 'entrada' está recebendo '5' e '10'.

14:03.400 --> 14:11.950
A função faz algumas coisas, e até este ponto nós apenas fizemos o console. log 'e o caminho' console. log 'funciona, a função

14:11.950 --> 14:18.870
está dizendo:' Basta fazer logon no console no navegador '.

14:19.100 --> 14:24.400
Mas nunca fizemos isso quando retornamos um 'valor'.

14:24.470 --> 14:25.820
Deixe-me mostrar o que eu quero dizer.

14:26.600 --> 14:29.300
Quando não retornamos algo, ficamos "indefinidos".

14:29.330 --> 14:32.240
Quando retornamos algo, obtemos o 'valor'.

14:32.240 --> 14:37.090
Então, vamos ver aqui se podemos explicar isso.

14:37.110 --> 14:47.410
Então, aqui sempre que digo "multiplique (10, 5)" e removerei o console ". log 'apenas para que não nos confunda,

14:47.410 --> 14:50.400
salve e atualize ...

14:50.770 --> 14:51.820
Fico 'indefinido'.

14:52.000 --> 14:56.710
Isso ocorre porque, como você vê neste diagrama, não estamos retornando nada.

14:56.710 --> 15:04.330
Portanto, no JavaScript, a maneira como você devolve as coisas é - você deve colocar 'return' dentro de uma função.

15:04.690 --> 15:12.400
Então, agora ele vai 'retornar a * b' e você vê, que é um - é uma palavra especial em JavaScript -

15:12.400 --> 15:13.740
destacada em vermelho.

15:14.020 --> 15:20.310
Bem, agora está dizendo 'Sim, vamos retornar o valor'.

15:20.370 --> 15:28.320
Então, mesmo se adicionarmos 'console. registro'. Você fará 'console. log 'e depois pergunte "Ei, eu tenho um' retorno '? "

15:28.470 --> 15:31.160
Se eu fizer, vou enviar um valor.

15:32.170 --> 15:33.520
Felizmente, isso não é muito confuso.

15:33.520 --> 15:35.170
Vamos ver se funciona.

15:35.930 --> 15:37.980
Vou salvar e atualizar.

15:38.240 --> 15:47.700
E agora, se eu 'multiplico (5, 10)', recebo '50'.

15:47.840 --> 15:56.860
Yay! Temos nossa função funcionando e esse é um conceito-chave muito importante, que

15:56.860 --> 16:01.010
precisamos lembrar é que precisamos retornar algo de uma função.

16:01.030 --> 16:02.870
Quero dizer, não precisamos.

16:02.980 --> 16:07.990
Mas o ideal é que o façamos, para que não ocorram esses casos, onde apenas 'indefinimos' e não sabemos o que a

16:07.990 --> 16:08.680
função faz.

16:08.680 --> 16:14.830
É como uma 'caixa preta', que faz alguma coisa e podemos obter um 'console. log ', ou não, mas não sabemos o que

16:14.830 --> 16:16.410
está acontecendo lá dentro.

16:16.410 --> 16:22.620
É bom ter um 'retorno' para garantir que a função atue da maneira que esperamos.

16:22.650 --> 16:24.540
Ok, e se fizermos algo assim?

16:24.540 --> 16:33.550
E se eu 'retornar a' e esquecer um ponto-e-vírgula aqui e 'retornar b'. O que você acha que acontecerá? Vamos atualizar

16:33.550 --> 16:37.930
e executar isso.

16:37.960 --> 16:38.540
ESTÁ BEM.

16:38.830 --> 16:41.870
E se eu mudar a ordem e colocar 'a' primeiro?

16:41.960 --> 16:43.080
Vamos tentar de novo.

16:44.960 --> 16:54.550
Recebo '5' e 'return' é a maneira final de encerrar uma função, se isso faz sentido. Portanto, assim que você diz 'return' em uma

16:54.550 --> 16:57.770
função, o programa sai.

16:57.820 --> 17:04.240
Então, para passar por isso eu digo 'multiplique (5, 10)'. Vai para a função,

17:04.240 --> 17:10.690
diz: "Sim, tenho a função 'multiplicar'. Vou colocar 'a' como '5' e '10' como 'b' ".

17:10.840 --> 17:20.540
E agora ele entra na função e diz: 'return 5', que é 'a'. Portanto, ele retorna e sai da função.

17:20.950 --> 17:23.290
Então agora essas duas linhas não estão sendo executadas.

17:23.290 --> 17:30.090
O programa simplesmente lê isso, vai para aqui, lê a primeira linha da função e sai.

17:30.100 --> 17:37.630
Então, em uma função, você deve ter uma declaração 'return', ou é isso mesmo?

17:38.500 --> 17:41.910
Vamos ver um caso em que isso pode não estar correto.

17:41.920 --> 17:43.750
Vamos adicionar uma declaração 'if' a isso.

17:44.080 --> 17:53.330
Digamos que queremos 'multiplicar', mas também somos preguiçosos e não queremos ser muito difíceis com o

17:53.330 --> 17:54.040
computador.

17:54.140 --> 18:05.420
Então, digamos que queremos dizer que 'se' - lembramos da 'declaração se'. "se 'a' for maior que '10'" ou "se 'b' for

18:05.420 --> 18:07.430
maior que '10'".

18:10.170 --> 18:18.430
Podemos dizer 'retornar "é muito difícil";'.

18:18.710 --> 18:33.380
Caso contrário, [else] retornaremos 'a * b'.

18:33.380 --> 18:33.380
Vamos ver o que acontece aqui.

18:34.890 --> 18:39.050
Vou salvar e atualizar. Vamos fazer 'multiplicar (5,4)'.

18:43.400 --> 18:46.220
Eu recebo '20'.

18:46.270 --> 18:49.680
E se fizermos '5' e '40'? Eu recebo "isso

18:49.690 --> 19:01.180
é muito difícil", porque agora está lendo a função '5' e '10', e está dizendo: "Hmmm, 'b', que é '40', é maior

19:01.180 --> 19:02.440
que '10'".

19:02.470 --> 19:06.560
Então, de acordo com a declaração 'if', eu irei "muito difícil".

19:06.670 --> 19:19.480
E como um 'retorno' sai da função, nunca chega a isso, mesmo que eu retorne a * b ', você nunca chegará lá, porque o'

19:19.480 --> 19:24.490
retorno 'sai da função. Só para checar,

19:24.490 --> 19:28.960
vamos fazer isso: vamos fazer '5 * 40'.

19:28.970 --> 19:34.750
E nunca chega a nenhuma dessas linhas, porque assim que vê um 'retorno', sai da função.

19:35.790 --> 19:37.320
Eu sei que é muito.

19:37.320 --> 19:41.980
E explicaremos por que essas coisas são importantes nos próximos dois vídeos.

19:42.210 --> 19:50.540
Mas eu também queria mostrar que você pode ter funções internas. Assim, em funções JavaScript são 'variáveis'.

19:50.880 --> 19:54.120
E o que isso significa é que fomos capazes de

19:56.880 --> 19:59.990
atribuir funções como esta. Direita?

20:00.200 --> 20:02.960
E se fizermos algo assim, bem,

20:03.080 --> 20:09.640
podemos chamar 'a' da mesma maneira que fizemos e apenas atribuímos a função como variável.

20:09.680 --> 20:15.030
Então, tecnicamente, poderíamos fazer algo assim.

20:15.050 --> 20:22.830
Então, vamos 'multiplicar' - vamos voltar ao modo que tínhamos. Vamos deixar 'multiplicar' da maneira que está na forma

20:22.830 --> 20:23.580
simples.

20:27.330 --> 20:29.640
E

20:32.140 --> 20:38.190
podemos realmente dizer 'alerta (multiplicar)'.

20:38.650 --> 20:43.900
E então aqui vamos fazer '3' e '4'. E eu sei que são muitos colchetes.

20:43.900 --> 20:45.620
Não se preocupe, vamos passar por isso.

20:45.760 --> 20:49.490
Mas vamos salvar isso, atualizar e ver o que acontece.

20:49.570 --> 20:58.150
Eu recebo '12'. Porque o que está acontecendo é: Estamos começando com a função interna e estamos dizendo: "Ei, queremos alertar

20:58.150 --> 20:59.330
alguma coisa! "

20:59.470 --> 21:00.630
"O que você quer alertar? ""

21:00.640 --> 21:03.610
Bem, queremos 'multiplicar' "" Queremos chamar essa função e

21:03.610 --> 21:06.330
atribuir 'a' it '3' e '4' ".

21:06.400 --> 21:14.560
Então ele vai 'multiplicar' e diz: "Sim, atribuiremos 'a' e 'b' a '3' e '4', e eu quero retornar 'a' e 'b'.

21:14.560 --> 21:24.010
Então agora 'multiplicar' é alterado para '12' e depois 'alertamos'.

21:24.020 --> 21:33.580
Então, você vê que agora, em vez de ter algo como 'total', 'multiplique (4,5)' e depois coloque 'total'

21:33.590 --> 21:37.420
aqui, podemos apenas atribuir 'multiplicar' aqui.

21:40.370 --> 21:41.620
Ufa! isso foi, isso foi muito!

21:41.640 --> 21:44.850
Mas quero mostrar a você que enfrentamos, acho, o

21:44.880 --> 21:51.000
tópico mais difícil do JavaScript, que é funções. E você também cobriu o 'retorno', o que

21:51.000 --> 21:53.040
é muito, muito bom.

21:53.050 --> 21:59.140
A outra coisa que quero lhe mostrar é que muitas pessoas se confundem com a terminologia e não

21:59.260 --> 22:02.340
acho que seja tão importante, mas só quero esclarecer.

22:02.390 --> 22:11.370
Existe o conceito de 'parâmetros' e 'argumentos'.

22:11.400 --> 22:18.520
Agora, 'parâmetros' e 'argumentos' são muito parecidos, mas apenas ligeiramente diferentes.

22:18.520 --> 22:22.420
Portanto, 'argumentos', como dissemos, são '4' e '5'.

22:22.480 --> 22:27.640
Portanto, as funções podem ter 'argumentos' e são chamadas com 'argumentos'.

22:28.060 --> 22:31.330
'Parâmetros' são o que 'a' e 'b' são.

22:31.330 --> 22:36.290
Portanto, 'multiplicar' tem dois 'parâmetros' de 'a' e 'b'.

22:36.420 --> 22:38.210
Eu sei que isso é um pouco confuso.

22:38.210 --> 22:40.010
Você pode ler um pouco mais sobre isso.

22:40.010 --> 22:46.860
Não acho importante saber realmente a diferença, mas sempre que estiver lendo artigos ou aprendendo,

22:46.860 --> 22:52.550
talvez pelo YouTube, você ouvirá essas palavras quase de forma intercambiável.

22:52.590 --> 22:56.710
Eles praticamente significam a mesma coisa, apenas uma pequena diferença neles.

22:58.460 --> 23:00.290
Tudo certo!

23:00.910 --> 23:03.690
Eu sei, eu sei que joguei muita terminologia em você!

23:03.730 --> 23:10.780
Mas, depois de repeti-lo algumas vezes, fará sentido; portanto, fique forte. Mas é isso para funções.

23:11.080 --> 23:13.580
É hora de você tentar alguns exercícios.

23:13.600 --> 23:15.420
Recrie este vídeo, se necessário.

23:15.430 --> 23:21.370
Você realmente deseja ter certeza de que entende as funções, pois elas serão o núcleo do JavaScript.

23:21.370 --> 23:28.360
Lembre-se, o que estamos fazendo com funções é que estamos criando novas palavras

23:28.360 --> 23:34.510
na linguagem, na linguagem JavaScript. Assim, podemos criar 'variáveis' ou 'funções' para adicionar vocabulário à linguagem e,

23:34.750 --> 23:37.370
até esse ponto, é tudo o que estamos fazendo.

23:37.390 --> 23:44.950
Temos esse JavaScript que tinha algumas palavras, que podemos usar, e adicionamos novos como 'multiply'

23:45.370 --> 23:48.760
e 'total' para torná-lo mais útil.

23:49.000 --> 23:51.020
E é isso que é programação.

23:51.210 --> 23:53.110
Vejo você no próximo. Tchau tchau
