WEBVTT

00:01.790 --> 00:05.860
Objetos Eles são estruturas de dados realmente poderosas.

00:06.810 --> 00:12.270
E como você pode ver, é a segunda estrutura de dados que vamos aprender em Javascript.

00:12.270 --> 00:23.270
De fato, eles também são do tipo javascript. Objetos são coleções de propriedades. Bem, o que isso significa?

00:24.410 --> 00:27.530
Vamos dar uma olhada tentando escrever um objeto.

00:27.530 --> 00:37.700
Então, para escrever um objeto, posso ter algo como um usuário e colchetes e, dentro disso, podemos dizer

00:37.820 --> 00:41.790
que o nome é igual a "John".

00:42.170 --> 00:46.000
Eu posso dizer que H é "34".

00:46.050 --> 00:49.320
O passatempo é "futebol".

00:50.900 --> 00:54.490
E talvez possamos até colocar "é casado" com

00:56.660 --> 01:00.390
falso e a vírgula no final aqui posso deixar

01:00.540 --> 01:03.440
de fora ou adicioná-lo, funciona nos

01:03.460 --> 01:04.630
dois sentidos.

01:05.770 --> 01:13.880
Mas agora, se eu salvar isso e atualizar - vamos ver se temos o objeto de usuário. Sim.

01:13.950 --> 01:20.820
Parece que temos "nome: John idade: 34 hobby: futebol é casado: falso".

01:20.990 --> 01:28.190
E você vê aqui que temos um objeto e parece um pouco diferente de uma matriz, não é?

01:28.220 --> 01:38.210
Porque se lembrarmos de uma matriz assim, "maçã", "banana", "laranja".

01:38.240 --> 01:47.100
Então - em uma matriz, se atualizarmos, temos 'user' que se parece com isso e uma 'lista' que se parece com isso.

01:47.210 --> 01:57.280
Se eu abrir isso, vemos que temos um pouco de diferença porque um objeto é mais dinâmico, posso

01:57.280 --> 02:00.000
ter propriedades e valor.

02:00.220 --> 02:12.770
Portanto, propriedade 'nome', valor "João", propriedade, 'idade', valor "34". Com uma matriz, tivemos um índice '0' que continha "maçã"

02:12.890 --> 02:17.720
e um índice '1' que continha "banana".

02:17.720 --> 02:18.680
Hmm interessante.

02:18.740 --> 02:19.000
ESTÁ BEM.

02:19.010 --> 02:30.370
Mas como eu pego propriedades, porque com uma matriz eu poderia fazer 'list', pegue o segundo elemento com '1'

02:30.940 --> 02:39.520
e recebi uma "banana". Com objetos, o que você pode fazer é dizer 'usuário'. nome ",

02:39.690 --> 02:51.950
John. 'Do utilizador. idade ', 34. 'Do utilizador. hobby ', futebol. E 'usuário. isMarried ', false. ESTÁ BEM.

02:52.250 --> 03:06.510
Agora, com uma matriz, tínhamos métodos como 'pop' ou 'push' para alterar a matriz.

03:06.590 --> 03:08.740
Nós até tivemos 'concat'.

03:09.210 --> 03:14.930
Como podemos adicionar propriedades a um objeto? Bem, é muito simples.

03:14.930 --> 03:29.700
Tudo o que precisamos fazer é dizer algo como 'usuário. favoriteFood 'e eu vou fazer igual e eu vou fazer espinafre.

03:29.890 --> 03:36.320
Agora, se eu olhar para o objeto de usuário, tenho

03:36.320 --> 03:39.160
comida favorita, espinafre.

03:39.230 --> 03:44.060
Acabamos de expandir o objeto de usuário.

03:44.100 --> 03:44.730
Que

03:44.730 --> 03:53.000
tal isso - Posso mudar para 'isMarried' para "true" para dizer que nosso amigo John aqui acabou de se casar.

03:53.130 --> 04:01.510
Bem, agora, se eu for para o usuário, tenho 'isMarried' como "true".

04:01.560 --> 04:02.940
Muito legal.

04:02.940 --> 04:07.890
Então você vê a diferença entre uma matriz e um objeto.

04:07.890 --> 04:22.370
Agora, uma pergunta que você pode ter é: "Por que 'array' não é do tipo javascript, mas 'object'? Bem, porque em termos simplificados

04:22.370 --> 04:32.120
tecnicamente uma matriz é algo parecido com isto.

04:36.480 --> 04:44.040
Nós até vimos quando olhamos para a lista que temos "0" na Apple.

04:44.040 --> 04:52.220
"1" é igual a banana e "2" é igual a laranja. E você vê qual é o poder das estruturas de

04:52.580 --> 04:54.020
dados em javascript.

04:54.080 --> 05:01.120
Essa ideia de uma gaveta da mesa e nessa gaveta você não quer ter uma bagunça, não quer colocar apenas uma coisa,

05:01.130 --> 05:07.920
deseja ter várias coisas, mas deseja que elas sejam organizadas. Talvez você queira que as canetas sejam organizadas

05:07.930 --> 05:12.420
em uma seção e os arquivos organizados em uma seção diferente.

05:12.830 --> 05:18.280
E, como mencionei, as estruturas de dados nos ajudam a organizar melhor as coisas.

05:18.350 --> 05:26.570
Por exemplo, uma matriz é realmente muito boa em talvez conter uma lista de compras ou uma lista de tarefas.

05:27.140 --> 05:33.190
Mas um objeto pode ser realmente muito bom em conter algo como informações do usuário.

05:34.000 --> 05:39.610
Então, se você pensa em um jogo - digamos que você esteja construindo um jogo em que está controlando esse assistente.

05:39.940 --> 05:48.050
Bem, esse mago - quão alto ele é, quão poderoso é, quantos pontos de experiência ele possui.

05:48.250 --> 05:54.040
Bem, seria realmente muito bom colocar um objeto porque esse assistente é um objeto.

05:54.040 --> 06:03.400
Precisamos de propriedades e valores, mas talvez os feitiços que poderiam ser uma lista, porque podemos ter apenas uma sequência de

06:03.520 --> 06:07.050
todos os feitiços que o assistente saberia.

06:07.090 --> 06:11.890
Então, isso significa que podemos ter matrizes dentro de objetos?

06:12.010 --> 06:25.350
Sim, se o usuário era um mago, posso colocar 'feitiço' ou 'feitiços' e posso fazer uma série

06:25.740 --> 06:35.340
de todos os feitiços "abracadabra" ou "Shazam" ou posso fazer "vaia".

06:35.430 --> 06:39.800
Então agora eu tenho uma matriz dentro de um usuário.

06:40.080 --> 06:41.460
OK, e o contrário.

06:41.460 --> 06:48.310
Posso ter um usuário dentro de uma matriz?

06:48.710 --> 06:49.480
Bem, sim você pode.

06:49.640 --> 06:59.790
Digamos que desejássemos ter uma lista de usuários em um aplicativo para o nosso site. Podemos ter uma lista de objetos em

06:59.790 --> 07:01.710
que temos

07:06.960 --> 07:15.830
'nome de usuário' "Andy" que possui 'senha', "segredo" e podemos ter 'nome de

07:18.540 --> 07:28.310
usuário', "Jess" que possui a 'senha' "123". Vamos ver isso em ação.

07:28.370 --> 07:37.370
Vou atualizar e dizer 'lista' e olhar para isso. Nesta lista, tenho o primeiro item com o nome de usuário e

07:37.370 --> 07:38.520
a senha.

07:38.520 --> 07:44.500
E o segundo item nome de usuário e senha. Portanto, as listas são realmente muito boas,

07:44.530 --> 07:52.240
fazendo listas e essas são matrizes. E os objetos são realmente muito bons em conter objetos. Mas como os

07:52.360 --> 07:54.520
acessamos agora?

07:55.000 --> 07:57.580
Bem, vamos olhar primeiro para o usuário.

07:57.670 --> 08:07.630
Se eu quisesse acessar um feitiço, eu poderia fazer 'usuário. spells 'e eu receberei uma matriz de volta, mas se eu

08:07.630 --> 08:10.050
quisesse - digamos acessar

08:10.450 --> 08:15.680
"Shahzam" Bem, eu faria o usuário. feitiços 'e, em seguida,

08:15.730 --> 08:28.740
porque é uma matriz, recebo o segundo item usando' [1] '- "Shahzam". Ao contrário da lista, posso dizer 'lista' - o

08:28.740 --> 08:35.320
primeiro item que é "Andy" e quero obter a senha dele.

08:35.450 --> 08:37.410
Bem, eu vou fazer 'senha'.

08:37.770 --> 08:42.590
E agora eu entendo - bem, Andy digitou incorretamente sua senha, deveria dizer "segredo".

08:42.600 --> 08:45.930
Mas nós ficamos "secre".

08:46.180 --> 08:48.220
Então é assim que você acessa as coisas.

08:48.570 --> 08:49.350
ESTÁ BEM.

08:49.840 --> 08:51.480
Mais uma pergunta que tenho.

08:51.850 --> 09:06.510
E se eu quisesse dizer que esse usuário John, que é um mago, também pode 'gritar'. Talvez possa fazer algum tipo de ação.

09:06.640 --> 09:09.320
Podemos adicionar uma função a um objeto?

09:09.580 --> 09:13.080
Sim, nós podemos, tudo o que precisamos fazer é 'função'.

09:13.120 --> 09:17.260
E você vê a cor alterada, significa que estamos fazendo algo certo.

09:17.260 --> 09:20.840
Eu posso dizer 'console de funções. gritando "Ah", vamos

09:24.380 --> 09:29.070
salvar isso e vamos ver isso em ação.

09:31.720 --> 09:35.940
'Usuário' - certifique-se de que temos o grito lá, sim. E veja se

09:35.960 --> 09:38.380
ele tem o "F" para 'função'.

09:38.900 --> 09:45.350
E agora se eu for usuário. gritar 'e lembre-se de que tenho que chamar a função.

09:45.770 --> 09:53.960
Eu recebo "AHHHHH! " Muito legal. Para que eu possa ter funções dentro de objetos.

09:54.320 --> 10:00.680
E uma coisa que você pode notar é: espere um segundo, pensei que as funções deveriam

10:00.680 --> 10:03.120
dizer algo como, você sabe, alerta.

10:03.330 --> 10:08.710
Mas este aqui temos 'usuário. gritar'.

10:08.770 --> 10:16.240
Portanto, isso é um pouco diferente do que vimos antes, e na verdade é chamado de método, e essa é

10:16.240 --> 10:18.250
outra terminologia que vamos aprender.

10:18.250 --> 10:23.110
Mas uma função dentro de um objeto é um 'método'.

10:23.110 --> 10:29.500
Então, eu posso dizer que 'shout' é um 'método' de 'user'.

10:29.720 --> 10:42.090
Assim como em uma matriz como listas e se eu fizer 'pop' - bem, 'pop' é um 'método' de 'list'.

10:42.230 --> 10:48.390
E outra coisa que você deve ter percebido é 'console. registro'.

10:48.620 --> 10:49.310
O

10:49.370 --> 10:58.190
que você acha que 'log' é que estamos fazendo esse tempo todo? Bem, 'console' como se vê é apenas um objeto.

10:58.260 --> 11:06.300
Você vê isso? 'console' tem tudo isso como método.

11:06.360 --> 11:10.180
Então, esse tempo todo, acabamos de fazer console. registro.

11:10.400 --> 11:19.770
Mas eu também posso fazer - vamos fazer 'info'. Se eu fizer console. informações e eu vou dizer "Olá".

11:23.930 --> 11:24.850
Eu recebo

11:24.990 --> 11:26.220
"olá" Nada muda.

11:26.220 --> 11:29.150
Mas e se fizermos algo como 'erro'.

11:29.340 --> 11:40.100
Bem, eu posso fazer 'console. error 'e agora - olhe para isso, recebo o erro.

11:40.420 --> 11:46.690
Então é isso que são os métodos. São funções dentro de um objeto.

11:46.700 --> 11:55.510
OK, tenho uma última coisa legal para mostrar e é: "Posso fazer algo assim?

11:57.450 --> 12:03.200
Um usuário pode ser um objeto vazio? "Sim, funciona.

12:03.200 --> 12:09.170
Portanto, se eu obtiver 'user2', apenas obtenho o objeto vazio e não há nada realmente nele.

12:10.630 --> 12:10.940
ESTÁ BEM.

12:10.960 --> 12:11.950
E matrizes?

12:11.950 --> 12:15.490
Posso fazer uma lista que está vazia?

12:18.010 --> 12:24.050
Sim, eu posso fazer uma lista que está vazia.

12:24.210 --> 12:31.040
Mas como você pode ver, não posso realmente usar nenhuma propriedade em 'user2' porque ela não possui propriedades.

12:31.920 --> 12:41.610
E eu realmente não posso acessar 'list [0]' ou 'list2 [0]', que é a vazia, bem, porque não

12:41.680 --> 12:44.130
há nada nela agora.

12:46.200 --> 12:57.440
Portanto, isso nos lembra que, quando não declaramos uma variável, ficamos "indefinidos", mas com um objeto e uma lista, podemos ter

12:57.500 --> 13:03.030
algo vazio e não definido. Mas há uma coisa que quero lhe mostrar.

13:03.230 --> 13:06.350
Pode haver um objeto vazio.

13:06.350 --> 13:18.730
Então, se eu fizer 'var' um objeto vazio, ele será um objeto vazio, mas haverá algo chamado 'nulo'.

13:19.120 --> 13:33.030
E esse é o nosso sexto tipo de dados e 'null' é um tipo especial que apenas diz que um objeto é nulo.

13:33.040 --> 13:34.530
Então, vamos ver o que isso significa.

13:34.600 --> 13:39.640
Se eu olhar para um objeto vazio, recebo um objeto vazio.

13:39.970 --> 13:46.920
Se eu receber um objeto 'nulo', ele retornará nulo.

13:46.960 --> 13:54.850
Portanto, esse é um personagem especial que abordaremos mais adiante nas lições, mas significa apenas que não

13:54.850 --> 13:57.190
há nada nesse objeto.

13:57.190 --> 14:09.150
Se eu for 'null0bj. name = Andy 'Não consigo definir o

14:09.340 --> 14:13.230
nome da propriedade null.

14:13.400 --> 14:22.430
Mas se eu fizer isso para um objeto vazio que é apenas um objeto vazio, bem, posso

14:22.790 --> 14:27.300
dizer que o nome é igual a Andy

14:27.370 --> 14:30.400
E veja, eu tenho Andy.

14:30.610 --> 14:32.230
Então é isso

14:32.290 --> 14:40.140
que é um objeto 'nulo'. Ele está vazio, completamente vazio e bem, agora parece meio inútil que não precisamos dele.

14:40.150 --> 14:44.580
Mas mostrarei casos em que isso é importante para nós.

14:44.590 --> 14:46.930
OK, isso foi um monte de coisas.

14:47.020 --> 14:51.870
Mas você realmente aprendeu muito em javascript.

14:51.990 --> 14:59.550
Isso é basicamente o que eu diria 80% do que você precisa saber em javascript para funcionar profissionalmente e

14:59.670 --> 15:05.650
parece que não cobrimos tanto ou talvez para alguns possa parecer que cobrimos muito.

15:05.670 --> 15:12.390
Mas, em termos de sintaxe, olhando apenas para isso, aprendemos apenas algumas palavras e algumas maneiras de fazer as coisas.

15:13.470 --> 15:20.190
Com esse novo poder, mostrarei como podemos construir um simples Facebook com o que acabamos de

15:20.190 --> 15:20.780
aprender.

15:22.630 --> 15:23.730
Vejo você no próximo vídeo. Tchau tchau
