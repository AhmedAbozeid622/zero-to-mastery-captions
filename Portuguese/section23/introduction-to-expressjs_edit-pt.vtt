WEBVTT 00:00.760 -&gt; 00:07.620 Bem-vindos de volta, como eu mencionei antes, os desenvolvedores são realmente bons em garantir que eles não mantenham a mesma coisa repetidamente 00:07.620 -&gt; 00:09.630. 00:09.900 -&gt; 00:15.940 E se houver algo que é feito repetidamente, eles constroem uma ferramenta para que ela se torne mais simples. 00:17.810 -&gt; 00:20.170 Bem, construir servidores era um deles. 00:20.170 -&gt; 00:23.290 É algo que todo mundo usa. 00:23.450 -&gt; 00:29.360 Então as pessoas usam as bibliotecas da mesma maneira que usamos o React no front-end em cima do JavaScript para tornar a vida 00:29.360 -&gt; 00:34.260 mais fácil e construir servidores mais robustos e rápidos. 00:34.270 -&gt; 00:39.690 E há muitas bibliotecas que as pessoas usam com o Node para criar um servidor. 00:40.340 -&gt; 00:47.630 Mas o mais popular e prático é o Express e tenho aqui a pesquisa State of JavaScript 2017 00:47.630 -&gt; 00:54.290 - é uma pesquisa famosa que recebe feito todo ano no final do ano que pede aos desenvolvedores 00:54.350 -&gt; 00:57.740 quais são suas ferramentas favoritas, quais são as ferramentas front-end que eles usam. 00:57.740 -&gt; 00:59.880 E eu recomendo que você dê uma olhada. 01:00.050 -&gt; 01:07.910 Mas você pode ver aqui que, para o back-end, a biblioteca que é mais popular é Express, e esta barra roxa 01:07.910 -&gt; 01:10.710 significa &#39;eu usei antes e iria usá-lo novamente &#39;. 01:11.430 -&gt; 01:17.500 Há outros como Koa, Meteor, Hapi, mas seu uso é muito pequeno. 01:17.510 -&gt; 01:24.370 O Express acabou de ser testado e testado; Há muitas ferramentas e informações on-line para isso. 01:24.370 -&gt; 01:29.140 Então, se você ficar preso, poderá encontrar uma resposta para o seu problema imediatamente. 01:29.260 -&gt; 01:33.160 Então o Express é o caminho a percorrer em 2018. 01:33.160 -&gt; 01:40.130 Então vamos aprender um pouco de Express e mostrar a você como é mais fácil criar nosso próprio servidor. 01:41.610 -&gt; 01:48.510 Então, vamos excluir o servidor que criamos anteriormente no último vídeo e instalar o Express. 01:48.860 -&gt; 01:55.680 Vamos fazer &#39;npm install&#39; e novamente através do npm temos o pacote Express. 01:58.930 -&gt; 02:01.620 E agora temos o Express disponível para nós. 02:01.660 -&gt; 02:03.070 Então vamos pegar. 02:03.110 -&gt; 02:13.230 A maneira de criar um servidor expresso é muito simples:você simplesmente faz const express = require (&#39;express&#39;); &#39;. 02:13.550 -&gt; 02:25.800 Temos que fazer um &#39;const app&#39; e depois criar esse app, para rodar o Express, simplesmente &#39;express&#39; () &#39;02:25.970 -&gt; 02:27.650 E então finalmente 02:27.650 -&gt; 02:32.710 &#39;app.listen (3000)&#39; e pronto. 02:32.730 -&gt; 02:35.710 Temos o Express em execução. 02:36.010 -&gt; 02:44.920 Deixe-me fazer &#39;npm start&#39; e vemos que o nosso servidor Node está funcionando. 02:45.150 -&gt; 02:51.140 E se eu voltar ao localhost:3000, eu tenho &#39;Cannot GET&#39;. 02:51.370 -&gt; 02:54.150 E é porque, bem, novamente, não estamos fazendo nada. 02:54.470 -&gt; 03:01.580 Mas em apenas três linhas nós temos um servidor e eu quero te mostrar que o Express tem um ótimo 03:04.510 -&gt; 03:09.600 um ótimo guia para começar e uma tonelada de informações sobre como para usá-lo. 03:10.680 -&gt; 03:14.120 E documentação para isso que você pode checar por conta própria. 03:14.250 -&gt; 03:15.630 Mas por enquanto vamos construir o nosso. 03:18.440 -&gt; 03:20.890 Bem expresso é muito bom em fazer roteamento. 03:21.030 -&gt; 03:29.690 Se você se lembra em nosso host local, recebemos &#39;Cannot GET&#39;. Para fazer uma requisição GET com Express nós simplesmente fazemos 03:29.930 -&gt; 03:34.450 &#39;app.get ()&#39; - no primeiro parâmetro é o caminho; vamos apenas fazer o caminho da rota [&#39;/&#39;]. 03:36.710 -&gt; 03:43.580 E o segundo parâmetro recebe um pedido e uma resposta e no Express em vez de escrever tudo 03:43.580 -&gt; 03:56.620 fora, a maneira comum de fazer isso é fazer &#39;req&#39; e &#39; res &#39;e aqui podemos dizer&#39; res.send () &#39;e nós vamos 03:56.720 -&gt; 04:06.780 apenas enviar um&#39; hellooooo &#39;como fizemos em nosso vídeo anterior onde usamos o módulo HTTP que vem com o nó. 04:06.920 -&gt; 04:19.750 Então, vamos verificar isso; vamos ver se isso funciona. Eu vou salvar, atualizar e eu recebo &#39;hellooooo&#39;. Se eu abrir o console 04:19.750 -&gt; 04:28.560 aqui e na guia Rede e eu atualizar novamente, vejo que a resposta é &#39;hellooooo&#39;. 04:28.690 -&gt; 04:40.520 Nós vemos &#39;Content-Type:text / html&#39; que foi convertido automaticamente para nós. Eu também posso em vez de enviar [ndo] 04:40.730 -&gt; 04:43.710 apenas um HTML. 04:43.880 -&gt; 04:47.150 Então, ao invés de fazer algo como &#39; <h1> &quot;04:49.990 -&gt; 04:51.010 e&quot; </h1> &#39;04:54.400 -&gt; 05:06.080 que nos dá uma <h1> &#39;Hellooooo&#39; Eu também posso enviar JSON. &#39;const user&#39; novamente e desta vez o nome do usuário será 05:06.080 -&gt; 05:08.300 ser Sally 05:13.590 -&gt; 05:23.470 e seu hobby será o futebol e precisamos adicionar um &#39;=&#39; aqui e depois passar em &#39;usuário&#39; 05:26.370 -&gt; 05:31.430 Se eu salvar isso e voltar e atualizar. Olhe para isso! 05:31.780 -&gt; 05:37.180 Ele faz automaticamente o &#39;JSON.stringify ()&#39; para mim e retorna 05:37.280 -&gt; 05:46.000 um tipo de conteúdo JSON e um tipo de conteúdo &#39;application / json&#39; com a resposta isso é JSON. Muito legal. Então você 05:46.000 -&gt; 05:49.400 pode ver o poder do Express mesmo com este simples exemplo. 05:49.690 -&gt; 05:56.420 Ele tira muito da repetição e torna nossa vida muito mais fácil. 05:56.440 -&gt; 06:01.990 Agora fizemos apenas GET aqui, mas você também pode fazer solicitações POST. 06:01.990 -&gt; 06:05.920 Por exemplo, se eu fiz &#39;post&#39; &#39;/ profile&#39;, bem 06:06.190 -&gt; 06:11.440 agora se eu atualizar recebo um erro porque 06:14.390 -&gt; 06:19.410 porque agora eu fiz o Request Method, que foi GET do navegador. 06:19.640 -&gt; 06:30.950 Mas aqui só aceito uma solicitação POST do &#39;profile&#39;. Se eu fizer &#39;/ profile&#39; aqui 06:35.620 -&gt; 06:45.060 eu recebo &#39;Cannot GET / profile&#39; porque apesar de estarmos indo para a URL apropriada agora estamos fazendo uma requisição GET. 06:45.070 -&gt; 06:46.750 Sempre que atualizamos um navegador 06:46.780 -&gt; 06:48.290 é uma requisição GET. 06:48.790 -&gt; 06:56.530 E para isso precisamos enviar alguns dados e eu mostrarei como fazer isso em 06:56.620 -&gt; 06:58.200 nos próximos vídeos. 06:58.240 -&gt; 07:07.890 Mas só para mostrar como funciona o Express eu posso continuar adicionando essas rotas - vamos &#39;get&#39; a &#39;/ profile&#39; que retorna 07:12.790 -&gt; 07:15.460 &quot;getting profile&quot;. 07:15.640 -&gt; 07:17.110 E se eu fizer um 07:21.230 -&gt; 07:26.760 outro &#39;get&#39; desta vez para o url &#39;root&#39; [/] e este eu vou dizer &quot;ficando root&quot; 07:29.580 -&gt; 07:30.630 se eu salvar isso agora 07:30.620 -&gt; 07:43.340 e atualizar &#39;/ profile&#39; Eu recebo um &#39;200 OK&#39; com a resposta de &#39;ficar pro e se eu não fizer &#39;/ profile&#39; 07:43.340 -&gt; 07:45.830 e apenas o URL &#39;root&#39;, eu recebo &#39;root&#39;. 07:48.950 -&gt; 07:53.780 E a maneira como o Express funciona é que verifica cada linha por linha. 07:53.790 -&gt; 08:01.670 Então, por exemplo, ele irá checar, &quot;Ei, a requisição GET tem o URL &#39;root&#39; [/]?&quot;. 08:02.100 -&gt; 08:05.160 &quot;O pedido GET tinha &#39;/ profile&#39;. 08:05.160 -&gt; 08:07.760 O pedido POST tinha &#39;/ profile&#39;. 08:07.980 -&gt; 08:10.150 E se ele coincide com qualquer um desses 08:10.260 -&gt; 08:14.640 bem, ele vai rodar qualquer que seja a função dentro dele:08:14.940 -&gt; 08:28.280 Se eu fizer uma url que não existe eu recebo um &#39; 404 Not Found &#39;porque bem fizemos uma requisição GET para esta url 08:28.280 -&gt; 08:33.660 que não existe. Então usando isso podemos usar o método GET 08:33.670 -&gt; 08:41.830 o método POST , o método PUT e o método DELETE que vamos realmente demonstrar nos próximos 08:41.830 -&gt; 08:43.210 pares de vídeos 08:43.210 -&gt; 08:49.990 Mas como podemos ver, é uma questão simples de dizer se você for para essa rota, faça isso se você for para este 08:50.200 -&gt; 08:54.510 faça isso e tudo é apenas lógico e escorre todo o caminho 08:56.040 -&gt; 08:58.480 Vejo você no próximo vídeo 08:58.480 -&gt; 08:58.930 Tchau-tchau.