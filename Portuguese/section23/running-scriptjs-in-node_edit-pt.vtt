WEBVTT

00:00.420 --> 00:07.110
Bem vindo de volta. Vamos expandir nosso conhecimento sobre o nó a partir do vídeo anterior e realmente criar um arquivo de script

00:07.140 --> 00:08.210
que podemos correr.

00:08.270 --> 00:13.920
Vamos apenas fazer o comando 'touch' aqui novamente para criar um arquivo e vamos chamá-lo de 'script.js'.

00:14.850 --> 00:20.870
Você verá aqui do lado esquerdo que eu tenho 'script.js' na minha pasta Node.

00:20.920 --> 00:24.110
Agora dentro desta pasta agora posso fazer qualquer coisa em JavaScript.

00:24.130 --> 00:29.600
Eu posso dizer 'const a = 5'.

00:29.770 --> 00:38.920
E essa não é a pasta que eu quero ... queremos abrir isso e vamos dizer 'const a = 4'

00:38.920 --> 00:40.800
'const b = 5'

00:41.140 --> 00:50.780
E então podemos apenas 'console.log (a + b)'. Se eu salvar isso para executar este script,

00:50.790 --> 00:55.400
tudo que faço é 'node' e, em seguida, o nome do script:'script.js'.

00:55.480 --> 00:58.770
E porque estamos no diretório, saberemos o que é 'script.js'.

00:58.870 --> 01:02.420
E isso nos dará 9.

01:02.460 --> 01:03.460
Quão legal é isso?

01:03.490 --> 01:09.480
Agora você também vê que saiu; não ficou no programa, e isso porque no final do

01:09.480 --> 01:12.840
arquivo, uma vez que lê tudo e executa

01:12.840 --> 01:21.620
- então a última coisa que ele executa é 'console.log' - ele roda 'process.exit' e sai do arquivo. Deixe-me mostrar

01:21.620 --> 01:22.310
você alguma coisa.

01:22.520 --> 01:33.040
Se eu fiz algo chamado 'setTimeout', o que nós realmente temos no Node; se eu fizer

01:33.370 --> 01:40.600
'node' 'global.setTimeout', eu recebo uma função.

01:40.630 --> 01:47.120
Então, se eu fizer 'setTimeout', eu posso executar uma função novamente usando nossas funções de seta.

01:48.750 --> 01:57.000
E aqui dentro eu posso fazer 'console.log ()', e 'setTimeout' é legal porque permite que você diga:"Ei, quando

01:57.060 --> 01:59.240
você quer que isso seja executado? "

01:59.370 --> 02:03.400
E esse é o segundo parâmetro e eu digo 3 segundos.

02:03.420 --> 02:15.210
Então, se eu salvar e eu fizer 'node script.js' - um, dois, três, e lá você vai:9, e então 'processar' sai

02:17.070 --> 02:19.180
Node é inteligente o suficiente para percorrer este

02:19.200 --> 02:24.280
uma vez feito isso, termina o processo e volta ao Terminal.

02:24.510 --> 02:25.280
Muito legal.

02:25.380 --> 02:30.000
E novamente dentro do nó podemos realmente usar

02:32.770 --> 02:37.210
coisas que podem ser úteis para nós com base nos objetos globais que temos.

02:37.300 --> 02:45.000
Por exemplo, um dos mais populares são '__dirname' - se eu salvar isso e rodar

02:45.060 --> 02:45.510
'node script.js' ...

02:45.520 --> 02:47.530
Eu recebo meu diretório:'node'.

02:50.480 --> 02:53.750
E vou mostrar por que isso é útil quando começamos a criar um servidor.

02:54.710 --> 03:01.130
Mas como você pode ver, temos o poder do navegador e executando os scripts que queremos aqui

03:01.190 --> 03:02.650
no nosso Terminal.

03:02.660 --> 03:03.790
Vejo você no próximo vídeo, tchau-tchau.
