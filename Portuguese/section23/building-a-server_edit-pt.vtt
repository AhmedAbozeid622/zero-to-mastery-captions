WEBVTT 00:00.670 -&gt; 00:04.770 Bem-vindo de volta. Acho que é hora de criar nosso próprio servidor agora. 00:06.270 -&gt; 00:09.620 Então vamos criar um novo arquivo chamado &#39;server.js&#39;. 00:09.660 -&gt; 00:11.470 [touch server.js] 00:11.700 -&gt; 00:15.540 E para que o nodemon ouça o &#39;server.js&#39;. 00:15.540 -&gt; 00:19.630 Vamos apenas digitar &#39;nodemon&#39; e depois &#39;server.js&#39;. 00:19.830 -&gt; 00:27.450 Agora, se eu salvar este nodemon, vou ouvir isso, desde que eu diga &#39;npm start&#39; 00:31.120 -&gt; 00:33.070 Como eu mencionei antes 00:34.360 -&gt; 00:42.250 O Node vem com seu próprio módulo HTTP e é isso que vamos usar para criar nosso servidor. 00:42.250 -&gt; 00:44.080 E é muito simples de usar. 00:44.260 -&gt; 00:56.600 Simplesmente pegamos o módulo HTTP e criamos um servidor definindo-o dizendo &#39;http.createServer ()&#39;. Neste 00:56.600 -&gt; 01:05.940 &#39;createServer&#39; vamos criar uma função de seta e aqui dentro por enquanto vamos apenas fazer 01:05.970 -&gt; 01:11.100 &#39;console.log (&#39; Eu te ouço! Obrigado por o pedido) &#39;01:12.910 -&gt; 01:20.320 E então finalmente temos que fazer&#39; server.listen () &#39;e dar-lhe o número da porta que queremos ouvir 01:20.320 -&gt; 01:20.660 para. 01:20.770 -&gt; 01:23.930 Então, basta fazer 3000 por enquanto, mas novamente você pode fazer qualquer coisa, você pode fazer 01:23.930 -&gt; 01:27.710 3001 se quiser, mas 3000 é bom. 01:27.940 -&gt; 01:31.160 Vamos fazer &#39;node server.js&#39; 01:31.180 -&gt; 01:32.020 - 01:34.690 -&gt; 01:37.000 E parece que está apenas pendurado lá. 01:38.000 -&gt; 01:43.680 Mas vamos para a porta 3000 em nosso host local que é a nossa máquina e ver o que acontece. 01:45.140 -&gt; 01:51.910 Se eu abrir uma nova aba e ir ao localhost 3000 hmm, nada está acontecendo. 01:52.180 -&gt; 01:59.160 Se eu abrir o console, nada está lá, mas se eu voltar, eu vejo &quot;Eu ouço você. 01:59.230 -&gt; 02:05.080 Obrigado pelo pedido&quot; e isso é porque lembre-se &#39;servidor .js &#39;está sendo executado no Node. 02:05.230 -&gt; 02:11.350 Está funcionando aqui no terminal. Mas está escutando conexões. 02:11.350 -&gt; 02:19.570 Então, quando eu pressiono &#39;refresh&#39; aqui ou pressiono Enter e tento conectar, ele estará escutando e ele irá rodar 02:19.870 -&gt; 02:24.410 &#39;console.log ()&#39; e você pode ver o segundo &quot;eu te ouço. Obrigado pelo pedido&quot; apenas aqui. 02:24.520 -&gt; 02:25.180 Se eu atualizar 02:25.180 -&gt; 02:26.300 mais duas vezes. 02:28.190 -&gt; 02:31.260 Bem, recebo mais dois. 02:31.480 -&gt; 02:36.150 Mas agora o navegador está pendurado lá porque não estamos fazendo nada. 02:36.190 -&gt; 02:37.800 Não estamos respondendo com nada. 02:37.800 -&gt; 02:40.760 Você pode ver na parte inferior &quot;aguardando localhost&quot;. 02:40.960 -&gt; 02:44.080 Nós somos apenas logging de console, mas não estamos obtendo resposta. 02:46.060 -&gt; 02:47.050 Vamos fazer isso. 02:47.050 -&gt; 02:53.950 Vou remover o log do console e usar os parâmetros que o &#39;createServer&#39; nos obtém. 02:53.980 -&gt; 03:02.510 Então, a qualquer momento que tentarmos nos conectar, temos um &#39;pedido&#39; e um parâmetro &#39;resposta&#39; que podemos usar e vamos 03:02.510 -&gt; 03:07.240 tornar isso um pouco menor apenas para que possamos ver. 03:07.430 -&gt; 03:16.700 E aqui dentro podemos fazer algo como &#39;response.setHeader ()&#39; ... 03:19.760 -&gt; 03:26.010 &#39;Content-Type&#39; - estamos informando que tipo de conteúdo que íamos enviar e vai ser 03:26.580 -&gt; 03:37.950 &#39;text / html&#39; - e esta é apenas a maneira padrão de declarar o tipo de conteúdo e vamos dizer &#39;response.end ()&#39; com 03:39.470 -&gt; 03:42.200 an &#39; <h1> &#39;tag que diz&#39; Helloooooo &#39;. 03:46.740 -&gt; 03:50.730 Se eu salvar isto e re-executar 03:54.350 -&gt; 03:57.530 bem, mais uma vez temos que reiniciar o nosso servidor. 03:57.620 -&gt; 04:02.840 Então, vamos fazer com que o nodemon se envolva aqui para que ele ouça as alterações no arquivo. 04:02.880 -&gt; 04:05.000 Eu vou para o &#39;package.json&#39; e vou salvar isso. 04:05.000 -&gt; 04:10.340 E agora vou rodar o &#39;npm start&#39; para ver que tudo está rodando. 04:10.340 -&gt; 04:12.150 Vamos voltar ao nosso arquivo &#39;server.js&#39;. 04:12.410 -&gt; 04:19.560 Se eu voltar e me refrescar, recebo &#39;helloooooo&#39;; se eu for para a aba Rede 04:20.350 -&gt; 04:28.670 eu vejo que localhost eu recebo uma resposta 200; se eu clicar nisso, vejo que a resposta foi &#39; <h1> helloooooo </h1> &#39;04:28.900 -&gt; 04:39.970 Se eu for para os cabeçalhos, vejo que era um código de status 200 e o tipo de conteúdo era&#39; text / html &#39;. 04:40.150 -&gt; 04:41.230 Muito legal. 04:41.260 -&gt; 04:43.940 Eu também posso ouvir pedidos. 04:43.990 -&gt; 04:51.720 Então, por exemplo, aqui eu poderia ter dito &#39;console.log (request.headers)&#39; 04:54.700 -&gt; 05:05.880 Eu poderia também ter dito, eu poderia também ter disse &#39;método&#39; e finalmente algo como &#39;url&#39; 05:05.880 -&gt; 05:10.430 &#39;pedido&#39; nos dá muita informação sobre os pedidos que recebemos. 05:10.530 -&gt; 05:13.700 E só assim ficamos claros sobre o que cada um deles é. 05:13.710 -&gt; 05:25.680 Eu posso dizer &quot;cabeçalhos&quot;, &quot;método&quot; e &quot;url&quot;. Se eu salvar este 05:28.820 -&gt; 05:29.540 e reexecutar 05:32.440 -&gt; 05:36.680 eu vejo que eu recebo cabeçalhos são &#39;localhost:3000&#39;. 05:36.850 -&gt; 05:42.310 Vimos que o &#39;user-agent&#39; era o Mozilla, Macintosh. Então é isso que usamos. 05:42.610 -&gt; 05:44.180 Usamos uma Apple para fazer esse pedido. 05:44.180 -&gt; 05:44.930 Tudo bem. 05:46.050 -&gt; 05:51.830 E o método era um método &#39;GET&#39; e o URL era apenas a barra invertida [\]. 05:51.900 -&gt; 05:55.890 Vamos comentar os cabeçalhos por enquanto e mostrar como as coisas mudam. 05:55.890 -&gt; 06:01.020 Se eu entro agora &#39;localhost:3000 / profile / 123&#39; 06:04.450 -&gt; 06:07.930 eu recebo &#39;método GET&#39; e &#39;url&#39; foi &#39;/ profile / 123&#39; 06:07.990 -&gt; 06:12.530 Então, obtemos informações sobre o pedido que o front-end fez, o que é muito legal. 06:13.560 -&gt; 06:22.240 Agora, com a nossa resposta, respondemos com &quot;text / html&quot;, mas você lembra do JSON, certo? Nós conversamos sobre o quão útil é 06:22.240 -&gt; 06:26.260 o JSON ao fazer requisições AJAX. 06:26.370 -&gt; 06:27.630 Podemos fazer isso aqui? 06:27.690 -&gt; 06:35.870 É claro que se eu mudar de &#39;Content-Type&#39; para &#39;application / json&#39; você terá que se acostumar com o 06:35.870 -&gt; 06:39.980 isso, mas isso é a maneira como você diz que o tipo de conteúdo é JSON. 06:40.040 -&gt; 06:50.270 Agora podemos enviar um objeto JavaScript como &#39;user&#39; e dizer &quot;name:&#39;John&#39;&quot; 06:53.210 -&gt; 06:57.280 &quot;hobby:&#39;Skating&#39;&quot;. 06:57.320 -&gt; 07:05.360 Agora esse usuário, eu posso passar aqui, mas lembre-se, a fim de transferir entre os fios, precisamos usar 07:05.510 -&gt; 07:12.980 &#39;JSON.stringify&#39; e certifique-se de verificar o vídeo JSON se isso for confuso para você. 07:13.040 -&gt; 07:22.090 Mas, novamente, estamos alterando esse objeto para uma string JSON, para que possamos enviá-lo pelos fios. 07:22.230 -&gt; 07:33.390 Se eu salvar e vamos voltar e me refrescar, veja isso! - uma resposta JSON novamente &quot;name:&#39;John&#39;, hobby:&#39;skating&#39;&quot; 07:33.960 -&gt; 07:40.560 e se eu clicar na aba Network aqui eu vejo que o &#39;Content-Type&#39; é &#39;application / json &#39;e a resposta 07:40.620 -&gt; 07:43.610 está no formato JSON. 07:43.640 -&gt; 07:47.740 Então no front-end nós rodaremos &#39;json.parse ()&#39; 07:47.750 -&gt; 07:52.520 E então este [{&quot;name:&quot; John &quot;,&quot; hobby &quot;:&quot;Skating&quot;}] para convertê-lo em um objeto JavaScript 07:52.580 -&gt; 07:53.340 Muito legal 07:54.340 -&gt; 08:03.670 Acabamos de criar nosso primeiro servidor, mas esse HTTP é bastante esqueleto, como você pode imaginar, construir servidores 08:03.670 -&gt; 08:11.670 é algo que todo mundo faz que tem um site e existem muitas ferramentas que podemos usar agora que 08:11.790 -&gt; 08:12.780 são mais elegante 08:12.840 -&gt; 08:19.500 do que rodar HTTP, e o mais popular e melhor para usar com o Node.js é algo chamado 08:19.500 -&gt; 08:23.510 Express, que vamos falar sobre o próximo vídeo 08:23.620 -&gt; 08:25.360 Eu vou te ver nessa.