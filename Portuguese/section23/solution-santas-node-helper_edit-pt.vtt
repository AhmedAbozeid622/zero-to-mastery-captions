WEBVTT

00:01.610 --> 00:02.320
Bem.

00:02.360 --> 00:10.460
Espero que todos tenham a chance de resolver o pequeno quebra-cabeça do Advent of Code Santa que ele tem aqui.

00:10.610 --> 00:18.590
Eu vou mostrar a você agora o que eu faria se estivesse lendo esta pergunta ou se eu estivesse olhando para isto

00:18.590 --> 00:24.980
problema lógico que novamente é algo que em entrevistas você se perguntou muito.

00:25.130 --> 00:33.410
E no seu dia de hoje, quando você resolve problemas complexos, eles geralmente são os pequenos pedaços de questões lógicas

00:33.410 --> 00:35.190
que são perguntados e você quer resolver.

00:35.600 --> 00:38.320
Então eu vou passar pelo que eu faria.

00:38.330 --> 00:43.130
Não significa que é o único caminho, mas o que eu faria para resolver esses problemas.

00:44.520 --> 00:44.880
Bem.

00:44.910 --> 00:47.520
Até agora você já leu a pergunta.

00:47.520 --> 00:57.630
E o que precisamos fazer, então, depois de ler a pergunta, eu obteria minha entrada de quebra-cabeças que tenho aqui.

00:57.660 --> 01:05.230
Eu vou copiar tudo isso e aqui mesmo eu tenho minha pasta 'awesome node' sem nada dentro dela.

01:05.310 --> 01:14.830
Eu estou indo apenas para criar um arquivo 'santa.txt' e neste arquivo de texto, vou copiar e colar as instruções.

01:14.860 --> 01:18.400
Bem, não temos ideia do que está acontecendo.

01:19.810 --> 01:21.290
Deixe-me fechar isso.

01:21.760 --> 01:29.140
Agora, lendo a pergunta, a primeira coisa que quero fazer é ter certeza de que tenho um arquivo de script

01:29.950 --> 01:33.750
que eu posso correr. Bem.

01:33.750 --> 01:39.610
Agora, antes de começar a codificar qualquer coisa, tudo na minha cabeça precisa fazer sentido.

01:39.840 --> 01:41.710
E eu gosto de manter as coisas organizadas.

01:41.910 --> 01:48.570
Então, a primeira coisa que costumo fazer é comentar e dizer que - ao ler a pergunta, sabemos que

01:48.570 --> 01:50.530
Existem duas partes.

01:50.790 --> 01:53.810
Há a questão número um.

01:54.030 --> 01:55.660
Pergunta número dois.

01:55.840 --> 02:09.670
Então, vamos nos concentrar apenas no primeiro, que é "Em que andar o Papai Noel acaba"

02:09.740 --> 02:16.800
E a segunda questão é, bem, se formos aqui, o primeiro personagem que faz com que ele entre no porão.

02:16.820 --> 02:27.150
Então, queremos dizer "Quando é que o Papai Noel entra primeiro no porão".

02:27.170 --> 02:27.560
Bem.

02:27.560 --> 02:29.680
Então agora eu tenho tudo claro.

02:29.780 --> 02:32.480
E também sabemos que há algumas regras.

02:32.660 --> 02:47.190
As regras são:esse personagem significa que 'ele' ou - não 'ele' - 'Papai Noel' deve subir um andar.

02:47.320 --> 02:56.680
E também sei que esse personagem é o oposto e deve descer um andar. E eu sei que isso é

02:56.680 --> 03:02.980
bobo, mas é muito importante para você escrever as coisas e entender o que você está fazendo e o que

03:02.980 --> 03:04.540
seus objetivos são.

03:04.570 --> 03:15.000
Sabemos que queremos resolver essa questão usando esses parâmetros que recebemos de nossa entrada, que

03:15.000 --> 03:17.700
é bem barulhento por enquanto.

03:19.450 --> 03:19.660
Certo.

03:19.670 --> 03:25.120
Então, a questão número um sempre é começar com uma função legal e nós vamos apenas dizer.

03:25.120 --> 03:26.870
'questão 1'.

03:28.650 --> 03:34.930
E dentro de 'question1' eu vou fazer o nosso arquivo de leitura.

03:34.980 --> 03:38.760
Então vamos para o topo aqui e fazer.

03:38.790 --> 03:45.040
'const fs = require (' fs ')'

03:45.170 --> 03:49.380
Tudo bem e nós fizemos isso antes, então isso deve ser bastante simples.

03:49.520 --> 03:53.140
fs.readFile

03:53.220 --> 03:58.050
Nós vamos ler o arquivo 'santa.txt'.

03:59.010 --> 04:04.290
E o arquivo santa.txt receberá um erro ou dados

04:07.350 --> 04:10.580
e aqui dentro, vamos ignorar 'err' por enquanto.

04:10.620 --> 04:23.480
Tenho certeza que vai funcionar, então eu vou dizer 'direções const' serão 'data.toString ()'

04:25.120 --> 04:29.780
e isso por si só significa que a variável 'direções'

04:30.190 --> 04:31.120
agora tem

04:33.810 --> 04:35.020
as direções que queremos.

04:35.040 --> 04:38.540
Então deixe-me apenas executar isso para se certificar de que está tudo bem.

04:39.840 --> 04:46.900
E você viu aqui que nada é impresso porque essa função nunca foi executada - então vamos fazer isso.

04:46.920 --> 04:47.610
Nós vamos dizer.

04:47.610 --> 04:49.630
'questão 1()'.

04:49.980 --> 04:51.000
Vamos correr.

04:54.140 --> 05:00.990
Parece que estamos imprimindo toda essa informação, que é exatamente o que queremos.

05:00.990 --> 05:02.630
Essas são as direções.

05:02.820 --> 05:09.390
E isso é outra coisa. Eu gosto de fazer as coisas passo a passo, certificando-me de que tudo funcione antes de eu escrever

05:09.390 --> 05:14.210
tudo fora e depois "uh-oh algo está errado, mas eu não sei o que está errado."

05:14.220 --> 05:21.780
Eu dou um passo de cada vez, logicamente falando na minha cabeça para ter certeza de que faz sentido. Como eu sou

05:21.780 --> 05:23.010
escrevendo isso,

05:23.010 --> 05:25.690
Tudo flui como se eu estivesse falando.

05:25.740 --> 05:33.030
Temos a primeira questão que estamos lendo arquivo (santa.txt) e do 'santa.txt', estamos recebendo as instruções.

05:33.030 --> 05:33.650
Bem.

05:33.810 --> 05:35.820
Então, o que queremos fazer a seguir?

05:36.120 --> 05:41.600
Bem, nós vimos na saída que estes, bem, são apenas uma grande corda.

05:41.610 --> 05:44.320
Mas, idealmente, podemos dividi-los.

05:44.670 --> 05:50.460
Então, se os dividirmos, podemos analisar cada um, um por um como um array, talvez possamos mapear em um

05:50.460 --> 06:02.470
matriz, então uma maneira sorrateira de fazer isso é que podemos apenas dizer 'const direçõesArray' e essas direções

06:02.470 --> 06:13.460
array será dividido em arrays fazendo '.split' e dividindo-o assim.

06:13.580 --> 06:17.180
E há apenas um pequeno truque de taquigrafia.

06:17.570 --> 06:21.500
Então, novamente, se eu 'console.log (directionsArray)'

06:27.710 --> 06:31.400
lá vai você, eu tenho tudo em uma matriz.

06:31.400 --> 06:35.500
Isso é um monte de itens na matriz, mas tudo é dividido individualmente agora.

06:35.700 --> 06:41.810
Tudo bem, o próximo passo. Então eu tenho cada array, então queremos ler cada um deles, porque cada um equivale

06:41.810 --> 06:45.680
para cima ou para baixo 1.

06:45.740 --> 06:52.820
E queremos mapear isso, queremos passar por cima de cada um deles, mas estamos acumulando algo certo.

06:52.820 --> 06:57.980
Estamos dizendo "um", então se temos dois andares acima, isso é "dois".

06:58.070 --> 07:02.930
Se formos um que é "um" - estamos adicionando e subtraindo constantemente.

07:02.930 --> 07:06.560
Então, nesse caso, podemos realmente reduzir.

07:06.860 --> 07:19.260
Então, com o Reduce, eu posso dizer "resposta const", neste caso, será "directionsArray. (Reduzir)" e isso reduzir

07:19.470 --> 07:21.870
pega a primeira função.

07:21.870 --> 07:30.990
Então o primeiro parâmetro é uma função e esta função pega o acumulador e eu apenas faço 'acc'.

07:30.990 --> 07:33.600
por enquanto só porque é mais curto.

07:33.840 --> 07:38.110
E então o segundo é o valor atual.

07:38.190 --> 07:43.690
Deixe-me fazer isso menor para que você possa ver - e esta é uma função

07:46.560 --> 07:48.560
que vamos fazer algumas coisas aqui.

07:48.570 --> 07:53.700
Mas o segundo parâmetro é o que queremos começar no acumulador.

07:53.700 --> 07:55.080
Então, vamos começar com zero.

07:55.080 --> 08:01.150
Então o Papai Noel está no andar zero, no térreo - aqui dentro

08:01.200 --> 08:11.690
podemos apenas dizer se o valor atual - porque reduzir mapas em cada um desses itens e se o atual

08:11.690 --> 08:20.410
valor '===' e digamos, isso, que é de 1 andar.

08:20.410 --> 08:29.440
Se for esse o caso, bem podemos apenas "retornar acc".

08:29.540 --> 08:36.750
'+ = 1', que é uma forma abreviada de acumular mais 1.

08:37.160 --> 08:40.770
Então isso adiciona um ao acumulador.

08:40.850 --> 08:48.060
Então, se o primeiro item for esse pequeno colchete aqui, será 0 mais 1.

08:48.070 --> 08:57.000
Então o Papai Noel subirá um nível e depois diremos 'mais se'

08:57.610 --> 08:59.320
'currentValue ==='

09:02.520 --> 09:06.330
o colchete oposto ')', do que fazemos exatamente o oposto.

09:06.330 --> 09:12.490
E nós vamos ao nosso 'return acc - = 1'.

09:12.540 --> 09:13.920
Então vai descer um

09:17.250 --> 09:17.890
Bem.

09:18.300 --> 09:22.460
Então, apenas por curiosidade, vamos rodar isso e ver o que acontece.

09:22.480 --> 09:32.380
Eu vou 'limpar' e executar isso uma vez e não conseguimos nada, porque bem, não dissemos nada.

09:33.430 --> 09:37.790
Então, vamos apenas consolar log no final disso:nós temos a resposta.

09:37.900 --> 09:42.510
Então vamos apenas 'console.log'

09:45.720 --> 09:46.570
'responda:'

09:47.490 --> 09:52.980
E nós diremos que a "resposta", ou vamos apenas dizer "andar:"

09:53.760 --> 10:00.750
Então, se eu correr isso de novo. Uh-oh eu recebo um pouco de erro e isso é porque eu esqueci de vir aqui.

10:00.750 --> 10:01.660
Me bobo.

10:01.710 --> 10:09.490
Vamos executar isso de novo, deixe-me claro e eu recebo 'floor:280' e essa é a resposta.

10:09.490 --> 10:11.920
É aí que o Papai Noel acaba.

10:12.010 --> 10:18.020
Ele acaba no andar 280 se continuar seguindo a direção até o final.

10:19.230 --> 10:20.490
Muito legal.

10:20.490 --> 10:32.600
Então, novamente, apenas por curiosidade, vamos adicionar tempo para descobrir quanto tempo isso leva - e nós diremos 'console.time'

10:32.690 --> 10:37.540
Oops Whoa

10:37.670 --> 10:40.410
Meu pequeno guia não está funcionando bem hoje.

10:40.520 --> 10:48.370
E vamos dizer 'santa-time' e este 'santa-time' dentro desta função.

10:48.470 --> 10:58.960
Até conseguirmos a resposta, vamos dizer "santa-time" - e se eu executar isso, nossa função será executada a quatrocentos

10:59.530 --> 11:02.910
trinta e sete, 0.437 ms

11:02.980 --> 11:07.570
Tão bem rápido, porque não estamos fazendo nada muito louco.

11:07.570 --> 11:09.640
Tão curioso por que você chegou aqui.

11:09.640 --> 11:15.110
Tenha em mente que isso realmente depende do tipo de máquina, do tipo de máquina em que você está.

11:15.130 --> 11:20.400
Mas, novamente, é muito divertido pensar em como estruturar seu código.

11:20.650 --> 11:23.680
Então, em primeiro lugar, faz sentido.

11:23.740 --> 11:25.030
Corre bem.

11:25.450 --> 11:32.170
E também, você quer ter certeza de que é eficiente - e olhando para isso.

11:32.200 --> 11:34.820
Nós não estamos fazendo nada muito ineficiente.

11:35.020 --> 11:42.230
Tudo bem, vamos passar para a questão número dois. E pergunta número dois - vamos abrir espaço para isso - pergunta

11:42.230 --> 11:47.270
o número 2 pergunta quando é que o Papai Noel entra pela primeira vez no porão.

11:47.270 --> 11:54.650
Então, isso está bem usando esse loop aqui - quando o Papai Noel começa a buscar orientação.

11:54.650 --> 11:59.030
Quando o acumulador entra no número negativo.

11:59.170 --> 12:05.030
Agora posso simplesmente copiar e colar isso na questão número dois.

12:06.650 --> 12:10.750
E apenas talvez adicione uma declaração 'if' aqui.

12:10.910 --> 12:19.120
Talvez eu possa dizer "se acc for menor que zero".

12:20.170 --> 12:25.730
Então você sabe, podemos dizer 'consola.log' a resposta.

12:25.870 --> 12:27.750
E isso funciona bem.

12:28.620 --> 12:34.550
Mas, novamente, pensando na questão, isso reduz o mapeamento de tudo.

12:34.650 --> 12:40.320
E você lembra que esse é um array bem grande que estamos criando fora das direções.

12:40.350 --> 12:45.900
Então, se o Papai Noel, no primeiro movimento, for para o porão.

12:46.020 --> 12:50.290
E então ainda passamos por todos os itens da matriz.

12:50.370 --> 12:52.530
Isso é um pouco de tempo perdido.

12:52.770 --> 12:53.310
Certo.

12:53.310 --> 13:00.750
Então, queremos pensar sobre os problemas de maneiras que fazem sentido para nós e são eficientes; e isso é algo

13:00.810 --> 13:02.630
mais uma vez que você quer praticar.

13:02.630 --> 13:07.680
Faz sentido em sua cabeça se você deveria fazer isso manualmente?

13:07.920 --> 13:17.250
Você passaria passo a passo através de tudo, ou você apenas pararia quando o Papai Noel entrasse no porão?

13:17.250 --> 13:19.080
no número negativo.

13:19.080 --> 13:21.700
Então, vamos encontrar uma maneira melhor de fazer

13:21.720 --> 13:26.280
questão número dois. Novamente com a questão número dois

13:26.290 --> 13:41.420
Eu vou dizer 'function question2 ()', e aqui dentro diremos 'fs.readFile' mais uma vez.

13:44.490 --> 13:50.550
E este arquivo lido irá ler './santa.txt'.

13:50.760 --> 13:52.530
Novamente, isso é o mesmo que acima.

13:52.650 --> 14:01.800
Então, eu vou fazer isso rapidamente, e como a primeira parte, quais são as direções e

14:01.800 --> 14:08.280
-los em uma matriz, isso é o mesmo, então eu só vou copiar isso, novamente recebendo as instruções fazendo

14:08.280 --> 14:10.230
em um array dividindo-o.

14:10.350 --> 14:18.300
E agora vou adicionar uma pequena função que acho melhor que reduzir neste caso. Então eu vou

14:18.300 --> 14:24.000
para dizer o 'const resposta = directionsArray.some ()'

14:24.200 --> 14:33.960
E alguns o que ele faz é olhar através do array, ir passo a passo e se encontrar algo

14:33.960 --> 14:37.600
que combina, vai parar de fazer loop.

14:37.800 --> 14:46.260
Então, com 'directionsArray.some', eu terei o valor atual e esse valor atual.

14:46.800 --> 14:52.800
Então esse é o item ou o suporte que estamos obtendo.

14:54.140 --> 14:55.570
Então esse valor atual.

14:56.000 --> 15:01.250
Novamente vamos fazer isso se declaração, valor atual e valor atual, vamos adicionar um ou

15:01.250 --> 15:02.540
subtrair um.

15:02.540 --> 15:05.820
Então, novamente eu copio e colo aqui.

15:05.820 --> 15:14.160
Mas, novamente, nós não temos realmente essa função. E porque não estamos realmente usando uma redução, mas

15:14.160 --> 15:19.820
nós queremos manter o controle de um contador para ver quando o Papai Noel vai entrar no porão.

15:19.830 --> 15:24.600
Então, fora da função eu vou dizer 'deixe acumulador'.

15:24.720 --> 15:35.890
Deixe-me ser mais descritivo desta vez, e digamos 0 e esse acumulador será incrementado

15:36.010 --> 15:37.410
com base nas instruções.

15:37.420 --> 15:37.880
Bem.

15:38.050 --> 15:45.080
Então, usando isso, vamos ver qual será a minha 'resposta do console.log'.

15:45.190 --> 15:51.520
Então, vamos dizer de novo 'cave entrou em:'

15:54.670 --> 16:01.060
e vamos dizer "responder" e deixe-me remover

16:01.060 --> 16:06.860
pergunta 1 por enquanto e apenas execute a pergunta dois.

16:07.070 --> 16:12.940
Vamos executar isso, 'porão entrou em:true'.

16:13.160 --> 16:19.760
E nós cometemos um erro aqui porque o que queremos fazer de '.algum' é que queremos devolver algo que queremos

16:19.760 --> 16:22.930
para retornar quando uma meta for atingida.

16:22.940 --> 16:26.600
Então, no final, vamos dizer 'return accumulator'

16:29.060 --> 16:32.930
e quando o acumulador é maior que zero.

16:32.960 --> 16:41.720
Lembre-se de que o retorno termina a função; nós vamos dizer "Pare o que você está fazendo" e então isso vai

16:41.720 --> 16:43.040
para terminar a função.

16:43.100 --> 16:48.080
Mas queremos saber quando é que o Papai Noel entra pela primeira vez no porão.

16:48.080 --> 16:54.490
Então, esse é um:que número de direções o Papai Noel faz antes de entrar no porão.

16:54.500 --> 16:57.730
Então, nós também precisamos de um contador.

16:57.840 --> 17:00.390
Então, esse contador será igual a zero.

17:00.600 --> 17:03.830
E eu perdi um monte de ponto-e-vírgula aqui, mas tudo bem.

17:04.020 --> 17:14.520
E vamos aumentar o contador toda vez que passa por um item.

17:14.680 --> 17:23.540
E agora a resposta, bem, não isso, mas a resposta vai ser o contador em si.

17:23.540 --> 17:32.780
Então, se eu fizer counter, save, okay e vamos rodar isso. E eu realmente cometi um erro aqui porque é

17:32.780 --> 17:39.740
ainda zero porque o contador está sendo incrementado após a declaração de retorno.

17:39.740 --> 17:44.710
Então, 'currentValue', vamos realmente nomear este 'currentItem'.

17:44.750 --> 17:52.630
É muito mais descritivo:'currentItem'.

17:52.710 --> 17:55.820
Isso está sendo retornado antes mesmo de você atingir o contador.

17:55.890 --> 18:01.570
Então, no nosso caso, ao contrário do que foi dito acima, nós realmente não precisamos da declaração de retorno.

18:04.640 --> 18:09.330
Nós vamos salvar, correr e lá você vai.

18:09.570 --> 18:14.210
E a resposta, neste caso, é mil setecentos e noventa e sete.

18:15.770 --> 18:16.390
Impressionante.

18:16.400 --> 18:24.260
Então, novamente para testar, vamos usar o nosso 'santa-time' agora, para copiar de cima e vamos colocá-lo em

18:24.260 --> 18:35.210
o topo para 'console.time' e o fim para 'console.timeEnd'. Vamos ver o quão rápido essa função é executada.

18:35.370 --> 18:38.910
Nós temos novamente, muito rápido.

18:38.910 --> 18:47.200
Mas se eu reduzir, o que no nosso caso é o que usamos para a primeira pergunta.

18:47.200 --> 18:52.470
Então vamos apenas passar por isso, vemos isso

18:52.640 --> 18:59.090
Bem, a primeira rodada de 'console.time (' santa-time ')', que é a questão 1 é

18:59.130 --> 19:12.790
Deixe-me adicionar um q1 aqui para que possamos ver e q2, adicione isso para garantir que os rótulos coincidam

19:18.460 --> 19:19.940
Vamos fazer isso de novo.

19:30.390 --> 19:32.040
Isso é muito melhor.

19:32.040 --> 19:35.930
Então, vemos essa questão 1.

19:36.050 --> 19:42.540
Definitivamente longo, corre um pouco mais do que a pergunta 2, porque a primeira vez que temos que percorrer

19:42.540 --> 19:43.520
tudo.

19:43.530 --> 19:47.540
A segunda vez é muito menos tempo. Apenas por diversão

19:47.550 --> 19:50.690
novamente, como é testar nossas suposições.

19:50.730 --> 19:52.980
Então, se a primeira direção foi

19:56.000 --> 20:01.160
para descer. Vamos ver o que acontece.

20:01.160 --> 20:06.890
Tudo bem, isso é um pouco mais rápido do que antes.

20:06.900 --> 20:12.720
Não por muito, porque ainda estamos meio que fazendo alguns cálculos, mas ainda muito mais rápido do que indo

20:12.720 --> 20:19.600
através deste muitos itens. Apenas no caso de você estar se perguntando por que neste caso a pergunta 2 terminou

20:19.650 --> 20:23.400
antes da primeira pergunta e não nos outros casos,

20:23.400 --> 20:30.890
Lembre-se novamente que o arquivo Read é assíncrono. Qualquer um que retorna primeiro, é retornado.

20:30.930 --> 20:31.470
Bem.

20:31.470 --> 20:33.480
Espero que você se divirta com os desafios.

20:33.670 --> 20:40.800
Se você gostou disso, eu recomendo que você continue com o advento do código e esperançosamente como um grupo,

20:40.920 --> 20:42.010
com a nossa comunidade.

20:42.210 --> 20:49.100
Quando dezembro chegar, estaremos todos prontos para acompanhar o advento do código para este ano.

20:49.170 --> 20:50.730
Eu vejo você no próximo. Tchau tchau
