WEBVTT 00:01.450 -&gt; 00:03.440 Bem-vindo de volta. Neste vídeo 00:03.450 -&gt; 00:09.000 eu quero falar sobre um conceito importante no Express e isso é middleware. 00:09.110 -&gt; 00:10.430 Deixe-me mostrar como isso funciona. 00:10.550 -&gt; 00:20.030 Se eu rodar o servidor aqui eu só tenho um servidor simples que envia &#39;testest&#39;, o Express tem um conceito de middleware 00:21.180 -&gt; 00:28.720 e se eu fizer &#39;app.use () &#39;este é um middleware genérico do Express que eu posso entrar aqui. 00:29.040 -&gt; 00:35.730 E o que o middleware faz é - como o nome sugere - quando o pedido está chegando, ele vai passar por 00:35.730 -&gt; 00:40.420 esta função &#39;use&#39; e então goteje para o que tivermos:00:40.420 -&gt; 00:47.430 POST, PUT, DELETE e este middleware vai fazer algo para o pedido que acabamos de ter na ordem 00:47.430 -&gt; 00:50.880 para talvez tornar mais fácil trabalhar aqui embaixo. 00:52.280 -&gt; 01:02.020 Vamos demonstrar esse exemplo:&#39;app.use ()&#39; recebe &#39;request&#39;, &#39;response&#39; e então algo chamado &#39;next&#39;. 01:02.240 -&gt; 01:04.010 E dentro desta função 01:07.830 -&gt; 01:10.710 vamos apenas dizer &#39;console.log ()&#39; 01:14.390 -&gt; 01:15.000 &#39; <h1> Helllooo </h1> &#39;01:18.750 -&gt; 01:27.600 Se salvarmos e voltarmos aqui e rodar o localhost, hmmm está pendurado aqui. 01:27.700 -&gt; 01:31.170 Mesmo que eu abra o console, nada está acontecendo. 01:31.390 -&gt; 01:38.170 Se eu voltar, vejo que &#39; <h1> helllooo </h1> &#39;é acionado porque eu estou logando no console mas nunca chega aqui 01:41.540 -&gt; 01:49.950 bem porque é para o middleware continuar passando os dados através dele e chamar&#39; next &#39;. 01:50.340 -&gt; 01:52.720 O terceiro parâmetro. 01:52.810 -&gt; 01:59.530 Então, chamando &#39;next&#39; se eu atualizar, recebo &#39;testest&#39;. 01:59.620 -&gt; 02:09.620 Então o middleware do jeito que funciona é que usamos o &#39;app.use ()&#39; para receber os pedidos do site; o pedido 02:09.620 -&gt; 02:10.510 é enviado. 02:10.520 -&gt; 02:12.190 Podemos fazer o que quisermos com isso. 02:12.200 -&gt; 02:17.010 No nosso caso, não estamos realmente tocando, estamos apenas registrando o console &#39; <h1> helllooo </h1> &#39;e então chegamos ao próximo 02:17.030 -&gt; 02:21.740 e então o Express continua executando estes [app.get () e app.listen ()]. 02:21.830 -&gt; 02:26.030 E embora você possa estar pensando por que isso é útil? 02:26.060 -&gt; 02:31.920 Há muitos casos que mostrarei mais tarde, enquanto o middleware é importante, e os middlewares 02:31.920 -&gt; 02:40.220 são ótimos scripts que as pessoas escreveram previamente que você pode adicione ao seu servidor, mas você verá que mais 02:40.220 -&gt; 02:40.970 no próximo vídeo. 02:40.970 -&gt; 02:47.760 Eu só queria te mostrar o conceito básico de middleware:algo que recebe antes do tempo antes de 02:47.760 -&gt; 02:55.570 chegarmos às rotas, a requisição, modificá-lo e depois passa a próxima função para continuar. 02:56.640 -&gt; 02:58.410 eu verei no próximo. Tchau tchau.