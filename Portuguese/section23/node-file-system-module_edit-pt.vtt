WEBVTT

00:00.980 --> 00:02.900
Olá pessoal.

00:02.900 --> 00:04.000
Bem vindo de volta.

00:04.280 --> 00:12.170
E neste vídeo, quero mostrar-lhe algo que me deixou muito entusiasmado quando comecei

00:12.170 --> 00:19.040
nó de aprendizagem, e esperamos que você fique tão empolgado quanto eu enquanto analisamos este vídeo e depois fazemos

00:19.040 --> 00:20.300
um pouco de desafio.

00:20.300 --> 00:21.310
Vai explodir sua mente.

00:21.330 --> 00:25.760
Pelo menos para mim quando comecei a aprender a codificar.

00:25.850 --> 00:34.250
Agora, no vídeo anterior, falamos sobre algo chamado módulo FS que vem com o nó, e isso

00:34.250 --> 00:39.590
é algo que é construído no nó e a forma como o obtemos é que faremos o const.

00:39.760 --> 00:50.360
Bem, na verdade precisamos de um arquivo primeiro, então vamos fazer um script de script.js, vamos criar um novo script perfeito.

00:50.400 --> 00:52.920
Tudo bem, podemos fechar isso porque não precisamos disso.

00:53.490 --> 01:02.190
E no script.js que temos nesta pasta ou em algum nó, podemos ter 'const fs'.

01:02.210 --> 01:14.990
é igual a require ('fs') ', então aqui FS significa sistema de arquivos e se você tiver o nó baixado terá acesso

01:14.990 --> 01:15.460
para isso.

01:15.470 --> 01:17.680
Apenas fazendo isso.

01:17.880 --> 01:21.750
Agora, por que isso é tão excitante e tão útil?

01:22.320 --> 01:30.830
Bem, porque o sistema de arquivos do FS permite que você acesse o nosso sistema de arquivos, o que novamente não parece tão empolgante.

01:30.840 --> 01:38.230
Mas deixe-me demonstrar o que acontece e por que isso é útil - então fique comigo aqui.

01:38.280 --> 01:42.080
Eu vou fazer um pouco de codificação e depois vou explicar exatamente o que está acontecendo.

01:43.140 --> 01:48.470
Então, vamos usar o 'fs.readFile'.

01:48.560 --> 01:50.720
É bem autoexplicativo.

01:51.200 --> 02:01.380
Nós temos um parâmetro em branco e, em seguida, temos erro de erro, dados.

02:01.760 --> 02:03.710
E esta é uma função de seta.

02:05.450 --> 02:12.270
Portanto, o segundo parâmetro é uma função e essa função tem erro ou dados.

02:12.310 --> 02:24.630
Então, para o erro, eu vou dizer se há um erro, vamos apenas errar, ou podemos apenas dizer ponto de consola

02:25.020 --> 02:30.660
log errrroooorrr. Realmente enfie na cara deles.

02:31.550 --> 02:42.680
Bem! Agora, se não houve um erro, vamos apenas dizer bem, vamos apenas dizer console.log e vamos apenas sair

02:42.680 --> 02:45.150
seja qual for o dado.

02:45.370 --> 02:45.990
Bem.

02:46.150 --> 02:47.720
Deixe-me adicionar o ponto e vírgula.

02:48.830 --> 02:51.090
E salve isso.

02:51.100 --> 02:59.440
Então o que eu faço aqui. Acabei de importar o módulo FS que vem com o nó e o módulo FS tem um método

02:59.740 --> 03:01.670
readFile () que

03:01.720 --> 03:05.480
Bem, parece que lê algum tipo de arquivo.

03:05.560 --> 03:13.300
O primeiro parâmetro é o arquivo real que queremos fazer, então o caminho para o arquivo, que ainda não temos.

03:13.300 --> 03:14.650
Então vamos criar um.

03:14.650 --> 03:25.200
Vou dizer novo arquivo e vamos chamá-lo 'hello.txt', e com 'hello.txt', vamos fazer o nosso clássico

03:26.300 --> 03:27.850
helllloooooo lá !!!

03:29.090 --> 03:32.300
E coisas excitantes, então pontos de exclamação.

03:32.540 --> 03:37.120
Nós salvamos isso e agora podemos dizer que queremos ler o arquivo.

03:37.190 --> 03:40.340
'hello.txt' do diretório atual.

03:41.140 --> 03:42.340
Olá ponto

03:42.790 --> 03:45.140
texto.

03:45.280 --> 03:50.450
Agora este método readFile vai encontrar o arquivo com o caminho,

03:50.500 --> 03:52.700
ok, então aqui está.

03:52.840 --> 03:59.420
Ele vai lê-lo e, em seguida, se houver um erro, ele vai cuspir um erro.

03:59.590 --> 04:06.670
Se houver algum tipo de dado e tudo o que for bem sucedido, ele vai cuspir dados. Com o

04:06.670 --> 04:08.300
maneira podemos executar este arquivo no nó.

04:08.310 --> 04:13.720
Bem, bem, primeiro vou ter que salvá-lo. Vamos dizer nó script.js

04:15.140 --> 04:19.740
Entre e eu tenho buffer.

04:20.920 --> 04:22.740
O que é isso?

04:22.840 --> 04:27.460
E isso é porque temos que fazer um pouco de codificação.

04:27.670 --> 04:34.680
E o que isso significa é que se eu fizer isso 'toString ()', vamos tentar e mostrar o que quero dizer.

04:37.450 --> 04:38.530
E eu entendo

04:38.770 --> 04:41.250
Olá.

04:41.260 --> 04:49.530
Então o 'readFile' lê o arquivo como o nome sugere, e ele vai cuspir o que estiver lendo.

04:50.010 --> 04:50.750
Dados.

04:51.500 --> 04:55.490
Agora, por que temos que colocar o 'toString ()' aqui.

04:56.970 --> 05:04.380
Só assim você sabe 'toString ()' faz alguma coisa, por padrão, se você não adicionar nada, ele vai usar o

05:04.380 --> 05:11.280
codificação chamada UTF 8 e UTF 8 é um tipo de codificação.

05:11.420 --> 05:14.640
Vamos apenas executar isso para ter certeza de que isso ainda é o mesmo.

05:14.750 --> 05:15.530
Sim.

05:15.530 --> 05:20.300
Então UTF 8 é um tipo de codificação que nós temos.

05:20.300 --> 05:22.980
Isso é bastante normal com o HTML 5.

05:23.000 --> 05:26.900
E praticamente todo mundo usa na web.

05:27.290 --> 05:37.160
É uma maneira de termos personagens, sejam eles personagens latinos, você sabe da ABC ou temos coreano

05:37.160 --> 05:45.770
Japonês, caracteres chineses, todos eles são representados por um número, e UTF 8 é uma maneira de codificar esses

05:45.770 --> 05:48.870
números para se certificar de que podemos lê-los.

05:48.920 --> 05:55.910
Na verdade, é um assunto bastante complexo, então eu recomendo a página da Wikipedia que fala sobre o UTF 8.

05:55.970 --> 06:03.420
Por enquanto, apenas saiba que o UTF 8 é um tipo de codificação que é praticamente padrão em toda a web.

06:03.500 --> 06:09.290
Você também pode ter visto ASCII e ASCII antes do UTF 8 existir.

06:09.290 --> 06:19.610
ASCII foi principalmente para idiomas latinos, assim o ABCs; e UTF expandiu isso para incluir muitos mais de

06:19.860 --> 06:22.540
muitos mais idiomas de diferentes partes do mundo.

06:22.960 --> 06:29.780
Tudo bem, um pouco de tangente que nós não precisamos continuar, mas como você pode ver aqui nós

06:30.530 --> 06:30.990
ter

06:31.070 --> 06:35.300
'helllloooooo there' e somos capazes de ler o arquivo.

06:35.300 --> 06:36.320
Bem.

06:36.330 --> 06:37.030
Muito legal.

06:38.270 --> 06:42.810
Deixe-me adicionar outro método ao seu repertório.

06:43.250 --> 06:57.160
Vamos também fazer 'fs.readFileSync ()' e 'fs.readFileSync ()' funciona um pouco diferente do anterior

06:57.160 --> 07:00.210
um e sync significa síncrono.

07:00.580 --> 07:01.540
Então vamos ver o que acontece.

07:01.540 --> 07:02.500
Eu vou colocar

07:05.340 --> 07:12.230
'hello.txt' mais uma vez, e desta vez eu vou deixar assim.

07:14.150 --> 07:26.630
E vamos apenas dizer que isso vai ser igual ao arquivo e vamos apenas 'console.log (arquivo)'.

07:26.650 --> 07:27.020
Bem.

07:27.050 --> 07:31.710
Deixe-me salvar isso e executar isso.

07:31.760 --> 07:32.390
Bem.

07:32.460 --> 07:37.370
Sabemos mais uma vez que conseguimos isso porque precisamos fazer 'toString ()'.

07:37.440 --> 07:38.610
Então vamos fazer isso.

07:38.640 --> 07:42.660
Eu vou tentar 'toString ()'

07:46.060 --> 07:51.020
Eu vou salvar e rodar isso de novo. Tudo bem, eu recebo

07:51.280 --> 07:52.410
'helllloooooo lá !!!'

07:52.510 --> 08:05.020
Mas apenas para distingui-los, vamos apenas dizer que este é o número um e este é o número dois.

08:05.450 --> 08:07.660
Eu salvo isso, corra isso de novo.

08:08.630 --> 08:12.510
E whoa, o que acabou de acontecer.

08:14.050 --> 08:21.140
Nós temos um vindo depois dos dois.

08:21.920 --> 08:30.830
Agora, se você assistiu ao vídeo síncrono assíncrono deste curso, talvez entenda o que há

08:30.830 --> 08:32.090
acontecendo aqui.

08:32.090 --> 08:34.210
Se não, vou fazer uma sinopse rápida.

08:34.220 --> 08:42.610
Mas eu recomendo que você verifique esse vídeo. Agora leia o arquivo é assíncrono, e é por isso que tem algo

08:42.610 --> 08:45.200
chamado a função de retorno de chamada.

08:45.220 --> 08:53.290
Está dizendo:ei, eu vou ler este arquivo, e quando eu terminar com isso, você vai continuar com o seu

08:53.290 --> 08:55.120
negócios e continue lendo.

08:55.120 --> 08:59.010
Linha três, linha quatro, linha cinco, linha seis, até 11.

08:59.260 --> 09:07.010
Quando terminar, avisarei e ou lhe darei um erro ou alguns dados. 'readFileSync ()' que

09:07.010 --> 09:11.740
é síncrono diz:vou ler este arquivo.

09:11.780 --> 09:14.750
Não faça nada, apenas espere aqui quando eu terminar

09:14.750 --> 09:18.600
Eu vou atribuí-lo ao 'arquivo' e então você pode continuar.

09:20.210 --> 09:30.080
Então, como você pode ver aqui, o que acontece é que lemos o arquivo e, como isso é assíncrono,

09:30.080 --> 09:41.280
para executar isso e vir para a linha 10 e executar o 'fs.readFileSync ()' e o 'readFileSync ()' porque está dizendo

09:41.280 --> 09:45.150
hey espere até eu terminar isso, vai imprimir

09:45.330 --> 09:46.920
'helllloooooo lá !!!'

09:47.160 --> 09:52.340
e então o código assíncrono vai dizer:hey eu terminei de ler o arquivo,

09:52.380 --> 09:55.770
aqui estão os dados e são impressos aqui.

09:55.770 --> 09:59.860
Novamente eu realmente recomendo que você verifique o vídeo síncrono assíncrono.

10:00.330 --> 10:03.070
Mas por enquanto, espero que isso faça sentido.

10:03.240 --> 10:12.240
Agora olhando para isso, qual você deve usar? Bem, para um caso simples como este,

10:12.400 --> 10:19.690
podemos usar o que quisermos. Mas você pode ver um problema com o segundo, especialmente se estamos construindo

10:19.690 --> 10:21.150
algo como um servidor.

10:21.250 --> 10:25.090
Se temos um arquivo enorme que tem algo mais do que 'helllloooooo there !!!',

10:25.300 --> 10:34.360
Bem, se estamos fazendo 'readFileSync ()', o que acontece é que vamos interromper ou pausar a execução do nosso

10:34.360 --> 10:39.980
arquivo e ele vai ler o texto inteiro.

10:40.370 --> 10:47.000
E o programa só vai esperar que isso termine; versus o arquivo de leitura que diz:ei você

10:47.000 --> 10:48.230
pode continuar em frente.

10:48.320 --> 10:50.340
Eu vou deixar você saber quando eu terminar com isso.

10:50.360 --> 10:56.210
Então, quando você está construindo um servidor e digamos um servidor expresso com rotas.

10:56.360 --> 11:03.530
Bem, nesse caso, queremos usar o readFile () se estamos lendo qualquer tipo de arquivo ou arquivo de texto, seja qual for

11:03.530 --> 11:04.160
isto é.

11:04.310 --> 11:08.680
Porque dessa forma não estamos bloqueando a execução e o programa pode continuar fazendo as coisas.

11:09.700 --> 11:10.050
Bem.

11:10.150 --> 11:12.750
Então, uma última vez apenas para esclarecer as coisas.

11:12.760 --> 11:17.690
Vou rotular isso como 'Async' e 'Sync'.

11:17.710 --> 11:22.350
Então, mais uma vez, se executarmos isso, temos 'Sync' e 'Async'.

11:22.420 --> 11:23.360
'helllloooooo lá !!!'

11:23.790 --> 11:32.350
Mas muito legal, somos capazes de ler um arquivo e as duas instâncias, o que é legal.

11:32.350 --> 11:38.800
Deixe-me mostrar-lhe mais alguns deles e, em seguida, dizer exatamente por que isso é tão emocionante, e como podemos

11:38.800 --> 11:40.880
use-o para fazer coisas realmente excitantes.

11:44.090 --> 11:50.770
Então, digamos que o 'helllloooooo lá !!!' texto é meio chato e queremos adicionar a ele.

11:51.110 --> 11:54.230
Bem, podemos fazer algo assim.

11:55.280 --> 12:01.160
'fs.appendFile ()' nós damos o arquivo que queremos anexar.

12:01.430 --> 12:05.220
Portanto, neste caso, é './hello.txt'.

12:05.780 --> 12:10.130
E, a propósito, se isso não existir, na verdade, basta criar o arquivo para nós.

12:10.130 --> 12:13.130
E o segundo parâmetro dirá o que queremos adicionar.

12:13.130 --> 12:28.150
Então, digamos que também quiséssemos adicionar um espaço e depois dizer "Isso é tão legal", agora há um ponto de exclamação.

12:28.210 --> 12:36.020
E, finalmente, terceiro parâmetro leva em um erro e este erro só vai dizer que, se houver um erro.

12:36.040 --> 12:37.020
Deixe-me fazer isso menor

12:37.040 --> 12:43.540
então você pode ver - vamos apenas dizer que se houver um erro, vamos apenas 'console.log'

12:47.320 --> 12:49.790
'console.log (err)'

12:49.870 --> 12:50.210
Bem.

12:50.260 --> 12:51.780
Perfeito.

12:51.830 --> 12:53.900
Então vamos rodar isso e ver o que acontece.

12:53.900 --> 12:57.520
Eu vou executar o script e eu recebo

12:57.530 --> 12:58.360
'helllloooooo lá !!!'

12:58.370 --> 12:58.970
'helllloooooo lá !!!'

12:58.970 --> 13:10.710
Porque eles funcionaram primeiro, mas se eu for para 'hello.txt', olhe para isso, acabamos de escrever em um arquivo. E agora nós temos "This

13:10.710 --> 13:11.690
é tão legal."

13:12.000 --> 13:17.440
Então, se eu executar isso de novo e deixe-me esclarecer isso só assim temos mais espaço

13:21.160 --> 13:22.180
Olhe para isso. eu recebo

13:22.270 --> 13:22.930
'helllloooooo lá !!!'

13:22.930 --> 13:23.860
'Isso é tão legal'

13:23.860 --> 13:24.520
'helllloooooo lá !!!'

13:24.520 --> 13:25.990
'Isso é tão legal'

13:26.010 --> 13:30.770
Se voltarmos para o arquivo hello.txt, Oh boy nós adicionamos ainda mais

13:30.770 --> 13:31.850
'Isso é tão legal'

13:32.490 --> 13:33.460
texto.

13:33.680 --> 13:35.140
Então é bem legal.

13:35.140 --> 13:39.740
Acabamos de adicionar mais algumas linhas ao nosso arquivo.

13:39.800 --> 13:42.450
Deixe-me remover isso só para não ficar muito chato.

13:42.800 --> 13:44.780
Vai salvá-lo e voltar.

13:46.190 --> 13:48.930
Tudo bem então aprendemos o append.

13:49.090 --> 13:57.880
Deixe-me apenas comentar isso para que não interfira com nenhum dos outros.

13:57.900 --> 14:04.570
Vamos fazer um 'write' dessa vez - agora crie algum espaço aqui para que possamos ver

14:07.240 --> 14:09.220
Com a gravação, como você pode imaginar,

14:10.320 --> 14:17.020
'fs.writeFile ()' e vamos apenas dizer que este arquivo será chamado 'bye.txt'.

14:17.020 --> 14:19.550
Nomeação muito original por mim mesmo.

14:20.400 --> 14:21.540
E vai apenas dizer.

14:21.540 --> 14:23.750
Triste por vê-lo ir.

14:27.200 --> 14:44.280
E mais uma vez, vai demorar um erro e este erro vai dizer 'if (err)' 'console.log (err)'

14:44.340 --> 14:50.640
Tudo bem, então vamos salvar isso, executar o arquivo ou executar o script.

14:51.890 --> 14:56.110
E olhe para isso, 'bye.txt' acabou de ser adicionado.

14:56.240 --> 15:00.580
Se clicarmos nele, temos "triste ver você ir".

15:00.650 --> 15:03.090
Acabamos de criar um novo arquivo de texto.

15:03.940 --> 15:05.870
Muito muito legal.

15:05.930 --> 15:17.010
By the way, só assim você sabe o que acontece, se digamos que eu digita errado o arquivo de leitura e agora é 'hell.txt'

15:17.150 --> 15:22.280
Bem, se eu executar isso, recebo um erro e você pode ver isso.

15:22.340 --> 15:30.610
Porque erros eu recebo a mensagem de erro, erro com um monte de R's.

15:30.620 --> 15:30.930
Bem.

15:30.950 --> 15:39.260
Um pouco de um segue lá, mas apenas no caso de as pessoas estão perguntando ou você estava pensando sobre isso.

15:39.340 --> 15:39.990
Bem.

15:40.160 --> 15:45.190
Woo ~ Estou ficando cansado, então vamos fazer um último e então eu vou dizer exatamente por que isso é tão

15:45.190 --> 15:46.670
legal.

15:46.840 --> 15:54.180
O último que vamos fazer - novamente, vamos fazer algum espaço aqui - será o 'delete'.

15:54.490 --> 15:59.240
Então, com esse 'delete', podemos fazer 'fs.unlink ()'.

15:59.270 --> 16:08.500
o nome está um pouco fora daqui, mas 'fs.unlink ()' e vamos dizer o 'bye.txt' e notar que eu era capaz de

16:08.500 --> 16:18.730
apenas faça 'bye.txt' mas apenas para mantê-lo consistente, vou apenas dizer './bye.txt' com o './' antes

16:18.730 --> 16:18.940
isto

16:23.530 --> 16:24.400
e com este.

16:24.400 --> 16:25.970
Novamente, se houver algum erro

16:28.550 --> 16:29.680
apenas 'console.log (err)'

16:29.790 --> 16:32.720
Opa que eu esqueci de fazer o 'se'

16:37.540 --> 16:39.900
perfeito, agora

16:40.130 --> 16:42.020
Bem, vamos ver o que acontece aqui.

16:43.460 --> 16:52.940
E apenas por diversão, vamos apenas adicionar um 'console.log ()' aqui depois de ter feito a exclusão e vamos dizer 'início' porque

16:52.940 --> 16:58.590
estamos dizendo 'tchau' para o './bye.text'. Mente explodida.

16:58.990 --> 17:00.290
Tudo bem, vamos executar isso.

17:00.290 --> 17:06.220
Eu vou dizer - e nós vamos comentar o arquivo de gravação aqui porque você não precisa escrever,

17:06.220 --> 17:08.320
nós já temos o 'bye.text'.

17:08.420 --> 17:09.640
Deixe-me salvar.

17:09.810 --> 17:13.280
Agora, se você olhar o 'bye.text', vamos ver o que acontece aqui quando eu executo o script

17:16.580 --> 17:20.410
olha só, o 'bye.text' acabou de ser removido.

17:20.830 --> 17:22.910
A criação acabou de acontecer.

17:25.290 --> 17:26.430
Impressionante.

17:26.490 --> 17:30.840
Então isso foi muito emocionante para mim, espero que tenha sido para você também.

17:30.900 --> 17:34.270
Mas por que isso é excitante?

17:34.650 --> 17:42.900
Bem, porque agora somos capazes de usar programação em javascript fora de apenas navegadores da web e fora

17:42.900 --> 17:46.760
de apenas construir sites e servidores.

17:46.890 --> 17:52.760
O que podemos fazer agora com esse conhecimento é que podemos facilitar nossas vidas.

17:52.800 --> 18:01.540
Você pode pensar em casos, talvez você queira ler um arquivo do Excel e há coisas que você pode usar, usando

18:01.540 --> 18:05.690
leia o arquivo e use os módulos NPM que você pode ler.

18:05.830 --> 18:06.180
Digamos.

18:06.180 --> 18:10.730
Colunas em um excel e fazer algumas contas.

18:11.140 --> 18:18.100
Ou talvez você tenha uma planilha de excel com todos esses e-mails e queira enviar um e-mail para digamos

18:18.190 --> 18:24.160
100 pessoas nesta lista, mas você também não quer ser pego spamming pessoas pelo filtro google dizendo

18:24.160 --> 18:32.650
que essa conta é spam porque eles enviaram 100 e-mails em dois minutos. Bem usando algo

18:32.650 --> 18:40.150
como o Node, você pode criar talvez algo que, a cada seis horas, envie cinco e-mails.

18:40.150 --> 18:48.520
Outra coisa que você pode fazer se você tivesse um robô, por exemplo, algo semelhante a um sistema de arquivos em vez de

18:48.520 --> 18:50.010
lendo o arquivo.

18:50.000 --> 18:58.000
Você pode ler a partir do robô, talvez através de wireless, talvez através de fios e obter uma entrada de alguns dados

18:58.450 --> 19:00h.040
que o robô tem.

19:00.400 --> 19:03.570
Talvez tenha detectado um gato.

19:03.910 --> 19:10.120
Bem, usando essa entrada, você pode fazer algo que você pode responder talvez lhe enviar um e-mail dizendo que o

19:10.120 --> 19:16.420
O robô acabou de detectar um gato e enviar o e-mail para fora ou enviar uma saída.

19:16.420 --> 19:24.160
E é isso que chamamos de saída de entrada, onde você recebe uma entrada de outra fonte, outra máquina

19:24.760 --> 19:32.140
e então você também está produzindo algo para consumo, o que é realmente excitante porque

19:32.170 --> 19:35.490
abre o mundo onde você pode criar ferramentas para si mesmo.

19:35.620 --> 19:36.730
Você pode automatizar as coisas.

19:36.730 --> 19:41.760
Você pode literalmente fazer qualquer coisa que sua mente possa pensar.

19:42.310 --> 19:48.310
E eu sei que isso ainda é cedo e você ainda está no início da sua carreira de desenvolvedor, mas isso é

19:48.310 --> 19:54.370
o primeiro passo para entender como você pode usar programação para resolver problemas e tornar sua vida

19:54.610 --> 19:58.580
mais eficiente, ou talvez um pouco mais divertido.

19:58.630 --> 20:02.040
Então, no próximo vídeo, vamos fazer algo divertido.

20:02.140 --> 20:07.650
Vamos usar o que acabamos de aprender e vamos ajudar o Papai Noel em um desafio de codificação.

20:08.720 --> 20:10.190
Eu vou te ver nessa.

20:10.360 --> 20:10.570
Tchau tchau
