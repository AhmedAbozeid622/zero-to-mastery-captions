WEBVTT

00:01.050 --> 00:09.260
Agora, voltarei ao meu exemplo aqui, vamos adicionar um novo arquivo e chamaremos isso de 'script2.js'.

00:09.270 --> 00:09.820
-

00:11.820 --> 00:20.110
Agora o 'script2.js' pode ter uma constante chamada 'largeNumber'.

00:20.340 --> 00:24.320
E vamos apenas dizer que é 356.

00:24.780 --> 00:35.410
E se quisermos exportar isso e dizer 'export default largeNumber' e agora dentro de 'script.js' eu faço

00:35.410 --> 00:44.880
msgstr "import bigNumber de 'script2.js'".

00:44.940 --> 00:47.000
- vamos fazer isso um pouco menor -

00:47.220 --> 00:48.810
E agora eu mudei isso para

00:51.920 --> 00:59.120
'largeNumber' nós vamos fazer 'a + b' se eu rodar 'node script.js'

00:59.160 --> 01:05.660
Recebo um erro "Importação de token inesperada".

01:05.890 --> 01:13.390
E isso é porque o Node ainda precisa implementar o novo recurso ES6 das instruções de importação.

01:15.090 --> 01:19.910
E há maneiras de contornar isso e você pode adicionar pacotes para permitir que você faça isso.

01:20.170 --> 01:25.980
Mas vou mostrar-lhe o caminho do CommonJS porque a maioria dos servidores que você encontrará terá o

01:25.980 --> 01:26.710
Caminho CommonJS.

01:26.790 --> 01:29.730
E ao longo dos anos isso [importar] e isto [de] se tornará mais prevalente.

01:29.730 --> 01:32.750
Mas você já sabe como fazer isso na seção front-end.

01:32.820 --> 01:34.260
Então nada é diferente aqui.

01:34.260 --> 01:40.460
Para que você se familiarize com o CommonJS, vamos usar o formulário 'require'.

01:40.470 --> 01:44.200
Então, como podemos fazer isso usando o jeito que funciona

01:44.280 --> 01:44.950
-

01:45.120 --> 01:47.150
no nó 8.9, qual é a versão que temos?

01:51.100 --> 02:01.040
Bem, nós teremos que fazer um 'const largeNumber = require (' ./ script2.js ')'

02:01.110 --> 02:04.140
- mais uma vez isso pode ser familiar -

02:04.330 --> 02:10.850
E então aqui dentro nós temos que dar o caminho do arquivo. Com 'exigir'

02:10.910 --> 02:16.040
agora temos 'largeNumber' e também queremos exportá-lo agora.

02:16.210 --> 02:25.750
E a forma como as exportações funcionam com o CommonJS é você 'module.export' e isso é porque - deixe-me apenas limpar

02:25.750 --> 02:36.350
isso e te mostrar. Se eu faço 'node' e eu faço 'module' você vê que 'module' é um objeto global que nós temos acesso

02:36.350 --> 02:42.140
para e usando 'module.exports'

02:42.190 --> 02:49.880
Eu posso dizer quais objetos eu quero exportar neste arquivo.

02:49.880 --> 02:52.760
No nosso caso, haverá 'largeNumber'.

02:56.170 --> 03:05.090
Se eu salvar isso e agora executar o nosso 'script de nó' - oops tem que sair do processo primeiro.

03:06.880 --> 03:07.800
Claro

03:07.880 --> 03:09.750
Se eu executo 'node script.js'

03:09.790 --> 03:16.110
Eu obtenho [object Object] 5.

03:16.220 --> 03:17.200
Hmm, por que isso?

03:17.600 --> 03:25.250
Bem, porque agora nós exportamos este objeto, e da maneira que queremos acessá-lo, aqui

03:26.110 --> 03:29.350
Estamos exportando um objeto global que podemos nomear o que for.

03:29.350 --> 03:39.620
No nosso caso, podemos dizer 'script2' e, a fim de obter a propriedade de 'script2' bem, vamos dizer

03:39.700 --> 03:41.780
'script2.largeNumber'

03:41.780 --> 03:49.730
E agora, se eu rodar isso, eu tenho 361 e isso pode ser chamado de qualquer coisa, é apenas uma variável que você está declarando.

03:49.770 --> 03:56.470
Então podemos chamá-lo de 'c' - 'c.largeNumber' e ainda funciona.

03:57.980 --> 04:01.610
É um estilo um pouco diferente do que estamos acostumados no front-end.

04:02.630 --> 04:09.230
E isso é só porque nós não implementamos o, ou o Node não implementou a importação e exportação

04:09.350 --> 04:10.770
com esta versão dele.

04:11.000 --> 04:12.140
Mas virá eventualmente.

04:12.140 --> 04:19.190
Apenas não se assuste se você vir desse jeito; Uma vez que você se acostumar com a sintaxe é praticamente o mesmo.

04:19.210 --> 04:21.540
Tudo bem, vou te ver no próximo.

04:21.550 --> 04:22.020
Tchau tchau.
