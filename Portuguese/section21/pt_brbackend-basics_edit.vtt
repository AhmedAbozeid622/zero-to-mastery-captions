WEBVTT

00:00.540 --> 00:05.330
Chegou a hora de aprender outro tópico interessante e abordaremos o básico do back-end.

00:05.610 --> 00:10.650
Mas eu queria mostrar o que cobrimos até agora no front-end.

00:10.840 --> 00:17.950
Começamos com este diagrama de perguntar "Quem é o google. com? "e passando pelo ISP solicitando ao

00:17.950 --> 00:20.810
servidor de nomes de domínio o endereço IP.

00:20.950 --> 00:29.460
Depois, pedimos ao endereço IP para encontrar os servidores do Google e, em seguida, os servidores do Google nos fornecem nosso arquivo HTML, CSS

00:29.470 --> 00:34.400
e JavaScript, que podemos obter através do HTML. Em seguida, as tags de

00:34.420 --> 00:43.040
link e de script para obter o CSS e Javascript . O navegador lê o arquivo para

00:43.040 --> 00:51.860
nós, o mecanismo HTML, CSS e V8 ou o mecanismo JavaScript do navegador o

00:51.920 --> 00:58.510
utiliza para ler o JavaScript e manipulamos o DOM usando JavaScript.

00:58.520 --> 01:05.300
Também aprendemos que a localização do servidor é importante, quantas viagens fazemos, quantas solicitações HTTP que

01:05.300 --> 01:06.590
fazemos é importante.

01:06.590 --> 01:08.560
O tamanho dos arquivos é importante.

01:08.810 --> 01:16.660
E aprendemos algumas dessas soluções, como redes de entrega de conteúdo, tendo scripts em apenas um pacote. js e

01:16.820 --> 01:21.230
também minimizar nossos arquivos.

01:23.740 --> 01:33.040
E também aprendemos sobre essa nova tecnologia chamada AJAX, onde podemos apenas buscar usuários, conversar com o servidor enquanto

01:33.040 --> 01:40.750
o usuário ainda está navegando no site e receber uma resposta JSON para atualizar o

01:40.750 --> 01:43.050
site em tempo real.

01:43.390 --> 01:49.730
E essa foto com a qual começamos parece muito mais clara do que no primeiro vídeo, não é?

01:49.780 --> 01:53.210
Entendemos o que um desenvolvedor Front-End faz.

01:53.230 --> 02:00.760
Vemos o poder do React e também sabemos que essas setas significam simplesmente solicitações HTTP; um idioma

02:01.090 --> 02:08.310
que o Front-End e o Back-End podem falar e, usando AJAX e JSON, podemos fazê-lo dinamicamente.

02:09.570 --> 02:15.930
Agora, o Back-End e o papel de um desenvolvedor de Back-End. Eles são os responsáveis por

02:15.930 --> 02:24.330
trabalhar com servidores e bancos de dados. E um servidor é responsável por tudo o que você obtém no navegador.

02:24.650 --> 02:32.140
Eu posso perguntar do navegador qualquer coisa; como "Vá para o google. com ". Mas, no final das contas, o servidor da Web

02:32.170 --> 02:38.890
pode me dar o que quiser. Se for apenas me enviar para o twitter. com em vez do google. com, bem,

02:38.920 --> 02:42.500
isso depende do servidor. Tudo o que precisamos, apenas fazemos a

02:42.520 --> 02:47.740
solicitação e esperamos que o servidor nos dê o que solicitamos. E se você se

02:47.980 --> 02:57.740
lembra de um servidor, é apenas um computador; um computador que está em algum lugar do mundo apenas ouvindo

02:57.880 --> 03:02.770
essa conexão HTTP, pedindo para ver se temos algum arquivo.

03:02.830 --> 03:11.800
Os servidores mais básicos e você pode ter usado isso antes, talvez usando o Hostgator em um site de hospedagem ou até

03:11.860 --> 03:19.120
mesmo sites WordPress e os colocando no Hostgator. Ele usa algo chamado 'LAMP STACK'.

03:19.120 --> 03:28.330
Isso foi útil para os sites mais básicos, ou seja, (você apenas deseja um site de informações simples) Talvez

03:28.330 --> 03:28.920
um

03:29.050 --> 03:33.460
site WordPress simples, onde nada de complexo esteja acontecendo.

03:33.550 --> 03:41.380
Nada profissional realmente. O que eles usaram foi um servidor Linux, que é o sistema operacional.

03:41.740 --> 03:47.280
Assim como eu tenho Mac, o Linux será o sistema operacional do servidor.

03:47.430 --> 03:48.810
Nós temos o servidor Apache.

03:48.810 --> 03:51.980
O Apache é um servidor, mais

03:52.080 --> 03:58.500
uma vez um programa escrito por alguém realmente bom em aceitar solicitações e

03:58.500 --> 04:01.070
enviar respostas de arquivos.

04:01.200 --> 04:03.990
Tivemos o MySQL, que é banco de dados.

04:03.990 --> 04:09.230
Talvez você tenha uma seção de comentários em seu blog e precise armazenar

04:09.260 --> 04:16.680
esses dados, que seria o banco de dados. E então tivemos o PHP, que era apenas uma linguagem que você pode

04:16.680 --> 04:23.040
usar para ter um pouco de lógica em seus servidores. E o servidor, assim como o seu computador, tinha um sistema de

04:23.040 --> 04:29.140
arquivos onde todos os arquivos do seu site são armazenados. E o Apache acabou de fazer isso.

04:29.330 --> 04:31.790
Basta ouvir para ver se alguém

04:31.790 --> 04:37.650
entrou no site funfunweb. com no URL. Se recebeu essa solicitação,

04:37.770 --> 04:42.270
será apenas o índice padrão. html.

04:42.720 --> 04:51.260
Se alguém entrou no site divertido. com / about, isso apenas fornecerá a você. html. Foi um servidor

04:51.260 --> 04:53.640
muito simples e muito fácil.

04:53.750 --> 05:00.860
É isso que a maioria dos sites de hospedagem como o Hostgator usa. E você pode estar se perguntando "Posso baixar o servidor Apache e

05:00.860 --> 05:05.150
executar meu próprio servidor no seu computador? "Sim,

05:05.160 --> 05:07.320
você pode absolutamente.

05:07.490 --> 05:11.630
Mas sem um software de servidor, bem, nosso

05:12.080 --> 05:14.210
computador está inacessível.

05:14.360 --> 05:21.350
Ninguém na Internet pode acessar nosso computador porque nosso computador não é um servidor, (ele) não possui código que diz "Ei,

05:21.350 --> 05:25.570
se eu receber uma solicitação, envie-a. "Mas, como

05:25.710 --> 05:33.930
vimos nos vídeos anteriores, podemos criar servidores falsos para testar nossos sites.

05:33.960 --> 05:36.710
Agora essa era a maneira antiga de fazer as coisas.

05:36.720 --> 05:39.530
Não havia muita lógica, você realmente não podia expandir.

05:39.720 --> 05:46.190
Você não pode ter sites como o Facebook ou a Amazon usando esse tipo de sistema.

05:46.350 --> 05:51.940
Como eu disse, isso era para sites muito básicos.

05:52.000 --> 05:59.310
Agora, uma nova pilha que chamamos de servidor de aplicativos se parece mais com isso.

05:59.380 --> 06:06.580
Agora, um servidor de aplicativos é diferente do nosso exemplo anterior, porque, diferentemente do servidor Apache, é muito simples e apenas solicita

06:06.610 --> 06:14.050
resposta, basta fornecer os arquivos para lá e para trás. Com algo como um

06:14.050 --> 06:23.750
servidor Node em que você possui Nó. js executando, bem, você pode escrever um script e dizer "Se eu receber uma solicitação

06:23.750 --> 06:33.230
de logon, verifique o nome de usuário do usuário no banco de dados. Se corresponder, avise-me e envie uma resposta por

06:33.320 --> 06:42.260
meio do JSON para o aplicativo Front-End. E podemos personalizar o que esses scripts dizem.

06:42.260 --> 06:50.990
Até agora, só conseguimos usar JavaScript na web. Mas agora, com Node. js, podemos usá-lo em um servidor, em um computador que não esteja

06:51.680 --> 06:55.670
executando um navegador da web. Com Nó. js, podemos

06:55.670 --> 07:02.630
escrever JavaScript onde, se eu postar algo no Facebook, essa postagem no Facebook, quando eu clicar

07:02.630 --> 07:08.060
em 'post', ela será enviada para o Node Server que está ouvindo solicitações.

07:09.000 --> 07:18.060
Ele diz que "Andrei acabou de publicar esta mensagem no formato JSON. "O nó. js e Express. O arquivo js no servidor lerá

07:18.180 --> 07:27.000
e dirá "Ah, queremos armazenar esta postagem em nosso banco de dados. "e esse banco de dados armazenará essa postagem,

07:27.000 --> 07:32.460
para que, quando eu voltar da próxima vez, ainda esteja lá.

07:32.460 --> 07:39.360
E, assim que terminar, responderá com sucesso, dizendo que "Minha postagem é um sucesso" e agora é

07:39.360 --> 07:42.060
exibida na minha linha do tempo.

07:42.420 --> 07:49.410
Posso editar a postagem, excluir a postagem e, novamente, o Node Server pode excluir essa postagem do banco de dados e, em seguida,

07:49.410 --> 07:52.520
enviar uma resposta e removê-la da linha do tempo.

07:52.560 --> 07:59.070
Você apenas tem o poder de interagir constantemente com o Front-End. Nos próximos dois vídeos, estaremos

07:59.070 --> 08:03.570
construindo um projeto que incorpora tudo isso.

08:03.630 --> 08:07.320
Vamos criar um servidor de nó usando um Express. Vamos criar

08:07.320 --> 08:14.610
nosso próprio banco de dados onde armazenamos informações do usuário. E usaremos AJAX e JSON

08:14.610 --> 08:20.400
para criar, entrar e atualizar constantemente as informações do usuário.

08:20.460 --> 08:26.880
Portanto, temos uma compreensão desse sistema completo. Se você está criando sites e

08:26.910 --> 08:34.540
aplicativos da Web, bem, não está realmente construindo esses. Como desenvolvedor web, você está criando algo mais parecido com isso: mas você

08:34.750 --> 08:38.300
pode estar se perguntando: "É isso? "" Esse é o fim

08:38.320 --> 08:44.420
final do que uma infraestrutura de servidor back-end pode fazer? "Bem, não, se você

08:44.770 --> 08:53.760
é o Facebook, Twitter ou Amazon, você faria algo assim e não fique muito preocupado aqui,

08:53.760 --> 08:57.210
podemos explicar o que está acontecendo.

08:57.280 --> 09:01.740
Você está apenas fazendo cópias do seu computador.

09:01.750 --> 09:11.660
Então, pense em cada um desses retângulos como um computador. E como o Facebook atrai muitas pessoas, ele copia o servidor e

09:11.660 --> 09:15.720
o coloca na Ásia e um na África, para que

09:15.860 --> 09:22.640
todos da Ásia possam acessar esse e todos da África possam acessá-lo, em vez de ter

09:22.640 --> 09:23.530
todo

09:23.630 --> 09:30.530
mundo acessar um servidor e sobrecarregar o sistema. Como eles têm o mesmo servidor, é

09:30.560 --> 09:35.910
só copiar esses arquivos e colocá-los em um servidor em outro lugar.

09:35.970 --> 09:36.570
É isso aí.

09:36.650 --> 09:43.900
E é isso que chamamos de escala. Mas eles também ainda usam o mesmo banco

09:43.900 --> 09:51.460
de dados, de modo que, se desse servidor alguém atualizar as informações, bem, essa pessoa aqui que usa esse

09:51.460 --> 09:55.920
servidor, esse usuário ainda terá acesso às informações atualizadas por essa pessoa.

09:55.960 --> 10:04.640
E, finalmente, temos algo chamado 'Load Balancer'. E isso é semelhante ao

10:05.240 --> 10:14.090
que o Apache ou o NginX faria. Onde ele escuta uma solicitação HTTP e percebe que "Hmm, essa aqui na América do Norte está realmente muito

10:14.090 --> 10:15.700
ocupada no momento. ""

10:15.720 --> 10:22.940
Vou transferir essa pessoa para este servidor aqui. "e apenas equilibra a carga dos servidores.

10:24.040 --> 10:29.290
e pode continuar crescendo, com mais e mais servidores à medida que você tem mais e mais usuários.

10:29.410 --> 10:33.390
E, finalmente, você pode até ter vários bancos de dados.

10:33.400 --> 10:40.600
Mais uma vez, esses quadrados representam um computador; um computador executando um banco de dados, um computador executando

10:40.600 --> 10:48.380
um servidor, um computador executando um balanceador de carga. E você pode ter vários bancos de dados, novamente, para

10:48.400 --> 10:52.220
que eles não fiquem sobrecarregados com todas essas solicitações.

10:52.420 --> 10:59.250
E cada um mantém uma cópia do outro. E isso é algo sobre o qual falaremos mais quando chegarmos

10:59.250 --> 11:02.030
à seção Nó e seção Banco de Dados.

11:02.100 --> 11:08.160
Mas quero mostrar a ideia por trás dos servidores. Para trabalhar com o back-end,

11:08.370 --> 11:18.050
o objetivo principal é garantir que, quando fizermos uma solicitação HTTP do front-end, recebamos uma resposta o mais

11:18.470 --> 11:22.100
rápido possível com os dados corretos.

11:22.370 --> 11:28.680
E é isso que é o desenvolvimento Back-End. Garantir a devolução desses recursos para

11:28.700 --> 11:35.870
que nossa equipe de Front-End possa ter certeza de que receberemos exatamente o que precisamos.

11:35.880 --> 11:42.090
Quero que você se empolgue, porque nas próximas seções focaremos

11:42.090 --> 11:49.920
no Back-End e no Front-End. Vamos criar um aplicativo que use todas essas tecnologias em um só lugar.

11:49.920 --> 11:57.210
Então você sabe exatamente como tudo está conectado e tem uma idéia de

11:57.210 --> 12:04.290
como passar de algo assim para um dia tendo algo assim.

12:04.400 --> 12:05.210
Vejo no próximo, tchau-tchau.
