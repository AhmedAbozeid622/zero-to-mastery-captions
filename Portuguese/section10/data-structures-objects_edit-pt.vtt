WEBVTT

00:01.790 --> 00:05.860
Objetos Eles são estruturas de dados realmente poderosas.

00:06.810 --> 00:12.270
E como você pode ver, é a segunda estrutura de dados que vamos aprender em Javascript.

00:12.270 --> 00:22.440
E, na verdade, eles também são do tipo javascript. Objetos são coleções de propriedade. Bem o que

00:22.440 --> 00:23.270
isso significa?

00:24.410 --> 00:27.530
Vamos dar uma olhada, tentando escrever um objeto.

00:27.530 --> 00:37.700
Então, para escrever um objeto eu posso ter algo como um usuário e chaves e dentro disso podemos dizer

00:37.820 --> 00:41.790
nome é igual a "João".

00:42.170 --> 00:46.000
Eu posso dizer que H é "34".

00:46.050 --> 00:49.320
O passatempo é "futebol".

00:50.900 --> 00:54.490
E talvez possamos até colocar "é casado"

00:56.660 --> 01:00.390
para falso e a vírgula em

01:00.540 --> 01:03.440
o fim aqui eu posso deixar ou adicionar,

01:03.460 --> 01:04.630
funciona nos dois sentidos.

01:05.770 --> 01:13.880
Mas agora, se eu salvar isso e atualizar - vamos ver se temos o objeto de usuário. Sim.

01:13.950 --> 01:20.820
Parece que temos "nome:John idade:34 hobby:o futebol é casado:falso".

01:20.990 --> 01:28.190
E você vê aqui que temos um objeto e parece um pouco diferente de um array, não é?

01:28.220 --> 01:38.210
Porque se nos lembrarmos de um array parecido com isso, "apple", "banana", "laranja".

01:38.240 --> 01:47.100
Então - uma matriz se nós atualizarmos temos 'usuário' que se parece com isso e uma 'lista' que se parece com isso.

01:47.210 --> 01:57.280
Se eu abrir isso, vemos que temos um pouco de diferença, porque um objeto é mais dinâmico

01:57.280 --> 02:00.000
Eu posso ter propriedades e valor.

02:00.220 --> 02:12.770
Então, propriedade 'nome', valor "João", propriedade, 'idade', valor "34". Com uma matriz, tivemos um índice '0' que continha "apple"

02:12.890 --> 02:17.720
e um índice '1' que continha "banana".

02:17.720 --> 02:18.680
Hmm interessante.

02:18.740 --> 02:19.000
ESTÁ BEM.

02:19.010 --> 02:30.370
Mas como eu pego propriedades porque com um array eu poderia fazer 'list', pegue o segundo elemento com '1'

02:30.940 --> 02:39.520
e eu tenho uma "banana". Com objetos, o que você pode fazer é dizer 'user.name',

02:39.690 --> 02:51.950
John. 'User.age', 34. 'User.hobby', futebol. E 'user.isMarried', false. ESTÁ BEM.

02:52.250 --> 03:06.510
Agora, com uma matriz, tivemos métodos como 'pop' ou 'push' para alterar a matriz.

03:06.590 --> 03:08.740
Nós até tivemos 'concat'.

03:09.210 --> 03:14.930
Como podemos adicionar propriedades a um objeto? Bem, é muito simples.

03:14.930 --> 03:29.700
Tudo o que temos a fazer é dizer algo como 'user.favoriteFood' e eu faço igual e vou fazer espinafre.

03:29.890 --> 03:36.320
Agora, se eu olhar para o objeto do usuário, tenho comida favorita,

03:36.320 --> 03:39.160
espinafre.

03:39.230 --> 03:44.060
Então, nós apenas expandimos o objeto de usuário.

03:44.100 --> 03:44.730
E isso -

03:44.730 --> 03:53.000
Posso mudar para 'isMarried' para 'true' para dizer que nosso amigo John acabou de se casar.

03:53.130 --> 04:01.510
Bem, agora se eu for para o usuário eu tenho 'isMarried' para "true".

04:01.560 --> 04:02.940
Muito legal.

04:02.940 --> 04:07.890
Então você vê a diferença entre uma matriz e um objeto.

04:07.890 --> 04:22.370
Agora, uma pergunta que você pode ter é:"Por que não é 'array' um tipo de javascript, mas 'objeto' é? Bem, porque

04:22.370 --> 04:32.120
em termos simplificados, tecnicamente, um array é algo assim.

04:36.480 --> 04:44.040
Nós ainda vimos quando olhamos para a lista que temos "0" vai para a Apple.

04:44.040 --> 04:52.220
"1" é igual a banana e "2" é igual a laranja. E você vê qual o poder das estruturas de dados

04:52.580 --> 04:54.020
em javascript.

04:54.080 --> 05:01.120
Essa idéia de uma gaveta de mesa e nessa gaveta você não quer ter uma bagunça que você não quer apenas colocar

05:01.130 --> 05:07.920
Uma coisa, você quer ter várias coisas, mas quer que elas sejam organizadas. Então talvez você queira todas as canetas

05:07.930 --> 05:12.420
organizado em uma seção e os arquivos organizados em uma seção diferente.

05:12.830 --> 05:18.280
E como mencionei, as estruturas de dados nos ajudam a organizar melhor as coisas.

05:18.350 --> 05:26.570
Então, por exemplo, um array é realmente muito bom em talvez conter uma lista de compras ou uma lista de tarefas.

05:27.140 --> 05:33.190
Mas um objeto pode ser muito bom em conter algo como informações do usuário.

05:34.000 --> 05:39.610
Então, se você pensar em um jogo - digamos que você está construindo um jogo onde você está controlando esse assistente.

05:39.940 --> 05:48.050
Bem, esse mago - quão alto o mago é, quão poderoso ele é, quantos pontos de experiência ele tem.

05:48.250 --> 05:54.040
Bem, isso seria realmente muito bom colocar em um objeto porque esse assistente é um objeto.

05:54.040 --> 06:03.400
Precisamos de propriedades e valores, mas talvez as magias que poderiam ser uma lista, porque podemos apenas ter uma string

06:03.520 --> 06:07.050
de todas as magias que o mago saberia.

06:07.090 --> 06:11.890
Então, isso significa que podemos ter matrizes dentro de objetos?

06:12.010 --> 06:25.350
Sim, se o usuário era um mago, eu posso colocar 'feitiço' ou 'feitiços' e eu posso fazer um arranjo de todos os feitiços

06:25.740 --> 06:35.340
"abracadabra" ou "Shazam" ou eu posso fazer "boo".

06:35.430 --> 06:39.800
Então agora eu tenho uma matriz dentro de um usuário.

06:40.080 --> 06:41.460
OK, e o contrário?

06:41.460 --> 06:48.310
Posso ter um usuário dentro de uma matriz?

06:48.710 --> 06:49.480
Bem, sim você pode.

06:49.640 --> 06:59.790
Digamos que queremos ter uma lista de usuários em um aplicativo para o nosso site. Nós podemos ter uma lista de objetos

06:59.790 --> 07:01.710
onde temos 'username'

07:06.960 --> 07:15.830
"Andy", que tem "senha", "segredo" e podemos ter

07:18.540 --> 07:28.310
'username', "Jess" que tem a 'senha' "123". Vamos ver isso em ação.

07:28.370 --> 07:37.370
Vou atualizar e dizer "lista" e olhar para isso. Dentro desta lista eu tenho o primeiro item com o

07:37.370 --> 07:38.520
usuário e senha.

07:38.520 --> 07:44.500
E o segundo nome de usuário e senha do item. Então, as listas são realmente muito boas

07:44.530 --> 07:52.240
bem, fazendo listas e essas são arrays. E os objetos são muito bons em conter objetos. Mas

07:52.360 --> 07:54.520
como os acessamos agora?

07:55.000 --> 07:57.580
Bem, vamos olhar para o usuário primeiro.

07:57.670 --> 08:07.630
Se eu quisesse acessar uma mágica bem, eu poderia fazer 'user.spells' e eu pegaria uma matriz de volta, mas se eu quisesse

08:07.630 --> 08:10.050
para - digamos acesso "Shahzam"

08:10.450 --> 08:15.680
Bem, eu apenas faria 'user.spells' e então porque é um array

08:15.730 --> 08:28.740
Eu obtenho o segundo item usando '[1]' - "Shahzam". O outro caminho para a lista eu posso dizer 'lista' - o primeiro

08:28.740 --> 08:35.320
item que é "Andy" e eu quero pegar a senha dele.

08:35.450 --> 08:37.410
Bem, eu vou fazer 'senha'.

08:37.770 --> 08:42.590
E agora eu recebo - bem, Andy digitou incorretamente sua senha, ela deveria dizer "segredo".

08:42.600 --> 08:45.930
Mas ficamos "secre".

08:46.180 --> 08:48.220
Então é assim que você acessa as coisas.

08:48.570 --> 08:49.350
ESTÁ BEM.

08:49.840 --> 08:51.480
Uma outra pergunta que eu tenho.

08:51.850 --> 09:05.590
E se eu quisesse dizer que esse usuário John, que é um mago, também pode 'gritar'. Talvez possa fazer algum tipo

09:05.590 --> 09:06.510
de uma ação.

09:06.640 --> 09:09.320
Podemos adicionar uma função a um objeto?

09:09.580 --> 09:13.080
Sim, nós podemos, tudo o que temos a fazer é fazer 'função'

09:13.120 --> 09:17.260
E você vê a cor mudou, significa que estamos fazendo algo certo.

09:17.260 --> 09:20.840
Posso dizer 'função console.log'

09:24.380 --> 09:29.070
Gritando "Ah", vamos salvar isso e vamos ver isso em ação.

09:31.720 --> 09:35.940
'Usuário' - certifique-se de que temos o grito lá sim

09:35.960 --> 09:38.380
E olha, tem o "F" para "função".

09:38.900 --> 09:45.350
E agora, se eu for 'user.shout' e lembre-se eu tenho que chamar a função.

09:45.770 --> 09:53.960
Eu recebo "AHHHHH!" Muito legal. Então eu posso ter funções dentro de objetos.

09:54.320 --> 10:00.680
E uma coisa que você pode notar é - espere um segundo, eu pensei que funções deveriam dizer algo

10:00.680 --> 10:03.120
como, você sabe, alerta.

10:03.330 --> 10:08.710
Mas esse aqui nós temos 'user.shout'.

10:08.770 --> 10:16.240
Então, isso é um pouco diferente do que vimos antes e isso é chamado de método e

10:16.240 --> 10:18.250
Essa é outra terminologia que vamos aprender.

10:18.250 --> 10:23.110
Mas uma função dentro de um objeto é um 'método'.

10:23.110 --> 10:29.500
Então eu posso dizer que 'gritar' é um 'método' de 'usuário'.

10:29.720 --> 10:42.090
Assim como com uma matriz como listas e se eu faço 'pop' - bem 'pop' é um 'método' de 'lista'.

10:42.230 --> 10:48.390
E outra coisa que você pode perceber é 'console.log'.

10:48.620 --> 10:49.310
O que você acha

10:49.370 --> 10:58.190
'log' é que estamos fazendo todo esse tempo? Bem, 'console', como se vê, é apenas um objeto.

10:58.260 --> 11:06.300
Você vê isso? 'console' tem tudo isso parece método nele.

11:06.360 --> 11:10.180
Então, esse tempo todo nós apenas fizemos o console.log.

11:10.400 --> 11:19.770
Mas eu também posso fazer - vamos fazer 'info'. Se eu fizer console.info e eu vou dizer "olá".

11:23.930 --> 11:24.850
Eu recebo "olá"

11:24.990 --> 11:26.220
Nada muda.

11:26.220 --> 11:29.150
Mas e se fizermos algo como "erro".

11:29.340 --> 11:40.100
Bem, eu posso fazer 'console.error' e agora - olhe para isso, eu recebo o erro.

11:40.420 --> 11:46.690
Então é isso que são os métodos. Eles são funções dentro de um objeto.

11:46.700 --> 11:55.510
OK, eu tenho uma última coisa legal para mostrar a você e é:"Posso fazer algo assim?

11:57.450 --> 12:03.200
Um usuário pode ser um objeto vazio? "Sim, funciona.

12:03.200 --> 12:09.170
Então, se eu pegar 'user2', eu só obtenho o objeto vazio e não há nada realmente nele.

12:10.630 --> 12:10.940
ESTÁ BEM.

12:10.960 --> 12:11.950
E quanto aos arrays?

12:11.950 --> 12:15.490
Posso fazer uma lista vazia?

12:18.010 --> 12:24.050
Sim eu posso fazer uma lista que está vazia.

12:24.210 --> 12:31.040
Mas como você pode ver, eu realmente não posso usar nenhuma propriedade em 'user2' porque ela não tem propriedades.

12:31.920 --> 12:41.610
E eu não consigo acessar 'list [0]' ou 'list2 [0]', que é o vazio,

12:41.680 --> 12:44.130
Bem, porque não há nada nisso agora.

12:46.200 --> 12:57.440
Então, isso nos lembra de quando não declaramos uma variável "indefinida", mas com um objeto e uma lista

12:57.500 --> 13:03.030
podemos ter algo vazio e não é indefinido. Mas há uma coisa que eu quero te mostrar.

13:03.230 --> 13:06.350
Pode haver um objeto vazio.

13:06.350 --> 13:18.730
Então, se eu fizer 'var' objeto vazio, bem, é um objeto vazio, mas há algo chamado 'nulo'.

13:19.120 --> 13:33.030
E esse é o nosso sexto tipo de dados e 'null' é um tipo especial que apenas diz que um objeto é nulo.

13:33.040 --> 13:34.530
Então vamos ver o que isso significa.

13:34.600 --> 13:39.640
Se eu olhar para o objeto vazio, recebo um objeto vazio.

13:39.970 --> 13:46.920
Se eu obtiver um objeto 'nulo', ele retornará nulo.

13:46.960 --> 13:54.850
Então esse é um personagem especial que nós vamos entrar mais tarde nas lições, mas isso significa apenas que

13:54.850 --> 13:57.190
não é nada neste objeto.

13:57.190 --> 14:09.150
Se eu for 'null0bj.name = Andy'

14:09.340 --> 14:13.230
Não consigo definir o nome da propriedade de null.

14:13.400 --> 14:22.430
Mas se eu fizer isso para um objeto vazio que é apenas um objeto vazio, bem, eu posso dizer o nome

14:22.790 --> 14:27.300
é igual a Andy

14:27.370 --> 14:30.400
E olha, eu tenho o Andy.

14:30.610 --> 14:32.230
Então é isso que um objeto 'nulo' é

14:32.290 --> 14:40.140
Está vazio, completamente vazio e bem agora parece meio inútil como se não precisássemos.

14:40.150 --> 14:44.580
Mas vou mostrar casos em que isso é importante para nós.

14:44.590 --> 14:46.930
OK, isso foi um monte de coisas.

14:47.020 --> 14:51.870
Mas você realmente aprendeu muito em javascript.

14:51.990 --> 14:59.550
Isso é muito bonito, eu diria que 80 por cento do que você precisa saber em javascript para trabalhar profissionalmente

14:59.670 --> 15:05.650
e parece que não cobrimos muito ou talvez para alguns pode parecer que cobrimos muito.

15:05.670 --> 15:12.390
Mas em termos de sintaxe apenas olhando para isso, aprendemos apenas algumas palavras e algumas maneiras de fazer as coisas.

15:13.470 --> 15:20.190
Com esse poder recém-descoberto, vou mostrar como podemos construir um Facebook simples com o que acabamos de

15:20.190 --> 15:20.780
aprendido.

15:22.630 --> 15:23.730
Eu vou te ver no próximo vídeo. Tchau tchau
