WEBVTT

00:00.990 --> 00:08.250
Bem vindo de volta! Usando nosso novo conhecimento de loops, vamos fazer um pouco de nosso aplicativo no Facebook

00:08.250 --> 00:09.000
Melhor.

00:09.420 --> 00:13.270
Quero dizer, porque o Facebook tem mais de um usuário, certo?

00:13.350 --> 00:16.660
Não é apenas um usuário, ele tem milhões deles.

00:16.950 --> 00:25.990
Então, como podemos verificar a senha de alguém passando por não apenas um usuário, mas vários?

00:26.140 --> 00:30.510
Bem, parece uma solução perfeita para loops, então vamos dar uma chance.

00:30.520 --> 00:33.650
Vou adicionar mais alguns usuários aqui.

00:33.740 --> 00:42.100
Nós vamos apenas copiar isso. E nós temos 'sally' com a senha '123'.

00:42.400 --> 00:49.600
E também temos 'ingrid' com a senha '777'.

00:49.820 --> 00:51.700
Então vamos atualizá-lo.

00:51.700 --> 00:54.760
Eu vou fazer isso em uma nova linha apenas para que você possa ver.

00:54.890 --> 00:59.850
Vou atualizar e digito 'ingrid'.

01:02.570 --> 01:06.960
'777'. 'Desculpe, nome de usuário e senha errados'.

01:07.210 --> 01:13.360
E isso faz sentido, certo? Porque quando criamos nossa função 'signIn', bem, é só checar o

01:13.360 --> 01:15.480
primeiro item no banco de dados.

01:15.790 --> 01:17.260
Mas queremos verificar através de todos eles.

01:17.260 --> 01:22.800
Queremos verificar o primeiro item da matriz, o segundo e o terceiro.

01:22.900 --> 01:25.510
Parece que precisamos adicionar um 'looping' aqui.

01:26.480 --> 01:28.050
Então, como podemos fazer isso?

01:28.430 --> 01:31.910
Devemos, bem, adicionar um 'loop for'.

01:31.940 --> 01:34.500
Eu vou dizer aqui.

01:34.730 --> 01:44.150
Bem, na verdade eu vou comentar isso primeiro, e nós diremos que quando em 'signIn' queremos fazer 'para var

01:44.150 --> 01:47.130
i = 0 '.

01:47.170 --> 01:56.210
Lembramos este índice do último vídeo, digamos "i é menor que database.length".

01:56.950 --> 02:09.410
Então, 'database.length' é '3'. E vamos incrementar 'eu' toda vez. Abra e feche colchetes e, em seguida, aqui

02:09.410 --> 02:14.320
queremos dizer "se (banco de dados [i])".

02:14.420 --> 02:15.280
Então, ao invés de '0'

02:15.290 --> 02:22.470
agora podemos dizer "eu", porque "eu" vai "0, 1, 2". assim

02:22.510 --> 02:30.080
'se banco de dados [i] é igual a', e nós deveríamos ter um 'nome de usuário' aqui também.

02:30.180 --> 02:42.470
Portanto, se o 'username' for igual ao 'username', que recebemos, que é a entrada 'username'. E eu vou começar

02:42.480 --> 02:56.600
uma nova linha aqui. 'database [i] .password' é igual a 'senha', que recebemos do 'usuário'. Bem, se é isso

02:56.810 --> 02:58.940
o caso, o que devemos fazer.

02:59.270 --> 03:03.380
Bem, se estiver correto, faremos 'console.log (newsfeed)'.

03:04.830 --> 03:05.610
De outra forma.

03:05.910 --> 03:10.970
Caso contrário, faremos 'alerta'.

03:11.050 --> 03:17.780
Msgstr "Desculpe, nome de usuário e senha errados".

03:17.920 --> 03:28.700
Então, agora eu vou salvar. Vamos tentar isso. 'username'? - 'ingrid', 'password'? - '777'. 'Desculpe, nome de usuário e senha errados'.

03:28.890 --> 03:33.550
"Desculpe, nome de usuário e senha incorretos", mas depois recebo o "newsfeed".

03:33.670 --> 03:34.630
O que acabou de acontecer?

03:35.920 --> 03:41.680
Bem, o que acabamos de fazer foi, fizemos um 'for loop', mas corremos isso três vezes.

03:41.680 --> 03:47.830
Então, a primeira vez que recebi "Desculpe, nome de usuário errado", na segunda vez que recebi "Desculpe, nome de usuário errado", porque é

03:47.830 --> 03:56.080
checando 'andrei' e 'sally', e depois checando 'ingrid', que finalmente funciona e me devolve o 'newsfeed'.

03:57.330 --> 04:04.110
Então nossa lógica aqui não está certa. O que podemos fazer para resolver isso?

04:04.160 --> 04:08.390
Bem, eu tenho uma ideia. Vamos criar outra função.

04:08.390 --> 04:16.910
Eu vou chamar esta função 'isUserValid' e esta função vai receber 'username'

04:20.330 --> 04:22.340
e senha'.

04:22.410 --> 04:28.550
E aqui podemos copiar isso e movê-lo para cá.

04:28.550 --> 04:35.750
Mas nós realmente não queremos fazer o que aconteceu aqui onde estamos constantemente log, em vez disso, gostaríamos de dizer

04:36.290 --> 04:39.520
'retorno verdadeiro'.

04:39.560 --> 04:50.180
Então, se o usuário é válido 'return true', se o usuário não é válido, então devemos 'return false', certo?

04:50.210 --> 04:52.740
Mas como podemos fazer isso?

04:52.850 --> 04:58.060
Bem, se eu 'retornar falso' aqui - vamos ver a lógica.

04:58.340 --> 05:00.320
Eu estou passando por tudo.

05:00.620 --> 05:06.710
Se em algum momento o 'nome de usuário' e a 'senha' corresponderem, com o que temos no banco de dados 'return true'.

05:06.710 --> 05:11.630
E lembramos que uma função pára e sai quando vê "retorno".

05:11.630 --> 05:13.150
Então, vai retornar "verdade".

05:13.580 --> 05:20.810
Mas se ele fizer o looping 3 vezes e essa condição 'if' nunca passar, ele irá para o próximo

05:20.810 --> 05:23.410
linha que é 'retorno falso'.

05:25.590 --> 05:28.350
Então agora 'isUserValid'.

05:28.350 --> 05:30.420
Bem, vamos testar isso!

05:30.660 --> 05:40.820
Eu vou dizer 'console.log (isUserValid)', e nós daremos a ele 'username' e 'password'.

05:41.310 --> 05:44.970
Você pode ver que o 'username' e 'password' estão vindo daqui.

05:45.000 --> 05:47.880
Então vamos ver. Vou salvar e atualizar

05:50.500 --> 05:54.980
'ingrid', '777'.

05:55.190 --> 05:55.870
'verdade'.

05:55.880 --> 05:56.540
Está certo.

05:56.660 --> 05:58.550
Vamos testar algo onde não está certo.

05:58.550 --> 06:03.280
Eu vou dizer 't' e 'garblegarblegarble', 'false'.

06:03.380 --> 06:03.610
ESTÁ BEM.

06:03.620 --> 06:07.160
Parece que a nossa função 'isUserValid' está funcionando.

06:08.810 --> 06:11.300
Então agora observe isso:06:11.540 --> 06:17.730
Podemos remover o log e descomentar nossa função original.

06:19.500 --> 06:33.610
E em vez de fazer tudo isso, podemos agora dizer 'if (isUserValid)', 'username' e 'password', que

06:33.610 --> 06:40.070
é novamente este 'username' e 'password', que recebemos aqui do 'prompt'.

06:40.280 --> 06:45.230
Se isso for "verdadeiro", execute o "newsfeed".

06:45.350 --> 06:51.020
Se for falso, bem 'mais' você diz 'Desculpe, nome de usuário e senha errados'.

06:51.500 --> 06:54.280
Vamos salvar e atualizar. ESTÁ BEM.

06:54.360 --> 06:55.170
Vamos.

06:55.170 --> 07:05.760
'ingrid', senha '777'. Recebemos o nosso feed de notícias e, se inserirmos a informação errada,

07:08.790 --> 07:13.290
temos "Desculpe, nome de usuário e senha errados".

07:13.300 --> 07:14.730
Quão legal é isso?

07:14.770 --> 07:20.700
Nós agora acabamos de criar 2 funções e ela lê muito bem, certo? E diz 'signIn'.

07:21.040 --> 07:24.040
Aqui está o 'username'. Aqui está a "senha".

07:24.040 --> 07:29.730
Vamos para a função 'signIn', diz:"Ei, se 'éUserValid'?"

07:30.260 --> 07:36.140
"Sim, o usuário é válido". "Than 'log newsfeed', caso contrário 'alerta' 'Desculpe, nome de usuário e senha errados".

07:36.360 --> 07:42.180
E esse é um conceito realmente importante de nomear coisas e códigos de pedidos para que você possa lê-lo

07:42.180 --> 07:44.560
como o inglês e isso faz sentido.

07:44.660 --> 07:45.940
E aí você tem isso.

07:46.080 --> 07:48.780
Nós temos nosso aplicativo no Facebook.

07:48.780 --> 07:50.960
Você pode ver aqui o poder do JavaScript.

07:51.000 --> 08:00.640
Novamente, criamos essas funcionalidades que podem ser aplicadas em grande escala em aplicativos da web reais.

08:00.750 --> 08:02.670
Eu vejo você no próximo. Tchau tchau
