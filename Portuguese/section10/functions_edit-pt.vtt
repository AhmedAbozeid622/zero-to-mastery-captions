WEBVTT

00:01.000 --> 00:06.710
Bem vindo de volta! Funções são a parte mais difícil do JavaScript.

00:07.140 --> 00:11.380
E levará algum tempo para obtê-lo completamente. Contudo,

00:11.480 --> 00:13.810
neste vídeo vamos tentar fazer isso.

00:13.880 --> 00:18.020
Nós vamos aprender funções JavaScript.

00:18.030 --> 00:21.710
Então, vamos começar com "o que são funções?"

00:22.640 --> 00:28.040
Bem, eles são parte do código, que executam ações. Sem funções

00:28.040 --> 00:30.730
JavaScript não faria nada.

00:30.740 --> 00:40.340
A beleza é que as funções podem executar uma ação ou várias ações. Mas vamos voltar a isso. Primeiro,

00:40.390 --> 00:45.560
vamos falar sobre como você já conhece algumas funções JavaScript sem perceber.

00:45.640 --> 00:47.250
Você já viu antes.

00:47.300 --> 00:53.160
'alerta' - essa é uma função. 'pronto' -

00:56.130 --> 00:57.970
essa é uma função.

00:58.150 --> 00:59.350
Você já viu isso antes.

01:00.240 --> 01:07.500
Então, JavaScript nos fornece algumas funções, que são realmente muito úteis, para que todos que escrevem

01:07.500 --> 01:12.380
JavaScript, pode usá-los sem ter que escrevê-los repetidamente.

01:12.430 --> 01:15.700
Então, com funções, temos duas opções.

01:15.830 --> 01:20.990
Um - está usando as funções JavaScript existentes, como 'alerta' e 'prompt'.

01:21.980 --> 01:25.880
E dois - podemos criar os nossos.

01:25.880 --> 01:32.900
Então, antes de entrarmos em como criamos nossas próprias funções e o que é tão útil nelas, você pode ter

01:32.900 --> 01:37.920
notei - notei uma coisa:esses colchetes, que estão ao lado um do outro com funções.

01:37.940 --> 01:45.800
O que eles querem dizer? Bem, isso em JavaScript significa executar a função.

01:46.840 --> 01:52.750
Então, vamos ver se o que acontece, quando eu apenas digito 'alert' e pressiona 'enter'.

01:52.810 --> 02:01.540
Eu fico alerta () e algumas coisas estranhas. Hmmm, 'f' aqui significa função e pode ver quando eu passar

02:01.540 --> 02:01.990
acima dele.

02:01.990 --> 02:04.450
Diz "alerta de função ()".

02:04.450 --> 02:08.060
Isto é o que significa executar uma função:para executar

02:08.080 --> 02:08.960
'alerta()'

02:09.010 --> 02:13.090
Eu executo chamando assim ['alert ()']

02:15.010 --> 02:23.330
Então, esses colchetes significam 'chamar uma função', então eu posso chamar uma função.

02:23.490 --> 02:28.580
E você também notou que dentro do "alerta" eu posso adicionar coisas como

02:29.050 --> 02:33.800
"Olá!"

02:33.910 --> 02:42.190
Estes são todos chamados de 'argumentos' e eu sei, estou lançando um monte de jargões, um monte de palavras para você, mas esses

02:42.190 --> 02:44.670
são apenas coisas que você vai ouvir mais e mais,

02:44.710 --> 02:51.490
quando você é um desenvolvedor, e eles vão ficar com você - não será a primeira vez, mas, como eu disse, apenas tente

02:51.700 --> 02:53.990
chegar lá um passo de cada vez.

02:54.010 --> 02:58.630
Então, 'argumentos' são o que é dado às funções.

02:58.840 --> 03:03.880
Por exemplo, quando fizemos, no nosso exemplo aqui.

03:03.970 --> 03:13.190
"Hellooooo" e o "console.log" era um "argumento". E o interessante é que você pode ter vários argumentos:03:13.200 --> 03:19.820
por exemplo, se eu removi isso e só tenho, vamos apenas ter 'console.log' por agora.

03:20.190 --> 03:24.690
Eu posso fazer "como você está".

03:24.700 --> 03:27.950
Eu salvo e atualizo e recebo.

03:27.950 --> 03:29.150
"Hellooooo como você está".

03:29.210 --> 03:37.800
Veja, eu posso ter vários argumentos, mas apenas adicionando uma vírgula. Mas, novamente, isso depende da função.

03:37.810 --> 03:47.870
Agora, novamente, antes de começarmos a criar os nossos, vamos revisar. 'alerta' é uma função, 'alerta' com os parênteses,

03:47.960 --> 03:56.220
Eu estou chamando a função 'alerta' e estou chamando a função 'alerta' com o argumento

03:56.400 --> 03:59.910
'Oi'. 'alerta' precisa ser chamado,

04:00.090 --> 04:02.460
caso contrário, é apenas sentar lá.

04:03.900 --> 04:08.880
Agora, o grande motivo para usar a função é que você pode chamá-la quantas vezes quiser.

04:08.970 --> 04:19.080
Pense em "alerta", imagine ter que dizer sempre "Ei, computador, crie essa janela 'popup' e imprima o que for

04:19.080 --> 04:21.090
argumento que eu coloco em "todas as vezes.

04:21.270 --> 04:27.540
Quero dizer que seria realmente uma droga. Não é legal, podemos apenas chamar de 'alerta' e aquela janela pop-up aparece

04:27.540 --> 04:29.770
nós e tudo é feito para você?

04:29.780 --> 04:32.010
Bem, isso é basicamente o que as funções fazem.

04:32.010 --> 04:39.810
Eles facilitam a vida por meio de ações, empacotados, então você só escreve uma vez e então você pode apenas

04:39.810 --> 04:41.450
chame-o.

04:41.480 --> 04:43.480
ESTÁ BEM. Então vamos para a parte divertida.

04:43.490 --> 04:54.970
Vamos criar nossas próprias funções. Então, se voltarmos ao nosso documento aqui, vamos ver aqui. Nós temos 2

04:54.970 --> 05:00.180
formas de criar funções e mostrarei o primeiro caminho.

05:00.340 --> 05:01.980
Na verdade, vou mostrar-lhe este primeiro.

05:02.200 --> 05:08.970
Então, vamos criar nossa própria função, usando o primeiro método, que é 'declaração de função'.

05:09.310 --> 05:17.780
E vamos usar o nosso 'script.js' aqui, que está ligado ao nosso HTML, que fizemos no vídeo anterior.

05:17.930 --> 05:23.840
Então, aqui eu posso dizer 'function sayHello ()'

05:27.960 --> 05:30.510
é 'console.log ("Olá")'.

05:35.380 --> 05:38.700
Novamente a sintaxe é um pouco diferente, mas você só precisa lembrar.

05:38.800 --> 05:41.850
Eu estou dizendo 'função' - vai ser chamado 'sayHello'.

05:42.070 --> 05:49.150
Nós temos esses colchetes, que são muito familiares para nós. E então 'console.log ("Hello");'. Vamos ver o que acontece

05:49.150 --> 05:53.480
quando eu salvar. Eu atualizo.

05:53.830 --> 05:54.860
Hmmm, nada acontece.

05:55.980 --> 05:56.920
Por que é que?

05:57.240 --> 06:00.530
Bem, nós declaramos essa função.

06:00.540 --> 06:09.430
Mas lembre-se, o que fizemos com 'alerta'? Bem, existe, mas não o corremos.

06:09.480 --> 06:16.170
Nós temos que chamar a função, então temos que dizer 'sayHello', assim. Agora quando eu atualizar.

06:16.740 --> 06:19.430
Eu recebo "Olá".

06:19.570 --> 06:25.610
Então pense nisso com a variável. Quando digo 'var a equals 5',

06:25.720 --> 06:29.260
isso não vai fazer nada, até conseguirmos o 'a'.

06:29.560 --> 06:34.120
E é quando imprime '5'.

06:34.130 --> 06:36.500
ESTÁ BEM. Então esse é um caminho.

06:36.510 --> 06:39.060
Qual é a segunda maneira de criar uma função?

06:39.270 --> 06:45.150
A segunda maneira é chamada de 'expressão de função'.

06:45.340 --> 06:47.900
E isso é assim.

06:48.130 --> 07:01.430
Eu posso dizer 'var sayBye = function ()' 'console.log ("Bye");'.

07:02.300 --> 07:05.620
Mais uma vez eu vou salvar isso e atualizar.

07:05.810 --> 07:11.660
E mais uma vez só recebemos 'Olá' porque, bem, mais uma vez temos que chamar essa função.

07:11.720 --> 07:20.560
Então, eu digo 'sayBye', corra e atualize. "Olá Tchau". Agora

07:20.640 --> 07:30.040
Uma coisa que você deve ter notado aqui é que estamos atribuindo essa função à variável 'sayBye', mas

07:30.940 --> 07:33.240
qual é o nome da função?

07:33.250 --> 07:40.520
Quero dizer aqui claramente o nome da função é 'sayHello', mas aqui estamos, estamos apenas atribuindo a variável.

07:40.520 --> 07:48.230
Quero dizer, tecnicamente a função não tem nome e isso é chamado de 'função anônima'.

07:48.360 --> 07:54.480
Nós atribuímos essa função para 'sayBye', então podemos referenciá-la através de 'sayBye', mas caso contrário não podemos

07:54.480 --> 07:56.350
realmente acessar essa função.

07:56.640 --> 07:59.880
Bem, você verá porque isso é importante

07:59.940 --> 08:01.500
em vídeos posteriores.

08:01.500 --> 08:06.770
Mas você poderia tecnicamente fazer isso:e chamar essa função de 'byebye'.

08:13.110 --> 08:13.760
ESTÁ BEM.

08:14.050 --> 08:20.560
Então, agora que sabemos como criar funções, por que precisamos desses argumentos?

08:20.830 --> 08:23.740
Lembre-se, por que precisamos de material dentro dos suportes?

08:23.740 --> 08:26.660
Quero dizer - estes parecem bastante úteis, certo?

08:27.630 --> 08:40.090
Bem, vamos tentar alguma coisa. 'cantar', vamos fazer uma função 'cantar' e este 'cantar' terá, terá 'console.log'

08:40.120 --> 08:46.220
e eu direi "AHHHHHHHHHHHH". Isso sou eu, cantando.

08:46.230 --> 08:51.550
E também tem 'console.log ("TEEEEEEEEE")'.

08:52.030 --> 09:00.390
É assim que eu canto. Agora, se eu salvar isso e atualizar, verifique se ele ainda canta. Eu tenho que ligar!

09:03.440 --> 09:04.920
Vamos nos refrescar.

09:05.040 --> 09:07.410
Bela canção:AHHHHHHHHHHHH, TEEEEEEEEE.

09:07.680 --> 09:18.530
Mas agora, toda vez que eu quero mudar para uma música diferente, talvez eu quisesse dizer 'laaa deeee daaa'.

09:18.660 --> 09:31.840
Bem, eu tenho que deletar isso e mudar isso para 'laaa deeee daaa' ou eu tenho que criar um novo, chamando

09:32.260 --> 09:33.640
'sing2'

09:36.310 --> 09:50.750
'console.log' e você pode ver aqui, como isso é chato, que eu estou digitando a mesma coisa uma e outra vez

09:51.020 --> 09:52.710
e apenas mudando essas coisas.

09:52.910 --> 10:00.090
E agora eu tenho que correr 'sing2'. E eu refresco, e ufa, isso foi cansativo! ESTÁ BEM.

10:00.460 --> 10:07.600
Eu fiz tudo isso e agora imagino, se tivéssemos milhares de músicas, que queremos cantar; nós somos 'Spotify' e

10:07.600 --> 10:10.330
queremos mostrar todas as letras das músicas.

10:10.330 --> 10:13.210
Quero dizer que é muito bonito cansativo, certo?

10:13.210 --> 10:18.680
E uma das regras com desenvolvedores é essa idéia de "DRY:não se repita".

10:18.730 --> 10:21.790
Idealmente, você quer tornar as coisas o mais eficientes possível.

10:22.000 --> 10:34.820
E uma coisa que você pode fazer é adicionar argumentos. Então eu posso adicionar algo como 'música' e agora - deixe-me

10:34.820 --> 10:35.970
exclua isso por enquanto.

10:37.720 --> 10:46.670
No 'console.log' eu posso apenas dizer 'música'.

10:46.820 --> 11:01.190
Então agora, a qualquer hora que eu quiser mudar a música, eu posso dizer "Laaa deee daaa". 'cantar ("helllloooooo")

11:02.140 --> 11:02.990
Então "cante

11:05.330 --> 11:08.990
("backstreets back alright")

11:11.770 --> 11:14.470
Agora eu salvo e atualizo.

11:14.500 --> 11:23.060
E olha isso! Você vê quantas linhas de código acabamos de salvar e como agora posso usar 'cantar' quando quiser,

11:23.330 --> 11:26.600
e eu posso personalizá-lo para o que eu quero.

11:26.600 --> 11:28.050
Tipo como 'alerta'.

11:28.130 --> 11:30.570
Isso é o que os argumentos fazem.

11:30.830 --> 11:37.790
Argumentos nos permitem não nos repetir e tornar nossas funções o que chamamos de mais extensíveis.

11:37.790 --> 11:40.530
Eles podem ser personalizados.

11:40.590 --> 11:44.860
Vamos fazer outra coisa para aprender uma coisa divertida sobre funções.

11:44.970 --> 11:57.450
Vamos apagar isso e tentar 'function multiply ()'. E nós vamos dar 'a' e 'b', então vai aceitar dois

11:57.450 --> 12:01.330
argumentos e nós vamos fazer 'a * b'.

12:01.710 --> 12:15.320
E agora, dentro de 'a * b', vamos dizer 'multiplicar' e vamos chamar 'multiplicar (5, 10)'. Salve e atualize.

12:15.460 --> 12:18.890
E agora nós deveríamos ter 'multiplicação' disponível para nós.

12:18.910 --> 12:24.570
Você pode ver aqui 'multiplicar (a, b)' que é 'b' exatamente o que escrevemos.

12:24.600 --> 12:27.370
OK, então o que acontece se eu 'multiplicar'

12:29.630 --> 12:32.020
(5, 10)?

12:32.480 --> 12:33.410
O que você acha que eu vou conseguir?

12:33.560 --> 12:33.910
Vamos ver!

12:37.980 --> 12:39.770
Hmmm, isso é muito estranho.

12:39.780 --> 12:42.340
Vamos tentar novamente com um número diferente.

12:42.370 --> 12:44.180
Ainda 'indefinido'.

12:44.380 --> 12:47.530
Por que é que? Bem, isso é chamado de depuração.

12:47.530 --> 12:50.680
Vamos ver se podemos descobrir o que está acontecendo aqui.

12:50.680 --> 12:53.580
Eu vou fazer um 'console.log' aqui.

12:54.490 --> 12:59.050
E eu vou fazer o logout de 'a' e 'b' para ter certeza de que esta função está realmente rodando.

12:59.210 --> 13:11.600
Então, eu vou salvar e atualizar. ESTÁ BEM. 'console.log', 'a' e 'b' e eu apenas executar a função novamente.

13:11.660 --> 13:17.610
'console.log'. ESTÁ BEM. Então parece que está correndo, mas estou ficando "indefinido" aqui.

13:17.770 --> 13:23.440
Bem, eu posso te mostrar isso em um diagrama.

13:23.440 --> 13:27.270
Então, uma função é uma 'entrada'.

13:27.330 --> 13:32.270
Nós damos uma espécie de 'input', talvez às vezes esteja vazio, então é isso que está no suporte.

13:32.460 --> 13:34.900
No nosso caso é 'a' e 'b'.

13:35.010 --> 13:42.790
Então esses são números, então '5' e '10'. E então a função faz o que nós dissermos para fazer.

13:42.790 --> 13:51.550
No nosso caso, foi para 'multiplicar 5 e 10'. E então nós obtemos uma 'saída', mas não estamos obtendo essa 'saída'.

13:51.550 --> 13:52.280
Por que é que?

13:52.350 --> 13:56.270
Bem, porque uma função funciona assim.

13:56.650 --> 14:01.450
E não se preocupe, acabei de adicionar um monte de flechas, mas vou passar por tudo e explicar para você.

14:01.450 --> 14:03.400
A 'entrada' está recebendo '5' e '10'.

14:03.400 --> 14:11.950
A função faz algumas coisas, e até o momento nós fizemos apenas 'console.log' e a maneira 'console.log'

14:11.950 --> 14:18.870
funciona é, a função está dizendo:'Basta logar no console no navegador'.

14:19.100 --> 14:24.400
Mas nunca fizemos onde retornamos um 'valor'.

14:24.470 --> 14:25.820
Deixe-me mostrar o que quero dizer.

14:26.600 --> 14:29.300
Quando não retornamos algo, ficamos "indefinidos".

14:29.330 --> 14:32.240
Quando retornamos algo, obtemos o 'valor'.

14:32.240 --> 14:37.090
Então vamos ver aqui se podemos explicar isso.

14:37.110 --> 14:47.410
Então, aqui sempre que eu estou dizendo 'multiplique (10, 5)', e eu vou remover o 'console.log' só para não confundir

14:47.410 --> 14:50.400
nos, salve e atualize ...

14:50.770 --> 14:51.820
Eu fico "indefinido".

14:52.000 --> 14:56.710
Isso porque, como você vê neste diagrama, não estamos retornando nada.

14:56.710 --> 15:04.330
Então, em JavaScript, a maneira como você retorna as coisas é - você tem que colocar em 'retorno' dentro de uma função.

15:04.690 --> 15:12.400
Então, agora ele vai 'voltar a * b' e você vê, que é uma - é uma palavra especial em JavaScript -

15:12.400 --> 15:13.740
destacado em vermelho.

15:14.020 --> 15:20.310
Bem, agora está dizendo 'Sim, vamos devolver o valor'.

15:20.370 --> 15:28.320
Então, mesmo se nós adicionamos 'console.log'. Você fará 'console.log' e perguntará "Ei, eu tenho um 'return'?"

15:28.470 --> 15:31.160
Se eu fizer isso, vou enviar um valor.

15:32.170 --> 15:33.520
Espero que isso não seja muito confuso.

15:33.520 --> 15:35.170
Vamos ver se funciona.

15:35.930 --> 15:37.980
Eu vou salvar e atualizar.

15:38.240 --> 15:47.700
E agora, se eu multiplicar (5, 10), recebo '50'.

15:47.840 --> 15:56.860
Yay! Temos a nossa função funcionando e esse é um conceito-chave muito importante, que precisamos lembrar

15:56.860 --> 16:01.010
é que precisamos retornar algo de uma função.

16:01.030 --> 16:02.870
Quero dizer, não precisamos.

16:02.980 --> 16:07.990
Mas o ideal é que o façamos, então não temos esses casos, onde apenas temos 'indefinidos' e não sabemos o que

16:07.990 --> 16:08.680
função faz.

16:08.680 --> 16:14.830
É como uma 'caixa preta', que faz alguma coisa e podemos ter um 'console.log', ou não, mas nós não

16:14.830 --> 16:16.410
sabe o que está acontecendo lá dentro.

16:16.410 --> 16:22.620
É bom ter um 'retorno' para garantir que a função atue da maneira que esperamos.

16:22.650 --> 16:24.540
Ok, e se fizermos algo assim?

16:24.540 --> 16:33.550
E se eu 'retornar', e eu esqueci um ponto e vírgula aqui, e 'volte b'. O que você acha que acontecerá? Vamos

16:33.550 --> 16:37.930
atualizar e executar isso.

16:37.960 --> 16:38.540
ESTÁ BEM.

16:38.830 --> 16:41.870
E se eu mudar a ordem e colocar "a" primeiro?

16:41.960 --> 16:43.080
Vamos tentar de novo.

16:44.960 --> 16:54.550
Eu recebo '5' e 'return' é o caminho final para terminar uma função se isso fizer sentido. Então, assim que você disser

16:54.550 --> 16:57.770
'return' em uma função, o programa sai.

16:57.820 --> 17:04.240
Então, para passar por isso eu digo "multiplicar (5, 10)". Vai para a função, diz:"Sim, eu tenho a função

17:04.240 --> 17:10.690
'multiplicar'. Vou colocar 'a' como '5' e '10' como 'b' ".

17:10.840 --> 17:20.540
E agora entra na função e diz:'return 5', que é 'a'. Então, isso retorna e sai da função.

17:20.950 --> 17:23.290
Então agora essas duas linhas não estão sendo executadas.

17:23.290 --> 17:30.090
O programa simplesmente lê isso, vai até aqui, lê a primeira linha da função e depois sai.

17:30.100 --> 17:37.630
Então, em uma função você deveria ter uma declaração de 'retorno', ou isso é certo?

17:38.500 --> 17:41.910
Vamos ver um caso em que isso pode não estar correto.

17:41.920 --> 17:43.750
Vamos adicionar uma declaração 'if' para isso.

17:44.080 --> 17:53.330
Digamos que queremos fazer 'multiplicar', mas também somos meio preguiçosos e não queremos ser muito difíceis com

17:53.330 --> 17:54.040
o computador.

17:54.140 --> 18:05.420
Então, digamos que queremos dizer que, 'se' - nos lembramos da 'declaração if'. "se 'a' for maior que '10'" ou "se 'b' for

18:05.420 --> 18:07.430
maior que '10' ".

18:10.170 --> 18:18.430
Podemos dizer "voltar", que é muito difícil ";"

18:18.710 --> 18:19.290
Caso contrário [outra]

18:25.850 --> 18:33.380
nós vamos retornar 'a * b'. Vamos ver o que acontece aqui.

18:34.890 --> 18:39.050
Eu vou salvar e atualizar. Vamos fazer 'multiplicar (5.4)'.

18:43.400 --> 18:46.220
Eu recebo '20'.

18:46.270 --> 18:49.680
E se fizermos '5' e '40'? eu recebo

18:49.690 --> 19:01.180
"isso é muito difícil", porque agora está lendo as funções '5' e '10', e está dizendo:"Hmmm, 'b', que é '40' é maior

19:01.180 --> 19:02.440
que '10' ".

19:02.470 --> 19:06.560
Então, de acordo com o 'if statement' eu vou "é muito difícil".

19:06.670 --> 19:19.480
E como um 'retorno' sai da função, ele nunca chega a isso, mesmo que eu retorne a * b ', você nunca

19:19.480 --> 19:24.490
chegar lá, porque o 'retorno' sai da função. Apenas para checar,

19:24.490 --> 19:28.960
vamos fazer isso:vamos fazer '5 * 40'.

19:28.970 --> 19:34.750
E nunca chega a nenhuma dessas linhas, porque assim que ele vê um 'retorno', sai da função.

19:35.790 --> 19:37.320
Eu sei que é muito.

19:37.320 --> 19:41.980
E vamos descobrir por que essas coisas são importantes nos próximos vídeos.

19:42.210 --> 19:50.540
Mas eu também queria mostrar a você que você pode ter funções internas. Então, em JavaScript as funções são 'variáveis'.

19:50.880 --> 19:54.120
E o que isso significa é que conseguimos atribuir

19:56.880 --> 19:59.990
funções como esta. Certo?

20:00.200 --> 20:02.960
E se fizéssemos algo assim,

20:03.080 --> 20:09.640
bem, podemos chamar 'a' da mesma forma que fizemos e apenas atribuímos a função como uma variável.

20:09.680 --> 20:15.030
Então, tecnicamente, poderíamos fazer algo assim.

20:15.050 --> 20:22.830
Então, vamos ter "multiplicar" - Vamos voltar ao modo como o fizemos. Vamos deixar "multiplicar" o jeito que está no

20:22.830 --> 20:23.580
forma simples.

20:27.330 --> 20:29.640
E nós podemos realmente

20:32.140 --> 20:38.190
diga 'alerta (multiplique)'.

20:38.650 --> 20:43.900
E então aqui vamos fazer '3' e '4'. E eu sei que há muitos colchetes.

20:43.900 --> 20:45.620
Não se preocupe, vamos passar por isso.

20:45.760 --> 20:49.490
Mas vamos apenas salvar isso e atualizar e ver o que acontece.

20:49.570 --> 20:58.150
Eu recebo '12'. Porque o que está acontecendo é:estamos começando com a função interna e estamos dizendo:"Ei, nós

20:58.150 --> 20:59.330
quero alertar alguma coisa! "

20:59.470 --> 21:00.630
"O que você quer alertar?"

21:00.640 --> 21:03.610
"Bem, nós queremos 'multiplicar'"

21:03.610 --> 21:06.330
"Queremos chamar esta função e dar 'a' it '3' e '4'".

21:06.400 --> 21:14.560
Então, vai para 'multiplicar' e diz:"Sim, vamos atribuir 'a' e 'b' a '3' e '4', e eu quero retornar 'a' e 'b'.

21:14.560 --> 21:24.010
Então agora 'multiplicar' é alterado para '12' e então 'alertamos'.

21:24.020 --> 21:33.580
Então, você vê isso agora, em vez de ter algo como 'total', 'multiplicar (4.5)' e, em seguida, colocar 'total'

21:33.590 --> 21:37.420
aqui, podemos simplesmente atribuir "multiplicar" para aqui.

21:40.370 --> 21:41.620
Ufa! isso foi muito!

21:41.640 --> 21:44.850
Mas eu quero te mostrar que nós - nós lidamos,

21:44.880 --> 21:51.000
Eu acho, o tópico mais difícil em JavaScript, que é funções. E você também cobriu o "retorno", que

21:51.000 --> 21:53.040
é muito muito bom.

21:53.050 --> 21:59.140
A outra coisa que eu quero mostrar é que muitas pessoas se confundem com a terminologia e

21:59.260 --> 22:02.340
Eu não acho que é tão importante, mas eu só quero esclarecê-lo.

22:02.390 --> 22:11.370
Existe o conceito de 'parâmetros' e 'argumentos'.

22:11.400 --> 22:18.520
Agora, 'parâmetros' e 'argumentos' são muito semelhantes, mas apenas ligeiramente diferentes.

22:18.520 --> 22:22.420
Então, 'argumentos', como dissemos, são '4' e '5'.

22:22.480 --> 22:27.640
Então funções podem ter 'argumentos' e elas são chamadas com 'argumentos'.

22:28.060 --> 22:31.330
'Parâmetros' são o que 'a' e 'b' são.

22:31.330 --> 22:36.290
Então, 'multiplicar' tem dois 'parâmetros' de 'a' e 'b'.

22:36.420 --> 22:38.210
Eu sei que é um pouco confuso.

22:38.210 --> 22:40.010
Você pode ler um pouco mais sobre isso.

22:40.010 --> 22:46.860
Eu não acho importante saber a diferença, mas sempre que você está lendo artigos

22:46.860 --> 22:52.550
ou aprendendo, talvez através do YouTube, que você ouvirá essas palavras quase de forma intercambiável.

22:52.590 --> 22:56.710
Eles praticamente significam a mesma coisa, apenas uma pequena diferença neles.

22:58.460 --> 23:00.290
Tudo bem!

23:00.910 --> 23:03.690
Eu sei, eu sei que joguei muita terminologia em você!

23:03.730 --> 23:10.780
Mas depois de repeti-lo algumas vezes, fará sentido, então fique forte. Mas é isso para funções.

23:11.080 --> 23:13.580
É hora de você tentar alguns exercícios.

23:13.600 --> 23:15.420
Volte este vídeo se você precisar.

23:15.430 --> 23:21.370
Você realmente quer ter certeza de entender as funções, já que será o núcleo do JavaScript.

23:21.370 --> 23:28.360
Basta lembrar, o que estamos fazendo com funções é, estamos criando novas palavras na linguagem, no JavaScript

23:28.360 --> 23:34.510
língua. Assim, podemos criar 'variáveis' ou podemos criar 'funções' para adicionar vocabulário à linguagem e

23:34.750 --> 23:37.370
até este ponto, é tudo o que estamos fazendo.

23:37.390 --> 23:44.950
Temos esse JavaScript que tinha algumas palavras, que podemos usar, e adicionamos novos como "multiplicar" e

23:45.370 --> 23:48.760
'total' para torná-lo mais útil para nós.

23:49.000 --> 23:51.020
E é isso que é programação.

23:51.210 --> 23:53.110
Eu vejo você no próximo. Tchau tchau
