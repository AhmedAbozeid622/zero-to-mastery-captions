WEBVTT

00:00.980 --> 00:02.900
Olá pessoal.

00:02.900 --> 00:04.000
Bem vindo de volta.

00:04.280 --> 00:12.170
E neste vídeo, quero mostrar uma coisa que me deixou realmente empolgada quando comecei a aprender o nó, e espero

00:12.170 --> 00:19.040
que você fique tão empolgado quanto eu quando passamos por este vídeo e, em seguida, fazemos um

00:19.040 --> 00:20.300
desafio .

00:20.300 --> 00:21.310
Isso vai explodir sua mente.

00:21.330 --> 00:25.760
Pelo menos aconteceu comigo quando comecei a aprender a codificar.

00:25.850 --> 00:34.250
Agora, no vídeo anterior, falamos sobre algo chamado módulo FS que acompanha o nó, e isso é algo incorporado ao

00:34.250 --> 00:39.590
nó e a maneira como obtemos isso é que vamos fazer const.

00:39.760 --> 00:50.360
Bem, na verdade, precisamos primeiro de um arquivo, então vamos fazer um script de toque. js, criaremos um novo script perfeito.

00:50.400 --> 00:52.920
Tudo bem, podemos fechar isso porque não precisamos disso.

00:53.490 --> 01:02.190
E no script. js que temos nesta pasta ou em algum nó, podemos ter 'const fs'.

01:02.210 --> 01:15.460
é igual a 'require (' fs ')', então FS aqui significa sistema de arquivos e, se você tiver baixado o nó, terá acesso a isso.

01:15.470 --> 01:17.680
Apenas fazendo isso.

01:17.880 --> 01:21.750
Agora, por que isso é tão emocionante e tão útil?

01:22.320 --> 01:30.830
Bem, porque o sistema de arquivos FS permite que você acesse nosso sistema de arquivos, o que novamente não soa tão emocionante.

01:30.840 --> 01:38.230
Mas deixe-me demonstrar o que acontece e por que isso é útil - então aceite-me aqui.

01:38.280 --> 01:42.080
Vou fazer um pouco de codificação e depois vou explicar exatamente o que está acontecendo.

01:43.140 --> 01:48.470
Então, nós vamos usar o 'fs. readFile '.

01:48.560 --> 01:50.720
É bastante auto-explicativo.

01:51.200 --> 02:01.380
Temos um parâmetro em branco e, em seguida, temos erro por erro, dados.

02:01.760 --> 02:03.710
E esta é uma função de seta.

02:05.450 --> 02:12.270
Portanto, o segundo parâmetro é uma função, e essa função possui erro ou dados.

02:12.310 --> 02:24.630
Portanto, para o erro, vou dizer se houver um erro, vamos lançar err, ou podemos dizer log de

02:25.020 --> 02:30.660
ponto do console errrroooorrr. Realmente enfie na cara deles.

02:31.550 --> 02:42.680
Bem! Agora, se não houve um erro, diremos bem, diremos console. log e apenas desconectamos

02:42.680 --> 02:45.150
os dados.

02:45.370 --> 02:45.990
Bem.

02:46.150 --> 02:47.720
Deixe-me adicionar o ponto e vírgula.

02:48.830 --> 02:51.090
E salve isso.

02:51.100 --> 02:59.440
Então, o que eu faço aqui. Acabei de importar o módulo FS que vem com o nó e

02:59.740 --> 03:01.670
o módulo FS tem um

03:01.720 --> 03:05.480
método readFile () que parece que lê algum tipo de arquivo.

03:05.560 --> 03:13.300
O primeiro parâmetro é o arquivo real que queremos fazer, portanto, o caminho para o arquivo, que ainda não temos.

03:13.300 --> 03:14.650
Então, vamos criar um.

03:14.650 --> 03:25.200
Vou dizer um novo arquivo e chamaremos de 'olá'. txt 'e com' olá. txt ', nós vamos fazer o nosso clássico

03:26.300 --> 03:27.850
helllloooooo lá !!!

03:29.090 --> 03:32.300
E coisas emocionantes, portanto, pontos de exclamação.

03:32.540 --> 03:37.120
Salvamos isso e agora podemos dizer que queremos ler o arquivo.

03:37.190 --> 03:40.340
'Olá. txt 'do diretório atual.

03:41.140 --> 03:42.340
Olá

03:42.790 --> 03:45.140
texto ponto.

03:45.280 --> 03:50.450
Agora, este método readFile irá encontrar o arquivo com o caminho,

03:50.500 --> 03:52.700
ok, então aqui está.

03:52.840 --> 03:59.420
Vai ler e, se houver um erro, cuspirá um erro.

03:59.590 --> 04:06.670
Se houver algum tipo de dado e tudo for bem-sucedido, ele cuspirá dados. Com a maneira como podemos executar este

04:06.670 --> 04:08.300
arquivo no nó.

04:08.310 --> 04:13.720
Bem, bem, primeiro eu vou ter que salvá-lo. Diremos script de nó. js

04:15.140 --> 04:19.740
Enter e eu tenho buffer.

04:20.920 --> 04:22.740
O que é isso?

04:22.840 --> 04:27.460
E isso é porque temos que fazer um pouco de codificação.

04:27.670 --> 04:34.680
E o que isso significa é que, se eu fizer isso 'toString ()', vamos apenas tentar isso e mostrar o que eu quero dizer.

04:37.450 --> 04:38.530
E eu entendo.

04:38.770 --> 04:41.250
Olá.

04:41.260 --> 04:49.530
Portanto, o 'readFile' lê o arquivo como o nome sugere, e cuspirá o que estiver lendo.

04:50.010 --> 04:50.750
Dados.

04:51.500 --> 04:55.490
Agora, por que precisamos colocar o 'toString ()' aqui.

04:56.970 --> 05:04.380
Só para você saber que 'toString ()' faz alguma coisa, por padrão, se você não adicionar nada,

05:04.380 --> 05:11.280
ela usará a codificação chamada UTF 8 e UTF 8 é um tipo de codificação.

05:11.420 --> 05:14.640
Vamos apenas executar isso para garantir que ainda seja o mesmo.

05:14.750 --> 05:15.530
Sim.

05:15.530 --> 05:20.300
Então, o UTF 8 é um tipo de codificação que temos.

05:20.300 --> 05:22.980
Isso é bastante padrão no HTML 5.

05:23.000 --> 05:26.900
E quase todo mundo usa na web.

05:27.290 --> 05:37.160
É uma maneira de termos caracteres, sejam eles latino, você sabe do ABC ou temos japonês coreano, chinês, todos

05:37.160 --> 05:45.770
eles são representados por um número, e o UTF 8 é uma maneira de codificar esses números

05:45.770 --> 05:48.870
para garantir que podemos lê-los.

05:48.920 --> 05:55.910
Na verdade, é um assunto bastante complexo, por isso recomendo a página da Wikipedia que fala sobre UTF 8.

05:55.970 --> 06:03.420
Por enquanto, apenas saiba que UTF 8 é um tipo de codificação que é praticamente padrão na Web.

06:03.500 --> 06:09.290
Você também deve ter visto ASCII e ASCII antes da existência do UTF 8.

06:09.290 --> 06:19.610
ASCII era principalmente para idiomas baseados em latim, então os ABCs; e a UTF expandiu isso para incluir muito mais de muitos outros idiomas

06:19.860 --> 06:22.540
de diferentes partes do mundo.

06:22.960 --> 06:29.780
Tudo bem, um pouco de uma tangente que não precisamos seguir, mas como você pode ver

06:30.530 --> 06:30.990
aqui,

06:31.070 --> 06:35.300
temos 'helllloooooo there' e somos capazes de ler o arquivo.

06:35.300 --> 06:36.320
Bem.

06:36.330 --> 06:37.030
Muito legal.

06:38.270 --> 06:42.810
Deixe-me adicionar outro método ao seu repertório.

06:43.250 --> 06:57.160
Vamos também fazer 'fs'. readFileSync () 'e' fs. readFileSync () 'funciona um pouco diferente do anterior

06:57.160 --> 07:00.210
e sync é sincrônico.

07:00.580 --> 07:01.540
Então, vamos ver o que acontece.

07:01.540 --> 07:02.500
Eu

07:05.340 --> 07:12.230
vou dar um oi. txt 'mais uma vez, e desta vez eu vou deixar assim.

07:14.150 --> 07:26.630
E vamos apenas dizer que isso vai igualar o arquivo e vamos apenas 'consolar. arquivo de log)'.

07:26.650 --> 07:27.020
Bem.

07:27.050 --> 07:31.710
Deixe-me salvar isso e executar isso.

07:31.760 --> 07:32.390
Bem.

07:32.460 --> 07:37.370
Sabemos mais uma vez que conseguimos isso porque precisamos fazer 'toString ()'.

07:37.440 --> 07:38.610
Então vamos fazer isso.

07:38.640 --> 07:42.660
Vou tentar 'toString ()'. Vou salvar e

07:46.060 --> 07:51.020
executar isso novamente. Tudo bem, eu chego 'helllloooooo lá

07:51.280 --> 07:52.410
!!!

07:52.510 --> 08:05.020
'Mas apenas para distingui-los, digamos que este é o número um e este é o número dois.

08:05.450 --> 08:07.660
Eu guardo isso, execute isso novamente.

08:08.630 --> 08:12.510
E uau, o que aconteceu?

08:14.050 --> 08:21.140
Temos um vindo depois dos dois.

08:21.920 --> 08:30.830
Agora, se você assistiu ao vídeo síncrono assíncrono neste curso, poderá entender o que está

08:30.830 --> 08:32.090
acontecendo aqui.

08:32.090 --> 08:34.210
Caso contrário, vou fazer uma rápida sinopse.

08:34.220 --> 08:42.610
Mas eu recomendo que você confira esse vídeo. Agora, o arquivo lido é assíncrono e é por isso que tem

08:42.610 --> 08:45.200
algo chamado função de retorno de chamada.

08:45.220 --> 08:53.290
Ele está dizendo: ei, vou ler este arquivo e, quando terminar, você continua com seus negócios

08:53.290 --> 08:55.120
e continua lendo.

08:55.120 --> 08:59.010
Linha três, linha quatro, linha cinco, linha seis, até 11.

08:59.260 --> 09:07.010
Quando terminar, informarei e apresentarei um erro ou alguns dados. 'readFileSync ()', que é

09:07.010 --> 09:11.740
síncrono, diz: Vou ler este arquivo.

09:11.780 --> 09:14.750
Não faça nada, apenas espere aqui quando

09:14.750 --> 09:18.600
eu terminar, vou atribuí-lo ao 'arquivo' e então você pode continuar.

09:20.210 --> 09:30.080
Então, como você pode ver aqui, o que acontece é que lemos o arquivo e, como é assíncrono, ele executa

09:30.080 --> 09:41.280
isso e chega à linha 10 e executa o 'fs. readFileSync () 'e' readFileSync () 'porque está dizendo: ei, espere até

09:41.280 --> 09:45.150
eu terminar isso, ele imprimirá' helllloooooo lá

09:45.330 --> 09:46.920
!!! 'e

09:47.160 --> 09:52.340
então o código assíncrono vai dizer: ei, eu terminei de ler o arquivo,

09:52.380 --> 09:55.770
aqui estão os dados e eles são impressos aqui.

09:55.770 --> 09:59.860
Novamente, eu realmente recomendo que você confira o vídeo síncrono assíncrono.

10:00.330 --> 10:03.070
Mas, por enquanto, espero que isso faça sentido.

10:03.240 --> 10:12.240
Agora, olhando para isso, qual deles você deve usar? Bem, para um caso simples como esse,

10:12.400 --> 10:19.690
podemos usar o que quisermos. Mas você pode encontrar um problema com o segundo, especialmente se estivermos criando

10:19.690 --> 10:21.150
algo como um servidor.

10:21.250 --> 10:25.090
Se temos um arquivo enorme que tem algo mais do que 'helllloooooo lá !!! ', bem, se

10:25.300 --> 10:34.360
estamos fazendo' readFileSync () ', o que acontece é que vamos interromper ou pausar a

10:34.360 --> 10:39.980
execução do nosso arquivo e ler o texto inteiro.

10:40.370 --> 10:47.000
E o programa estará esperando que isso termine; versus o arquivo de leitura que diz: ei, você pode

10:47.000 --> 10:48.230
seguir em frente.

10:48.320 --> 10:50.340
Eu vou deixar você saber quando eu terminar com isso.

10:50.360 --> 10:56.210
Então, quando você está construindo um servidor e, digamos, um servidor expresso com rotas.

10:56.360 --> 11:03.530
Bem, nesse caso, queremos usar readFile () se estivermos lendo algum tipo de arquivo ou arquivo de texto, seja ele qual

11:03.530 --> 11:04.160
for.

11:04.310 --> 11:08.680
Porque dessa forma não estamos bloqueando a execução e o programa pode continuar fazendo as coisas.

11:09.700 --> 11:10.050
Bem.

11:10.150 --> 11:12.750
Então, uma última vez, apenas para esclarecer as coisas.

11:12.760 --> 11:17.690
Vou rotular isso como 'Async' e 'Sync'.

11:17.710 --> 11:22.350
Então, mais uma vez, se executarmos isso, temos 'Sync' e 'Async'.

11:22.420 --> 11:23.360
'helllloooooo lá !!!

11:23.790 --> 11:32.350
'Mas muito legal, somos capazes de ler um arquivo e as duas instâncias, o que foi bem legal.

11:32.350 --> 11:38.800
Deixe-me mostrar mais algumas dessas e depois explicar exatamente por que isso é tão empolgante, e como podemos usá-lo

11:38.800 --> 11:40.880
para fazer algumas coisas realmente empolgantes.

11:44.090 --> 11:50.770
Então vamos dizer o 'helllloooooo lá !!! 'texto é meio chato e queremos adicionar a ele.

11:51.110 --> 11:54.230
Bem, podemos fazer algo assim.

11:55.280 --> 12:01.160
'fs. appendFile () ', fornecemos o arquivo que queremos anexar.

12:01.430 --> 12:05.220
Então, neste caso, é '. /Olá. TXT'.

12:05.780 --> 12:10.130
E, a propósito, se isso não existir, ele realmente criará o arquivo para nós.

12:10.130 --> 12:13.130
E o segundo parâmetro dirá o que queremos adicionar.

12:13.130 --> 12:28.150
Digamos que também desejássemos adicionar um espaço e dizer "Isso é tão legal", agora existe um ponto de exclamação.

12:28.210 --> 12:36.020
E finalmente, o terceiro parâmetro gera um erro e esse erro diz apenas que, se houver um erro.

12:36.040 --> 12:37.020
Deixe-me diminuir esse tamanho

12:37.040 --> 12:43.540
para que você possa ver - digamos que, se houver um erro, vamos apenas 'consolar'. console de log

12:47.320 --> 12:50.210
''. log (err) 'Tudo bem.

12:50.260 --> 12:51.780
Perfeito.

12:51.830 --> 12:53.900
Então, vamos executar isso e ver o que acontece.

12:53.900 --> 12:58.360
Vou executar o script e chego 'helllloooooo lá !!!

12:58.370 --> 12:58.970
'' helllloooooo lá !!!

12:58.970 --> 13:11.690
'Porque estes correram primeiro, mas se eu for para' olá. txt ', olha só, acabamos de escrever em um arquivo. E agora temos "Isso é tão legal.

13:12.000 --> 13:17.440
"Então, se eu fizer isso de novo e me deixar esclarecer isso, para termos mais espaço, veja

13:21.160 --> 13:22.180
isso. Eu recebo 'helllloooooo lá

13:22.270 --> 13:22.930
!!! '' Isso

13:22.930 --> 13:23.860
é tão legal '' helllloooooo lá

13:23.860 --> 13:24.520
!!!

13:24.520 --> 13:25.990
'' Isso é tão

13:26.010 --> 13:30.770
legal '' Se voltarmos para o olá. arquivo txt, oh garoto, adicionamos ainda mais

13:30.770 --> 13:31.850
texto 'Isso é

13:32.490 --> 13:33.460
tão legal'.

13:33.680 --> 13:35.140
Então isso é bem legal.

13:35.140 --> 13:39.740
Acabamos de adicionar mais algumas linhas ao nosso arquivo.

13:39.800 --> 13:42.450
Deixe-me remover isso apenas para que não fique muito chato.

13:42.800 --> 13:44.780
Vai salvá-lo e voltar.

13:46.190 --> 13:48.930
Tudo bem, então aprendemos o anexo.

13:49.090 --> 13:57.880
Deixe-me comentar isso para que não interfira em nenhum dos outros.

13:57.900 --> 14:04.570
Vamos fazer uma 'gravação' dessa vez - agora crie algum espaço aqui para que possamos

14:07.240 --> 14:09.220
ver Com a gravação,

14:10.320 --> 14:17.020
como você pode imaginar, 'fs'. writeFile () 'e diremos apenas que esse arquivo será chamado' bye. TXT'.

14:17.020 --> 14:19.550
Nomenclatura muito original por mim.

14:20.400 --> 14:21.540
E vai apenas dizer.

14:21.540 --> 14:23.750
Triste por vê-lo ir.

14:27.200 --> 14:44.280
E mais uma vez, ocorrerá um erro e esse erro indicará o console 'if (err)' '. log (err) 'Tudo bem, então vamos salvar isso, executar

14:44.340 --> 14:50.640
o arquivo ou executar o script.

14:51.890 --> 14:56.110
E olhe para isso, tchau. txt 'acabou de ser adicionado.

14:56.240 --> 15:00.580
Se clicarmos nele, temos "Triste ver você ir".

15:00.650 --> 15:03.090
Acabamos de criar um novo arquivo de texto.

15:03.940 --> 15:05.870
Muito muito legal

15:05.930 --> 15:17.010
A propósito, só para você saber o que acontece, se, digamos, eu digitei incorretamente o arquivo lido e agora é um inferno. txt 'Bem, se eu executar isso, vou receber

15:17.150 --> 15:22.280
um erro e você pode ver isso.

15:22.340 --> 15:30.610
Como erros, recebo a mensagem de erro, erro com muitos R's.

15:30.620 --> 15:30.930
Bem.

15:30.950 --> 15:39.260
Um pouco de segue lá, mas apenas no caso de as pessoas estarem perguntando ou você estar pensando sobre isso.

15:39.340 --> 15:39.990
Bem.

15:40.160 --> 15:45.190
Woo ~ Estou ficando cansado, então vamos fazer um último e depois vou lhe dizer exatamente por

15:45.190 --> 15:46.670
que isso é tão legal.

15:46.840 --> 15:54.180
O último que vamos fazer - mais uma vez vamos abrir espaço aqui - será o 'delete'.

15:54.490 --> 15:59.240
Então, com esse 'delete' podemos fazer 'fs. desvincular () '.

15:59.270 --> 16:08.500
o nome está um pouco fora daqui, mas 'fs'. unlink () 'e nós diremos o' tchau. txt 'e observe que eu era capaz

16:08.500 --> 16:18.730
de fazer' tchau. txt 'mas apenas para mantê-lo consistente, eu apenas direi'. /tchau. txt 'com o'. /

16:18.730 --> 16:24.400
'antes e com este.

16:24.400 --> 16:25.970
Novamente, se houver algum erro apenas

16:28.550 --> 16:29.680
'console. log

16:29.790 --> 16:32.720
(err) 'Opa, eu esqueci de fazer o'

16:37.540 --> 16:39.900
se 'perfeito, agora Bem, vamos ver

16:40.130 --> 16:42.020
o que acontece aqui.

16:43.460 --> 16:52.940
E apenas por diversão, vamos adicionar um console. log () 'aqui depois que ele foi excluído e vamos dizer' iniciação 'porque estamos

16:52.940 --> 16:58.590
dizendo' tchau 'para'. /tchau. texto'. Mente soprada.

16:58.990 --> 17:00.290
Tudo bem, vamos executar isso.

17:00.290 --> 17:06.220
Vou dizer - e comentaremos o arquivo de gravação aqui porque você não precisa escrevê-lo, já temos

17:06.220 --> 17:08.320
o 'tchau'. texto'.

17:08.420 --> 17:09.640
Deixe-me salvar.

17:09.810 --> 17:13.280
Agora, se você olhar para o adeus. text ', vamos ver o que acontece aqui

17:16.580 --> 17:20.410
quando eu corro o script, olhe para isso, o' tchau. texto 'foi removido.

17:20.830 --> 17:22.910
A criação acabou de acontecer.

17:25.290 --> 17:26.430
Impressionante.

17:26.490 --> 17:30.840
Então isso foi muito emocionante para mim, espero que tenha sido para você também.

17:30.900 --> 17:34.270
Mas por que isso é emocionante?

17:34.650 --> 17:42.900
Bem, porque agora podemos usar a programação em javascript fora de navegadores da Web e

17:42.900 --> 17:46.760
fora da criação de sites e servidores.

17:46.890 --> 17:52.760
O que podemos fazer agora com esse conhecimento é que podemos facilitar nossa vida.

17:52.800 --> 18:01.540
Você pode pensar nos casos em que talvez queira ler um arquivo do Excel e há algumas coisas que você pode usar, usando o arquivo

18:01.540 --> 18:05.690
de leitura e usando os módulos NPM que você pode ler.

18:05.830 --> 18:06.180
Digamos.

18:06.180 --> 18:10.730
Colunas em um excel e fazer algumas contas.

18:11.140 --> 18:18.100
Ou talvez você tenha uma planilha do Excel com todos esses e-mails e queira enviar um e-mail para, digamos, 100 pessoas nesta

18:18.190 --> 18:24.160
lista, mas você também não queira ser pego enviando spam pelo filtro do Google, dizendo que oi esta conta

18:24.160 --> 18:32.650
está enviando spam porque eles acabaram de enviar 100 e-mails em dois minutos. Bem, usando algo como Node, você

18:32.650 --> 18:40.150
pode criar algo que, a cada seis horas, envia cinco e-mails.

18:40.150 --> 18:48.520
Outra coisa que você pode fazer se tiver um robô, por exemplo, algo semelhante a um sistema de arquivos, em vez de ter

18:48.520 --> 18:50.010
lido o arquivo.

18:50.000 --> 18:58.000
Você pode ler do robô, talvez através de conexões sem fio, talvez através de fios e obter uma entrada de alguns dados

18:58.450 --> 19:00.040
que o robô possui.

19:00.400 --> 19:03.570
Talvez tenha detectado um gato.

19:03.910 --> 19:10.120
Bem, usando essa entrada, você pode fazer algo que possa responder, talvez enviar um

19:10.120 --> 19:16.420
e-mail dizendo que o robô detectou um gato e enviar esse e-mail ou enviar uma saída.

19:16.420 --> 19:24.160
E é isso que chamamos de saída de entrada, onde você recebe uma entrada de outra fonte, outra máquina

19:24.760 --> 19:32.140
e também produz algo para consumo, o que é realmente muito emocionante, porque abre o mundo onde

19:32.170 --> 19:35.490
você pode criar ferramentas para si mesmo.

19:35.620 --> 19:36.730
Você pode automatizar as coisas.

19:36.730 --> 19:41.760
Você pode literalmente fazer qualquer coisa que sua mente possa pensar.

19:42.310 --> 19:48.310
E sei que ainda é cedo e você ainda está no início de sua carreira de desenvolvedor, mas

19:48.310 --> 19:54.370
este é o primeiro passo para entender como você pode usar a programação para resolver problemas e tornar

19:54.610 --> 19:58.580
sua vida mais eficiente, ou talvez um pouco mais divertida. .

19:58.630 --> 20:02.040
Então, no próximo vídeo, vamos fazer algo divertido.

20:02.140 --> 20:07.650
Vamos usar o que acabamos de aprender e ajudar o Papai Noel em um desafio de codificação.

20:08.720 --> 20:10.190
Vejo você nesse.

20:10.360 --> 20:10.570
Tchau tchau
