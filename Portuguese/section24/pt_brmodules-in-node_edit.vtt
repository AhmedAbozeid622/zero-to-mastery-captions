WEBVTT

00:01.050 --> 00:09.260
Agora, voltando ao meu exemplo aqui, vamos adicionar um novo arquivo, e chamaremos isso de 'script2. js '.

00:09.270 --> 00:20.110
- Agora o 'script2.

00:20.110 --> 00:20.110
js 'pode ter uma constante chamada' largeNumber '.

00:20.340 --> 00:24.320
E vamos apenas dizer que é 356.

00:24.780 --> 00:35.410
E se queremos exportar isso e dizer 'export default largeNumber' e agora dentro de 'script. js 'eu faço' importar

00:35.410 --> 00:44.880
largeNumber de 'script2. js ".

00:44.940 --> 00:47.000
- vamos deixar isso um pouco menor

00:47.220 --> 00:48.810
- E agora eu mudei

00:51.920 --> 00:59.120
para 'largeNumber'; faremos 'a + b' se eu executar o script do nó. js 'Recebo um

00:59.160 --> 01:05.660
erro' Importação de token inesperada '.

01:05.890 --> 01:13.390
E isso ocorre porque o Node ainda não implementou o novo recurso ES6 das instruções de importação.

01:15.090 --> 01:19.910
E existem maneiras de contornar isso e você pode adicionar pacotes para permitir que você faça isso.

01:20.170 --> 01:25.980
Mas vou mostrar o caminho CommonJS, porque a maioria dos servidores que você encontrará terá o

01:25.980 --> 01:26.710
caminho CommonJS.

01:26.790 --> 01:29.730
E, com o passar dos anos, essa [importação] e essa [de] se tornarão mais prevalentes.

01:29.730 --> 01:32.750
Mas você já sabe como fazer isso na seção front-end.

01:32.820 --> 01:34.260
Então, nada é diferente aqui.

01:34.260 --> 01:40.460
Para que você se familiarize com o CommonJS, usaremos o formulário 'require'.

01:40.470 --> 01:44.200
Então, como podemos fazer isso usando a maneira como funciona

01:44.280 --> 01:44.950
-

01:45.120 --> 01:47.150
no Nó 8. 9, qual é a versão que temos?

01:51.100 --> 02:01.040
Bem, teremos que fazer uma 'const largeNumber = require ('. / script2. js ')' - novamente isso pode ser

02:01.110 --> 02:04.140
familiar - e aqui dentro

02:04.330 --> 02:10.850
temos que fornecer o caminho do arquivo. Com 'require', agora

02:10.910 --> 02:16.040
temos 'largeNumber' e também queremos exportá-lo agora.

02:16.210 --> 02:25.750
E a maneira como as exportações funcionam com o CommonJS é o seu módulo. exportar 'e isso é porque -

02:25.750 --> 02:36.350
deixe-me esclarecer isso e mostrar a você. Se eu fizer 'node' e 'module', você verá que 'module' é um objeto global

02:36.350 --> 02:42.140
ao qual temos acesso e usando 'module. exportações ',

02:42.190 --> 02:49.880
posso dizer quais objetos quero exportar neste arquivo.

02:49.880 --> 02:52.760
No nosso caso, haverá 'largeNumber'.

02:56.170 --> 03:05.090
Se eu salvar isso e agora executar nosso 'script de nó' - oops terá que sair do processo primeiro.

03:06.880 --> 03:07.800
Limpar se eu

03:07.880 --> 03:09.750
executar o script do nó.

03:09.790 --> 03:16.110
js 'eu recebo [objeto Objeto] 5.

03:16.220 --> 03:17.200
Hmm, por que isso?

03:17.600 --> 03:25.250
Bem, porque agora exportamos esse objeto e da maneira que queremos acessá-lo, aqui estamos exportando um objeto

03:26.110 --> 03:29.350
global que podemos nomear qualquer que seja.

03:29.350 --> 03:39.620
No nosso caso, podemos dizer 'script2' e, para obter a propriedade de 'script2', diremos

03:39.700 --> 03:41.780
'script2. largeNumber 'E

03:41.780 --> 03:49.730
agora, se eu executar isso, obtenho 361 e isso pode ser chamado de qualquer coisa, é apenas uma variável que você está declarando.

03:49.770 --> 03:56.470
Então podemos chamar de 'c' - 'c. largeNumber 'e ainda funciona.

03:57.980 --> 04:01.610
É um estilo um pouco diferente do que estamos acostumados no front-end.

04:02.630 --> 04:09.230
E isso é apenas porque não implementamos o, ou o Node não implementou a importação e exportação com

04:09.350 --> 04:10.770
esta versão dele.

04:11.000 --> 04:12.140
Mas isso virá eventualmente.

04:12.140 --> 04:19.190
Só não se assuste se você vê dessa maneira; depois de se acostumar com a sintaxe, é praticamente a mesma coisa.

04:19.210 --> 04:21.540
Tudo bem, eu vou te ver no próximo.

04:21.550 --> 04:22.020
Tchau tchau.
