WEBVTT

00:03.080 --> 00:06.920
Bem vindo de volta. A segurança é uma coisa muito importante na web.

00:07.280 --> 00:14.360
E como desenvolvedores, temos a responsabilidade de garantir que, seja qual for a informação do usuário,

00:14.360 --> 00:17.160
com cuidado de uma forma segura.

00:18.770 --> 00:27.160
E até agora eu mostrei a você como fazer uma simples configuração de Login, mas eu realmente não mostrei a você

00:27.160 --> 00:28.820
maneira de fazer isso.

00:30.190 --> 00:32.810
E neste vídeo eu vou falar sobre o bcrypt-nodejs.

00:32.890 --> 00:39.560
E o bcrypt é uma biblioteca muito poderosa.

00:40.660 --> 00:45.500
Isso nos permite criar um login muito seguro.

00:45.500 --> 00:46.650
Agora o que isso significa?

00:46.970 --> 00:49.000
Deixe-me te mostrar.

00:49.120 --> 00:58.160
Até agora nós tínhamos 'senha' apenas em texto simples. Na vida real

00:58.250 --> 01:06.800
nós nunca estamos armazenando senhas como textos simples como este, como uma string em nosso banco de dados.

01:08.530 --> 01:16.300
É exatamente assim que as empresas são hackeadas e as senhas são liberadas dos usuários quando são armazenadas dessa forma.

01:16.300 --> 01:24.040
Queremos armazenar senhas em algo chamado hashes e eu vou chegar ao que é em um segundo, mas eu

01:24.040 --> 01:31.540
deseja alterar o banco de dados para mostrar uma aparência mais realista de como as coisas serão armazenadas.

01:31.540 --> 01:35.680
Você vê em nosso banco de dados, podemos ter algo, talvez como

01:39.730 --> 01:46.910
'login:' e este login irá conter uma matriz de objetos

01:50.590 --> 01:51.760
que tem um 'id:'

01:51.880 --> 02:05.320
digamos apenas '987' com o hash que ficará vazio por agora e então um e-mail e este e-mail apenas

02:05.590 --> 02:08.150
referência john@gmail.com.

02:08.230 --> 02:12.480
Isso é algo em que nos aprofundaremos quando falamos sobre bancos de dados.

02:12.680 --> 02:18.230
Mas eu quero mostrar a você - eu quero demonstrar esse ponto para você.

02:18.380 --> 02:27.920
Para podermos lidar com as informações confidenciais, ou seja, se John digamos que entra em nosso site e quer

02:27.920 --> 02:40.010
para fazer um Sign In ele nos dará seu e-mail e sua senha, que é "cookies". Agora ele está confiando

02:40.010 --> 02:41.490
nos com esta informação.

02:41.690 --> 02:47.360
E a primeira coisa que queremos fazer é - bem, definitivamente não vamos adicioná-lo como uma string de consulta

02:47.720 --> 02:52.020
em uma solicitação GET - vamos adicioná-lo a uma solicitação POST.

02:52.040 --> 02:55.530
Então está no corpo do pedido.

02:55.940 --> 02:59.220
Também queríamos enviá-lo por HTTPS.

02:59.420 --> 03:01.750
Isso é algo que requer um certificado.

03:02.180 --> 03:08.690
E nós não vamos entrar nisso, mas nós definitivamente queremos incluí-lo através de um pedido HTTPS, então

03:08.690 --> 03:12.110
que é criptografado. Quando ele envia "cookies"

03:12.260 --> 03:20.510
ele vai ficar confuso e ninguém no meio pode ver isso ou eles serão capazes de vê-lo, mas

03:20.510 --> 03:22.210
eles não vão entender o que isso significa.

03:22.520 --> 03:30.750
E somente o servidor, uma vez recebido essa senha, pode realmente entender que isso significa "cookies".

03:32.100 --> 03:34.110
Tudo bem, então um é HTTPS.

03:34.150 --> 03:38.010
A segunda coisa é, como podemos armazenar essa senha?

03:39.230 --> 03:47.430
Bem, nós armazenamos em um hash e o bcrypt, o pacote que eu estava falando, nos permite fazer isso.

03:47.480 --> 03:52.230
Deixe-me baixar esse pacote e mostrar como ele funciona.

03:58.680 --> 03:59.250
Ai está.

03:59.430 --> 04:07.300
Agora com o bcrypt instalado você pode ver aqui que tem algumas coisas que podemos usar e eu vou copiar e colar

04:07.300 --> 04:14.770
isso e mover algumas dessas coisas ao redor.

04:14.770 --> 04:16.440
Eu realmente vou colocar isso no fundo.

04:20.490 --> 04:25.030
bcrypt nos dá uma maneira de hash uma senha

04:27.940 --> 04:29.650
e uma maneira de comparar

04:32.210 --> 04:35.970
senhas ou hashes. Mas o que isso significa?

04:36.070 --> 04:40.850
Vamos um por um.

04:41.030 --> 04:43.880
Se eu pegar essa função e em nosso '/ assinar'

04:46.770 --> 04:55.530
ou desculpe, eu acho que em nosso '/ register' porque é quando damos nossa senha. Em nosso '/ register' quando corremos

04:57.620 --> 05:01.410
'bcrypt.hash' e em vez de 'bacon'

05:01.420 --> 05:04.450
é isso que passamos como senha do usuário

05:04.660 --> 05:11.640
- se passarmos a senha aqui, bem, temos alguns parâmetros que eles nos dão

05:11.640 --> 05:13.240
e estas são opções que podemos inserir.

05:13.260 --> 05:15.200
Por enquanto, vamos deixar como está.

05:18.840 --> 05:28.050
Se eu 'console.log' o hash que recebemos nesta função - assim bcrypt vai hash a senha

05:28.410 --> 05:33.780
e então retorne este hash - vamos apenas dizer 'hash'.

05:33.840 --> 05:35.550
Tudo bem, então vamos ver o que acontece aqui.

05:35.580 --> 05:37.980
Eu vou salvar. Então eu vou correr

05:37.980 --> 05:44.000
'npm start' voltando ao nosso carteiro.

05:44.160 --> 05:48.830
Se eu fizer '/ register' com Ann - vou clicar em Enviar

05:51.940 --> 05:56.070
e eu recebo 'bcrypt não está definido' porque eu não o incluí aqui.

05:56.080 --> 06:02.090
Vamos fazer isso, vamos fazer 'const bcrypt = require (' bcrypt-nodejs ')'

06:05.360 --> 06:08.750
-

06:08.740 --> 06:12.730
Vamos salvar isso e tentar novamente.

06:12.840 --> 06:13.870
Eu vou clicar em enviar.

06:15.900 --> 06:28.030
Nós voltamos para o console - você vê isso? Acabamos de receber um hash e é isso que uma função hash faz. Uma função hash

06:32.820 --> 06:44.030
Uma função hash pega uma string e embaralha de uma forma que não tem como eu ser capaz de

06:44.030 --> 06:50.650
descobrir que isso [o hash] representa a senha 'cookies' e as funções hash são unidirecionais.

06:50.970 --> 06:57.140
Isso é você pode entrar 'cookies' e você vai conseguir isso, mas você nunca será capaz de voltar.

06:57.620 --> 07:03.930
E a outra qualidade de funções hash é que se eu fizer isso novamente com senha - Ah, eu acho que o

07:03.930 --> 07:05.870
senha para Ann era 'maçãs'

07:05.880 --> 07:14.460
- se eu clicar em enviar eu volto, vejo que o hash da primeira e da segunda vez são diferentes.

07:14.460 --> 07:19.920
E embora as funções hash sempre retornem a mesma coisa para o mesmo valor, o bcrypt é um

07:19.920 --> 07:25.800
um pouco mais seguro do que isso e adiciona um pouco de outra mágica para se certificar de que é impossível

07:25.950 --> 07:27.940
já descobrir o que é a senha.

07:27.960 --> 07:37.270
Mas agora podemos armazenar esse hash - este valor desordenado - em nosso banco de dados aqui para o login e a qualquer momento

07:37.320 --> 07:43.560
nós entramos e queremos verificar se as senhas do usuário coincidem.

07:43.890 --> 07:47.800
Bem, agora - deixe-me remover isso

07:47.940 --> 07:48.600
- temos

07:52.130 --> 07:53.940
- vamos para '/ signin' e no topo

07:57.130 --> 08:05.090
podemos comparar os hashes para pegar o hash que tínhamos antes - vamos usar esse

08:05.390 --> 08:07.230
ou vamos usar o último que conseguimos.

08:08.160 --> 08:09.330
Eu vou substituir isso.

08:09.330 --> 08:18.450
Vai ficar bem feio, mas vou substituir esse hash por essa longa string e vou

08:18.450 --> 08:19.230
comparar

08:21.650 --> 08:26.170
'maçãs' porque é isso que a senha de Ann é.

08:26.240 --> 08:31.480
Se eu comparar 'maçãs' com este hash - vamos console.log.

08:32.680 --> 08:34.480
'primeiro palpite'

08:38.230 --> 08:42.730
nós teremos a resposta novamente

08:42.860 --> 08:46.970
- é isso que recebemos depois que o bcrypt faz isso.

08:47.140 --> 08:52.380
E na segunda vez também faremos um 'log de console' com a senha errada, que é 'veggies'

08:57.560 --> 09:04.480
e este será o segundo palpite.

09:04.510 --> 09:06.640
Vamos fazer um login.

09:06.640 --> 09:11.990
Realmente não importa o que é porque não estamos realmente preocupados com uma resposta.

09:13.330 --> 09:21.180
E recebo um erro dizendo que o hash não está definido porque não atualizei esse hash para o que acabamos de

09:21.180 --> 09:21.930
copiado antes.

09:21.930 --> 09:23.230
Então deixe-me fazer isso.

09:26.480 --> 09:27.080
Ai está.

09:28.860 --> 09:30.980
Deixe-me voltar clique em Enviar.

09:32.320 --> 09:34.110
Se eu olhar para trás, recebo

09:34.120 --> 09:36.160
'primeiro palpite é verdade'

09:36.370 --> 09:39.920
isto é, 'maçãs' é igual a este hash

09:39.940 --> 09:45.310
eles nos deram mas 'veggies' não iguala o hash que eles nos deram lá.

09:48.400 --> 09:53.830
Deixe-me fechar isso um pouco. E o bcrypt é realmente muito poderoso.

09:53.840 --> 09:59.780
Vamos usar isso quando realmente implementarmos um banco de dados no nosso cadastro. Usando bcrypt, que

09:59.780 --> 10:07.730
é um pacote hash experimentado e testado, podemos armazenar com segurança as informações dos usuários, as senhas dos usuários em nosso

10:07.730 --> 10:14.840
banco de dados e ninguém, mesmo que eles - mesmo que os hackers acessem nosso banco de dados - eles terão muita dificuldade em obter

10:14.840 --> 10:16.500
as senhas de usuário.

10:17.300 --> 10:22.370
Eles podem conseguir seus endereços de e-mail, mas nunca nossas senhas, e implementaremos isso em nossa

10:22.370 --> 10:25.770
banco de dados usando bcrypt.

10:25.830 --> 10:29.940
Mas eu realmente quero enfatizar este ponto porque a segurança é realmente importante.

10:30.930 --> 10:37.570
Sempre envie informações confidenciais do front-end para o back-end usando HTTPS

10:38.550 --> 10:48.960
em um corpo POST e se você obter algo como uma senha a maneira de armazená-lo no banco de dados está usando

10:48.960 --> 10:51.820
algo como bcrypt para gerar um hash,

10:52.140 --> 11:00.220
e sempre que um usuário fizer login, verifique o hash com o que o usuário inseriu. Na próxima parte eu tenho

11:00.250 --> 11:01.210
deixado para você

11:01.330 --> 11:08.830
um artigo de segurança que eu escrevi que pode ser um pouco avançado, mas acho que cobre o melhor caminho para

11:08.830 --> 11:14.710
você para armazenar senhas de usuários - algo que é negligenciado com bastante frequência, mas novamente muito importante se

11:14.710 --> 11:18.100
você quer ser o maior desenvolvedor.

11:18.180 --> 11:19.770
Eu vou ver no próximo. Tchau tchau
