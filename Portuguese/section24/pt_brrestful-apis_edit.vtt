WEBVTT

00:01.010 --> 00:01.960
Bem vindo de volta.

00:02.000 --> 00:07.130
Neste vídeo, falaremos sobre a API RESTful.

00:07.250 --> 00:08.050
Agora o que é isso?

00:08.940 --> 00:16.290
Uma API REST define um conjunto de funções que os desenvolvedores podem executar solicitações e

00:16.350 --> 00:25.310
receber respostas por meio de um protocolo HTTP, como GET, POST, PUT, DELETE - algo sobre o qual falamos.

00:25.310 --> 00:33.590
Lembre-se de como eu disse que um navegador envia uma solicitação e espera que o servidor retorne o que o navegador

00:33.620 --> 00:34.410
solicitou.

00:34.640 --> 00:37.590
Um servidor do Google pode nos enviar o que quiser.

00:37.610 --> 00:46.040
Ele não precisa seguir as regras que talvez o navegador da Web defina. Com a API RESTful, podemos criar uma API que

00:46.070 --> 00:52.670
é RESTful - algo que segue as regras com as quais todos podem concordar para

00:52.670 --> 00:55.930
que tenhamos compatibilidade entre sistemas diferentes.

00:57.350 --> 01:05.290
Portanto, uma API RESTful é um estilo de arquitetura e uma abordagem de comunicação; um conjunto

01:05.290 --> 01:14.230
de regras acordado para que todos joguem bem. Os usuários de uma API RESTful GET recebem um recurso,

01:14.440 --> 01:22.990
PUT para alterar o estado ou atualizar um recurso, um POST que cria um recurso e um DELETE para removê-lo.

01:23.390 --> 01:30.800
E isso é algo sobre o qual já falamos, e a API RESTful é uma maneira de definir nosso

01:31.700 --> 01:35.610
servidor para especificar o que pode fornecer e como usá-lo.

01:37.580 --> 01:42.520
Em outras palavras, os parâmetros de URL devem fazer sentido.

01:42.550 --> 01:49.360
Por exemplo, se estivermos fazendo '/ profile' - bem, esperamos que, se for uma solicitação GET,

01:49.360 --> 01:50.920
obteremos um perfil.

01:51.130 --> 01:55.270
Se for uma solicitação POST, adicionaremos um perfil.

01:55.270 --> 02:00.130
Se for um PUT, talvez estejamos atualizando o perfil, e esse URL faz sentido.

02:01.050 --> 02:08.140
E você pode pensar nisso como o substantivo do que queremos receber. A solicitação HTTP é o

02:08.210 --> 02:13.600
verbo e tudo depois da barra [/] é o substantivo.

02:16.180 --> 02:23.800
Agora, finalmente, os REST APis são chamados de 'sem estado' - o que significa que as chamadas podem ser feitas independentemente uma da outra

02:23.800 --> 02:32.040
e cada chamada contém todos os dados necessários para concluir com êxito. Um servidor não precisa continuar memorizando

02:32.160 --> 02:34.560
as coisas.

02:34.560 --> 02:40.590
Cada solicitação que chega tem informações suficientes com as quais o servidor pode responder, independentemente de

02:40.590 --> 02:42.570
quem é essa pessoa.

02:42.570 --> 02:53.080
Portanto, neste exemplo, vamos criar um pequeno aplicativo pequeno que tenha uma API RESTful.

02:53.200 --> 02:55.740
Vamos fazer isso muito menor.

02:56.900 --> 03:03.940
Lá está você - nós temos nosso exemplo anterior - iniciaremos o servidor e falaremos sobre algumas das coisas

03:04.540 --> 03:06.430
que podemos fazer aqui.

03:06.700 --> 03:14.460
Bem, quando olhamos para uma solicitação GET, essa solicitação GET - vamos removê-la também, para que

03:14.460 --> 03:16.400
não fique muito confusa.

03:18.240 --> 03:23.900
Essa solicitação GET terá um objeto de solicitação que recebemos.

03:24.000 --> 03:27.690
Agora, esse objeto de solicitação pode ter algumas coisas - podemos ter solicitação de consulta

03:27.690 --> 03:29.300
de ponto [req. query], podemos

03:32.580 --> 03:37.020
ter o corpo do ponto da solicitação [req. body], que vimos no vídeo anterior.

03:37.020 --> 03:46.190
Também temos cabeçalho de ponto de solicitação [req. header], novamente algo que vimos antes e também solicita parâmetros de ponto [req. params] e essas são

03:46.190 --> 03:50.700
provavelmente as propriedades de solicitação mais usadas.

03:50.790 --> 03:52.200
Então, vamos passar por isso um por um.

03:54.100 --> 04:00.200
'req. query 'é o que obtemos quando fazemos uma consulta GET.

04:00.300 --> 04:12.250
Por exemplo, aqui dentro, se eu fizer um console.

04:12.250 --> 04:12.250
log (req.

04:12.700 --> 04:24.850
query) 'Bem, eu posso ir para o host local e aqui - algo sobre o qual já falamos - posso adicionar um ponto de

04:24.850 --> 04:35.160
interrogação para dizer que essa é uma string de consulta e dizer' name = andrei &amp; age = 31 '.

04:36.200 --> 04:37.770
Pressiono Enter para

04:38.000 --> 04:44.240
voltar e vejo aqui que tenho 'nome' é 'andrei', 'idade' é '31' porque tenho

04:44.280 --> 04:52.950
acesso à string de consulta [console. log (req. inquerir)].

04:52.980 --> 05:01.020
Também temos o corpo da solicitação [req. body], sobre o qual falamos novamente -

05:01.430 --> 05:12.690
usando algo como seus analisadores de corpo 'urlencoded' ou 'JSON', podemos adicionar esse middleware para receber o que a solicitação enviar no corpo.

05:12.720 --> 05:15.530
Também temos cabeçalho de ponto de solicitação [req. cabeçalho].

05:15.600 --> 05:30.900
Então, se eu consolar. log (req. cabeçalho) 'bem, desta vez usando o Postman, posso dizer no cabeçalho - e ele possui

05:30.900 --> 05:34.760
uma boa guia Cabeçalhos - você vê que temos o

05:34.760 --> 05:41.210
tipo de conteúdo' application / json ', que o faz automaticamente porque a última solicitação foi uma solicitação JSON.

05:41.430 --> 05:50.130
Mas eu posso colocar qualquer coisa aqui que eu possa dizer 'name' é 'andrei' - ou, desta vez, apenas para mudar, diremos 'sally'

05:51.090 --> 05:56.510
se eu enviar isso - e esse é um método DELETE, vamos garantir que seja

05:56.620 --> 05:57.490
um método

06:01.120 --> 06:09.180
GET - Se eu enviar isso, vejo isso agora (req. header) possui todos esses cabeçalhos, mas também - name: 'sally'.

06:09.250 --> 06:10.510
Muito legal.

06:10.570 --> 06:16.460
E, finalmente, também temos algo chamado (req. params)

06:16.720 --> 06:28.050
E se 'console. log (req. params) '- esta é uma sintaxe em que você usa os parâmetros do URL.

06:28.140 --> 06:39.620
Se eu fizer o ponto-e-vírgula e depois digamos 'id' ['/: id'] - eu salvo isso e agora temos acesso a qualquer que seja o parâmetro

06:40.190 --> 06:41.330
da URL.

06:41.390 --> 06:47.510
Então, digamos '1234' e removerei o cabeçalho por enquanto.

06:47.520 --> 06:54.080
Se eu 'Enviar', agora tenho {id: '1234'} à direita.

06:54.080 --> 06:54.570
Impressionante.

06:54.740 --> 07:02.290
E você pode ter quantos parâmetros quiser e pode aninhá-los, mas temos acesso às nossas informações

07:02.300 --> 07:05.340
de solicitação, o que é fantástico.

07:06.290 --> 07:15.700
Agora, quando enviamos uma resposta, também queremos ter uma opção sobre o que queremos enviar. Bem, com uma resposta, podemos

07:15.700 --> 07:20.840
dizer que, com o envio, também

07:20.840 --> 07:32.510
queremos responder com um status, digamos um status 404 e poderíamos dizer enviar ("não encontrado")

07:34.190 --> 07:45.440
se eu atualizar e enviar agora, fico 'não encontrado' com um status de 404.

07:45.640 --> 07:48.460
Novamente, se eu voltar ao meu

07:51.350 --> 07:55.560
navegador e atualizar, tenho na guia Rede um status 404.

07:55.580 --> 07:56.720
Tudo certo.

07:56.720 --> 07:57.900
Perfeito.

07:57.980 --> 08:01.550
E, novamente, você personaliza - para que tenhamos uma

08:01.820 --> 08:08.430
API RESTful - GET, POST, PUT e DELETE para seguir as regras que os navegadores da web esperam.

08:08.460 --> 08:09.780
Agora uma última coisa.

08:09.840 --> 08:12.270
Até agora, estamos apenas enviando dados para frente e para trás.

08:12.270 --> 08:20.130
Mas e se quisermos servir algo chamado de ativos estáticos que é 'index'. html ', arquivo CSS, arquivo JavaScript - isso

08:20.130 --> 08:22.180
é mais realista, certo?

08:22.180 --> 08:30.210
Normalmente, queremos um arquivo de índice e a execução do aplicativo - bem, isso é muito fácil de fazer.

08:30.270 --> 08:36.310
Podemos criá-lo dentro deste projeto - vamos apenas criar uma nova pasta chamada public.

08:36.780 --> 08:42.150
E esse nome pode ser familiar para você, porque quando publicamos o 'create-react-app' estava lá e

08:42.150 --> 08:44.650
continha todos os nossos arquivos estáticos.

08:45.290 --> 08:50.980
Então aqui vamos fazer um novo arquivo - 'index. html '.

08:51.020 --> 08:55.070
Agora, dentro desse arquivo público, faremos um rápido documento

08:55.070 --> 08:57.340
HTML que diz 'oi'.

08:57.590 --> 09:01.940
E aqui dentro eu direi 'está funcionando'.

09:04.820 --> 09:10.910
Para que o Express envie arquivos estáticos, podemos removê-lo por enquanto,

09:11.150 --> 09:13.370
apenas para mantê-lo

09:13.460 --> 09:20.640
limpo e executar outro aplicativo de middleware. usar()'.

09:20.830 --> 09:30.300
E isso vem com o Express, já o fazemos. static () 'e aqui damos o caminho do arquivo.

09:30.410 --> 09:38.190
No nosso caso, sabemos que queremos obter o '__dirname', que vimos em um vídeo anterior, que

09:38.190 --> 09:47.850
é o diretório de onde estamos; no nosso caso, seu nó e queremos ir para a pasta pública, então fazemos 'public'.

09:53.680 --> 09:55.240
Isso imprimirá 'nó' e

09:58.010 --> 09:59.380
depois 'público'.

09:59.630 --> 10:08.670
Então agora, se eu salvar isso e voltar à nossa solicitação GET, recebo 'está funcionando'.

10:08.780 --> 10:12.670
Deixe-me aumentar isso para que você possa ver.

10:12.840 --> 10:22.260
E se abrirmos o console e a guia Rede - atualizo, recebo - ooh, vamos fazer uma atualização - recebo '200' recebo 'text

10:25.100 --> 10:26.210
/ html'

10:26.240 --> 10:29.400
E a resposta é meu arquivo HTML.

10:29.570 --> 10:35.420
E se eu tivesse um link CSS aqui, ele carregará o CSS na minha pasta pública.

10:35.540 --> 10:41.700
Se eu tivesse um arquivo JavaScript, ele será carregado, pois no corpo podemos adicionar uma tag de script.

10:42.110 --> 10:49.350
E este é um servidor que acabamos de construir que serve ativos estáticos simples.

10:49.580 --> 10:56.210
E assim que queremos ter algo como uma API na qual interagimos,

10:56.210 --> 10:56.930
GET,

10:56.990 --> 11:03.810
POST, PUT DELETE é quando começamos a usar nossos métodos que aprendemos anteriormente.

11:03.860 --> 11:04.880
Muito legal.

11:05.000 --> 11:12.860
Agora que temos essa base básica, vamos construir nosso servidor para nosso aplicativo - o aplicativo que construímos em nosso

11:12.860 --> 11:16.230
projeto final, nosso aplicativo de reconhecimento de imagem?

11:16.640 --> 11:19.240
Bem, vamos construir o back-end para isso.

11:20.230 --> 11:21.870
Verei no próximo. Tchau tchau
