WEBVTT

00:00.570 --> 00:01.290
Bem vindo de volta.

00:01.410 --> 00:05.160
Vamos implementar mais rotas em nosso aplicativo front-end.

00:05.230 --> 00:09.430
Acabamos de fazer o Login no front-end.

00:09.580 --> 00:18.320
Então agora vamos trabalhar no Register, e já temos uma boa estrutura do que queremos fazer com base

00:18.320 --> 00:34.290
sobre o que fizemos com o Sign In. Podemos novamente converter isso em uma classe que estenda 'React.Component'.

00:34.520 --> 00:37.340
E isso vai renderizar

00:42.370 --> 00:49.870
esta declaração de retorno.

00:50.100 --> 00:57.520
E também queremos ter algumas rotas que, por enquanto, vamos copiar completamente a partir do Login.

01:05.120 --> 01:09.140
E aqui nós vamos ter - para registro

01:09.180 --> 01:09.830
nós podemos dizer

01:12.330 --> 01:16.000
'senha do e-mail'

01:16.270 --> 01:18.190
E finalmente também 'name'

01:21.840 --> 01:25.750
e nós vamos ter que adicionar outro método aqui.

01:26.960 --> 01:35.460
Isso será apenas para o nome e isso será chamado 'onNameChange' e nós vamos ter que mudar o

01:35.460 --> 01:43.680
valores para 'nome', 'email' e 'password'. Impressionante.

01:48.230 --> 01:55.680
Salvaremos isso e teremos que começar a adicioná-los ao nosso componente.

01:55.680 --> 02:02.700
A primeira coisa que queremos fazer é usar a desestruturação para obter nosso componente ou 'onRouteChange'

02:03.600 --> 02:12.820
de 'this.props' e vamos adicionar 'onPasswordChange' em todas as outras entradas; novamente criando estes

02:12.820 --> 02:36.860
em uma nova linha.

02:37.030 --> 02:38.830
Whoo! Tudo bem.

02:38.990 --> 02:41.720
E mais uma vez, queremos criar um método de busca aqui.

02:41.720 --> 02:48.910
Então, olhando para o Sign In, nós definitivamente queremos fazer um POST para que possamos copiar isso por enquanto.

02:48.910 --> 02:55.700
Novamente, não é um grande fã de copiar e repetir o código, mas espero que isso lhe dê uma idéia de alguns dos

02:55.700 --> 03:00.410
coisas que podemos melhorar à medida que aprimoramos nosso aplicativo mais tarde.

03:00.830 --> 03:10.680
Agora em 'submitSignIn' novamente, vamos querer fazer isso em vez do 'onRouteChange', então vamos fazer 'on'

03:11.350 --> 03:16.600
e nós vamos ter que fazer 'this.onSubmitSignIn'.

03:16.740 --> 03:21.260
E eu esqueci a palavra-chave em todos esses também.

03:25.070 --> 03:30.600
Tudo bem, agora o - eu vejo que estamos perdendo o 'email' daqui.

03:30.620 --> 03:31.480
Isso não deveria estar lá.

03:31.500 --> 03:32.340
Tudo bem.

03:32.460 --> 03:38.010
E nós vamos querer ter certeza de que enviamos o 'email' para 'this.state.email'

03:38.540 --> 03:39.700
-

03:43.070 --> 03:50.020
Nós vamos fazer 'senha'

03:50.120 --> 03:54.260
E finalmente faremos 'this.state.name'.

03:58.580 --> 04:05.430
E 'onRouteChange' - não precisamos mais daqui, não é? 'onRouteChange'

04:05.620 --> 04:12.610
- Queremos ir para 'casa' uma vez que estamos registrados, mas lembre-se, se formos ao nosso servidor, nosso '/ register' retorna

04:12.610 --> 04:13.940
o último usuário

04:13.960 --> 04:19.840
então nosso usuário atual. Esses dados serão o usuário.

04:19.850 --> 04:26.130
Então vamos apenas dizer usuário.

04:26.230 --> 04:36.640
Então, se recebermos um usuário de volta, mudaremos para 'home' e provavelmente também atualizaremos o perfil do usuário

04:37.330 --> 04:38.250
no front-end.

04:39.630 --> 04:44.720
Mas se você olhar para o front-end, ainda não temos um perfil de usuário, mas talvez devêssemos.

04:44.720 --> 04:52.430
Então vamos adicionar isso. Eu vou dizer usuário e vai ser um objeto que contém 'email', que é

04:52.430 --> 04:53.480
uma string vazia.

04:54.910 --> 04:59.680
E nós podemos simplesmente copiar o que for retornado de nosso banco de dados

05:04.180 --> 05:05.060
no nosso caso

05:05.140 --> 05:12.580
serão todos esses valores - nós não precisamos do e-mail porque nós o temos lá - exceto que tudo será

05:13.760 --> 05:17.690
vazio para começar, e não precisamos retornar a senha.

05:22.400 --> 05:30.850
'email' é removido. 'entries' será zero por enquanto, e 'joined' será apenas uma string vazia.

05:30.860 --> 05:34.690
Idealmente, quando nos registramos, podemos atualizá-los.

05:34.760 --> 05:42.650
Então, o que podemos fazer com o Register é que teremos uma mudança de rota, mas talvez também chamemos uma função

05:42.650 --> 05:51.830
chame:'updateUser' ou 'loadUser', que ainda não temos.

05:51.830 --> 05:55.370
E talvez possamos passar o objeto do usuário para isso.

05:55.680 --> 06:01.840
E como isso é algo que todo o aplicativo precisa, acho que devemos criá-lo no componente App.

06:01.970 --> 06:11.460
Então, vamos salvar 'this.props.loadUser (user)' e voltaremos para 'App.js' e criaremos essa função

06:12.400 --> 06:28.370
Vamos dizer 'loadUser', 'user' e isso apenas atualizará o estado com o usuário que recebemos.

06:30.570 --> 06:33.030
No nosso caso, serão esses valores.

06:46.030 --> 06:54.100
E todos esses valores virão do parâmetro 'user'. E vamos mudar o nome aqui só pra gente

06:54.100 --> 06:57.350
não fique confuso - para "dados" por enquanto.

07:02.120 --> 07:03.260
'data.id'

07:06.890 --> 07:11.110
Nós vamos ter 'nome' aqui; nós vamos ter 'email'

07:15.360 --> 07:16.210
'entradas'

07:16.530 --> 07:17.490
E então finalmente

07:23.520 --> 07:33.950
'ingressou'. Eu tenho a sintaxe aqui um pouco fora. Ai está.

07:34.080 --> 07:41.130
Tudo bem, se voltarmos para 'Register.js' temos 'onRouteChange' salvo com sucesso. Então estamos carregando o usuário

07:41.670 --> 07:46.020
e depois também mudar a rota. Isso foi muito trabalho sem testar o código

07:46.020 --> 07:47.300
então vamos dar uma olhada.

07:47.400 --> 07:48.570
Vamos ver se isso funciona.

07:49.440 --> 08:02.890
Eu vou para o Register. Eu duvido que isso funcione pela primeira vez, mas vamos ver. 'wes@gmail.com'

08:03.030 --> 08:03.920
Esse é o nome.

08:03.950 --> 08:12.370
Então vamos dizer 'wes', 'wes@gmail.com' nossa senha é '123'. Vou abrir o console aqui só para ver

08:12.370 --> 08:13.710
que tipo de erros recebemos.

08:15.860 --> 08:17.810
Eu duvido que funcione na primeira vez, mas vamos ver.

08:17.810 --> 08:19.930
Registo. Tudo bem.

08:19.930 --> 08:29.590
Nós temos alguns erros aqui. "loadUser não é uma função" e é porque se formos para 'App.js'

08:29.630 --> 08:34.450
'loadUser' nunca é passado para 'Register'.

08:34.530 --> 08:35.190
Então vamos fazer isso.

08:38.110 --> 08:42.730
'Register' também receberá 'loadUser'

08:46.810 --> 08:47.200
como isso.

08:50.720 --> 08:52.130
E terá que ser 'this.loadUser'.

08:52.220 --> 08:52.780
-

08:53.300 --> 08:53.830
Tudo bem.

08:53.870 --> 08:54.520
Segundo round.

08:54.620 --> 08:55.960
Vamos ver se isso funciona.

09:03.250 --> 09:08.190
Um dois três.

09:08.190 --> 09:08.710
Tudo bem.

09:08.730 --> 09:17.160
Somos capazes de fazer login, mas temos uma solicitação incorreta.

09:17.190 --> 09:21.210
Vamos ver nossa informação parece boa.

09:21.210 --> 09:23.210
'email', 'nome', 'senha'.

09:23.630 --> 09:26.830
E a resposta que obtivemos foi "erro ao logar".

09:27.110 --> 09:31.580
E isso é porque se voltarmos para a nossa página de registro.

09:31.610 --> 09:34.390
Bem, nós não mudamos apenas isso para '/ register' nós fizemos?

09:34.400 --> 09:35.680
Isso é bobo de nós.

09:36.580 --> 09:39.190
Nós mudamos isso para 'registrar', salvar

09:42.670 --> 09:42.910
Eu vou pegar

09:42.920 --> 09:45.420
cansado de escrever as informações de Wes aqui.

09:50.000 --> 09:54.700
E registre-se. Tudo bem.

09:54.720 --> 10:00.990
Sem erros. Vamos ver qual foi a resposta do 'registro'.

10:01.180 --> 10:11.340
Nós recebemos a resposta; Wes é usuário '125'; 'senha' é '123'; 'entradas' é 0 'e' unidas '- neste dia.

10:11.470 --> 10:13.590
Novamente, não queremos a senha.

10:13.630 --> 10:22.250
Nós não deveríamos estar retornando a senha, mas é uma correção fácil e simplesmente a removemos de

10:22.250 --> 10:24.490
o 'server.js'.

10:24.500 --> 10:25.420
Quão legal é isso?

10:25.430 --> 10:27.700
Nós temos nosso próprio registro.

10:28.130 --> 10:35.260
E se realmente voltarmos a apenas uma rota de raiz, ou se formos ao localhost, vamos para este lado

10:35.270 --> 10:35.730
Aqui.

10:36.940 --> 10:44.470
E apenas vá para a rota da raiz; nós atualizamos novamente, então Wes não está lá, mas se você se registrar novamente ...

10:48.050 --> 10:53.020
Novamente, é exatamente por isso que não podemos esperar para ter um banco de dados.

10:53.060 --> 10:55.630
Vamos tentar de novo e ver isso.

10:55.670 --> 10:59.230
Nós temos Wes como nosso usuário.

10:59.290 --> 11:00.520
Muito legal.

11:00.520 --> 11:06.760
E agora há um pouco de repetição certo? Nós basicamente buscamos para nos conectar com o nosso servidor

11:07.060 --> 11:12.910
e ambas as partes querem ter certeza de que eles enviam os dados corretos e o servidor responde com o direito

11:12.910 --> 11:13.480
dados.

11:13.480 --> 11:18.190
Definitivamente há muita limpeza que podemos fazer - muitos erros que podem acontecer - por exemplo, se eu

11:18.190 --> 11:23.210
insira um e-mail e senha ou nome de usuário inválidos.

11:23.430 --> 11:26.280
Mas eu acho que você está começando a entender.

11:26.290 --> 11:26.650
Tudo bem.

11:26.740 --> 11:28.040
Eu vejo você no próximo. Tchau tchau
