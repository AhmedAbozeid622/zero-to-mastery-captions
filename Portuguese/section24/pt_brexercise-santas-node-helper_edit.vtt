WEBVTT

00:02.900 --> 00:03.840
Bem vindo de volta.

00:03.980 --> 00:11.140
Eu tenho um pequeno e divertido desafio para você, e esse desafio vem de um dos meus sites

00:11.270 --> 00:19.880
de programação favoritos na Web e é chamado de 'Advento do Código' e o advento do código acontece todo mês de dezembro.

00:19.880 --> 00:21.980
Programadores de todo o mundo,

00:22.110 --> 00:24.700
não importa em que idioma eles escrevem.

00:24.770 --> 00:31.100
Você pode resolver esses problemas com qualquer idioma que eles desejarem e deve resolver por

00:31.100 --> 00:32.580
24 dias até

00:32.630 --> 00:35.730
o Natal esses problemas difíceis usando código.

00:35.930 --> 00:40.910
Então, vamos fazer algo divertido aqui.

00:41.360 --> 00:43.720
Temos o advento do código a partir de 2015.

00:43.740 --> 00:49.100
Eu sei que é um pouco velho, mas eu realmente gosto muito dessa pergunta.

00:49.100 --> 00:52.160
Eu acho que vai ser realmente uma boa prática.

00:53.240 --> 00:59.570
Então, vou deixar para você esse desafio, e há duas partes desse desafio.

00:59.570 --> 01:09.250
Então pense nisso como você precisa de uma resposta para a primeira e a segunda parte.

01:09.440 --> 01:15.770
Agora, compartilharei o link para esse desafio para que você possa realmente ler todas as regras e

01:15.890 --> 01:19.170
até obter as informações do seu quebra-cabeça aqui.

01:20.350 --> 01:24.520
E não se preocupe, isso parece confuso, mas depois de ler a pergunta, você entenderá por

01:25.390 --> 01:28.810
que essa é a parte mais emocionante é a do próximo vídeo.

01:28.960 --> 01:32.430
- mas lembre-se de não assistir antes de terminar! - no próximo vídeo,

01:32.680 --> 01:40.180
vou mostrar o que eu faria se resolvesse esse problema de lógica usando programação e, dessa forma, você possa comparar

01:40.180 --> 01:45.870
o que faz com o que faço - não significa que meu caminho esteja correto.

01:45.880 --> 01:48.990
Existem muitas maneiras diferentes de

01:49.120 --> 01:56.200
resolver problemas durante a programação, mas como um pequeno e divertido desafio,

01:56.200 --> 02:04.700
você descobrirá a solução para esse problema usando nosso módulo 'fs' usando Node e JavaScript.

02:04.940 --> 02:11.990
E então eu vou mostrar o que eu faço e vamos ver cujo código é mais rápido

02:11.990 --> 02:14.160
e a maneira como

02:15.140 --> 02:22.030
vamos comparar nosso código, vamos fazer algo assim dentro de nossa função Essa função pode ser.

02:22.100 --> 02:24.900
Você provavelmente vai ler o arquivo

02:25.130 --> 02:28.570
que eles fornecem para você, que é esse aqui.

02:30.730 --> 02:39.650
Logo após você fazer isso, vamos dizer 'console. time () 'e podemos dar o rótulo que

02:39.850 --> 02:46.890
quisermos, então diga o desafio divertido agora para o tempo de log do console.

02:47.100 --> 02:58.340
Quando chegamos a esta linha, inicia um cronômetro e só termina quando vir

02:58.550 --> 03:02.570
o console. log 'ou' timeEnd '.

03:02.810 --> 03:09.640
e temos que fornecer a mesma entrada ou o rótulo da primeira vez que o chamamos.

03:09.730 --> 03:15.650
Então, 'funchallenge' ... Agora, dessa maneira, bem, isso é o

03:15.970 --> 03:22.930
que acontece se o rodarmos e recebermos um erro, porque estamos excluindo este arquivo e não

03:22.930 --> 03:24.540
queremos fazer isso.

03:24.670 --> 03:26.990
Vamos esclarecer e tentar mais uma vez.

03:30.660 --> 03:35.310
funchallenge recebeu 0. 319 segundos.

03:35.670 --> 03:44.220
Bem, isso foi realmente muito rápido, porque tudo o que estamos fazendo é realmente o log do console, mas usando

03:44.220 --> 03:49.830
isso, vamos ver a rapidez com que sua função resolve o problema.

03:50.720 --> 03:55.510
E então mostrarei a rapidez com que minha solução resolve o problema.

03:56.060 --> 04:00.960
E teremos um pouco de competição. Então eu vou te ver nessa.

04:00.980 --> 04:01.220
Tchau tchau
