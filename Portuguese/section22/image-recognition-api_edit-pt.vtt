WEBVTT

00:01.480 --> 00:05.110
Bem vindo de volta. Temos nosso belo site criado.

00:05.110 --> 00:14.440
Chegou a hora de criar alguma funcionalidade, onde inserimos uma url, pressione 'Detectar' e uma imagem aparece com

00:14.920 --> 00:16.440
uma caixa de detecção de rosto,

00:16.540 --> 00:21.980
se houver um rosto na foto. Então, como vamos fazer isso?

00:24.100 --> 00:28.900
Bem, a primeira coisa que queremos fazer, queremos ter certeza de que há alguma funcionalidade aqui onde

00:29.260 --> 00:36.730
podemos detectar, o que o usuário entra. E é algo que fizemos antes com reação, quando tivemos

00:36.730 --> 00:37.710
nosso aplicativo de amigos robo.

00:37.720 --> 00:41.440
Nós tivemos nossa entrada que filtrou através dos robôs.

00:41.520 --> 00:50.930
Então, novamente, usando a técnica similar, usando o 'ImageLinkForm', podemos criar essa funcionalidade.

00:50.950 --> 00:56.620
Então a primeira coisa que você pode perceber é que sim! nós definitivamente precisamos de 'estado', precisamos criar um 'estado'

00:56.650 --> 01:05.020
para que, nosso aplicativo saiba, qual é o valor que o usuário entra, lembra, e atualiza a qualquer momento

01:05.020 --> 01:06.340
fica alterado.

01:06.340 --> 01:10.360
Então, como você se lembra, para fazer isso, vamos definir um 'construtor'

01:13.770 --> 01:19.800
e dentro desse 'construtor', temos que chamar 'super' para poder usar isso.

01:19.850 --> 01:21.500
E aqui, nós podemos fazer 'isso'

01:21.500 --> 01:25.310
'estado' é igual e vamos chamá-lo,

01:25.310 --> 01:28.890
'input', é o que o usuário irá inserir.

01:30.940 --> 01:43.630
E esta entrada terá um 'onChange' ou 'onInputChange', que usaremos com funções de seta,

01:44.430 --> 01:49.230
para que não tenhamos esse erro que vimos anteriormente.

01:49.230 --> 01:56.710
E como você sabe que a qualquer momento há algum tipo de ouvinte de evento em uma página da web, nós recebemos um evento e

01:56.710 --> 01:57.760
nós queremos fazer alguma coisa aqui.

01:57.760 --> 02:07.130
Então, faremos um 'log de ponto do console', 'evento' para nos certificarmos de que podemos detectá-lo e em 'inputChange' no

02:07.130 --> 02:11.020
'imageLinkForm' podemos passá-lo como um adereço.

02:15.310 --> 02:17.860
E nós vamos pegar o erro 'onInputChange' não está definido.

02:17.860 --> 02:25.930
Lembre-se disso porque é parte desta classe para acessá-lo, você precisa salvar 'this dot onInputChange'

02:25.960 --> 02:32.150
porque 'onInputChange' é uma propriedade do 'App'.

02:32.150 --> 02:34.510
Vamos salvar isso, agora mesmo

02:34.520 --> 02:37.910
bem, não está fazendo nada porque precisamos acionar isso.

02:38.090 --> 02:42.440
Voltamos ao 'imageLinkForm' que é o css 'imageLinkForm.js'.

02:42.470 --> 02:47.990
Podemos destruir o 'onInputChange' que estamos recebendo.

02:48.020 --> 02:58.080
Então, ao invés de fazer 'props' pontuar onInputChange 'aqui embaixo, nós apenas destruímos isso dos' props 'e nós

02:58.080 --> 03:01.500
posso dizer sobre 'entrada' aqui 'onChange',

03:05.090 --> 03:13.220
então, 'onChange' é tecnicamente um evento sintético de reatividade que imita o que o html faz sempre que entra

03:13.220 --> 03:14.480
alterar.

03:14.480 --> 03:22.750
E aqui o 'onChange', bem, o que ele vai fazer, se fizermos 'onInputChange' aqui,

03:22.800 --> 03:23.910
Vamos ver o que acontece?

03:26.860 --> 03:37.640
Vou abrir o console, clique ou pressione alguma coisa, oop! vá para a entrada e pressione alguma coisa.

03:37.660 --> 03:37.940
Tudo bem.

03:37.950 --> 03:42.790
E parece que estou recebendo algo, um evento proxy.

03:42.810 --> 03:43.050
Tudo bem.

03:43.050 --> 03:45.170
E se eu voltar para o meu

03:45.190 --> 03:51.660
app dot js? e se você se lembrar da maneira como obtemos o nosso valor a partir da entrada é ponto 'alvo' ponto 'valor'.

03:51.840 --> 03:59.710
Se eu guardar isso, e voltar, lá você vai, nós recebemos nossa entrada.

03:59.790 --> 04:03.390
Bom e fácil, assim como fizemos antes com o nosso aplicativo inicial de reagir.

04:05.560 --> 04:12.730
Certo, então estamos recebendo o 'onInputChange' e também queremos isso quando clicamos em 'Detectar' que enquanto nós

04:12.970 --> 04:16.100
detectar uma imagem, como vamos fazer isso?

04:17.030 --> 04:23.660
Por enquanto, só porque eu gosto de manter as coisas simples, construindo as coisas um passo de cada vez, podemos apenas "consolar

04:23.660 --> 04:28.320
log 'e vamos dizer' onSubmit 'e não terá nenhum parâmetro por enquanto.

04:29.420 --> 04:40.880
Nós vamos apenas dizer 'log de ponto do console', clique e agora 'onSubmit', podemos passar para o nosso 'imageLinkForm' novamente.

04:46.250 --> 04:51.000
Vamos intitulá-lo 'onButtonSubmit' aqui, apenas para deixar claro.

04:52.680 --> 04:57.520
E mais uma vez, vamos passar com 'this' dot 'onButtonSubmit'.

04:59.660 --> 05:02.810
Nós salvamos isso, vou colocar isso em uma nova linha novamente para que você possa ver,

05:08.200 --> 05:13.480
agora o 'imageLinkForm' receberá 'onButton

05:13.780 --> 05:32.150
Enviar 'e podemos dizer, aqui que, além do' className ', eles serão um evento' onClick 'que escuta o' on

05:33.700 --> 05:34.530
ButtonSubmit '.

05:35.240 --> 05:39.750
Vamos salvar, voltar ao nosso exemplo

05:39.750 --> 05:42.730
clique, olhe para isso, está funcionando.

05:44.280 --> 05:44.620
Tudo bem.

05:44.650 --> 05:48.850
Portanto, há um pouco de funcionalidade, mas a parte difícil está apenas começando.

05:48.880 --> 05:54.850
Como podemos mostrar uma imagem aqui e detectá-la? Bem,

05:54.870 --> 06:03.200
Felizmente para nós, podemos usar uma API, e esta API eu acho que é uma das mais legais lá fora.

06:03.200 --> 06:11.320
É chamado de 'clarifai' e como você pode ver no slogan 'entenda sua imagem e dados de vídeo'. Você pode

06:11.320 --> 06:15.400
use esta ferramenta na verdade de graça, até um certo ponto.

06:15.490 --> 06:24.520
Se você olhar para os preços aqui para os desenvolvedores, você tem um total de 5000 operações por mês.

06:24.720 --> 06:28.620
Então você pode enviar 5000 fotos e vai adivinhar para você.

06:28.710 --> 06:31.160
Depois que seu aplicativo se tornar popular, você poderá começar a pagar por ele.

06:31.170 --> 06:39.600
Mas vamos usar uma API gratuita. E eu quero que você se inscreva para isso, se você quiser usá-lo porque

06:39.900 --> 06:43.840
a chave de API que eu usarei neste exemplo, eu vou deletar depois para que,

06:43.870 --> 06:47.190
bem, para que outras pessoas não ah! não use

06:47.190 --> 06:50.570
e então eu alcanço o meu limite e não vou mais poder usá-lo.

06:51.250 --> 06:52.830
Mas é muito simples se inscrever.

06:52.900 --> 06:54.190
Você acabou de entrar.

06:54.190 --> 07:00.400
E depois de criar sua conta aqui, você será levado ao seu perfil.

07:02.630 --> 07:05.860
E eles podem já ter meu primeiro pedido para você.

07:05.990 --> 07:10.880
Se não houver nada aqui, basta clicar em 'CREATE NEW APPLICATION' e aqui,

07:13.620 --> 07:17.890
e seu aplicativo, você pode intitulá-lo como quiser, mas não precisa tocar em nada.

07:18.150 --> 07:28.890
Se você for para API Keys, essa chave é sua maneira de acessar a API 'clarifai'.

07:30.500 --> 07:40.680
Então, se aqui eu digitar uma URL, eu pressiono detect, eu posso enviar esse URL com a minha chave de API que eles fornecem para você

07:42.280 --> 07:51.280
ao seu serviço e usando a chave da API eles dirão, oh! esse é Andre, ele está sob o plano livre.

07:51.490 --> 07:54.120
Ele ainda não atingiu seu limite de 5000 para o mês.

07:54.340 --> 07:54.680
Sim.

07:54.700 --> 07:55.710
Vamos responder

07:57.260 --> 08:04.330
E caso você esteja se perguntando o que eles podem realmente fazer, se você for para os modelos deles, você verá aqui que

08:04.780 --> 08:09.370
eles usam aprendizado de máquina para treinar algo chamado 'Modelos'.

08:09.610 --> 08:19.090
Isso é que eles treinam um computador, dando muitas fotos, toneladas de fotos, para memorizar a celebridade

08:19.090 --> 08:30.240
enfrenta, detecta 'Vestuário' como aqui, e sabe que estes são óculos de sol com 100% de probabilidade porque

08:30.270 --> 08:37.470
Foi treinado provavelmente milhões de fotos de óculos de sol para saber como são os óculos de sol. Então você

08:37.470 --> 08:39.960
pode brincar com um monte de coisas que eles têm aqui.

08:39.960 --> 08:42.780
É realmente muito bom o que eles têm.

08:42.780 --> 08:48.540
Nós vamos estar usando sua API de detecção de rosto. E sua API de detecção de rosto,

08:48.540 --> 08:49.560
nós simplesmente

08:52.280 --> 09:04.350
se formos ao js (javascript), simplesmente rodamos esta função, para os servidores 'clarifai' usando nossa própria API e isso dá

09:04.350 --> 09:07.490
nos uma resposta ou um erro.

09:07.550 --> 09:16.610
Agora isso é sempre muito mais fácil, para demonstrar do que realmente falar, então vamos implementá-lo.

09:16.640 --> 09:19.600
Estou usando o reconhecimento facial deles.

09:19.740 --> 09:25.770
Então, vou copiar e colar isso. Volte para o meu aplicativo e no app dot

09:25.910 --> 09:30.320
js (app.js), eu vou dizer que 'onButtonSubmit',

09:30.420 --> 09:41.170
Eu quero correr, a função que 'clarifai' me disse para usar. Mas como você pode ver aqui, tem 'app

09:41.460 --> 09:45.100
dot models dot predict '.

09:45.480 --> 09:52.330
Bem, como o meu programa vai saber o que 'app dot models dot predizer' é?

09:52.520 --> 09:59.790
Bem, se você for ao guia da API, eles mostrarão exatamente como começar e como usar a API deles.

09:59.960 --> 10:05.720
Mas você pode ver aqui e eles estão 'Começando', 'API clients' se formos ao javascript, eles dirão

10:05.920 --> 10:08.140
instale o cliente do npm.

10:08.180 --> 10:16.640
Então vamos seguir e instalar o 'clarifai' e este é um pacote que eles construíram para que eles possam

10:17.000 --> 10:25.340
trabalhar com javascript, enquanto isso está carregando, podemos ver que, podemos importar 'esclarecer'.

10:25.460 --> 10:30.010
Podemos ver aqui que eles estão usando o JS comum, 'exigem' o modo de importar,

10:30.020 --> 10:36.160
mas como estamos usando o 'create react app', podemos usar 'import' aqui, e então simplesmente inicializamos sua API

10:36.160 --> 10:44.630
chave com isso. Então agora poderemos ter o objeto app. Como você pode ver aqui nós estamos usando 'app

10:44.630 --> 10:45.220
.models '.

10:45.230 --> 10:53.980
Mas se eu executar isso, não faço ideia do que é 'app'. Só para demonstrar para você, se eu voltar para o console

10:53.980 --> 10:54.320
Aqui,

10:57.940 --> 11:05.050
'run npm start', eu recebo o 'app não está definido', tudo bem.

11:05.050 --> 11:15.350
Então, copie novamente, o que vemos aqui vai copiar isso, coloque-o em nossa configuração no topo do arquivo.

11:17.910 --> 11:20.650
Ele pede nossa chave de API.

11:20.730 --> 11:24.070
No meu caso, usarei o que eles me deram.

11:27.670 --> 11:29.670
Deixe-me abrir esse link em um novo arquivo.

11:30.620 --> 11:34.220
Eu vou para 'meu primeiro aplicativo', 'chaves de API'.

11:34.560 --> 11:38.920
Vou copiar e colar minha chave de API. Cole aqui.

11:40.640 --> 11:46.730
Como falamos na seção da API, as APIs mais úteis exigem uma configuração como essa, onde você tem

11:46.730 --> 11:55.190
para adicionar uma chave de API. Então, embora esses documentos sejam especificamente para 'clarifai', a maioria das APIs que você usa são

11:55.190 --> 11:58.560
vai ser muito muito semelhante a isso.

11:58.570 --> 12:01.060
Tudo bem, então nós temos isso, nós também precisamos importar,

12:01.090 --> 12:07.140
se você lembra, então voltando aqui, eu posso apenas

12:10.090 --> 12:18.460
import 'clarifai' e porque, podemos usar o novo modo de importação javascript.

12:18.750 --> 12:22.430
Nós só vamos fazer isso porque parece muito melhor.

12:23.280 --> 12:25.140
Tudo bem, vamos salvar e ver o que acontece.

12:26.100 --> 12:26.560
Tudo bem.

12:26.760 --> 12:29.420
Parece que está funcionando.

12:29.440 --> 12:35.250
Nós vemos que estamos apenas obtendo um, isso é apenas uma amostra de imagem que estamos obtendo.

12:36.940 --> 12:45.550
Então, estamos usando nossa chave de API e, em seguida, enviando uma imagem de URL e, em seguida, tendo este ponto, em seguida, ocorrer vamos

12:45.550 --> 12:50.220
ponto do console registra a resposta e vê o que obtemos.

12:53.580 --> 12:59.590
Vou clicar em enviar (Detectar) e recebo status

12:59.590 --> 12:59.950
tudo bem.

12:59.950 --> 13:03.420
Parece que está respondendo com algo, isso é bom.

13:04.810 --> 13:09.960
Muito bom.

13:09.960 --> 13:14.520
Tudo bem, por enquanto, parece que isso está funcionando.

13:14.520 --> 13:20.370
Temos uma imagem, que estamos recebendo, quando coloco isso em uma nova linha para que você possa ver.

13:28.540 --> 13:28.920
Certo.

13:28.960 --> 13:35.950
Então, por enquanto, vamos ter, para que possamos exibir qualquer imagem que eles nos deram em nosso exemplo. Vamos apenas copiar

13:35.950 --> 13:42.420
e veja o que esta imagem é de.

13:42.440 --> 13:47.030
Então, queremos que isso seja exibido na parte inferior.

13:47.100 --> 13:48.700
Então, como podemos fazer isso?

13:49.470 --> 14:03.640
Bem, podemos começar a criar nosso último componente 'FaceRecognition'. Então podemos mover os colchetes ou os comentários.

14:03.800 --> 14:13.790
E agora, aqui, vamos importar este novo componente, que ainda não temos e que se chamaria "The Face".

14:13.790 --> 14:16.730
Componente de reconhecimento.

14:21.900 --> 14:27.540
E novamente criaremos uma nova pasta, que dirá 'FaceRecognition'.

14:28.560 --> 14:33.650
E dentro desta nova pasta, (lá) será um novo arquivo 'FaceRecognition dot

14:33.860 --> 14:40.380
js ', usando nossa ótima ferramenta,

14:40.380 --> 14:45.240
copiar e colar, copiar e colar o componente 'Navegação'

14:48.160 --> 14:53.410
e agora mude o nome disso para 'FaceRecognition'

14:54.390 --> 14:56.870
componente e o que isso deve exibir?

14:57.090 --> 15:00.930
Bem, por enquanto, queremos apenas exibir uma imagem estática para garantir que ela funcione.

15:02.230 --> 15:03.580
Então eu vou criar

15:07.730 --> 15:14.620
um 'div' com o 'className' do bem, 'center' que nós já definimos antes,

15:14.660 --> 15:23.760
se você se lembra em nosso app.css. E terá uma imagem, com uma fonte (src) de,

15:28.930 --> 15:32.010
feche a tag e podemos salvar isso.

15:32.380 --> 15:33.380
Vamos ver se isso funciona.

15:35.500 --> 15:36.280
Tudo bem.

15:36.280 --> 15:37.620
Isso parece muito bom, na verdade.

15:37.630 --> 15:40.040
Nós temos a nossa imagem bem no fundo.

15:41.430 --> 15:44.190
Recebo um erro dizendo que precisamos de uma tag 'alt'.

15:44.250 --> 15:45.920
Então vamos apenas dizer 'alt'

15:49.290 --> 15:50.770
e vamos deixar em branco por enquanto.

15:50.880 --> 15:53.100
Só assim nós temos algo.

15:53.220 --> 15:53.600
Tudo bem.

15:53.640 --> 16:03.240
Então, temos a aparência básica da imagem e isso está funcionando, mas isso não está realmente conectado à API.

16:03.250 --> 16:08.820
Quando clico em detectar, bem, é apenas codificado.

16:08.970 --> 16:16.050
Então, primeiro vamos olhar para a API e ver como podemos realmente enviar URLs de imagem, se você voltar para a sua

16:16.050 --> 16:17.350
documentos.

16:17.650 --> 16:20.870
Mais uma vez eles são muito muito bons com isso.

16:20.940 --> 16:22.020
Se você rolar para baixo,

16:25.960 --> 16:29.660
sob o 'Prever', você vê que eles têm imagens e vídeos.

16:29.830 --> 16:37.720
Assim, podemos usar as "Imagens", "via URL" e vemos que temos o javascript e se parece com o "Prognóstico"

16:38.500 --> 16:43.690
função leva o 'clarifai' um modelo que eles têm.

16:43.690 --> 16:50.830
Então, neste caso, eles estão enviando o modelo geral e o URL. Certo, é muito semelhante ao que

16:50.830 --> 16:51.740
nós vimos antes.

16:52.640 --> 16:59.070
Então, pelo que parece, porque já definimos nossa chave de API, não precisamos mais dela.

16:59.450 --> 17:05.020
Tudo o que precisamos é dizer qual modelo queremos usar.

17:05.040 --> 17:11.040
Mas se você se lembra, eles têm uma tonelada de modelos. E, na verdade, quero mostrar uma maneira inteligente de ver

17:11.040 --> 17:11.310
esta.

17:11.310 --> 17:17.910
Eles têm essa informação nos documentos, mas outra boa maneira de fazê-lo é se você lembra que havia

17:17.910 --> 17:30.740
um pacote npm 'clarifai' e este pacote npm tem um link github e todos os pacotes npm normalmente fazem. Aqui,

17:31.020 --> 17:40.620
Se você for visitar a base de código deles, se for para a fonte, como você deve se lembrar, e index.js,

17:40.620 --> 17:50.360
é o que eles estão nos dando acesso, e você vê aqui que eles têm 'export global dot clarifai' e aqui

17:50.380 --> 17:55.360
todos os seus modelos que podemos usar. Então eles estão nos dando o 'GENERAL_MODEL'.

17:55.690 --> 17:58.910
Mas você pode ver, se conseguirmos o 'FOOD_MODEL', o 'COLOR_MODEL'.

17:59.050 --> 18:04.570
Então vamos usar o 'COLOR_MODEL' por enquanto, e aqui, diremos

18:08.850 --> 18:13.050
'COLOR_MODEL'.

18:13.240 --> 18:21.270
E para ter acesso a isso, temos que fazer 'clarifai' dot 'COLOR_MODEL'.

18:21.580 --> 18:30.490
Então, vamos salvar isso, e nós vamos testar isso abrindo o console clicando em detectar,

18:30.730 --> 18:44.570
Eu recebo uma resposta e dentro da sua resposta, se eu vou para 'saídas', 'zero (0)', 'dados', eu obtenho 'cores' e estas

18:44.570 --> 18:51.090
são todas as predições das cores hexagonais e você vê aquela com a maior probabilidade, vamos ver o que

18:51.090 --> 18:52.090
cor que é.

18:55.660 --> 19:02.480
É praticamente preto e se você olhar para esta imagem, é praticamente preto.

19:02.480 --> 19:05.680
Tudo bem, então isso está funcionando.

19:05.740 --> 19:11.150
E a razão pela qual eu consegui encontrar isso é novamente na documentação da API deles, que diz se é um

19:11.200 --> 19:15.190
uma saída e uma saída retorna uma matriz com dados dentro dela.

19:15.220 --> 19:23.130
E porque selecionamos o modelo de cores, obtemos cores. Tudo bem, então por enquanto usando o modelo de cores,

19:23.280 --> 19:26.760
vamos construir.

19:27.130 --> 19:39.660
Queremos ter um estado 'imageUrl' e ele ficará vazio por enquanto e este 'imageUrl' deve

19:39.810 --> 19:51.500
ser exibido quando clicamos em enviar, então podemos dizer que 'onButtonSubmit', queremos 'este' ponto 'setState' para

19:51.530 --> 19:58.920
igual, para ter o URL da imagem atualizado com qualquer que seja a 'entrada'.

19:58.920 --> 20:06.100
Assim, podemos passar o 'imageUrl' para o 'FaceRecognition'.

20:06.120 --> 20:15.960
Então, se eu fizer 'imageUrl' igual a 'este' ponto 'estado' dot 'imageUrl', eu posso agora usar 'imageUrl' em

20:15.960 --> 20:25.670
meu componente 'FaceRecognition' como a fonte (src).

20:25.670 --> 20:32.180
Agora, obviamente, precisamos receber isso, então vou destruí-lo e usá-lo como parâmetros.

20:32.180 --> 20:33.800
E eu recebo 'entrada não está definida',

20:33.800 --> 20:47.850
Isso é porque aqui, eu usei input e bem, ele precisa ser 'this' dot 'state' dot 'input'. Volte vamos ah !, vamos

20:47.870 --> 20:49.500
Encontre um novo rosto na verdade. Vamos fazer,

20:49.520 --> 20:50.150
vamos fazer uma cor.

20:50.160 --> 20:58.110
Vamos fazer uma paisagem, vamos fazer um com uma cor definidora.

20:58.110 --> 21:08.070
Essa é boa, vamos ver imagem, copiar isso, se fizermos isso e não conseguirmos nada porque, bem, se

21:08.070 --> 21:13.080
você se lembra de 'onInputChange', na verdade nunca atualizamos o componente 'input'.

21:13.080 --> 21:15.510
Nós apenas consolamos tudo registrado.

21:15.530 --> 21:19.950
Então, agora que sabemos que podemos apenas dizer, 'este' ponto 'set

21:19.960 --> 21:20.510
Estado'

21:23.440 --> 21:23.950
'entrada'

21:26.740 --> 21:30.060
é o 'evento' 'alvo' ponto 'valor'.

21:30.200 --> 21:31.460
Vamos ver se isso funciona.

21:32.340 --> 21:36.370
E eu volto, experimento e,

21:36.430 --> 21:39.420
Oh garoto !, essa é uma grande foto que vamos precisar para consertar isso,

21:39.430 --> 21:45.620
mas nós temos nossa imagem exibida. Agora usando esta informação,

21:45.620 --> 21:51.390
isso significa que podemos fornecer nosso URL como entrada aqui.

21:51.620 --> 21:54.960
Podemos apenas colocar 'este' ponto 'estado' ponto 'entrada'

22:03.500 --> 22:08.530
e abra o console.

22:08.550 --> 22:08.760
Tudo bem,

22:08.760 --> 22:10.730
Parece que estamos recebendo uma resposta.

22:10.770 --> 22:13.540
Estamos recebendo 'dados' 'cores'.

22:13.790 --> 22:17.930
Temos isso com 40% de chance de ser essa a cor.

22:17.930 --> 22:19.400
Vamos ver que cor é essa.

22:22.040 --> 22:23.150
Tudo bem, isso é verde.

22:23.210 --> 22:24.650
Isso é bem legal.

22:24.650 --> 22:26.870
Então está claramente funcionando.

22:26.870 --> 22:28.970
Estamos chegando, vou fechar alguns destes.

22:36.160 --> 22:40.210
Tudo bem, as coisas estão claramente funcionando agora, o que é ótimo.

22:40.210 --> 22:45.950
Agora, o único truque que eu quero mostrar para você, devido à maneira como as reações reagem,

22:46.240 --> 22:55.320
se eu tivesse feito aqui, 'imageUrl', eu teria um erro,

22:55.540 --> 22:59.980
Então, se eu copiar e colar, vamos fazer uma imagem 'Apple'

23:12.590 --> 23:32.790
Eu recebo um 'Bad request' e isso é por causa da maneira como o 'set state' funciona.

23:32.870 --> 23:33.170
Tudo bem.

23:33.200 --> 23:44.700
Então, enquanto nós realmente queremos usar é o 'FACE_DETECT_MODEL' então usando o que temos agora,

23:46.050 --> 23:52.960
Vamos ver se conseguimos uma resposta, e se formos à nossa API, podemos ver os modelos,

23:58.830 --> 24:06.100
e, na verdade, se formos para o topo, você vai para 'Models', e nós vamos para 'Face Detection',

24:09.320 --> 24:15.280
vemos que teremos uma resposta parecida com essa.

24:15.310 --> 24:22.600
O que nos interessa é a partir dos resultados, para obter dados e, em seguida, regiões que nos dão as regiões ou

24:22.600 --> 24:28.200
a caixa delimitadora do rosto. Vamos ver se conseguimos fazer isso funcionar.

24:28.670 --> 24:33.470
Eu coloquei o 'FACE_DETECTION_MODEL' e não sabemos o que a resposta vai ser ainda assim eu sou apenas

24:33.470 --> 24:34.820
vai deixar assim.

24:35.800 --> 24:39.390
Eu vou encontrar uma imagem de rosto

24:44.050 --> 24:47.060
vamos fazer essa foto

24:47.060 --> 24:47.980
copiar e colar, detectar,

24:53.400 --> 24:55.450
Oh garoto! precisamos consertar esse rosto.

24:55.550 --> 25:00.510
Mas vemos que estamos obtendo resultados.

25:02.700 --> 25:06.240
Na primeira matriz, obtemos "dados", "regiões"

25:10.500 --> 25:12.340
e nós temos um 'bounding_box'.

25:12.340 --> 25:14.290
Então está um pouco aninhado aqui.

25:14.320 --> 25:21.190
Então, usando essas informações, vamos limpá-las um pouco e depois obter o que precisamos daqui.

25:25.030 --> 25:29.670
No nosso caso, parece que precisamos obter a "resposta"

25:29.930 --> 25:33.150
ponto 'saídas'.

25:36.110 --> 25:46.190
E então o 'zero (0)' o primeiro array, então era 'data', 'regions', 'zero (0)', 'region info', então 'bounding box'.

25:46.400 --> 25:47.700
Tudo bem, vamos fazer isso.

25:47.720 --> 25:56.550
Então, 'regiões de dados' acessam o primeiro array,

25:57.530 --> 26:01.020
'region_info' e acho que o último foi 'caixa delimitadora'.

26:01.100 --> 26:01.860
Vamos tentar isso.

26:05.370 --> 26:05.630
Tudo bem.

26:05.640 --> 26:07.050
Vamos dar uma chance.

26:07.930 --> 26:09.260
E veja se isso funciona.

26:11.190 --> 26:11.760
Detectar

26:14.710 --> 26:20.230
Olhe para isso. Nós temos nossa 'linha de baixo', 'coluna da esquerda', 'coluna da direita', 'linha de cima'.

26:20.500 --> 26:22.760
Nós ainda não sabemos realmente o que esses números significam.

26:22.810 --> 26:27.370
Nós teremos que descobrir porque, como você pode ver, não adiciona nada ao rosto.

26:27.370 --> 26:29.030
Isso é algo que teremos que fazer.

26:29.830 --> 26:33.270
Mas está funcionando e nós temos nossa conexão API.

26:33.370 --> 26:36.050
Estamos realmente fazendo algo que estamos exibindo a imagem.

26:36.070 --> 26:41.860
Então, antes de entrarmos no próximo vídeo, vamos corrigir esse problema de imagem para garantir que tudo esteja bem.

26:42.340 --> 26:44.470
parece melhor que isso.

26:44.470 --> 26:50.310
Então, se formos ao FaceRecognition aqui, há algumas coisas que precisaremos consertar.

26:50.350 --> 26:52.740
Eu vou remover esse 'console'.

26:52.880 --> 27:02.650
Nós vamos fazer 'ma', que é uma classe 'tachion' e então nós também vamos envolver isso em um 'div' e há muitas maneiras

27:02.650 --> 27:03.220
para fazer isso.

27:03.220 --> 27:07.990
Como eu disse antes com estilo, eu vou te mostrar a principal maneira de fazer isso.

27:08.140 --> 27:17.640
Vou dizer 'top absoluto de margem dois' apenas para que haja um pouco de espaço entre a entrada e a imagem.

27:17.770 --> 27:25.330
E agora dentro da imagem, queremos ter certeza de que a 'largura' é sempre a mesma, não importa o tamanho

27:25.330 --> 27:27.770
a imagem.

27:27.960 --> 27:34.890
Nós vamos fazer '500 pixels', mas também não queremos que ele seja esmagado ou tenha proporções estranhas.

27:34.890 --> 27:42.490
Então o jeito de consertar isso é fazer 'auto'. Então hight será automaticamente ajustado com base na largura.

27:42.530 --> 27:44.060
Então, vamos salvar e ver o que acontece

27:44.070 --> 27:44.470
agora.

27:47.570 --> 27:48.140
Tudo bem.

27:48.140 --> 27:50.740
Isso é muito melhor.

27:50.760 --> 27:51.840
Então foi bem rápido.

27:51.840 --> 27:55.300
Essa foi a principal coisa que realmente resolveu.

27:56.630 --> 27:57.320
Tudo bem.

27:57.350 --> 27:57.850
Impressionante.

27:57.860 --> 28:03.830
Então, conseguimos um aplicativo funcional que retorna resultados reais.

28:04.040 --> 28:12.400
E agora podemos trabalhar em ter uma caixa exibida ao redor do rosto, se algo for detectado. Apenas fora de

28:12.400 --> 28:13.200
curiosidade.

28:13.210 --> 28:25.230
Se eu fizer paisagem novamente.

28:25.280 --> 28:25.760
Tudo bem.

28:25.760 --> 28:26.450
Tudo está funcionando bem.

28:26.460 --> 28:30.980
Hã! isso foi longo, mas as coisas estão começando a funcionar.

28:30.980 --> 28:32.370
Eu vou te ver no próximo vídeo.

28:32.830 --> 28:33.130
Tchau tchau