WEBVTT

00:00.570 --> 00:09.900
Bem-vindo de volta ao vídeo anterior, criamos uma tabela de login agora que temos essas duas tabelas juntas.

00:09.930 --> 00:12.900
Eu quero mostrar o poder real dos bancos de dados relacionais.

00:15.440 --> 00:22.200
Voltando ao nosso desenho, a parte mais importante dos bancos de dados relacionais é essa ideia de esquemas, de

00:22.200 --> 00:29.520
ter tabelas que estão apenas preocupadas com o armazenamento de informações específicas para eles, como usuários, tweets

00:29.580 --> 00:38.030
e seguindo e conectando-os através de uma chave primária e uma chave estrangeira. Eu vou te mostrar como

00:38.030 --> 00:39.250
fazer isso.

00:39.680 --> 00:41.170
Bem, nós já fizemos isso.

00:41.180 --> 00:46.940
Mas como podemos pegar informações daqui. Se voltarmos para a nossa mesa

00:47.080 --> 00:49.470
nos lembramos que corremos a nossa consulta,

00:54.920 --> 01:04.070
criamos a tabela Criar login aqui e criamos uma variável de nome que quando planejamos isso foi

01:04.070 --> 01:10.680
vai corresponder a qualquer que seja a tabela de usuários e podemos usar algo chamado JOINs.

01:10.720 --> 01:18.510
agora com nossas consultas. E esta é uma nova palavra em SQL e provavelmente uma das mais poderosas, porque nós

01:18.510 --> 01:24.890
não necessariamente quer ter uma mesa enorme com centenas de colunas, centenas de linhas.

01:24.900 --> 01:31.350
Bancos de dados não são projetados para apenas ter - como uma folha de Excel de linhas e colunas e ter todos

01:31.350 --> 01:34.740
essa informação em um lugar porque não é eficiente.

01:34.770 --> 01:36.110
Vai ser muito mais lento

01:36.160 --> 01:37.670
Vai ser muito, muito difícil de gerir.

01:37.680 --> 01:41.960
E quanto maior e maior a sua empresa cresce, será muito, muito difícil.

01:42.000 --> 01:48.150
Uma boa maneira de projetar um banco de dados é ter essas pequenas pequenas tabelas que estão apenas preocupadas, assim como

01:48.150 --> 01:53.500
separação de preocupações, preocupada com a informação mínima necessária.

01:53.550 --> 02:00.180
E se algo mais for necessário, podemos juntar as tabelas para pegar informações.

02:00.180 --> 02:01.270
Deixe-me mostrar o que quero dizer.

02:02.850 --> 02:09.830
Temos aqui nosso banco de dados de teste e vamos ver.

02:09.840 --> 02:12.230
Tudo bem, temos três arquivos aqui.

02:12.420 --> 02:16.140
Temos o login e os usuários que criamos.

02:16.140 --> 02:20.130
Mas qual é a sequência de ID de login?

02:20.160 --> 02:26.480
Lembre-se de como criamos uma chave primária. A forma como os bancos de dados relacionais funcionam é quando você cria um

02:26.480 --> 02:35.320
key ele cria outro arquivo que contém essa chave primária. E você pode ver que o tipo é sequência.

02:36.570 --> 02:44.280
Agora este é um arquivo que provavelmente não iremos acessar, mas internamente o Postgres vai ter certeza porque

02:44.280 --> 02:50.330
nós definimos essa chave primária, será muito, muito rápido pegar os dados da tabela de login quando

02:50.330 --> 02:50.890
solicite.

02:51.100 --> 02:58.890
Mas digamos que eu queira obter informações de login e usuários. Talvez eu queira obter informações de Sally

02:59.640 --> 03:08.320
mas preciso do aniversário dela, da pontuação, da idade e do segredo dela. Ao usar JOINs, podemos fazer isso.

03:09.110 --> 03:11.850
Eu posso dizer estrela SELECT,

03:11.990 --> 03:15.370
Então, tudo de usuários.

03:15.690 --> 03:20.900
E agora, se eu fizer o JOIN, posso dizer outro nome de tabela que quero juntar aos usuários.

03:20.900 --> 03:27.580
No nosso caso, o login e nós temos que dizer sobre o que vamos entrar ou não.

03:27.590 --> 03:33.370
Como é que vai saber o que combina com o Login?

03:33.470 --> 03:41.400
Porque se eu voltar aqui, como o banco de dados vai saber que eu quero combinar a primeira linha com

03:41.400 --> 03:41.760
Andrei,

03:41.760 --> 03:48.690
a segunda linha com Sally, uma terceira linha com John. A palavra chave ON nos permite ter certeza de que combinamos

03:48.690 --> 03:49.280
Em algo.

03:49.320 --> 03:56.360
No nosso caso, o nome é sua chave primária aqui e a chave estrangeira aqui.

03:56.470 --> 03:59.730
Então, vamos fazer isso com os usuários ON

03:59.920 --> 04:07.820
.name é igual a login.name

04:10.500 --> 04:11.290
ponto e vírgula.

04:11.340 --> 04:12.080
Vamos fazer isso.

04:13.230 --> 04:14.080
E olhe para isso.

04:14.280 --> 04:21.810
Temos nome, idade, aniversário, pontuação, mas também ID, segredo, nome por completo.

04:21.980 --> 04:29.750
Acabamos de nos unir a esses valores e todos eles correspondem porque fizemos login.name e users.name e

04:29.750 --> 04:30.810
com JOINs

04:31.010 --> 04:40.170
vem grande poder agora, podemos ter pequenas pequenas tabelas com base no que realmente precisamos e a qualquer hora algo

04:40.170 --> 04:46.710
específico é necessário nós apenas juntar tabelas e podemos fazer várias tabelas, vários JOINs para selecionar

04:46.710 --> 04:48.720
as informações de que precisamos.

04:48.720 --> 04:54.030
Tudo bem, eu acho que nós fizemos um bom trabalho entendendo SQL e o poder do relacionamento

04:54.030 --> 04:54.940
bases de dados.

04:56.890 --> 04:57.890
Eu vejo você no próximo.

04:57.940 --> 04:59.980
E bom trabalho chegar até aqui, tchau-tchau.
