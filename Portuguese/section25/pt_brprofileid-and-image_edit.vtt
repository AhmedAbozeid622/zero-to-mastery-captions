WEBVTT

00:00.920 --> 00:10.160
Bem vindo de volta. Vamos terminar de configurar as duas últimas rotas em nosso servidor. Primeiro, temos o '/ profile /: userId',

00:10.160 --> 00:12.420
que é uma solicitação GET.

00:12.440 --> 00:18.960
É isso que queremos que o usuário obtenha para sua página inicial.

00:19.190 --> 00:22.510
Vamos fazer isso. Vou adicionar uma outra rota.

00:22.670 --> 00:32.030
Desta vez, será apenas uma solicitação GET e aceitará '/ profile /' e um 'id' - lembre-se de que, se fizermos isso com

00:32.030 --> 00:39.170
esta sintaxe [: id], significa que podemos entrar em qualquer navegador do navegador e poderá pegar esse

00:39.650 --> 00:43.270
'id' através do 'req. direitos de propriedade dos params.

00:43.280 --> 00:45.580
Faremos novamente a mesma coisa.

00:45.590 --> 00:46.670
Solicite, responda e

00:49.910 --> 00:52.460
vamos adicionar um espaço aqui para manter as coisas limpas.

00:54.150 --> 01:06.360
E dentro dessa solicitação, a resposta que queremos pegar primeiro o parâmetro 'id', então vamos fazer 'const', 'id' será

01:06.840 --> 01:11.190
proveniente de 'req. params '.

01:11.450 --> 01:13.700
E o que devemos fazer aqui?

01:13.700 --> 01:21.380
Bem, para atrair nossos usuários, queremos percorrer nosso banco de dados de amostra e encontrar o 'id' correspondente.

01:21.710 --> 01:27.930
Se corresponder Queremos retornar o usuário.

01:27.940 --> 01:28.170
Tudo certo.

01:28.170 --> 01:29.470
Podemos evitá-lo por mais tempo.

01:29.470 --> 01:36.370
Temos que fazer um loop 'for' aqui. A maneira como fazemos isso é que podemos simplesmente fazer 'banco de dados. users '- embora eu goste de usar'

01:40.180 --> 01:44.800
map 'para este caso - estamos apenas percorrendo os usuários e realmente não precisamos criar uma nova

01:44.800 --> 01:49.600
matriz - é apenas um banco de dados e queremos manter essa constante, então vamos dizer 'forEach ()'

01:51.240 --> 02:01.210
e se você se lembrar 'forEach ()' percorrerá os usuários um de cada vez e diremos isso se 'user. id ', que é o que será

02:02.670 --> 02:11.390
obtido desse banco de dados, é igual ao' id 'que recebemos dos' params '; se

02:11.390 --> 02:23.610
esse for o caso, responderemos com JSON, esse usuário [req. json (usuário)] - enviaremos apenas o usuário do 'id' correspondente

02:26.440 --> 02:34.180
- caso contrário, responderemos com 'req. json ('não existe esse usuário') '.

02:38.140 --> 02:45.830
E podemos até dizer que é um status 404, que significa 'não encontrado'.

02:45.840 --> 02:46.040
Tudo certo.

02:46.050 --> 02:47.440
Vamos ver se isso funciona.

02:47.630 --> 02:57.700
Vou salvar voltar ao nosso exemplo. Bem, sabemos que temos '123' e '124' e, como o

02:57.740 --> 03:01.410
servidor foi reiniciado, não teremos Ann.

03:01.810 --> 03:04.000
Você quer pegar '/ profile / 123'.

03:04.410 --> 03:09.830
Se clicarmos em Enviar, recebo '200 OK'.

03:09.840 --> 03:10.500
- Tudo

03:10.500 --> 03:11.710
bem, nós temos John.

03:11.880 --> 03:20.060
Se eu fizer '124', não recebo "esse usuário" se voltarmos aqui - hmm, Sally deveria estar

03:22.780 --> 03:23.860
aqui.

03:23.860 --> 03:25.220
Como é que não a estamos pegando?

03:28.240 --> 03:30.880
E vemos aqui que obtemos um erro aqui: 'Não é possível definir cabeçalhos

03:30.970 --> 03:32.890
depois de serem enviados. 'Isso ocorre

03:32.890 --> 03:39.590
porque estamos repetindo isso e, em vez de retornar do loop - porque uma vez

03:39.590 --> 03:44.480
que encontramos o ID do usuário - não precisamos continuar repetindo.

03:44.520 --> 03:49.830
Então, aqui devemos enviar apenas um 'res de retorno. json () 'e se o

03:49.980 --> 03:57.180
usuário não for encontrado bem, você não necessariamente quer fazer isso no loop, não é?

03:57.390 --> 04:07.980
Queremos dizer que para cada um, se esse usuário for encontrado, retorne res. json () 'e diremos que uma variável' found ', que usaremos

04:09.270 --> 04:16.780
como' false 'também será atualizada com' true 'e terá que ser um' let 'porque estamos atribuindo-a

04:20.610 --> 04:26.610
novamente então 'encontrado' será igual a 'verdadeiro' se o encontrarmos, e eu sei

04:26.620 --> 04:29.610
que há maneiras melhores de fazê-lo.

04:29.620 --> 04:32.250
Mas, novamente, acho que isso ilustrará um ponto.

04:32.290 --> 04:38.030
Também poderíamos fazer um 'mapa' ou um 'filtro' para ver se realmente encontramos uma pessoa com um 'id'.

04:38.420 --> 04:42.670
Mas por enquanto vamos fazer 'se não for encontrado' [if (! found)] Então,

04:42.700 --> 04:48.000
o oposto de 'found' - nesse caso,

04:51.830 --> 05:00.090
apenas responderemos com 'res. status (400). json ('não encontrado') 'Vamos

05:00.260 --> 05:01.210
tentar.

05:07.130 --> 05:07.470
Tudo certo.

05:07.490 --> 05:19.150
Eu chamo Sally. Se eu for '123', entendo John - perfeito e apenas por

05:19.590 --> 05:25.080
diversão, vamos registrar Ann novamente. Vou clicar em enviar e o 'id' dela é '125'.

05:25.200 --> 05:30.970
Então, se eu voltar para '/ profile /' e fizer '125', recebo Ann.

05:31.060 --> 05:32.470
E quão legal é isso?

05:34.600 --> 05:34.990
Impressionante.

05:34.990 --> 05:42.610
Portanto, temos esse ponto de extremidade funcionando e temos um último, que é a imagem, e

05:42.610 --> 05:47.020
este que queremos atualizar o usuário para aumentar a

05:49.890 --> 05:53.130
contagem de 'entradas'. Toda vez que eles

05:53.130 --> 05:55.330
enviam uma imagem, queremos aumentar suas 'entradas'.

05:57.670 --> 06:03.580
Vamos fazer isso criando nosso ponto final final, que é 'app. post () 'e

06:06.930 --> 06:11.330
chamamos de' / image '.

06:11.560 --> 06:19.510
Receberemos uma solicitação, resposta.

06:19.790 --> 06:26.200
E, novamente, aqui teremos que encontrar o 'id' do usuário novamente.

06:27.800 --> 06:31.070
Para atualizar suas entradas.

06:35.860 --> 06:43.080
Nesse caso, podemos apenas copiar o que fizemos antes e, a qualquer momento, precisamos copiar algum

06:44.140 --> 06:52.390
tipo de função. É um bom momento para retirá-la e criar sua própria função para que você possa usá-la

06:52.390 --> 06:53.770
em ambas.

06:53.900 --> 06:57.070
Mas por enquanto vamos copiar e

07:01.410 --> 07:09.960
colar e, em vez de realmente ter 'params' no nosso caso, receberemos o 'id' do usuário do corpo.

07:10.170 --> 07:15.340
E agora queremos dizer isso - também queremos

07:19.010 --> 07:27.480
copiar esta parte inferior -, dizeremos que, se o 'id' do usuário corresponder,

07:29.100 --> 07:38.450
nesse caso, responderemos com o 'usuário. entradas 'e essas' entradas 'que realmente queremos aumentar.

07:38.450 --> 07:48.070
Então, vamos dizer que 'usuário. entradas ++ '- lembre-se de que é a forma abreviada de eu fazer mais uma e

07:48.070 --> 07:48.540
reatribuí-la.

07:48.820 --> 07:54.010
Então, vamos fazer '++' e agora as entradas do usuário devem aumentar

07:54.010 --> 07:59.490
e, em seguida, responderemos com isso. Se isso não funcionar, se o usuário

08:00.360 --> 08:05.500
não for encontrado - nesse caso, manteremos do jeito que está: o usuário não foi encontrado.

08:06.780 --> 08:12.640
Vamos dizer isso e voltar para Postman. Vamos dizer '/ image'.

08:12.880 --> 08:23.010
E nesta imagem, teremos uma solicitação POST, o que significa um corpo e podemos apenas passar o "id"

08:23.450 --> 08:24.600
do usuário.

08:25.080 --> 08:29.560
No nosso caso, diremos "Id": "123", que é o 'id' de Johns.

08:32.240 --> 08:34.270
E clicaremos em Enviar.

08:35.750 --> 08:47.900
Eu obtenho "1" se clicar novamente, obtenho "2", "3", "4", "5" e se eu voltar para a 'raiz' que retorna nossos

08:47.900 --> 08:57.370
usuários e alterar isso para GET, recebo John com cinco entradas e Sally com zero entradas.

09:00.090 --> 09:02.080
Vamos garantir que funcione também para Sally.

09:02.120 --> 09:14.340
Se eu fizer "124", agora recebo entradas de "1" e voltando aos usuários do GET, recebo John com cinco entradas e

09:14.370 --> 09:20.070
Sally com uma entrada. Surpreendente!

09:20.250 --> 09:24.200
Temos um bom servidor de API.

09:24.230 --> 09:25.430
Definitivamente pode melhorar.

09:25.430 --> 09:32.600
Obviamente, há algumas coisas que queremos mudar, como 'entrar' - para não tê-lo apenas para John.

09:32.900 --> 09:40.040
Temos algumas repetições de código que talvez possamos extrair isso em uma função.

09:40.260 --> 09:47.970
Mas eu queria que tivéssemos algo funcionando, algo que possamos usar, para que possamos conectá-lo imediatamente ao nosso

09:47.970 --> 09:48.680
front-end.

09:51.680 --> 09:58.150
Finalmente, podemos excluir nossa seção comentada, onde planejamos como nossa API será.

09:59.950 --> 10:01.710
Bom trabalho chegando até aqui.

10:01.810 --> 10:03.670
Eu vou ver no próximo vídeo. Tchau tchau
