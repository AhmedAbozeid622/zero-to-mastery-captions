WEBVTT

00:01.100 --> 00:06.280
Bem vindo de volta. Nesta seção, continuaremos trabalhando no nosso

00:06.410 --> 00:12.620
projeto final: o aplicativo de reconhecimento de rosto que criamos, e temos o front-end feito principalmente para

00:12.620 --> 00:16.720
ele, mas agora precisamos de um servidor - algo que o

00:17.060 --> 00:23.910
front-end possa comunique-se para que este aplicativo possa viver em mais do que apenas nosso laptop - podemos implementá-lo.

00:24.120 --> 00:33.480
E se você se lembra do nosso aplicativo, temos um Login e o Login também vincula a um Registro para que

00:33.480 --> 00:35.270
possamos registrar os usuários.

00:35.520 --> 00:40.130
E se tivéssemos o aplicativo do jeito que está agora, não há nada interagindo com ele.

00:40.290 --> 00:47.830
Sempre que entramos no aplicativo, podemos criar um novo usuário com uma nova senha e entrar sem problemas.

00:50.530 --> 00:57.140
Mas se criarmos um back-end para isso, agora temos a capacidade de interagir com ele.

00:57.250 --> 01:02.820
Podemos até incluir um banco de dados para que haja memória e possamos ter usuários reais dos

01:02.830 --> 01:07.450
quais nosso back-end se lembrará, e chegaremos ao banco de dados nas próximas seções.

01:07.540 --> 01:12.440
Mas, por enquanto, trabalhamos no Node e Express e devemos estar familiarizados com o funcionamento deles.

01:13.330 --> 01:15.500
É bastante agradável e simples, certo?

01:15.520 --> 01:24.160
Estamos simplesmente criando URLs e pontos de extremidade e fornecendo uma resposta ao front-end.

01:24.180 --> 01:26.360
Então é nisso que vamos trabalhar nesta seção.

01:27.730 --> 01:28.930
Se voltarmos ao

01:32.470 --> 01:37.080
nosso aplicativo apenas olhando para ele, podemos descobrir quais pontos de extremidade podemos querer ter.

01:37.090 --> 01:46.370
Definitivamente, queremos ter um ponto final de "entrada"; queremos ter um ponto final de 'registro' e toda vez que fizermos login

01:46.370 --> 01:50.480
neste aplicativo - bem, teremos algum tipo de perfil.

01:50.480 --> 02:00.450
Queremos que nosso nome e nossa classificação sejam exibidos e, idealmente, essa classificação será alterada com base em quantas faces ou em quantos

02:00.450 --> 02:03.190
URLs enviei para o meu perfil.

02:05.870 --> 02:07.610
Então aqui está a parte divertida.

02:07.610 --> 02:13.850
Na verdade, não tocaremos no front-end dos primeiros dois vídeos, porque a maneira

02:13.850 --> 02:21.790
como você deseja criar um servidor de API é descobrir qual é a funcionalidade que queremos

02:21.790 --> 02:30.100
e testá-la em algo como o Postman. Então, nos próximos dois vídeos, usaremos o Postman e apenas

02:30.100 --> 02:37.310
criaremos o servidor. Com o Postman, testaremos o servidor como fizemos na seção anterior, colocaremos todos os pontos

02:37.310 --> 02:38.020
finais

02:39.030 --> 02:43.060
em funcionamento e finalmente vamos conectá-lo ao nosso front-end.

02:44.360 --> 02:45.740
Vai ser muito divertido.

02:45.920 --> 02:54.200
Agora, renomeei nosso projeto de front-end para smart-brain, mas esse é o aplicativo React em

02:54.200 --> 03:03.050
que estamos trabalhando e também criei uma pasta chamada 'smart-brain-api', e não tem absolutamente nada nele, exceto

03:03.050 --> 03:07.090
por um pacote. json '.

03:07.220 --> 03:10.040
Então eu apenas executei 'npm init'.

03:10.040 --> 03:13.520
Mas é algo com o qual já estávamos familiarizados, então não vou aborrecê-lo.

03:13.760 --> 03:19.560
E então eu instalei alguns pacotes que usamos na seção anterior.

03:19.880 --> 03:26.870
A estrutura do Express - para que possamos criar um servidor realmente muito bem, o Nodemon - para que possamos executar

03:26.870 --> 03:36.100
o Nodemon em nossos scripts e garantir que o servidor esteja em execução, além de termos um analisador de corpo, que usamos para analisar e ter acesso ao

03:36.100 --> 03:40.120
solicitar corpo do ponto [req. body] para ler JSON e formar dados.

03:40.360 --> 03:43.610
Fora isso, não há arquivo JavaScript.

03:43.720 --> 03:53.760
Então, vamos começar criando um 'servidor. js 'e agora que temos' server. js ', nos "scripts", podemos apenas

03:53.760 --> 04:02.280
dizer que o NPM "inicia" e novamente é JSON, então eu tenho que colocá-lo entre colchetes.

04:03.280 --> 04:08.410
E este "start" diz apenas "servidor nodemon. js "- E agora,

04:10.730 --> 04:12.800
toda vez que

04:12.800 --> 04:19.800
rodamos 'npm start', nosso servidor roda, mas ainda não temos nada.

04:19.810 --> 04:27.170
Então, vamos pegar nosso esqueleto básico do nosso aplicativo Express, e isso já deve lhe ser familiar.

04:27.640 --> 04:38.470
Teremos apenas uma const express igual ao pacote express [const express = require ('express')].

04:38.620 --> 04:41.890
Em seguida, criaremos nosso aplicativo executando o Express

04:46.140 --> 04:55.710
e, finalmente, ouviremos os pontos do aplicativo e usaremos a porta 3000 [app. listen (3000)] e dentro do 'listen' podemos enviar um segundo

04:55.710 --> 05:00.970
parâmetro, que é uma função dentro dessa função, ele será executado

05:03.610 --> 05:08.220
logo após o 'listen' acontecer na porta 3000.

05:08.440 --> 05:19.990
E apenas para garantir que tudo esteja funcionando perfeitamente, diremos 'app está sendo executado na porta 3000' O

05:20.240 --> 05:28.110
Nodemon faz isso por nós, mas eu gosto de tê-lo aqui independentemente.

05:28.120 --> 05:28.410
Tudo certo.

05:28.420 --> 05:30.790
Então, apenas para testar isso, se eu iniciar o 'npm',

05:35.330 --> 05:42.410
iniciaremos o Nodemon, o aplicativo está sendo executado na porta 3000, como eu disse aqui [console. log ('aplicativo está sendo executado na porta 3000')].

05:42.500 --> 05:48.830
Agora, agora que temos o aplicativo em execução, vamos criar uma rota básica para garantir que

05:48.830 --> 05:50.720
tudo esteja funcionando bem.

05:50.750 --> 05:58.780
Você pode apenas criar um aplicativo. get () 'na rota raiz [(' / ')].

05:59.080 --> 06:04.700
E, novamente, como fizemos anteriormente, isso receberá uma resposta de solicitação.

06:08.150 --> 06:19.240
E aqui vamos fazer um ponto de resposta enviar [res. send ('this is working')] vamos salvar e voltar ao nosso Postman e

06:19.250 --> 06:24.100
fazer o nosso localhost 3000 e nós iremos fazer uma

06:27.270 --> 06:31.850
raiz [/] e obteremos 'this is working' perfeitamente.

06:31.870 --> 06:35.560
Então, agora que configuramos isso, gosto de planejar nossa API.

06:35.590 --> 06:40.450
E isso é algo que você realmente deseja fazer como desenvolvedor antes de começar a codificar

06:40.450 --> 06:44.900
e deseja ter uma idéia de como será o design do seu API.

06:46.470 --> 06:47.850
Então, vamos pensar sobre isso.

06:47.940 --> 06:53.760
Vou colocar isso nos comentários e podemos trabalhar um por um. Se você quiser ter uma

06:53.850 --> 07:00.280
rota raiz que, talvez por enquanto, digamos que responda com

07:00.510 --> 07:02.760
'isso está funcionando'.

07:02.820 --> 07:12.150
Também queremos ter uma rota de 'login', porque também queremos que as pessoas façam login, e

07:12.150 --> 07:22.190
esse 'login' provavelmente será uma solicitação POST, porque estamos publicando alguns dados em algumas JSON, algumas informações do

07:22.190 --> 07:24.530
usuário e responderemos com

07:27.680 --> 07:29.640
sucesso ou falha.

07:30.110 --> 07:30.710
Tudo certo.

07:30.770 --> 07:39.200
Também temos um 'registro' e o registro novamente será uma solicitação POST, porque queremos adicionar os

07:39.230 --> 07:49.610
dados ao banco de dados ou, no nosso caso, uma variável em nosso servidor e com as novas informações do usuário.

07:49.620 --> 07:53.860
Portanto, talvez este em vez de dizer 'sucesso / falha' retorne

07:53.880 --> 07:57.620
o usuário recém-criado para garantir que tudo esteja funcionando.

07:57.930 --> 08:03.300
E diremos que este é o novo objeto de usuário que retornaremos. ESTÁ BEM.

08:03.310 --> 08:11.190
Também queremos que na tela inicial seja possível acessar o perfil do usuário.

08:11.250 --> 08:19.890
Portanto, talvez tenhamos um perfil com um parâmetro opcional 'userId' para que cada usuário tenha sua própria

08:20.020 --> 08:21.110
tela inicial.

08:21.390 --> 08:25.230
E isso provavelmente será uma solicitação GET.

08:25.230 --> 08:33.700
Nós apenas queremos obter as informações do usuário e isso nos devolverá o usuário. E como queremos trabalhar com o ranking ou a qualquer momento em

08:33.700 --> 08:41.530
que um usuário publica uma nova foto, queremos garantir que a contagem de quantas fotos eles tenham enviado seja aumentada e que

08:41.530 --> 08:49.190
talvez você tenha uma maneira de manter a pontuação - uma variável que aumenta em uma vez que um usuário envia

08:49.190 --> 08:54.740
essas fotos e depois verifica outros usuários para ver quem mais enviou e atribuir uma

08:54.740 --> 08:56.170
classificação a eles.

08:56.540 --> 09:09.080
Talvez possamos ter um ponto final de imagem que novamente será uma postagem ou, talvez, no nosso caso, porque estamos atualizando a pontuação, que

09:09.080 --> 09:11.210
deve ser um PUT.

09:11.210 --> 09:17.520
Como o usuário já existe e queremos garantir que haja uma atualização no perfil do usuário.

09:17.810 --> 09:26.470
E isso retornará apenas o objeto de usuário atualizado ou talvez o que tivermos atualizado - no nosso caso, uma contagem

09:26.800 --> 09:28.130
de algum tipo.

09:29.710 --> 09:37.660
E você também pode estar se perguntando aqui com o 'login' se não estamos criando um novo usuário. Por

09:37.690 --> 09:40.110
que estamos fazendo um POST?

09:40.140 --> 09:46.680
E se você se lembra de quando enviamos uma senha, na verdade não

09:46.670 --> 09:56.030
queremos enviá-la como uma string de consulta, não é? Queremos enviá-lo para dentro do corpo, idealmente, por HTTPS, para que fique oculto a ataques

09:56.030 --> 10:00.250
do tipo intermediário e seja seguro. Olhando para isso, isso

10:00.250 --> 10:06.860
pode mudar à medida que avançamos no projeto, mas temos uma idéia do que queremos criar.

10:06.880 --> 10:14.070
Então, nos próximos vídeos, começaremos a criar esses pontos de extremidade e testá-los com o Postman

10:14.070 --> 10:16.950
para garantir que eles estejam funcionando.

10:17.040 --> 10:18.900
Vejo você no próximo. Tchau tchau
