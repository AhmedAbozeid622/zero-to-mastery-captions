WEBVTT

00:03.080 --> 00:06.920
Bem vindo de volta. A segurança é uma coisa muito, muito importante na web.

00:07.280 --> 00:14.360
E, como desenvolvedores, temos a responsabilidade de garantir que, independentemente das informações do usuário que obtemos, as

00:14.360 --> 00:17.160
manipulemos com cuidado de maneira segura.

00:18.770 --> 00:27.160
Até agora, eu mostrei como fazer uma configuração simples de login, mas não mostrei uma maneira segura

00:27.160 --> 00:28.820
de fazer isso.

00:30.190 --> 00:32.810
E neste vídeo eu vou falar sobre o bcrypt-nodejs.

00:32.890 --> 00:39.560
E o bcrypt é uma biblioteca muito poderosa.

00:40.660 --> 00:45.500
Isso nos permite criar um login muito seguro.

00:45.500 --> 00:46.650
Agora, o que isso significa?

00:46.970 --> 00:49.000
Deixe-me te mostrar.

00:49.120 --> 00:58.160
Até agora, tínhamos 'senha' apenas em texto simples. Na vida real, nunca estamos armazenando

00:58.250 --> 01:06.800
senhas como textos simples como este, como uma string em nosso banco de dados.

01:08.530 --> 01:16.300
É exatamente assim que as empresas são invadidas e as senhas são liberadas dos usuários quando as armazenam dessa maneira.

01:16.300 --> 01:24.040
Queremos armazenar senhas em algo chamado hashes e chegarei ao que está em um segundo, mas quero mudar

01:24.040 --> 01:31.540
o banco de dados para mostrar uma aparência mais realista de como as coisas serão armazenadas.

01:31.540 --> 01:35.680
Você vê em nosso banco de dados

01:39.730 --> 01:46.910
que podemos ter algo como 'login:' e esse login conterá uma matriz de

01:50.590 --> 01:51.760
objetos

01:51.880 --> 02:05.320
com um 'id:' digamos '987' com o hash que ficará vazio por enquanto e depois um e-mail e este email fará referência apenas a

02:05.590 --> 02:08.150
john @ gmail. com.

02:08.230 --> 02:12.480
Isso é algo sobre o qual falaremos mais sobre bancos de dados.

02:12.680 --> 02:18.230
Mas quero mostrar a você - quero demonstrar esse ponto para você.

02:18.380 --> 02:27.920
Para manipularmos as informações confidenciais, ou seja, se John, digamos, entrar no nosso site e quiser fazer um Login,

02:27.920 --> 02:40.010
ele nos fornecerá seu email e sua senha, que são 'cookies'. Agora, ele está confiando em nós com essas

02:40.010 --> 02:41.490
informações.

02:41.690 --> 02:47.360
E a primeira coisa que queremos fazer é - bem, definitivamente não vamos adicioná-lo como uma string de

02:47.720 --> 02:52.020
consulta em uma solicitação GET - vamos adicioná-lo a uma solicitação POST.

02:52.040 --> 02:55.530
Portanto, está no corpo da solicitação.

02:55.940 --> 02:59.220
Também queríamos enviá-lo por HTTPS.

02:59.420 --> 03:01.750
Isso é algo que requer um certificado.

03:02.180 --> 03:08.690
E não vamos entrar nisso, mas definitivamente queremos incluí-lo por meio de uma solicitação HTTPS para

03:08.690 --> 03:12.110
que seja criptografada. Quando ele envia 'cookies',

03:12.260 --> 03:20.510
ele fica desordenado e ninguém no meio pode ver isso ou eles serão capazes de vê-lo, mas não entenderão o

03:20.510 --> 03:22.210
que isso significa.

03:22.520 --> 03:30.750
E somente o servidor após receber essa senha pode realmente entender que isso significa 'cookies'.

03:32.100 --> 03:34.110
Tudo bem, então um é HTTPS.

03:34.150 --> 03:38.010
A segunda coisa é, como armazenamos essa senha?

03:39.230 --> 03:47.430
Bem, nós o armazenamos em um hash, e o bcrypt, o pacote sobre o qual eu estava falando, nos permite fazer isso.

03:47.480 --> 03:52.230
Deixe-me baixar este pacote e mostrar como ele funciona.

03:58.680 --> 03:59.250
Ai está.

03:59.430 --> 04:07.300
Agora, com o bcrypt instalado, você pode ver aqui que ele tem algumas coisas que

04:07.300 --> 04:14.770
podemos usar e eu vou copiar e colar e mover algumas dessas coisas.

04:14.770 --> 04:16.440
Na verdade, vou colocar isso no fundo.

04:20.490 --> 04:25.030
O bcrypt nos fornece uma maneira de hash uma senha e

04:27.940 --> 04:29.650
uma maneira de

04:32.210 --> 04:35.970
comparar senhas ou hashes. Mas o que isso significa?

04:36.070 --> 04:40.850
Vamos um por um.

04:41.030 --> 04:43.880
Se eu pegar essa função e no nosso '/

04:46.770 --> 04:55.530
signin' ou desculpe, acho que no nosso '/ register' porque é quando damos a nossa senha. Em nosso '/ register' quando

04:57.620 --> 05:01.410
executamos 'bcrypt. hash 'e, em vez de'

05:01.420 --> 05:04.450
bacon ', é isso que passamos como senha

05:04.660 --> 05:11.640
do usuário - se passarmos a senha aqui, temos alguns parâmetros que eles nos fornecem e essas são as

05:11.640 --> 05:13.240
opções que podemos inserir.

05:13.260 --> 05:15.200
Por enquanto, vamos deixar como está.

05:18.840 --> 05:28.050
Se eu console. registre 'o hash que recebemos nessa função - para que o bcrypt

05:28.410 --> 05:33.780
use a senha e depois retorne o hash - vamos apenas dizer' hash '.

05:33.840 --> 05:35.550
Tudo bem, então vamos ver o que acontece aqui.

05:35.580 --> 05:37.980
Eu estou indo para salvar. Então

05:37.980 --> 05:44.000
eu vou rodar 'npm start' voltando ao nosso Carteiro.

05:44.160 --> 05:48.830
Se eu 'registrar' com Ann - clicarei em Enviar e recebo

05:51.940 --> 05:56.070
'bcrypt is not defined' porque não o incluí aqui.

05:56.080 --> 06:02.090
Vamos fazer isso, vamos fazer 'const bcrypt = require

06:05.360 --> 06:08.750
(' bcrypt-nodejs ')' -

06:08.740 --> 06:12.730
vamos salvar isso e tentar novamente.

06:12.840 --> 06:13.870
Vou clicar em enviar.

06:15.900 --> 06:28.030
Voltamos ao console - você vê isso? Acabamos de obter um hash e é isso que uma função hash faz. Uma função de hash Uma função de

06:32.820 --> 06:44.030
hash pega uma string e a mistura de uma maneira que não há como eu ser capaz de descobrir que isso [o

06:44.030 --> 06:50.650
hash] representa a senha 'cookies' e as funções de hash são uma maneira.

06:50.970 --> 06:57.140
Ou seja, você pode inserir 'cookies' e poderá obtê-lo, mas nunca poderá voltar.

06:57.620 --> 07:03.930
E a outra qualidade das funções de hash é que, se agora fizer isso de novo com a

07:03.930 --> 07:05.870
senha - oh, acho que

07:05.880 --> 07:14.460
a senha para Ann era 'maçãs' - se clicar em enviar, volto, vejo que o hash é a primeira e a segunda vez. diferente.

07:14.460 --> 07:19.920
E, embora as funções hash sempre retornem a mesma coisa pelo mesmo valor, o bcrypt é um

07:19.920 --> 07:25.800
pouco mais seguro do que isso e adiciona um pouco de outra mágica para garantir que seja impossível

07:25.950 --> 07:27.940
descobrir qual é a senha.

07:27.960 --> 07:37.270
Mas agora podemos armazenar esse hash - esse valor desordenado - em nosso banco de dados aqui para o login e

07:37.320 --> 07:43.560
sempre que fizermos login e queremos verificar se as senhas do usuário correspondem.

07:43.890 --> 07:47.800
Bem, agora - deixe-me remover isso - nós temos -

07:47.940 --> 07:48.600
vamos

07:52.130 --> 07:53.940
para '/ signin' e,

07:57.130 --> 08:05.090
no topo, podemos comparar os hashes para pegar o hash que tínhamos antes - vamos usar esse ou vamos usar

08:05.390 --> 08:07.230
o mais recente que temos.

08:08.160 --> 08:09.330
Eu vou substituir isso.

08:09.330 --> 08:18.450
Vai parecer muito feio, mas vou substituir esse hash por essa longa sequência e vou comparar

08:18.450 --> 08:19.230
'maçãs'

08:21.650 --> 08:26.170
porque é essa a senha da Ann.

08:26.240 --> 08:31.480
Se eu comparar 'maçãs' com esse hash - vamos consolar. registro.

08:32.680 --> 08:34.480
'primeiro palpite',

08:38.230 --> 08:42.730
teremos a resposta novamente - é isso que

08:42.860 --> 08:46.970
recebemos depois que o bcrypt faz isso.

08:47.140 --> 08:52.380
E na segunda vez, também faremos um 'log do

08:57.560 --> 09:04.480
console' com a senha errada, que é 'veggies' e esse será o 'segundo palpite'.

09:04.510 --> 09:06.640
Vamos fazer um login.

09:06.640 --> 09:11.990
Realmente não importa o que é, porque não estamos realmente preocupados com uma resposta.

09:13.330 --> 09:21.180
E recebo um erro dizendo que o hash não está definido porque não atualizei esse hash para o que acabamos de

09:21.180 --> 09:21.930
copiar antes.

09:21.930 --> 09:23.230
Então deixe-me fazer isso.

09:26.480 --> 09:27.080
Ai está.

09:28.860 --> 09:30.980
Deixe-me voltar, clique em Enviar.

09:32.320 --> 09:34.110
Se eu olhar para

09:34.120 --> 09:36.160
trás aqui, entendi 'primeira suposição é

09:36.370 --> 09:39.920
verdadeira', ou seja, 'maçãs' é igual a esse hash que

09:39.940 --> 09:45.310
eles nos deram, mas 'veggies' não é igual ao hash que eles nos deram lá.

09:48.400 --> 09:53.830
Deixe-me fechar um pouco. E o bcrypt é realmente muito poderoso.

09:53.840 --> 09:59.780
Vamos usar isso quando realmente implementarmos um banco de dados em nosso registro. Usando o bcrypt, que é um pacote de

09:59.780 --> 10:07.730
hash testado e comprovado, podemos armazenar com segurança as informações dos usuários, as senhas dos usuários em nosso banco de

10:07.730 --> 10:14.840
dados e ninguém, mesmo que eles - mesmo que hackers acessem nosso banco de dados - dificilmente conseguirão

10:14.840 --> 10:16.500
o usuário. senhas.

10:17.300 --> 10:22.370
Eles podem obter seus endereços de email, mas nunca nossas senhas, e nós o

10:22.370 --> 10:25.770
implementaremos em nosso banco de dados usando bcrypt.

10:25.830 --> 10:29.940
Mas eu realmente quero enfatizar esse ponto porque a segurança é realmente importante.

10:30.930 --> 10:37.570
Sempre envie qualquer informação confidencial do front-end para o back-end usando HTTPS no corpo do POST

10:38.550 --> 10:48.960
e se você obtiver algo como uma senha, da mesma forma que a armazena no banco de dados, use algo como bcrypt para gerar um

10:48.960 --> 10:51.820
hash e sempre um usuário entra,

10:52.140 --> 11:00.220
verifique esse hash com o que o usuário inseriu. Na próxima parte, deixei para você um artigo de

11:00.250 --> 11:01.210
segurança

11:01.330 --> 11:08.830
que escrevi que pode ser um pouco avançado, mas acho que cobre a melhor maneira de armazenar

11:08.830 --> 11:14.710
senhas de usuário - algo que é negligenciado com frequência, mas também muito

11:14.710 --> 11:18.100
importante se você quer ser o principal desenvolvedor.

11:18.180 --> 11:19.770
Verei no próximo. Tchau tchau
