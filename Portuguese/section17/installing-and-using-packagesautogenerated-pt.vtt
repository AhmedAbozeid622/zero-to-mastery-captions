WEBVTT

00:01.160 --> 00:05.470
Bem-vindo de volta, vamos começar a usar o NPM.

00:05.680 --> 00:10.220
Eu queria mais uma vez exatamente o que está acontecendo embaixo dela.

00:10.600 --> 00:20.100
Então, agora que temos um arquivo package.json, podemos pegar os pacotes que quisermos do NPM

00:20.100 --> 00:21.900
e a próxima seção será agarrar reagir

00:21.900 --> 00:28.380
novamente uma biblioteca JavaScript que estará usando. e esse arquivo reside no NPM.

00:28.380 --> 00:35.770
portanto, usando o arquivo package.json e o recém-encontrado comando NPM,

00:36.010 --> 00:45.190
Podemos pegar reagir e tê-lo como parte do nosso projeto. Então vamos começar.

00:45.210 --> 00:51.210
Eu vou minimizar isso e porque estamos usando reagir na próxima seção eu vou mostrar-lhe dois

00:51.240 --> 01:01.290
outros pacotes que eu realmente gosto no NPM. Um é chamado live-server e o outro é lodash.

01:01.340 --> 01:04.300
Eu vou estar passando por cada um deles para que você saiba o que eles são.

01:04.400 --> 01:10.320
Mas eu escolho esses dois porque eles são realmente diferentes na maneira que você os instala.

01:12.880 --> 01:18.890
Por exemplo, com o live-server, eu tenho 'npm install -g live-server'

01:18.990 --> 01:19.290
ESTÁ BEM,

01:19.330 --> 01:20.980
isso parece bastante fácil.

01:21.100 --> 01:28.820
E com o lodash, se eu for ao registro do NPM, vejo que é

01:28.810 --> 01:41.440
'npm i --save lodash'. Hmm, bem, o NPM permite que você instale as coisas de duas maneiras. Um, globalmente ou dois, localmente.

01:41.520 --> 01:42.300
O que isso significa?

01:43.550 --> 01:52.220
Em nosso projeto aqui, nosso gerador de segundo plano, se instalarmos algo localmente, isso significa que o NPM instalará

01:53.150 --> 02:00.790
um pacote que só é capaz de rodar nesta pasta, em background-generator.

02:00.880 --> 02:06.260
Mas se eu baixei globalmente e é isso que "-g" significa.

02:06.490 --> 02:14.780
Bem, eu posso usar o servidor ao vivo fora desta pasta em qualquer lugar no meu computador. Como o nome sugere,

02:14.840 --> 02:20.760
globalmente significa que você não pode executá-lo em todos os lugares e geralmente globalmente significa que você pode executá-lo em seu terminal.

02:20.960 --> 02:26.390
Então lembre-se que se você instalá-lo com '-g', isso significa que ele lhe dará um comando que você

02:26.390 --> 02:28.690
pode executar no terminal.

02:29.000 --> 02:38.060
Se você não instalá-lo com '-g', se for local, ele lhe dará poderes como novas habilidades em

02:38.090 --> 02:42.970
o arquivo JavaScript. Vamos realmente passar por isso para demonstrar este ponto.

02:44.450 --> 02:53.560
Vou instalar live-server fazendo e 'npm install -g live-server' e novamente toda vez que você instalar

02:53.560 --> 03:01.580
um npm, é a mesma coisa. Você executa 'npm install' e o nome do pacote porque eu quero essa instalação globalmente.

03:01.580 --> 03:05.280
Eu vou fazer '-g' e eu vou dizer 'live-server'

03:07.110 --> 03:09.020
Vai passar pela instalação aqui.

03:11.320 --> 03:12.890
Ah e lá vai você.

03:12.940 --> 03:15.320
Nós temos o que é chamado de

03:15.550 --> 03:16.390
EACCES:03:16.390 --> 03:18.030
permissão negada.

03:18.030 --> 03:19.050
Lembre-se do que eu disse?

03:19.060 --> 03:25.910
Se você não tem permissões corretas, você pode ter que correr com o sudo?

03:25.940 --> 03:30.470
Isto é o que está dizendo - ele está dizendo que meu usuário não tem acesso para instalar.

03:30.680 --> 03:37.160
Você precisa ter permissões de administrador e isso significa apenas que você terá que digitar seu nome de usuário e senha.

03:37.480 --> 03:45.860
Você pode consertar isso no seu computador depois disso, mas por enquanto você pode rodar

03:49.620 --> 03:50.210
'sudo npm install -g live-server'

03:53.140 --> 03:59.500
e você vê isso me perguntar a minha senha e lá vai você, servidor ao vivo foi adicionado.

03:59.710 --> 04:00.550
Vamos esclarecer isso.

04:03.340 --> 04:03.760
ESTÁ BEM.

04:03.980 --> 04:09.330
Então, se eu olhar para o meu arquivo package.json, bem, nada mudou.

04:10.840 --> 04:17.640
E nada deveria. Porque nós instalamos o pacote globalmente, ele agora vive no nosso computador, mas não

04:17.640 --> 04:18.610
dentro da nossa pasta.

04:18.610 --> 04:24.870
Conforme mencionei. Temos uma capacidade legal agora podemos executar um comando com o servidor ao vivo

04:24.880 --> 04:28.080
Você pode realmente ler a documentação aqui.

04:28.250 --> 04:35.170
Mas o que nos permite fazer é se eu digitar live-server enquanto eu estiver na pasta gerador de background,

04:37.950 --> 04:45.430
Você entendeu isso? Ele carregou automaticamente nosso projeto gerador de plano de fundo.

04:45.430 --> 04:46.760
O que esta acontecendo aqui?

04:47.230 --> 04:54.760
Bem, nós vemos aqui ao vivo servidor cria um servidor, um servidor falso para você e, em seguida, observe as mudanças

04:55.330 --> 05:03.190
de modo que, se eu for agora, vamos fazer CSS e eu vou fazer 'alinhar texto:esquerda'

05:03.280 --> 05:14.080
e eu salvei. O live-server detecta a mudança que diz que a mudança de CSS muda automaticamente

05:14.170 --> 05:19.850
sem mim refrescando. Lembre-se de quão irritante era toda vez que eu mudava alguma coisa no nosso projeto,

05:19.860 --> 05:25.950
Tivemos que acertar a atualização para garantir que as alterações funcionassem? bem, live-server cria um servidor que mantém

05:25.950 --> 05:33.420
vendo seus arquivos e toda vez que uma mudança é feita, ela vê e atualiza o projeto e você vê

05:33.420 --> 05:37.030
aqui temos 127.0.0.1

05:37.230 --> 05:38.990
E então esta é a porta 8080.

05:39.240 --> 05:42.520
E esse é o padrão que chamamos de hosts locais.

05:42.540 --> 05:44.980
Isso é algo que falarei mais adiante no curso.

05:46.300 --> 05:52.680
Mas como você pode ver, basta dizer que você pode abrir este site de teste neste endereço.

05:52.870 --> 06:00.760
Se eu realmente digitar aqui localhost que é seu host local, você é o servidor,

06:00.760 --> 06:02.780
é exatamente a mesma coisa.

06:02.790 --> 06:03.910
Quão legal é isso.

06:03.950 --> 06:10.680
Vou devolver isso de volta ao jeito que estava e novamente as alterações serão detectadas assim que eu salvar tudo

06:10.680 --> 06:12.440
é restaurado.

06:12.480 --> 06:16.160
Então, o live-server é muito legal na próxima seção. Vou mostrar algo ainda melhor do que isso.

06:16.350 --> 06:20.680
Mas novamente, um ótimo exemplo do porque o NPM é ótimo.

06:20.700 --> 06:27.720
Eu era capaz de instalar algo muito rapidamente e agora eu tenho um servidor que é o meu computador que é

06:27.870 --> 06:33.020
vendo esses arquivos e servindo meu projeto aqui no meu computador.

06:33.030 --> 06:36.160
Nós não precisávamos comprar um servidor, não precisávamos colocá-lo no github,

06:36.300 --> 06:38.010
Tudo já está aqui.

06:39.570 --> 06:41.670
Agora que fizemos isso, deixe-me apenas fechar isso.

06:41.670 --> 06:43.670
Eu vou esclarecer isso.

06:44.520 --> 06:47.080
Então esse foi um pacote globalmente instalado.

06:47.130 --> 06:50.040
O outro tipo de pacote que você pode instalar é local, como eu disse.

06:50.070 --> 06:56.910
e com um pacote local, podemos instalar algo como lodash e é realmente um dos

06:56.910 --> 06:59.290
bibliotecas mais populares.

06:59.370 --> 07:06.120
Agora, para aqueles que não conhecem lodash, você pode pensar nisso como uma extensão do JavaScript.

07:06.120 --> 07:09.400
Com o JavaScript, temos todos esses métodos que vêm com ele.

07:09.420 --> 07:11.520
Nós temos, você sabe, querySelector,

07:11.520 --> 07:13.390
Nós temos getElementById,

07:13.680 --> 07:20.700
Mas seria bom se tivéssemos mais funções que podemos executar? Bem, a lodash tem um monte de

07:20.700 --> 07:21.920
eles podem usar.

07:22.110 --> 07:29.400
E se você for ao site, se você for à documentação, verá que eles têm todas essas coisas

07:29.470 --> 07:32.790
você pode fazer com uma matriz e eles também têm bons exemplos.

07:32.800 --> 07:40.000
Então, toda vez que você tiver um problema, o lodash é realmente muito bom, em vez de escrever o seu próprio.

07:40.100 --> 07:42.800
Eu não quero que o lodash esteja no meu computador.

07:42.800 --> 07:48.520
Eu só quero apenas para este projeto. O que vou dizer é que vou dizer 'npm install lodash'

07:52.260 --> 07:56.580
e eu vou abrir o arquivo package.json para ver se ele muda enquanto fazemos isso.

07:56.730 --> 08:01.240
Eu vou pressionar enter.

08:01.480 --> 08:10.180
Agora, se eu entrar no meu texto sublime, vemos que o package.json acabou de adicionar uma nova linha, ele diz "dependências",

08:10.730 --> 08:15.660
"lodash" e esta é a versão do lodash que baixamos.

08:16.120 --> 08:22.630
E outra coisa que você pode notar é que temos algo chamado pasta node-modules que acabou de ser criada.

08:22.630 --> 08:24.550
o que isso significa?

08:24.760 --> 08:29.230
Se abrirmos isso, veremos que o lodash está instalado.

08:29.540 --> 08:35.300
E ai cara, é um monte de arquivos de lodash que acabamos de instalar.

08:36.790 --> 08:45.950
Você vê assim que nós fazemos o npm install então o nome do pacote, ele se encaixa localmente e nós temos um arquivo package.json

08:46.070 --> 08:47.650
desde que fizemos 'npm init',

08:47.780 --> 08:56.090
Ele irá adicioná-lo às nossas dependências, o que significa pacotes que o nosso site precisa para funcionar. E o jeito

08:56.090 --> 09:03.810
encontra estes é que todos estes pacotes vivem sob a pasta de módulos do nó e você pode ver que o lodash está aqui

09:03.930 --> 09:08.340
e agora podemos usar todos os seus novos métodos.

09:08.390 --> 09:09.140
Então vamos tentar.

09:09.140 --> 09:13.380
Vamos ver se realmente temos um trabalho lodash e nosso JavaScript.

09:13.490 --> 09:14.950
Vou abrir o script.js,

09:15.030 --> 09:15.990
-

09:16.040 --> 09:21.240
E a maneira como queremos entrar aqui é algumas maneiras.

09:21.260 --> 09:25.070
Um deles mostra a você como fazer isso no Node.js,

09:25.170 --> 09:27.060
mas não estamos usando o Node.js

09:27.110 --> 09:36.840
Então, se você se lembra dos módulos, podemos apenas 'importar sem' - que é uma função da lodash,

09:36.920 --> 09:40.360
Acho que podemos ver aqui sem.js,

09:44.140 --> 09:53.720
e eu vou dizer 'da lodash', vamos fechar isso e só pra checar se a lodash está funcionando,

09:53.720 --> 09:55.100
Eu só vou fazer 'console.log (sem)',

09:56.700 --> 10:03.150
Eu vou salvar, e você sabe o que, vamos começar servidor ao vivo, porque estava funcionando muito bem para nós.

10:03.150 --> 10:05.660
Vamos abrir o console, hmm

10:06.500 --> 10:07.830
SyntaxError não detectado,

10:07.920 --> 10:09.990
Importação inesperada de token

10:10.100 --> 10:18.350
E se eu realmente importar aqui, sim, o console não reconhece a importação porque como eu disse antes

10:18.620 --> 10:23.750
é uma nova sintaxe que os navegadores não implementaram.

10:23.900 --> 10:32.440
Então parece que eu tenho que usar a sintaxe 'require' e você pode lembrar esta sintaxe deste vídeo onde

10:32.440 --> 10:39.400
nós conversamos sobre modulando em JavaScript e discutimos que o ES6 e essa coisa chamada um webpack é

10:39.400 --> 10:40.370
o que usamos agora.

10:41.660 --> 10:44.270
Mas isso é para a seção de reagir.

10:44.270 --> 10:47.690
Por enquanto, queremos poder usar o require.

10:47.750 --> 10:52.250
E a maneira que somos capazes de fazer isso é o navegador.

10:52.270 --> 11:02.840
Felizmente para nós temos algo chamado NPM que podemos instalar um pacote global, para que eu possa instalar

11:04.090 --> 11:05.240
global,

11:05.640 --> 11:11.520
E há o navegador

11:11.640 --> 11:19.480
E novamente eu tenho o erro de acesso, então eu tenho que fazer 'sudo npm install -g browserify'

11:23.740 --> 11:27.390
deixe-me esclarecer que tudo está instalado novamente.

11:28.160 --> 11:36.260
A sintaxe de importação que vem do ES6 foi capaz de usar isso com o Webpack, mas porque é para a próxima seção

11:36.260 --> 11:38.750
Eu quero te mostrar o que fizemos antes disso.

11:38.750 --> 11:44.920
Nós usamos algo chamado browserify que nos permitiu usar isso requer sintaxe.

11:45.030 --> 11:54.620
Então vamos copiar isso do jeito que eles tem no NPM e agora eu vou dizer 'console.log'

11:56.720 --> 11:59.940
sublinhado (_), mas isso não fará nada.

11:59.960 --> 12:08.660
Se você se lembra, este é um módulo bundler, e é um pacote global que nós instalamos.

12:08.700 --> 12:16.730
Nós damos a ele um arquivo de script e ele gera outro arquivo de script que podemos usar no navegador.

12:16.970 --> 12:22.890
O comando para isso, porque nós instalamos globalmente, podemos usar o browserify agora e posso dizer que

12:23.130 --> 12:33.150
meu arquivo script.js deve ser bundle.js

12:33.240 --> 12:34.210
Você viu aquilo?

12:34.210 --> 12:37.050
Agora temos um arquivo bundle.js.

12:37.230 --> 12:45.070
E se eu clicar sobre isso, bem, eu tenho um monte de coisas que parece um arquivo grande e isso é porque

12:45.070 --> 12:47.910
nós incluímos lodash.

12:48.020 --> 12:56.770
Ele criou para nós um arquivo de pacote que adiciona o que queremos para que o navegador o entenda.

12:57.630 --> 13:07.210
Simplesmente vamos ao arquivo index.html e, em vez do arquivo script.js, faremos o bundle.js, salvaremos

13:08.210 --> 13:14.700
e vamos tentar mais uma vez eu vou fazer live-server, abrir o console,

13:14.710 --> 13:15.840
Ai está.

13:16.000 --> 13:18.300
Parece que está funcionando.

13:18.380 --> 13:26.810
Se eu voltar ao meu arquivo de script com lodash agora no meu projeto, se eu tivesse uma matriz Vamos chamá-lo de variável (var)

13:27.380 --> 13:40.350
matriz que tem 1 2 3 4 5 6 7 8. E eu posso usar um método lodash que é sem.

13:40.500 --> 13:49.210
E eu posso fazer o console.log, responder:dentro daqui vai dizer lodash que é o sublinhado que atribuímos

13:49.210 --> 13:58.780
a variável de sublinhado para lodash como a biblioteca sugere e nós vamos dar sem que seja novamente

13:58.780 --> 14:00.890
um método que vem com lodash que

14:00.910 --> 14:03.280
Você pode verificar em seu site. Aqui dentro,

14:03.280 --> 14:06.400
Vou colocar minha matriz,

14:06.400 --> 14:12.180
E o segundo parâmetro será o que eu quero que seja sem.

14:12.220 --> 14:17.290
Então, digamos que eu queria ficar sem o número 3.

14:17.420 --> 14:23.860
Nesse caso, salvo isso, a alteração foi detectada.

14:23.920 --> 14:34.130
Eu abro o console e me atualizo, Ah- mas você vê, nós não vemos nada aqui porque novamente precisamos

14:34.130 --> 14:36.500
Coloque em 'bundle.js',

14:36.540 --> 14:43.760
Eu sei que é irritante, mas isso é uma boa prática para entendermos como tudo isso funciona.

14:43.760 --> 14:51.770
Então, novamente pacote foi atualizado e agora eu posso executar o meu servidor ao vivo, abrir o console e olhar para isso-

14:51.770 --> 14:56.620
Eu tenho uma matriz com 1, 2, não 3, 4, 5, 6, 7, 8.

14:56.960 --> 15:01.110
Então eu posso usar o lodash.

15:01.150 --> 15:09.160
Então, olhando para isso, você pode perceber porque o NPM é chamado de Gerenciador de Pacotes Node. Porque foi inicialmente

15:09.160 --> 15:17.770
criado para o nó que aceitou isso requer sintaxe, mas não para o navegador. o browserify nos permitiu

15:18.160 --> 15:22.410
usar a sintaxe que exigiria a sintaxe que foi usada em

15:22.490 --> 15:23.550
node.js,

15:23.950 --> 15:24.940
no navegador.

15:25.000 --> 15:33.480
Tudo o que tínhamos que fazer era inserir nossos arquivos de script no browserify e depois produzir o pacote para nós.

15:33.520 --> 15:34.450
Muito legal.

15:34.450 --> 15:34.840
Tudo bem.

15:34.870 --> 15:40.090
Tem um monte de aros para mostrar algumas coisas, mas você tem algumas realmente boas

15:40.090 --> 15:42.700
contatos do que estamos tentando fazer aqui.

15:42.760 --> 15:50.620
Nós criamos um sistema agora onde podemos importar todas essas coisas diferentes que outras pessoas têm

15:50.620 --> 15:52.400
escrito para tornar nosso código melhor.

15:52.480 --> 15:55.660
Mas você pode notar dois problemas com a configuração atual.

15:56.560 --> 16:01.940
Uma é o fato de que estou usando apenas isso sem o método que vem com a lodash.

16:02.170 --> 16:09.070
Mas se eu olhar no arquivo bundle.js, bem, é enorme porque incluiu esta biblioteca inteira

16:10.920 --> 16:16.120
e isso é algo com o qual você quer ter cuidado. Quando você está trabalhando com o NPM,

16:16.120 --> 16:22.870
Muitos iniciantes começam a instalar uma tonelada de pacotes sem pensar em quanto peso

16:22.870 --> 16:24.390
adicionar a um projeto.

16:24.430 --> 16:31.480
É uma boa ideia avaliar realmente se você precisa desse pacote como uma equipe e adicioná-lo ao projeto.

16:31.480 --> 16:36.760
Se você economiza tempo, se é realmente bem escrito, tem uma grande comunidade em torno dele.

16:36.760 --> 16:40.500
É algo que você sempre quer considerar.

16:40.510 --> 16:48.220
A segunda coisa é que agora temos algo chamado "dependências" que é o nosso projeto depende

16:48.220 --> 16:48.720
essas coisas.

16:48.850 --> 16:57.670
Precisamos garantir que nosso site ou nosso aplicativo tenha sempre uma certa versão em uma determinada versão, para que

16:57.670 --> 16:59.040
funciona com o nosso site.

16:59.350 --> 17:06.730
Ele também adiciona essa camada extra de complexidade que você deve considerar. Mas o arquivo package.json também

17:06.730 --> 17:09.610
oferece muitas coisas boas.

17:09.700 --> 17:15.660
Talvez eles não estejam evidentes agora porque nosso projeto é relativamente pequeno, mas quando você está trabalhando

17:15.660 --> 17:22.170
grandes projetos grandes servem como uma ótima documentação para quais pacotes seu projeto depende.

17:23.230 --> 17:31.750
Você verá que a maioria dos grandes projetos pode ter cerca de 100 dependências e ter apenas um local

17:31.750 --> 17:38.350
O arquivo package.json para ver todos esses pacotes para ver do que o projeto depende é realmente muito bom para todos

17:38.350 --> 17:45.090
todos que estão se juntando à equipe e também permitem que você especifique a versão aqui de suas dependências.

17:45.100 --> 17:46.000
Para atualizar as atualizações,

17:46.000 --> 17:52.720
Eu também posso atualizar minha versão apenas desta linha sem ter que ir ao site da lodash, baixar

17:52.720 --> 17:56.460
o arquivo e adicioná-lo

17:56.470 --> 17:57.750
meu arquivo de script index.html.

17:58.240 --> 18:02.190
Novamente outra coisa é que não estamos adicionando os arquivos de script mais e mais e mais.

18:02.260 --> 18:04.220
Como já falamos antes.

18:04.590 --> 18:10.030
Agora, esses números que você viu antes são chamados e cada um deles tem um significado.

18:10.270 --> 18:13.920
O número mais correto é o lançamento do patch.

18:13.990 --> 18:16.520
Então, isso é se houver alguma correção de bugs.

18:16.780 --> 18:20.330
Eles atualizarão aqui se encontrarem um bug e precisarem consertá-lo.

18:20.350 --> 18:22.110
Isso vai se tornar cinco.

18:22.300 --> 18:24.550
Este é o lançamento menor.

18:24.550 --> 18:30.610
Isso significa que alguns recursos novos foram adicionados à lodash, mas não haverá alterações

18:30.610 --> 18:31.560
que são importantes.

18:31.600 --> 18:37.390
E então, finalmente, este é um grande lançamento, o que significa que esta é uma quarta versão da quinta versão do

18:37.390 --> 18:38.710
o lodash foi lançado.

18:38.740 --> 18:40.870
Bem, isso é um grande lançamento.

18:40.900 --> 18:48.280
Isso pode ser bem diferente da versão 4 e pode quebrar alguns dos sites que dependem de

18:48.460 --> 18:54.880
lodash 4. package.json permite que você realmente decida quais versões você precisa para cada uma dessas

18:55.300 --> 18:56.430
pacotes.

18:56.530 --> 19:02.890
Mas provavelmente o maior benefício que você obtém com o NPM, este projeto é muito mais fácil de compartilhar com outros

19:02.890 --> 19:03.790
desenvolvedores.

19:03.790 --> 19:10.360
Não preciso adicionar tags de script em html para essas agora e, para um desenvolvedor,

19:10.360 --> 19:17.020
para que eles baixem todos os pacotes ou as dependências que um projeto requer,

19:17.180 --> 19:25.480
Bem, eu nunca colocarei os módulos do nó no meu repositório do github. porque tudo que você precisa é o

19:25.480 --> 19:26.330
arquivo package.json.

19:26.440 --> 19:27.760
Deixe-me mostrar o que quero dizer.

19:27.910 --> 19:29.800
Se eu excluir meus pacotes de nó aqui

19:34.810 --> 19:40.090
e digamos que alguém novo começou na empresa e queremos ter certeza de que eles têm as últimas

19:40.090 --> 19:42.380
versão do projeto para que eles possam começar a trabalhar nele.

19:43.060 --> 19:50.110
Bem, embora não haja módulos de nó, porque temos o arquivo package.json, o NPM é gerar o suficiente

19:50.740 --> 19:59.590
para dizer -lhe esclarecer isso, ou deixe-me parar este servidor, e eu vou limpar, contanto que a nova pessoa faça

19:59.600 --> 20:01.140
'npm install'

20:01.580 --> 20:06.620
E há um arquivo package.json.

20:06.680 --> 20:11.340
Bem, nesse caso, todas as dependências são baixadas.

20:11.810 --> 20:16.640
Então, logo eles podem começar o projeto com a mesma versão exata de todos os arquivos que todos

20:16.640 --> 20:17.860
mais tem.

20:18.050 --> 20:24.440
E é por isso que você não verá pastas de módulos conhecidas que podem ficar realmente muito boas no github

20:24.530 --> 20:25.260
porque não precisamos disso.

20:25.310 --> 20:32.020
Nós temos tudo descrito aqui em package.json.

20:32.050 --> 20:33.750
Agora uma outra coisa.

20:34.210 --> 20:41.000
Há realmente outro tipo de dependências que você pode ter, essas dependências são o que

20:41.080 --> 20:42.940
fundo-gerador depende.

20:42.940 --> 20:50.140
Mas há outro tipo de dependência chamado 'dev dependency' e uma dependência dev são pacotes que

20:50.140 --> 20:53.520
são necessários apenas para desenvolvimento e teste.

20:53.740 --> 21:00.850
Então, ele nunca será enviado para um site para que um usuário final não possa ver e você pode fazer muitas coisas

21:00.850 --> 21:06.700
que mais uma vez entraremos na seção de reações, mas teremos uma seção separada chamada 'dependências'

21:06.700 --> 21:14.980
aqui que vai ter coisas diferentes que só são usadas pelos desenvolvedores, mas são tiradas automaticamente

21:15.220 --> 21:21.730
quando liberamos o produto para que ele não acrescente muito peso ao nosso projeto.

21:21.730 --> 21:22.420
Ok ok

21:22.570 --> 21:24.160
Eu prometo que isso é a última coisa.

21:24.160 --> 21:30.870
Deixe-me esclarecer isso. Se eu agora executar o teste de execução npm

21:30.870 --> 21:32.870
Então a sintaxe é 'npm run'

21:32.940 --> 21:35.450
então tudo o que o roteiro disser

21:35.460 --> 21:40.470
neste caso 'teste', eu recebo o erro 'echo':nenhum teste

21:40.480 --> 21:42.720
Especificadas."

21:42.790 --> 21:45.960
Agora isso é realmente o que está definido aqui.

21:46.190 --> 21:51.390
Os scripts do NPM permitem que você faça comentários a partir do arquivo package.json.

21:51.430 --> 22:00.200
Deixe-me te mostrar. Lembre-se como foi chato ter que fazer o browserify para fazer o pacote? bem aqui

22:00.210 --> 22:06.530
Eu posso dizer "construir" e dentro desta seção

22:09.370 --> 22:11.570
-me faça isso maior- dentro desta seção,

22:11.570 --> 22:19.850
Eu posso dizer "browserify script.js" para "bundle.js"

22:22.620 --> 22:29.520
e eu posso executar os scripts de um script de construção que automaticamente executa isso no meu terminal.

22:29.520 --> 22:32.100
Deixe-me mostrar a você, se eu salvar aqui.

22:35.140 --> 22:45.910
precisa de claro e eu vou dizer 'npm run' e, em seguida, qualquer que seja o nome do script 'build'

22:45.930 --> 22:50.260
Olhe para isso. Acabei de atualizar o browserify e ele roda o script.

22:50.430 --> 22:51.000
Muito legal.

22:51.090 --> 23:02.760
Bem, e se nós também adicionarmos o live-server também, comando para ele? '&& live-server' eu salvo e

23:02.760 --> 23:07.710
execute o mesmo comando novamente.

23:07.760 --> 23:17.410
Olhe para isso. Eu tenho minha matriz exibida, meu site está em execução e faz todos os comandos imediatamente do meu terminal.

23:17.410 --> 23:18.340
Quão legal é isso?

23:20.010 --> 23:20.500
Tudo bem.

23:20.820 --> 23:23.880
Eu acho que é o suficiente para o NPM.

23:24.000 --> 23:25.990
É uma ferramenta muito útil.

23:26.020 --> 23:31.530
Nós vamos usar muito e você vai usar muito isso no seu dia a dia e vai ficar mais confortável

23:31.530 --> 23:31.980
com isso.

23:31.980 --> 23:39.840
Quanto mais usá-lo. Na próxima seção, finalmente vamos começar a construir um aplicativo da vida real com reagir.

23:39.840 --> 23:43.400
Vamos usar alguns dos conhecimentos que reunimos até este ponto.

23:43.440 --> 23:48.010
Agora temos uma visão completa do Front-End.

23:48.240 --> 23:53.760
Embora você não se sinta extremamente confiante, verá que chegamos ao ponto em que podemos

23:53.760 --> 23:57.350
Crie aplicativos e sites realmente legais.

23:57.510 --> 24:02.880
Agora temos todas as ferramentas do nosso arsenal para criar coisas incríveis.

24:02.880 --> 24:05.980
Então, eu realmente aguardo a próxima sessão com você.

24:06.090 --> 24:07.510
Eu vou te ver nessa.

