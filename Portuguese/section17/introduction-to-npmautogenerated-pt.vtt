WEBVTT

00:02.210 --> 00:10.700
O NPM foi criado para que os desenvolvedores possam compartilhar o código JavaScript que eles escreveram. Deste jeito

00:10.790 --> 00:16.660
qualquer desenvolvedor ao redor do mundo pode pegar o código de outra pessoa que possa resolver seu problema.

00:17.780 --> 00:23.780
Isso cria uma grande base de conhecimento de scripts que as pessoas podem atualizar ou melhorar constantemente e construir

00:23.780 --> 00:26.330
Em cima de. De fato,

00:26.330 --> 00:32.140
É muito raro que um aplicativo ou um site da Web atualmente seja construído do zero.

00:32.990 --> 00:39.140
Ao usar a inteligência coletiva, podemos pegar pedaços de código que são realmente bons e construir no topo

00:39.140 --> 00:40.950
para criar nosso produto.

00:41.710 --> 00:48.070
Por exemplo, usando JavaScript, você pode escrever aplicativos de realidade virtual, mas não precisa descobrir

00:48.070 --> 00:50.120
tudo sozinho.

00:50.140 --> 00:56.980
Alguém lá já trabalhou em poder usar JavaScript VR Então você usa o código dessa pessoa para

00:56.980 --> 00:58.200
comece seu projeto.

00:58.270 --> 01:01.190
Vamos falar sobre como o NPM funciona.

01:02.650 --> 01:05.490
NPM parece com isso.

01:05.560 --> 01:13.180
Um site com uma barra de pesquisa parece com o Google, mas aqui você pode procurar pelo que chamamos de Pacotes.

01:15.210 --> 01:23.180
e esses pacotes estão localizados no NPM Registry e este Registry mantém um registro dos arquivos que possuem

01:23.180 --> 01:25.130
foi submetido.

01:25.180 --> 01:33.100
Qualquer um pode enviar esses arquivos que são chamados de pacotes ou módulos e eles contêm duas coisas;

01:33.100 --> 01:35.640
Um arquivo JavaScript e um arquivo package.json.

01:35.680 --> 01:43.010
e o arquivo package.json que você nunca viu antes é um metarquivo que descreve

01:43.280 --> 01:45.020
este pacote.

01:45.230 --> 01:54.540
Então você pode ver aqui que este registro NPM é apenas um registro de todos esses arquivos de JavaScript que

01:54.570 --> 01:55.770
outras pessoas escreveram.

01:56.850 --> 02:03.090
E a ideia é ter pequenos arquivos JavaScript que fazem uma coisa realmente muito boa para que outras pessoas

02:03.270 --> 02:03.950
pode usá-lo.

02:05.140 --> 02:16.820
Você então compõe ou combina diferentes partes de código e pacotes diferentes em seu projeto para adicionar funcionalidade

02:17.660 --> 02:22.400
e não tem que reescrever algo que já tenha sido escrito por outra pessoa.

02:23.110 --> 02:29.980
Então, como você pode ver aqui, eu diria que uma pessoa que acabou de escrever um arquivo JavaScript que é realmente

02:29.980 --> 02:30.970
muito útil.

02:30.970 --> 02:39.100
Bem, eles acham que outras pessoas podem usá-lo, então eles o empurram para o NPM Registry e

02:39.100 --> 02:46.670
usando a barra de pesquisa aqui, alguém pode encontrar o seu pacote, talvez eles estejam procurando por um arquivo de script

02:46.720 --> 02:52.460
que cria uma lista de matrizes para pessoas interessadas em gatos.

02:52.570 --> 03:02.100
Bem, eles são capazes de encontrar esse arquivo e baixá-lo do NPM Registry em seu computador.

03:02.170 --> 03:05.140
Então, vamos falar sobre os benefícios disso.

03:06.470 --> 03:11.360
Bem, você obtém conhecimento dos outros, talvez você não saiba tudo,

03:11.370 --> 03:13.560
talvez os outros sejam melhores que você

03:13.630 --> 03:18.280
esta certa coisa bem você usa esse conhecimento coletivo para usar o código deles / delas.

03:19.180 --> 03:21.580
Mas também há uma desvantagem nisso.

03:21.780 --> 03:24.770
Nem todos os pacotes são bons códigos.

03:24.840 --> 03:34.080
Qualquer um pode colocar seus arquivos no NPM, e você também está adicionando mais bytes ao seu projeto, o que faz com que

03:34.080 --> 03:36.210
tamanho do projeto ainda maior.

03:36.210 --> 03:43.940
Se você tiver todos esses arquivos no seu projeto, bem, isso é um monte de arquivos e cada um vai

03:43.940 --> 03:47.820
tem que ser enviado do servidor para o navegador.

03:48.050 --> 03:54.110
E como você sabe das seções anteriores, nós queremos minimizar o tamanho do nosso projeto, então construímos rapidamente

03:54.250 --> 04:01.540
aplicativos da web e há uma arte para encontrar bons pacotes NPM e você vai se acostumar com isso depois de um pouco de

04:01.540 --> 04:02.300
experiência.

04:02.320 --> 04:04.000
Então não se preocupe.
 
04:04.270 --> 04:08.380
Agora você também vê aqui que eu tenho algo chamado fio.

04:08.690 --> 04:15.320
O fio ainda usa o NPM Registry, mas você pode vê-lo de vez em quando, assim como o NPM.

04:15.370 --> 04:19.010
É uma ferramenta para pegar coisas do Registro NPM.

04:19.030 --> 04:26.560
Nós não vamos falar sobre isso neste curso, mas tenha em mente que ambos os fios e NPM são muito muito semelhantes.

04:26.560 --> 04:32.800
Se você aprender um, então você conhece o outro, então não tenha medo se você ouvir falar de um projeto que usa fios

04:32.800 --> 04:38.470
em vez de NPM. Agora você pode navegar pelo NPM e encontrar coisas.

04:38.790 --> 04:42.840
Mas geralmente há três tipos de pacotes.

04:43.060 --> 04:46.640
Um é o pacote que você pode usar no navegador.

04:46.640 --> 04:52.390
Então, no Front End, você pode baixar o JQuery do NPM.

04:52.850 --> 04:58.010
Você pode baixar todos os tipos de scripts que o ajudam no fluxo de trabalho de front-end.

04:58.030 --> 05:04.330
O segundo tipo é o que dá a você novos comandos que você pode usar na linha de comando e eu mostro a você

05:04.330 --> 05:06.760
um exemplo que mais adiante nesta seção.

05:06.790 --> 05:15.100
E finalmente o terceiro tipo de pacote NPM é uma vez que você pode usar o Node.js no Back End.

05:15.100 --> 05:21.640
E isso pode soar assustador para você, mas não se preocupe quando chegarmos à seção Node.js, eu vou mostrar alguns dos pacotes do Node

05:21.640 --> 05:25.240
que você pode usar, mas é praticamente a mesma coisa que JavaScript.

05:25.480 --> 05:29.610
De fato, o NPM representa o Node Package Manager.

05:29.620 --> 05:35.200
Ele foi inicialmente criado para o nó, mas era tão bom e tão popular que agora você pode usá-lo para o Front End

05:35.200 --> 05:36.220
também.

05:36.930 --> 05:38.820
Mas é tudo a mesma coisa.

05:38.820 --> 05:40.430
Tudo funciona da mesma maneira.

05:40.530 --> 05:43.330
Como eu disse antes, eles são apenas scripts que são

05:43.350 --> 05:49.710
você é capaz de usar o que outras pessoas escreveram e vamos usá-las muito neste curso.

05:49.710 --> 05:53.730
Agora você pode estar se perguntando por que estamos aprendendo isso.

05:53.790 --> 05:57.600
e esse curso? Quero dizer, isso é realmente importante?

05:57.960 --> 06:00.710
Sim, na verdade, são três que devem fazer as coisas.

06:00.810 --> 06:06.570
Agora, ao iniciar um projeto em 2018, você o verá em todos os projetos.

06:06.570 --> 06:09.690
Uma é que, bem, eles têm um arquivo HTML,

06:09.820 --> 06:12.610
Arquivo CSS ou arquivo JavaScript.

06:12.960 --> 06:18.660
Eles podem ter -eles podem ter vários deles, mas todos os projetos têm aqueles especialmente aqueles que são

06:18.660 --> 06:19.820
baseado na web.

06:19.830 --> 06:27.060
Você também precisa ter seu projeto no github e usar o controle de código-fonte como o Git. Ninguém armazena seus próprios

06:27.060 --> 06:28.260
projeto em seu computador.

06:28.260 --> 06:31.820
Eles sempre têm isso com controle de origem.

06:31.950 --> 06:39.090
E finalmente você gerencia dependências que são pacotes que outras pessoas escreveram. Com o NPM usando

06:39.300 --> 06:41.480
arquivo package.json.

06:41.490 --> 06:48.300
Então, nesta seção, vamos trabalhar nisso e terminar a configuração de como um projeto típico

06:48.300 --> 06:52.520
parece que em 2018 e nós sabemos como fazer os dois primeiros, certo?

06:52.770 --> 06:58.650
Agora, nos próximos dois vídeos, vou mostrar como começar a usar o NPM para baixar arquivos e usar

06:58.650 --> 07:01.900
package.json para gerenciar esses arquivos.

07:02.050 --> 07:07.060
É uma parte crítica do fluxo de trabalho de um desenvolvedor. Então eu vou te ver no próximo. tchau tchau.
