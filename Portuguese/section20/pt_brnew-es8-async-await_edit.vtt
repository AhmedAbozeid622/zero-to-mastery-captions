WEBVTT

00:01.210 --> 00:08.290
Ah, o novo recurso em javascript que todo mundo está falando ultimamente 'Async Await'. Neste vídeo, vamos aprender sobre o que

00:08.290 --> 00:12.830
é todo esse hype. Para começar Você deve

00:12.890 --> 00:19.880
primeiro saber que o Async Await faz parte do ES8 e se baseia em promessas.

00:20.000 --> 00:22.280
Se você não tem certeza do que são promessas.

00:22.280 --> 00:25.840
Verifique o vídeo primeiro.

00:25.960 --> 00:34.420
Agora, embaixo do capô, uma função assíncrona é uma função que retorna uma promessa. Mas o benefício do Async Await é que

00:34.430 --> 00:37.710
ele facilita a leitura do código.

00:38.110 --> 00:39.430
Deixe-me mostrar o que eu quero dizer.

00:39.760 --> 00:44.750
Essa é uma promessa que acabamos de fazer.

00:44.770 --> 00:47.340
É uma função de mover jogador.

00:47.350 --> 00:53.470
Imagine que estamos criando um jogo e ele tem a distância mais a direção que o jogador se move

00:53.470 --> 00:59.560
e, se quisermos mudar isso, temos 'mover jogador' '. depois ',' mover jogador 'novamente,' mover jogador 'novamente.

00:59.650 --> 01:00.810
'mover jogador' novamente.

01:01.150 --> 01:03.670
Agora, este é um código assíncrono.

01:03.730 --> 01:06.200
Sabemos que o jogador do movimento vai acontecer, então

01:06.280 --> 01:08.390
Isso vai acontecer, então isso, então isso.

01:08.500 --> 01:16.780
Se quisermos ter algum tipo de ação aqui, podemos envolvê-lo entre colchetes e registrar o console nessa extração.

01:16.780 --> 01:21.370
Tudo o que você pode fazer com promessas. com async aguardam

01:21.410 --> 01:24.240
Seria algo parecido com isto.

01:27.300 --> 01:28.420
Oque esta acontecendo aqui.

01:29.770 --> 01:37.660
O grande benefício do async aguardar é que ele facilita a leitura do código e eu sei que você provavelmente não está pensando nisso agora,

01:37.660 --> 01:41.230
porque essa é uma nova sintaxe, mas apenas dê uma chance.

01:41.240 --> 01:48.850
O objetivo com async aguardam é fazer com que o código pareça síncrono - um código que seja assíncrono.

01:48.850 --> 01:54.890
Agora, se você se lembra de uma promessa em javascript, é como 'eu te devo'.

01:55.020 --> 01:58.180
Prometo devolver algo para você no futuro.

01:58.990 --> 02:05.140
Algo como uma chamada AJAX redimensionando uma imagem, obtendo algumas informações de um banco de dados.

02:05.140 --> 02:07.040
Tudo isso leva tempo.

02:07.180 --> 02:11.910
Em vez de esperar por eles, queremos continuar com nossas vidas e apenas tê-lo. Deixe-nos

02:11.920 --> 02:13.510
saber quando estiver pronto.

02:13.780 --> 02:18.220
Mas continuaremos trabalhando em nossas próprias coisas enquanto estiver fazendo isso em segundo plano.

02:18.700 --> 02:22.290
Fazemos dessa maneira, porque é assim que o javascript funciona.

02:22.330 --> 02:30.010
Se você se lembra do nosso vídeo "Como funciona o Javascript", falamos sobre o javascript ser segmentado em uma única thread. Para que nossos programas sejam eficientes, podemos

02:30.010 --> 02:34.270
usar a programação assíncrona para fazer essas coisas.

02:34.450 --> 02:38.670
Então, as promessas nos ajudam a resolver isso e ficou assim.

02:39.560 --> 02:45.660
Agora lembre-se do que eu disse no início, async aguardam código são apenas promessas.

02:45.770 --> 02:53.960
Debaixo do capô, chamamos esse açúcar sintático de algo que ainda faz a mesma coisa, mas é apenas uma

02:54.170 --> 02:56.930
sintaxe diferente para torná-lo mais bonito.

02:56.960 --> 03:06.940
Açúcar sintático. E promessas têm isso. por outro lado, você terá que encadear

03:06.940 --> 03:12.420
async, por outro lado, com esta palavra assíncrona e algumas aguardam palavras-chave.

03:12.700 --> 03:15.180
Então, vamos ver o que tudo isso significa.

03:15.980 --> 03:20.560
Embora essas duas coisas façam o mesmo com a função playerStart.

03:20.560 --> 03:25.650
Primeiro declaramos uma função como assíncrona. Lideramos o javascript know-

03:25.660 --> 03:32.220
"Ei, essa é uma função assíncrona. "E nós a declaramos com a palavra função e depois com o nome da função.

03:32.270 --> 03:39.800
Agora podemos fazer o que quisermos dentro dessa função, mas temos acesso a uma nova palavra porque usamos a

03:39.890 --> 03:42.460
palavra assíncrona para definir essa função.

03:42.620 --> 03:50.350
Temos a palavra-chave 'aguardar' e ela diz: e podemos removê-la por enquanto.

03:51.330 --> 03:57.890
Esta palavra-chave 'aguarde' diz "ei, faça uma pausa nesta função até que eu tenha algo para você. "Então, estamos aguardando

03:58.920 --> 04:01.580
a resposta.

04:02.360 --> 04:08.900
E você pode usar essa palavra-chave 'aguardar' na frente de qualquer função que retorne uma promessa que sabemos que

04:08.910 --> 04:10.050
o jogador move.

04:10.220 --> 04:16.760
E uma vez que a promessa é resolvida, a função se move para a próxima linha e aguarda o próximo

04:17.030 --> 04:20.770
movimento e aguarda o próximo movimento e aguarda o próximo movimento.

04:20.840 --> 04:27.200
Agora, o mais interessante é que, em vez de encadear dessa maneira,

04:27.410 --> 04:34.380
agora posso atribuir como programação assíncrona, variável primeiro para aguardar isso e posso atribuir segundo

04:37.770 --> 04:46.070
para aguardar isso e primeiro e segundo terão o resultado de cada função, mas em um variável.

04:46.150 --> 04:48.220
Portanto, parece muito síncrono.

04:48.250 --> 04:50.980
Você não está usando '. então 'você não está encadeando.

04:50.980 --> 04:54.920
Você só tem uma programação síncrona simples e está esperando que isso aconteça.

04:54.930 --> 04:56.590
Então, esperando que isso aconteça.

04:57.130 --> 05:02.720
Mas vamos usar um exemplo mais realista, para realmente entendermos isso.

05:02.920 --> 05:07.860
Se usarmos nossa função de busca e novamente se você se lembrar da função de busca.

05:08.050 --> 05:10.010
Isso é uma promessa.

05:11.190 --> 05:15.270
Você vê que temos uma promessa.

05:15.430 --> 05:26.070
Portanto, com a função de busca, se usarmos nosso recurso de API favorito, espaço reservado json. Vamos pegar os usuários aqui para que

05:26.080 --> 05:34.800
o ponto final dos usuários. Se queremos buscar alguma coisa, retornamos uma promessa para fazermos a. então resposta teríamos que executá-lo.

05:34.810 --> 05:41.540
json E finalmente.

05:41.540 --> 05:41.540
depois consola. registre a resposta ou os dados que obtemos.

05:42.780 --> 05:51.990
Então, novamente, se eu copiar e

05:51.990 --> 06:01.280
colar isso em nosso console, obtemos uma promessa que está pendente inicialmente, então ela é resolvida e eu recebo meus usuários.

06:01.280 --> 06:06.050
Agora, como podemos transformar isso em uma função assíncrona.

06:06.080 --> 06:09.010
Novamente, o mesmo recurso funcionará da mesma forma, mas parecerá um pouco mais limpo.

06:09.080 --> 06:16.060
Será açúcar sintático.

06:16.210 --> 06:18.340
Bem, se você

06:18.620 --> 06:27.950
se lembrar, temos que declarar uma função com palavra-chave assíncrona e essa função dirá fetchUsers e

06:28.400 --> 06:32.150
buscar usuários Terão isso dentro dela.

06:32.430 --> 06:38.740
Mas agora podemos usar na frente de qualquer coisa que retorne uma promessa.

06:38.980 --> 06:43.580
A palavra-chave 'aguardar'.

06:43.640 --> 06:46.290
Então agora essa função será pausada até obtermos uma resposta da busca.

06:46.770 --> 06:52.050
Então, posso dizer que a constante 'resposta'

06:52.100 --> 06:57.150
aguarda a chamada de busca. E agora, em vez de usar o. então posso dizer que const 'data'

06:59.060 --> 07:13.750
é igual a 'aguardar' 'resposta. json () 'porque de novo' resposta. json 'retorna uma promessa para que eu possa colocar a palavra-chave' aguardar '. E então finalmente eu posso apenas

07:14.710 --> 07:21.790
'consolar. log (data) 'Tudo bem, vamos

07:21.790 --> 07:27.140
copiar e colar isso e ver se funciona.

07:29.120 --> 07:31.570
Tudo certo.

07:35.610 --> 07:36.100
Agora eu chamo a função fetchUsers, que é a função assíncrona.

07:36.150 --> 07:42.980
E eu cometi um erro aqui.

07:43.160 --> 07:45.320
Não há resposta, é 'resp' resposta curta. Lá vai você, vamos tentar isso de novo.

07:45.350 --> 07:51.050
Então, vamos atualizar isso.

07:51.620 --> 07:53.460
Copie e cole, execute a função fetchUsers e veja isso.

07:54.510 --> 08:01.990
Temos nossa promessa que foi resolvida.

08:02.130 --> 08:05.940
E temos para nossos usuários

08:06.240 --> 08:18.200
nada diferente da promessa, mas agora temos um bom código passo a passo que diz buscar isso.

08:18.210 --> 08:21.210
Obtenha uma resposta, execute-a através do método json e, em seguida, console 'log' de dados. E você pode estar pensando que isso

08:21.210 --> 08:29.450
é realmente mais bonito do que o que tínhamos antes.

08:29.450 --> 08:34.070
Vamos lembrar o que tínhamos antes.

08:34.370 --> 08:36.470
Isto é o que tínhamos antes.

08:43.920 --> 08:45.590
É isso que temos agora.

08:45.780 --> 08:47.750
E alguns de vocês podem argumentar que a primeira forma promissora parece melhor.

08:48.630 --> 08:52.760
E sabe de uma coisa.

08:53.130 --> 08:53.810
É preferência pessoal e este é um exemplo simples.

08:53.850 --> 08:57.030
Portanto, há momentos em que isso realmente parece muito mais limpo.

08:57.040 --> 09:00.100
Mas acredito muito em fazer o que é mais fácil de ler e entender para você e seus colegas de equipe.

09:00.360 --> 09:07.340
Vamos fazer um último exemplo. Vamos fazer algo ainda mais realista.

09:07.560 --> 09:12.850
Digamos que temos uma lista de

09:12.960 --> 09:20.130
URLs e, desta vez, temos os usuários, postagens e álbuns da API de espaço reservado do json.

09:20.130 --> 09:22.390
E nós queremos percorrer todos eles.

09:23.660 --> 09:25.810
Se você se lembra em nosso vídeo de promessas, tivemos algo parecido com isto.

09:25.850 --> 09:30.270
Vamos remover isso para que você possa vê-lo melhor.

09:30.500 --> 09:32.550
Então tivemos algo parecido com isto.

09:32.870 --> 09:34.010
Nós prometemos. todos - mapeamos os URLs. Buscamos as URLs e respondemos com

09:34.010 --> 09:43.900
o JSON e, em seguida, retornamos a matriz e a matriz tinha usuários, postagens, álbuns e também fizemos um. pegar.

09:45.400 --> 09:54.020
Então, novamente, apenas para garantir que isso funcione

09:54.030 --> 10:03.440
e copie isso, coloque-o em nosso console e vemos que obtemos dados de nossos usuários, postagens e álbuns.

10:03.440 --> 10:06.860
Então está funcionando.

10:06.860 --> 10:07.990
Vamos converter isso em uma função assíncrona.

10:08.270 --> 10:10.830
Bem, vamos começar fazendo um 'const getData' e isso será (igual) uma função assíncrona.

10:11.300 --> 10:21.970
E quero apenas ressaltar que fiz isso desta vez com a expressão da função, em vez da maneira que fizemos da última vez que

10:23.610 --> 10:28.470
era função assíncrona e, em seguida, o nome da função.

10:28.470 --> 10:31.900
Mas eu só quero lhe mostrar os dois lados.

10:32.040 --> 10:33.570
Tudo bem, então como podemos fazer uma promessa? todos'? Bem, se você se lembra,

10:35.350 --> 10:44.030
agora podemos colocar a palavra-chave 'aguardar' na frente de qualquer promessa. Assim, podemos colocar a palavra-chave 'aguardar' na frente da promessa. tudo Então posso dizer que const-

10:44.060 --> 10:50.400
e isso é

10:50.570 --> 11:02.760
um pouco de mágica ES6 de desestruturação - posso dizer usuários, postagens e álbuns que vamos receber serão iguais a 'aguardar' e depois a promessa. tudo o que já temos.

11:03.800 --> 11:12.700
Então, vamos copiar isso.

11:13.070 --> 11:14.450
Nós vamos copiar a promessa. tudo e coloque aqui.

11:14.460 --> 11:19.170
Tudo certo.

11:20.080 --> 11:20.680
E agora podemos apenas registrar o que tínhamos. Podemos

11:20.800 --> 11:32.750
copiar e colar logo após 'aguardar' todas as promessas que teremos 'usuários', 'postagens' - se eu puder escrever. e depois 'álbuns'. e, em vez de Array, porque

11:33.270 --> 11:42.590
fizemos isso com

11:42.830 --> 11:50.480
a destruição, podemos apenas dizer 'usuários' 'postagens' e 'álbuns'.

11:53.260 --> 11:55.250
Tudo bem, então vamos ver se isso funciona. Copie e

11:55.510 --> 12:05.510
cole isso, execute getData e veja isso.

12:08.220 --> 12:09.030
Obtivemos exatamente os mesmos resultados.

12:09.090 --> 12:12.920
Muito legal.

12:13.890 --> 12:14.670
Mas pode haver uma coisa que você notou aqui que é a maneira promissora que temos. pegar.

12:15.070 --> 12:23.420
Se alguma dessas falhas falharmos, queremos capturar esses erros, como podemos fazer isso com a espera assíncrona.

12:23.490 --> 12:31.590
No momento, não estamos detectando nenhum desses erros.

12:31.590 --> 12:33.740
Esta é a parte da qual muitas pessoas não são grandes fãs.

12:35.490 --> 12:38.840
Mas é algo que, quando nos acostumamos, não é tão ruim. JavaScript tem algo chamado 'try catch blocks'.

12:39.060 --> 12:47.520
e é quando ela vê a palavra 'try' (executada) e executa automaticamente o que quer que esteja dentro dela.

12:47.790 --> 12:55.770
No nosso caso, todo esse bloco queremos que ele

12:55.770 --> 13:08.130
seja executado em um bloco try e, em seguida, 'try' vem com um bloco catch.

13:08.160 --> 13:09.200
Portanto, tente um bloco de captura e dentro da captura, se algo falhar aqui.

13:09.540 --> 13:15.450
Bem, podemos pegá-lo aqui para que possamos consolar. log 'oops' Agora, digamos que eu tenha digitado incorretamente um dos

13:15.690 --> 13:19.460
URLs e copie

13:19.550 --> 13:20.190
isso. Vamos tentar.

13:21.890 --> 13:29.760
Teremos os novos URLs.

13:30.020 --> 13:31.720
Deixe-me esclarecer isso. Novos URLs com o URL incorreto para um deles.

13:31.820 --> 13:37.880
Vamos copiar e colar o getData e você verá aqui que temos um erro de sintaxe.

13:37.880 --> 13:44.270
E isso é porque uma coisa que você deve se lembrar com

13:44.560 --> 13:53.570
a captura é que a captura recebe um erro e esse erro pode ser registrado no console,

13:53.570 --> 13:55.390
se você desejar. Então, vamos apenas consolar o log e tentar isso novamente.

13:55.430 --> 14:00.310
Desta vez, chamaremos apenas este de getData1 -perfect.

14:01.530 --> 14:07.230
Agora, se eu limpar isso um pouco e getData1

14:07.240 --> 14:14.770
com o bloco try catch, eu recebo o erro 'oops' Type falhou ao

14:15.100 --> 14:15.910
buscar.

14:15.920 --> 14:17.420
Então, eu recebo o bloco catch com o erro, como fizemos com a promessa. tudo apenas usando promessas.

14:17.510 --> 14:26.860
E aí está.

14:27.400 --> 14:28.400
É isso aí.

14:28.420 --> 14:29.250
O Async

14:29.330 --> 14:37.090
aguarda, embora seja intimidador a princípio, porque há um pouco de nova sintaxe que torna as coisas bastante agradáveis e com aparência síncrona.

14:37.090 --> 14:40.130
Simplesmente temos uma variável à qual atribuímos a

14:40.210 --> 14:48.370
promessa de espera e, em seguida, a função faz uma pausa lá até a promessa retornar e, em seguida, continua com o log do console.

14:48.370 --> 14:53.710
E você só precisa se lembrar da tentativa de bloquear blocos aqui para detectar seus erros e é isso.

14:53.860 --> 14:59.690
Agora você é um assíncrono aguardando Mestre.

14:59.710 --> 15:02.280
Você pode usar o que preferir.

15:02.350 --> 15:05.170
Como eu disse no final do dia, promessas de uso ou

15:05.170 --> 15:12.370
assíncronas aguardam funções baseadas em qualquer uma que seja mais simples para você e sua equipe, mas, esperançosamente, quando você encontrar essas duas opções, agora ficará muito mais confortável.

15:12.370 --> 15:19.510
Vejo você no próximo. Tchau tchau.
