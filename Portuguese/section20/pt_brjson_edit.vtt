WEBVTT

00:00.900 --> 00:06.940
Bem-vindo de volta, há uma peça que falta com o diagrama que criamos no vídeo

00:06.980 --> 00:08.620
anterior em HTTP.

00:08.790 --> 00:16.860
Nós conversamos sobre parâmetros de URL como o "google". com / about "e parâmetros de string de consulta que

00:16.860 --> 00:20.480
podemos fazer com GET, mas e os dados

00:20.490 --> 00:23.960
quando publicamos algo. Podemos postar alguma coisa?

00:24.000 --> 00:31.970
Bem, na verdade não. Ao trocar dados entre um navegador e um servidor, os dados podem ser apenas texto.

00:32.070 --> 00:40.940
Portanto, não podemos simplesmente enviar um objeto javascript, como um usuário com o nome John e o sobrenome doe.

00:41.010 --> 00:44.070
Um porque o HTTP não vai entender.

00:44.460 --> 00:49.070
Mas também se estivéssemos enviando esses dados para os servidores do Google. Bem,

00:49.220 --> 00:56.700
diferente do Front-End, o navegador da web em que HTML, CSS e Javascript são padrão quando eu envio um objeto

00:56.700 --> 00:58.980
de usuário para o servidor.

00:59.190 --> 01:02.500
Um servidor pode usar

01:02.640 --> 01:13.010
qualquer tipo de linguagem como Python, Go, PHP. Se enviarmos a eles um tipo de script java, como um objeto, eles realmente ficarão confusos porque

01:13.010 --> 01:14.890
não terão idéia do que é.

01:15.260 --> 01:16.790
Essa não é realmente a linguagem deles.

01:17.820 --> 01:22.410
O texto, por outro lado, pode ser entendido por todos.

01:22.440 --> 01:28.050
Portanto, precisamos de uma maneira padrão de enviar dados pelos fios e recebê-los.

01:28.050 --> 01:32.360
É isso que é o JSON e o que falaremos sobre isso neste vídeo.

01:32.580 --> 01:40.620
JSON significa notação de objeto javascript. É uma sintaxe para armazenar e trocar dados e é um

01:40.800 --> 01:43.540
texto escrito com notação de objeto javascript.

01:43.650 --> 01:45.180
Vamos olhar para o segundo ponto aqui.

01:45.270 --> 01:49.320
JSON é uma sintaxe para armazenar e trocar dados.

01:49.320 --> 01:52.530
É usado para enviar dados entre máquinas.

01:52.650 --> 02:05.800
É o único caminho? Não, também há XML. XML e JSON podem ser usados para receber dados de um servidor

02:05.860 --> 02:06.760
da web.

02:07.920 --> 02:10.020
E você pode ver as diferenças entre os dois.

02:10.020 --> 02:12.630
Estes são os mesmos dados.

02:12.630 --> 02:16.970
Apenas nomes e sobrenomes de funcionários e XML usam esse HTML como

02:16.980 --> 02:25.740
sintaxe, enquanto o JSON usa bem um objeto - objeto javascript como sintaxe. Mas o padrão agora é mais voltado para o JSON, porque

02:25.740 --> 02:31.740
quando você está escrevendo código de front-end em Javascript, recuperar dados JSON torna mais fácil

02:31.740 --> 02:37.560
carregar esses dados em uma árvore de objetos, porque é tão semelhante a um objeto

02:37.560 --> 02:40.130
javascript quanto a um XML.

02:40.880 --> 02:48.500
E o formato JSON é uma maneira mais sucinta que economiza largura de banda e melhora o tempo de resposta ao enviar

02:48.740 --> 02:51.590
mensagens entre o cliente e o servidor.

02:53.030 --> 03:00.810
E XML simplesmente não é muito eficiente. Portanto, o JSON agora é mais um padrão, você ainda verá o XML,

03:00.810 --> 03:04.300
mas está desatualizado, portanto não falaremos sobre isso neste vídeo.

03:04.470 --> 03:13.770
Mas ambos são usados para transferir dados entre duas máquinas que podem não falar o mesmo idioma.

03:14.190 --> 03:20.330
JSON no entanto, embora parecido com Javascript, é um pouco diferente.

03:20.340 --> 03:24.210
Ele possui essas aspas duplas para propriedades pares.

03:24.210 --> 03:28.440
Tudo tem que ser uma corda e colocado entre aspas duplas.

03:28.920 --> 03:38.120
E bem, parece que é uma sintaxe de objeto. Mas o JSON pode ser lido por qualquer idioma.

03:39.100 --> 03:45.250
Se os servidores do Google estiverem executando um idioma diferente, eles entenderão o JSON, poderão

03:45.760 --> 03:50.550
modificar esse JSON, que é apenas texto em sua própria versão.

03:50.560 --> 03:59.100
Então agora podemos converter isso em um objeto JSON, enviá-lo por HTTP.

04:00.390 --> 04:06.780
E então os servidores do Google ou o que quer que seja mudam para seu próprio idioma e entendem e

04:06.780 --> 04:08.010
enviam uma resposta.

04:08.010 --> 04:13.270
Novamente, digamos, por exemplo, que estava retornando - o usuário tem dinheiro 345 dólares.

04:13.620 --> 04:22.330
Bem, ele irá modificá-lo para o JSON enviá-lo por cabo e, em seguida, o navegador da Web o

04:22.330 --> 04:25.080
alterará de JSON para javascript.

04:25.270 --> 04:26.540
Mas como podemos fazer isso?

04:26.590 --> 04:31.550
Felizmente para nós, o javascript vem com sua própria função JSON.

04:33.350 --> 04:39.440
Nós temos JSON. analisar e JSON. stringify com JSON. analisar se

04:39.440 --> 04:50.150
tivéssemos JSON novamente neste formulário, simplesmente o empacotamos como o parâmetro de análise e ele retornará um objeto.

04:50.210 --> 04:53.100
Da maneira oposta ao stringify, podemos atribuir

04:53.270 --> 04:58.750
a ele um objeto como o que acabamos de criar e ele retornará JSON.

04:59.300 --> 05:09.490
Portanto, essa variável myJSON agora pode ser colocada na solicitação HTTP para enviá-la pela ligação ou o servidor pode

05:09.490 --> 05:11.410
responder com myJSON.

05:11.410 --> 05:20.380
Então, vamos revisar JSON como texto e podemos converter qualquer objeto javascript em JSON e enviar JSON para o

05:20.380 --> 05:21.060
servidor.

05:21.070 --> 05:29.080
Também podemos converter qualquer JSON recebido do servidor em objetos javascript. Dessa forma, podemos trabalhar com dados como objetos

05:29.080 --> 05:36.940
javascript sem tradução complicada e esse texto pode ser usado como formato de dados para qualquer

05:36.940 --> 05:38.640
linguagem de programação.

05:38.770 --> 05:40.620
Então, vamos passar

05:40.620 --> 05:48.530
pelo fluxo mais uma vez agora com isso completo. Objeto de usuário antes de enviá-lo com HTTP,

05:48.610 --> 05:51.030
farei "JSON. stringify (user);

05:51.070 --> 06:02.210
"Portanto, agora é convertido em uma string JSON e essa string JSON será enviada por HTTP para os servidores do

06:02.210 --> 06:02.940
Google.

06:03.080 --> 06:08.840
Então vai dizer JSON. analise esse usuário para que ele o entenda.

06:08.870 --> 06:11.620
Vamos dizer que ele estava executando Javascript ou Node.

06:11.930 --> 06:19.790
Agora ele entenderá o usuário. Eles dirão - ah, ele quer o valor em dinheiro para esse usuário.

06:19.990 --> 06:29.860
Então agora ele recebe dinheiro 345 da conta. Isso é a variável do dinheiro. Envia-o com um código de

06:29.860 --> 06:32.070
status 200 E

06:32.240 --> 06:42.880
agora o navegador da Web pode analisar essa sequência que recebeu e ver que, sim, tenho

06:42.880 --> 06:52.060
uma quantia variável de US $ 345. E não se preocupe, quando chegarmos à seção de back-end em

06:52.060 --> 07:01.000
alguns vídeos, mostraremos exatamente como fazer isso no código. Como fazer solicitações HTTP, usar JSON, usar métodos GET, POST, PUT,

07:01.000 --> 07:03.540
DELETE e também mostrarei como fazer isso

07:03.640 --> 07:05.720
em nosso projeto final.

07:05.860 --> 07:11.830
Mas agora esse diagrama, embora um pouco confuso, deve fazer um pouco mais de sentido e você

07:11.830 --> 07:14.930
deve entender agora como as coisas estão funcionando.

07:16.290 --> 07:23.120
No próximo vídeo, apresentarei algo que mudou a navegação na web em 2006.

07:23.410 --> 07:25.060
Vejo você nesse. Tchau tchau.
