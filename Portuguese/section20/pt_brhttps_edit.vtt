WEBVTT

00:01.450 --> 00:07.380
Em 1989, Tim Berners-Lee inventou o HTML que mudou o mundo.

00:07.400 --> 00:13.930
Mas o HTML realmente não faria muito se não pudéssemos buscar documentos de todo o mundo e computadores diferentes.

00:13.930 --> 00:16.860
Para que isso

00:16.870 --> 00:24.280
aconteça, Tim construiu o 'Hypertext Transfer Protocol' ou HTTP.

00:24.290 --> 00:29.810
Agora lembre-se dessas setas dos diagramas que tivemos.

00:30.020 --> 00:37.070
Dissemos a você que essas setas eram simplesmente os fios e cabos conectados que conectavam a rede

00:37.250 --> 00:37.860
mundial.

00:38.840 --> 00:39.960
"Isso certo?

00:39.980 --> 00:46.590
Você se lembrou do diagrama. "Mas você vê que estes são apenas fios.

00:46.610 --> 00:53.840
Não há instruções sobre como fazer as coisas para as quais você precisa de algo chamado protocolo.

00:53.840 --> 01:00.830
Pense nisso como um padrão que todos seguem. Se todos concordarem, o

01:00.830 --> 01:11.570
protocolo funcionará e poderá ser usado por todos. O HTTP que eu tenho aqui é um protocolo que permite a busca de recursos, como

01:11.700 --> 01:12.630
documentos HTML.

01:12.670 --> 01:17.470
Quero dizer, está no nome certo Hypertext Transfer Protocol.

01:17.540 --> 01:24.120
Agora, com o uso de HTML e HTTP, agora temos a World Wide Web.

01:24.260 --> 01:31.610
Podemos pegar arquivos HTML e recebê-los se formos ao 'google. com / about ', vamos para a página sobre HTML,

01:31.610 --> 01:34.260
que a agarramos e a recebemos.

01:34.280 --> 01:43.290
Portanto, HTTP é o protocolo ou as regras que usamos sobre os fios.

01:43.440 --> 01:50.550
É a base de qualquer troca de dados na web e abre caminho para algo

01:50.730 --> 02:01.870
chamado protocolo de servidor cliente, o que significa que as solicitações são iniciadas pelo destinatário, que no nosso caso é o navegador da web.

02:01.950 --> 02:09.240
Então eles enviam uma solicitação usando HTTP. O servidor agora entende o que o navegador

02:10.200 --> 02:18.000
está dizendo porque está falando em HTTP e o servidor agora pode responder com HTML, e o navegador

02:18.270 --> 02:20.310
entende porque está falando por

02:20.340 --> 02:21.780
HTTP novamente.

02:21.940 --> 02:29.950
Portanto, você deve pensar no HTTP como uma linguagem comum que um cliente e um servidor podem usar para se comunicar.

02:29.950 --> 02:33.930
Eles estão simplesmente dizendo: Ei, você pode me dar este documento.

02:34.170 --> 02:36.570
E o servidor pode dizer sim, não há problema.

02:36.630 --> 02:37.920
Aqui está.

02:37.920 --> 02:43.330
Até o momento, não conversamos com um servidor em nosso aplicativo, pois não?

02:43.440 --> 02:50.160
Construímos aplicativos de front-end ou aplicativos voltados para o cliente usando HTML, CSS, javascript

02:50.190 --> 02:54.120
e reagimos, mas vivíamos em nosso próprio mundo.

02:54.340 --> 03:01.860
Não há comunicação com outro computador. O HTTP nos permite agora nos comunicar com os servidores, com

03:01.860 --> 03:02.990
o mundo exterior.

03:03.060 --> 03:06.050
Então, vamos examinar a terminologia mais uma vez.

03:06.200 --> 03:15.780
Clientes e servidores podem se comunicar trocando mensagens individuais. As mensagens enviadas pelo cliente

03:16.320 --> 03:28.180
geralmente são chamadas de solicitações e as mensagens enviadas pelo servidor são chamadas de respostas.

03:28.220 --> 03:35.120
Portanto, se HTTP é a linguagem que nos permite comunicar entre esses dois, ensine-me algumas das

03:35.120 --> 03:35.990
palavras corretas.

03:36.290 --> 03:37.690
Quero dizer, é uma boa pergunta.

03:37.820 --> 03:44.690
E para sua sorte, o HTTP é muito fácil de aprender, porque você tem apenas algumas palavras e eu vou mostrar o que

03:44.690 --> 03:45.940
elas são no momento.

03:46.070 --> 03:51.910
Você tem 'GET', 'POST', 'PUT'.

03:51.990 --> 03:53.880
E finalmente você tem 'DELETE'.

03:57.360 --> 04:00.130
e agora você está pensando "umm é isso? "E sim,

04:00.130 --> 04:04.880
o HTTP é lindo porque é simples.

04:04.920 --> 04:06.660
Você não precisa complicar demais as coisas.

04:07.750 --> 04:15.520
Você aprende essas quatro palavras e esses idiomas e pode criar o aplicativo dos seus sonhos.

04:15.520 --> 04:18.810
Então, vamos passar por isso um por um. 'GET' significa

04:18.820 --> 04:22.530
Bem, eu quero obter um arquivo HTML.

04:22.660 --> 04:28.360
Então você pede para obter algo e o servidor responde com essa solicitação.

04:28.420 --> 04:31.700
Um 'POST' diz que quero postar algo.

04:31.710 --> 04:38.410
Então, enviarei alguns dados para os servidores do Google e quero que você 'POST' - quero que você os adicione

04:38.950 --> 04:44.520
aos seus servidores ou banco de dados. 'PUT' é que vou enviar

04:44.780 --> 04:46.530
alguns dados.

04:46.700 --> 04:51.950
E eu quero que você atualize alguns dados que já existem nos servidores do Google

04:51.950 --> 04:59.270
e apenas atualize-os com essas novas informações e, em seguida, 'DELETE' significa excluir uma parte dos dados no back-end nos servidores

04:59.270 --> 05:01.240
ou no banco de dados.

05:01.250 --> 05:08.270
Portanto, se usarmos o Twitter como exemplo, 'GET' será receber o feed do Twitter

05:08.270 --> 05:18.450
com todos os tweets de hoje. 'POST' seria se você criasse um novo usuário e desejasse adicioná-lo aos servidores do Twitter. 'PUT' seria se você fizesse um tweet, mas desejasse

05:18.600 --> 05:25.880
fazer uma alteração ou uma edição, para editar esse tweet e 'DELETE' significará bem que você exclua sua

05:25.890 --> 05:32.080
conta de usuário ou exclua um tweet. E não se preocupe, vamos usá-los quando

05:32.080 --> 05:36.130
chegarmos à seção de back-end e construirmos nosso projeto final.

05:36.520 --> 05:45.040
Agora, ao longo dos anos, o HTTP foi estendido para não apenas se preocupar com texto. Não apenas busque documentos de hipertexto como HTML,

05:45.040 --> 05:53.500
mas também imagens e vídeos e publique conteúdo em servidores como nos resultados de formulários HTML.

05:53.650 --> 06:01.300
e o HTTP também pode ser usado para buscar parte dos documentos para atualizar as páginas da Web sob demanda, chamadas AJAX,

06:01.750 --> 06:04.900
e temos um vídeo chegando falando sobre isso.

06:05.020 --> 06:09.170
Mas a idéia principal ainda está de pé usando esses quatro verbos

06:09.190 --> 06:13.230
que acabamos de aprender, agora podemos nos comunicar com os servidores.

06:13.340 --> 06:13.630
Tudo certo.

06:13.630 --> 06:23.220
Portanto, sabemos que essa seta aqui no topo usa HTTP para fazer solicitações usando um desses quatro verbos.

06:23.230 --> 06:23.680
Ok,

06:23.700 --> 06:27.630
acho que você recebeu a parte da solicitação. Agora, com o que

06:27.700 --> 06:29.320
o servidor responde?

06:29.320 --> 06:30.770
E a resposta aqui?

06:30.850 --> 06:38.140
O servidor envia duas coisas principais. um é uma mensagem HTTP.

06:38.210 --> 06:42.780
Isso é algo que você definitivamente já viu antes

06:42.800 --> 06:49.360
e irei vincular aos recursos desta escola do W3school uma mensagem de 200 significa sucesso.

06:49.410 --> 06:57.250
Você provavelmente já viu 200 OK antes de poder ver 404 mensagens, o que significa que não foi encontrado.

06:57.390 --> 07:03.530
Se você digitar um URL que não existe, receberá um 404 e, às vezes, receberá uma mensagem de erro

07:03.570 --> 07:05.080
500 que indica Bem,

07:05.230 --> 07:07.260
algo está errado com o servidor.

07:07.530 --> 07:15.000
Portanto, este é apenas um código numérico que acompanha todas as respostas que informam a resposta do servidor.

07:15.000 --> 07:16.080
Então esse é o primeiro.

07:18.390 --> 07:22.980
O segundo é geralmente algum tipo de dado como HTML.

07:23.190 --> 07:25.530
E até agora é isso que estamos fazendo HTML.

07:25.830 --> 07:31.160
Mas, nos próximos vídeos, mostrarei que ele pode enviar outras coisas além do simples HTML.

07:31.230 --> 07:33.600
Então, vamos adicionar a este diagrama agora.

07:34.230 --> 07:43.760
Queremos dizer que isso também tem um código de status e dizeremos 200 por enquanto que tudo estava bem

07:43.790 --> 07:50.770
e na resposta daria o código de status mais o novo arquivo HTML.

07:51.020 --> 07:51.890
Tudo certo.

07:52.070 --> 07:56.900
Vamos realmente demonstrar isso on-line para ver como você pode assistir a essa ação.

07:58.360 --> 08:04.410
Tenho aqui um ótimo site chamado 'exemplo. com 'e é um site simples, você pode

08:04.510 --> 08:05.330
visitá-lo agora.

08:05.440 --> 08:12.830
Mas o mais interessante é que, se você abrir o console do desenvolvedor, até este ponto examinamos a guia de elementos e depois a

08:12.830 --> 08:20.450
guia do console. Quero mostrar a guia Rede que temos aqui. Agora, na guia Rede - talvez seja

08:20.450 --> 08:21.620
necessário clicar

08:21.980 --> 08:27.610
em alguns desses ícones e você verá que coisas diferentes aparecerão.

08:27.710 --> 08:30.900
Verifique se o filtro acabou.

08:31.780 --> 08:39.960
Tudo é clicado e agora no exemplo. enquanto isso estiver aberto, basta atualizar e

08:43.010 --> 08:44.420
ver isso.

08:44.600 --> 08:47.880
Vou clicar neste ícone, que o torna um pouco maior.

08:47.900 --> 08:52.010
Este é um plugin, portanto, não se preocupe com este javascript, mas com a principal coisa que ele diz.

08:52.010 --> 08:55.940
"exemplo. com "" Status: 200 OK

08:55.970 --> 09:03.140
"E" Type: document "e até me diz o tamanho - o tempo que levou para obter isso em 53 milissegundos ...

09:03.140 --> 09:04.760
Isso é bem rápido.

09:04.760 --> 09:07.790
Isso significa que o servidor respondeu com 200.

09:07.790 --> 09:13.830
Se eu clicar nisso, recebo um monte de coisas com as quais realmente não precisamos

09:13.830 --> 09:16.080
nos preocupar, mas algumas coisas

09:16.080 --> 09:23.340
'Request URL' (URL da solicitação) é o que solicitamos. Nós obtemos um código de status 200 no servidor.

09:23.340 --> 09:31.280
E se clicarmos na resposta, há uma mensagem de resposta, recebemos o documento HTML

09:31.280 --> 09:32.760
do servidor.

09:32.860 --> 09:36.870
Se voltarmos aos cabeçalhos, também veremos que nosso método de solicitação era um 'GET'.

09:36.970 --> 09:44.430
Fizemos uma solicitação 'GET'. Vamos fechar isso e atualizar novamente.

09:44.490 --> 09:48.880
Agora eu tenho um status 304. A 304 Se examinarmos aqui,

09:48.930 --> 09:55.050
significa não modificado indica que a página de solicitação não foi modificada desde

09:55.050 --> 09:59.150
a última solicitação. Como eu já solicitei isso agora, o

09:59.170 --> 10:04.800
Google é inteligente o suficiente para dizer "não vou me preocupar com o servidor e solicitar a mesma

10:04.800 --> 10:05.640
coisa repetidamente".

10:05.640 --> 10:09.960
Eu já o memorizei, então aqui está.

10:10.130 --> 10:10.730
Muito legal.

10:10.730 --> 10:13.740
Portanto, a guia Rede é realmente muito útil para isso.

10:14.030 --> 10:14.420
Tudo certo.

10:14.420 --> 10:20.330
Então você pode ir em frente e brincar com o exemplo. com 'e veja você mesmo como o HTTP funciona.

10:21.970 --> 10:29.590
E, a propósito, sim, esse HTTP que você vê aqui, é o que significa quando você faz uma solicitação

10:29.680 --> 10:34.340
HTTP, diz hey do HTTP - estamos usando a web mundial.

10:34.640 --> 10:38.260
E vá solicitar isso ao servidor.

10:38.450 --> 10:39.110
Muito legal.

10:39.140 --> 10:40.650
E se você está se perguntando sobre os 's'.

10:40.670 --> 10:43.850
Não se preocupe, eu vou deixar você saber no final deste vídeo o que isso significa também.

10:46.410 --> 10:46.970
Tudo certo.

10:47.120 --> 10:49.780
Agora, e se eu quiser enviar dados.

10:49.850 --> 10:53.790
Se voltarmos ao nosso diagrama, estou apenas fazendo uma solicitação 'GET'.

10:53.840 --> 10:58.090
Mas e se eu quiser realmente enviar algumas informações ao servidor.

10:58.100 --> 11:02.120
Além de algum URL dizendo que eu quero essas informações.

11:02.120 --> 11:04.330
Bem, existem duas maneiras de fazer isso.

11:05.440 --> 11:08.300
Um é algo chamado string de consulta.

11:08.530 --> 11:13.140
E então o segundo é através do corpo da solicitação.

11:13.250 --> 11:20.450
Então, vou mostrar como os dois funcionam aqui, o formulário que criamos em nossa primeira seção

11:20.660 --> 11:24.270
avançada em HTML, quando conhecíamos apenas HTML.

11:24.860 --> 11:25.990
Vamos abrir este arquivo.

11:29.810 --> 11:30.850
Eu tenho aqui.

11:30.870 --> 11:34.650
Se eu clicar duas vezes em -ahh, você se lembra disso, não?

11:34.650 --> 11:37.990
Percorremos um longo caminho. Nesse formulário, se

11:38.100 --> 11:46.280
você se lembrar, tínhamos um método de formulário 'GET' e agora você pode entender o que esse 'GET' significa.

11:46.320 --> 11:52.220
Está dizendo que com este formulário quero que você faça uma solicitação 'GET'.

11:52.350 --> 11:59.960
Vamos ver o que acontece quando clico em registrar enquanto abro a guia rede.

12:00.160 --> 12:04.000
Vou clicar em 'Registrar! '

12:04.010 --> 12:04.650
Tudo certo.

12:04.730 --> 12:07.190
Portanto, temos este pedido.

12:07.190 --> 12:14.810
Vimos que fizemos uma solicitação e ela criou essas coisas chamadas cadeias de consulta.

12:14.840 --> 12:21.370
A primeira maneira de enviar dados para o servidor. Com uma solicitação 'GET', se você deseja enviar

12:21.380 --> 12:29.710
informações por meio de um formulário, ele é adicionado ao URL usando este ponto de interrogação, que diz: ei, eu estou prestes a

12:29.710 --> 12:34.400
enviar algumas cadeias de consulta e ele terá uma chave e um valor.

12:34.630 --> 12:36.550
Nesse caso, primeiro nome, sobrenome, tudo está

12:36.550 --> 12:38.310
vazio, para que não haja informações.

12:38.320 --> 12:42.110
Mas, caso contrário, direi que o primeiro nome é igual a Andrei.

12:42.400 --> 12:51.900
Se eu clicar nisso, vemos que há parâmetros de string de consulta que enviamos. Temos nome, sobrenome, email, senha e data

12:51.960 --> 12:55.370
de aniversário em branco.

12:55.710 --> 13:02.590
Mas se rolarmos para baixo nos carros, o padrão é Volvo, de modo que temos Carros: Volvo.

13:02.730 --> 13:07.140
Portanto, essas informações agora são enviadas para o servidor.

13:07.140 --> 13:10.260
Isso é parâmetros de string de consulta usando 'GET'.

13:10.260 --> 13:12.390
E nós mencionamos uma coisa, no entanto.

13:12.480 --> 13:16.530
Vemos que temos uma senha aqui que não é muito segura, é isso.

13:16.560 --> 13:27.850
Se eu voltasse ao formulário e digitasse 'segredo' e clique em registrar novamente Bem, agora tenho minha senha aberta a céu aberto, enviada

13:28.270 --> 13:34.900
por fio e até a tenho aqui na minha barra de URL.

13:35.070 --> 13:35.370
Tudo certo.

13:35.370 --> 13:36.350
Voltaremos a isso.

13:37.790 --> 13:39.060
Então essa é uma maneira.

13:39.170 --> 13:44.930
A segunda maneira é através do corpo da solicitação.

13:44.930 --> 13:48.210
Deixe-me mostrar-lhe como isso funciona da maneira como

13:48.230 --> 13:57.110
enviamos informações ao corpo: usamos uma solicitação 'POST' e isso é algo que você verá com mais frequência do que uma solicitação

13:57.110 --> 14:04.690
'GET': queremos adicionar alguns dados de formulário a o servidor, então queremos postar algo se eu mudar isso

14:04.690 --> 14:06.790
aqui, vou salvar isso.

14:06.970 --> 14:09.300
E vamos abrir uma nova aba.

14:10.430 --> 14:14.920
Com novos dados salvos, este é um formulário de postagem.

14:15.010 --> 14:23.540
Se eu abrir aqui e digitar a senha 'secreta' e clicar em 'Registrar! Registre 'eu

14:26.590 --> 14:32.230
recebo'. html ', mas sem cadeias de consulta.

14:32.350 --> 14:33.370
Se eu clicar

14:36.350 --> 14:41.290
sobre isso, vejo que agora, em vez de cadeias de consulta, são dados de formulário.

14:41.480 --> 14:48.650
E até diz 'Tipo de conteúdo: application / x-www-form-urlencoded'.

14:49.070 --> 14:57.830
E esta é apenas uma maneira HTML de dizer que este é um formulário e este é o corpo, mas não é exibido aqui.

14:57.860 --> 15:03.200
Portanto, agora o servidor pode acessá-lo não a partir dos parâmetros de consulta e não se preocupe, mostrarei como os servidores

15:03.200 --> 15:03.780
fazem isso.

15:03.860 --> 15:09.740
Quando chegamos à seção de back-end. Em vez de acessá-lo através dos parâmetros de consulta, agora

15:09.740 --> 15:12.160
posso acessá-lo através dos dados do formulário.

15:12.170 --> 15:15.440
Então, vamos voltar ao diagrama.

15:15.610 --> 15:22.850
Agora entendemos que podemos fazer solicitações HTTP usando 'GET', 'POST', 'PUT' e 'DELETE'.

15:22.850 --> 15:35.140
Posso usar cadeias de consulta que estão na parte superior da URL para enviar os dados ou o corpo da solicitação e, em seguida, o servidor responde com um

15:35.500 --> 15:41.350
código de status com base em como estava minha solicitação e retorna com

15:41.350 --> 15:42.440
uma resposta.

15:42.820 --> 15:52.290
Mas o único problema que vimos foi que a senha era visível nos dois casos, não era?

15:52.300 --> 15:57.550
E se tivéssemos uma pessoa assustadora por aqui.

15:57.560 --> 15:58.360
Ai está.

15:58.580 --> 16:08.140
E se tivéssemos uma pessoa que estivesse assistindo nossa comunicação solicitando HTTP e monitorando-a.

16:08.380 --> 16:15.370
Se eu usei strings de consulta para colocar minha senha lá, ele pode simplesmente olhar por cima dos meus ombros

16:15.440 --> 16:18.790
e ver que a senha de Andrea é secreta.

16:18.790 --> 16:29.510
Agora posso fazer login na sua conta do Google ou, se eu usar bem a maneira de enviar dados, ele poderá encontrar uma maneira de fazer com que essa solicitação

16:29.510 --> 16:33.460
seja enviada primeiro a ele. E basta olhar para os

16:36.900 --> 16:44.750
dados do formulário e ver que minha senha é secreta. "Isso não é muito bom, é?

16:44.750 --> 16:57.210
"Bem, uma solução para isso foi a idéia do HTTPS. Agora HTTPS significa Protocolo de transferência de hipertexto

16:57.240 --> 17:06.820
seguro e você pode ver aqui que "W3C" usa a versão segura do HTTPS.

17:06.860 --> 17:11.280
A comunicação entre o navegador e os sites agora está criptografada.

17:12.610 --> 17:13.330
E o que isso significa?

17:13.330 --> 17:22.380
Criptografado significa apenas que está desordenado, para que apenas o cliente e o servidor conheçam o passe secreto ou a

17:22.390 --> 17:25.360
chave secreta para ler a mensagem.

17:26.740 --> 17:35.050
E essa parte 'S' do segredo usa uma tecnologia chamada segurança da camada de transporte ou

17:35.050 --> 17:41.870
sua camada de soquetes seguros antecessora ou TLS e SSL para abreviar.

17:41.920 --> 17:51.820
Então agora mesmo com HTTPS se o invasor ou o que chamamos de homem no meio é a pessoa que

17:51.820 --> 17:58.030
está apenas monitorando nossos pedidos. Mesmo que eles recebam nossa senha, será apenas uma

17:58.030 --> 18:06.120
tagarelice completa que terá algo semelhante a isso, e bem, essa não é a nossa senha, por isso não fará sentido, pois

18:06.170 --> 18:07.690
evita esse ataque.

18:07.690 --> 18:08.960
Esta é apenas a dica.

18:09.280 --> 18:17.040
Como desenvolvedor, você deve informar a todos os seus amigos se alguma vez estiver enviando informações confidenciais, talvez fazendo login em

18:17.040 --> 18:18.330
uma conta bancária.

18:18.450 --> 18:26.130
Verifique se há HTTPS por aí, se não houver HTTPS ao enviar - talvez seu login com

18:26.130 --> 18:27.560
sua senha.

18:27.690 --> 18:30.250
Bem, isso não é seguro.

18:30.400 --> 18:30.890
Tudo certo.

18:31.010 --> 18:40.860
Vamos revisar. Seu navegador da web é um cliente HTTP que envia solicitações para as máquinas servidores. Quando o usuário do navegador digita, segue

18:40.920 --> 18:48.930
as solicitações abrindo um arquivo ou digitando uma URL ou clicando em um hipertexto vincular uma marca

18:48.930 --> 18:50.500
de âncora.

18:50.880 --> 18:56.530
O navegador cria uma solicitação HTTP e a envia para se comunicar com o servidor.

18:56.730 --> 19:02.380
Agora, o servidor pode obter informações de volta para nós. Na versão mais antiga, poderíamos usar parâmetros

19:02.470 --> 19:09.430
de URL como 'www. Google. com / about 'e obtenha especificamente HTML.

19:09.510 --> 19:11.020
Foi isso.

19:11.050 --> 19:18.950
Depois veio o formulário para que agora possamos enviar mais dados além do URL dizendo que queremos ir

19:18.950 --> 19:20.880
para esse arquivo HTML.

19:21.260 --> 19:34.930
Agora poderíamos usar 'GET' ou 'POST' para enviar dados. Através de um corpo ou de uma string de consulta, um servidor pode executar

19:34.930 --> 19:40.540
uma ação com base nesses dados e retornar uma nova página.

19:40.630 --> 19:47.200
E esta é a base da web e como a web mundial que temos agora foi possível. Através da comunicação do

19:47.380 --> 19:53.140
servidor cliente. Nos próximos vídeos, vamos aprender ainda mais.

19:53.390 --> 19:56.820
Para realmente entender esse poder, vejo você no próximo. Tchau tchau.
