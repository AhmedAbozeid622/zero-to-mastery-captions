WEBVTT

00:00.360 --> 00:00.870
Bem vindo de volta.

00:01.560 --> 00:10.100
Eu quero falar com você sobre outros dois novos U. S. 2018 e para mostrar como eles funcionam.

00:10.110 --> 00:18.000
Vamos usar o exemplo que tínhamos antes no vídeo sobre promessas em que passamos por todos esses

00:18.000 --> 00:22.010
L's são a API de Guerra nas Estrelas.

00:22.140 --> 00:30.240
Bem, buscamos os dados e, em seguida, apenas registramos o console com o

00:31.020 --> 00:39.910
que recebemos, para que, se eu copiar e colar no nosso console, conseguirmos nossos usuários.

00:40.060 --> 00:44.820
Temos Luke Skywalker C3 peo r2 d2 e Darth Vader.

00:44.950 --> 00:51.250
E se isso não lhe parecer familiar, verifique primeiro os vídeos das promessas antes de

00:51.280 --> 00:52.360
abordar este.

00:52.450 --> 00:59.800
Agora, o primeiro recurso que vou falar sobre o que há de novo no Javascript é chamado finalmente e, como

00:59.800 --> 01:03.050
o nome sugere, ele nos permite fazer algo.

01:03.070 --> 01:11.820
Finalmente, após o término de uma promessa e a maneira como ela funciona, adicionamos geralmente no final.

01:12.850 --> 01:22.720
E esse bloco finalmente será chamado, independentemente de o ponto funcionar ou se a promessa for exibida e ocorrer

01:22.840 --> 01:24.060
um erro.

01:24.130 --> 01:26.310
Então não importa o quê.

01:26.440 --> 01:31.540
Depois de tudo feito dentro de uma promessa Finalmente, você será chamado.

01:31.540 --> 01:39.100
Se ele resolve ou rejeita e faz algo que solicitamos no nosso caso, digamos que eu possa

01:39.190 --> 01:47.350
ter dados aqui e esses dados apenas consolem o diálogo para ver o que obtemos e apenas digamos

01:52.640 --> 01:59.890
mais para que, quando executarmos mais este tempo que eu vou copiar vamos atualizar aqui.

01:59.950 --> 02:08.160
Copie e cole eu apertei enter, obtemos extra aqui, mas indefinido.

02:08.160 --> 02:11.490
E isso porque, finalmente, realmente não recebe um parâmetro.

02:11.550 --> 02:16.020
Portanto, isso geralmente está vazio e não recebe nada da promessa.

02:16.380 --> 02:18.690
Então podemos deixar isso de fora.

02:19.460 --> 02:25.990
Mas você vê aqui que eu pude ligar extra, mesmo que o ponto tenha terminado.

02:26.060 --> 02:35.300
Mas o que acontece se lançarmos um erro e um bloco catch for chamado, podemos simular isso com bastante facilidade.

02:35.970 --> 02:45.280
Podemos fazer o interior do ponto e, em seguida, retornar ao JavaScript e gerar um erro dizendo throw

02:45.280 --> 02:54.280
Error, e o que acontecerá aqui é que, assim que essa linha chegar, ocorrerá um erro: ignore

02:54.280 --> 03:05.500
todos esses logs do console e pressione o bloco de cache com esse parâmetro de erro então se eu disser isso ou

03:05.500 --> 03:15.180
vamos copiar isso, atualize a página, copie e cole e vamos ver o que acontece aqui embaixo, pressionarei enter

03:15.180 --> 03:24.880
e vemos que oh, obtemos o erro que o bloco de cache foi executado com nosso erro, mas também

03:24.880 --> 03:28.150
temos o extra sendo chamado finalmente.

03:28.150 --> 03:36.240
Então, finalmente, é ótimo para aqueles momentos em que você precisa executar um pedaço de código, não importa o quê.

03:36.340 --> 03:43.870
Após uma promessa, talvez você queira enviar um email para um usuário, independentemente de sua solicitação ter sido

03:43.870 --> 03:45.590
bem-sucedida ou falhada.

03:45.850 --> 03:48.530
Talvez você queira ter um pequeno ícone de notificação.

03:48.550 --> 03:54.100
Há muitas maneiras de usar finalmente e agora existe uma maneira de garantir que algo aconteça

03:54.100 --> 03:55.390
após uma promessa.

03:55.390 --> 04:04.990
Tudo o que dissermos agora, o próximo sobre o qual quero falar é um pouco mais avançado para

04:04.990 --> 04:05.850
explicar.

04:05.860 --> 04:19.340
Vamos limpar isso e falar sobre o recurso de espera por um agora, se você se lembra que tínhamos esse código em

04:19.340 --> 04:29.420
nosso vídeo de espera assíncrona e lá eu mostrei como podemos usar o recurso de espera

04:29.690 --> 04:37.610
assíncrona de sim oito para tornar nossa promete uma aparência mais síncrona, em

04:37.640 --> 04:48.440
vez de ter as prometidas mudanças de ponto e DOD e DOD e dot catch. Assim como somos

04:48.440 --> 04:57.260
capazes de usar o for de usar o loop for que nos permitiu percorrer

04:57.260 --> 05:06.410
intervalos, agora podemos percorrer as promessas de espera que teremos, mas, em vez de falar,

05:06.410 --> 05:14.060
deixe-me mostrar código agora, digamos que vamos usar isso como um exemplo,

05:14.060 --> 05:22.660
vamos criar uma nova função e isso será chamado de obter dados para, na

05:22.660 --> 05:32.590
verdade, lembrarmos como será o loop for se eu tivesse uma função, vamos chamá-lo loop through

05:32.680 --> 05:44.980
seu ls que recebe o seu parâmetro l e será loop usando o loop for dirá que vocês são todos

05:45.190 --> 05:54.640
sl e você é sl é esse array aqui com 3 ou então e esse

05:54.640 --> 06:00.140
loop for all está simplesmente passando por

06:00.150 --> 06:13.920
um loop por tudo e podemos simplesmente sair dele sobre luta copiar e colar isso, vamos atualizar aqui, pressione enter e faça

06:13.920 --> 06:22.380
um loop através de seus ls agora e passe para seu parâmetro else.

06:22.380 --> 06:31.230
Portanto, usando esse conhecimento, agora podemos criar uma nova função chamada obter dados para adicionar essa nova função. Faremos

06:31.230 --> 06:38.870
exatamente o que esta faz acima, usando-os para um peso de recurso, vamos ver como isso

06:38.870 --> 06:39.550
ficaria.

06:39.770 --> 06:49.400
Teremos uma função assíncrona para que possamos usar a palavra-chave desperto e, aqui, podemos ter uma série de

06:49.940 --> 07:01.240
promessas porque uma série de promessas é irritável e pode ser repetida pelo peso de palavras-chave, para que essas matrizes de

07:02.530 --> 07:12.900
promessas simplesmente seja o seu mapa de pensamento Ls que irá se repetir e vamos aumentar um pouco para

07:12.900 --> 07:22.230
que possamos ver que é melhor passarmos por cima de você estar bem e retornar a busca

07:22.230 --> 07:30.650
que você está bem aqui e aqui no primeiro linha, tudo o que estamos fazendo

07:30.890 --> 07:36.560
é criar uma matriz dessas promessas de busca de cada

07:40.690 --> 07:50.500
uma dessas solicitações. Em seguida, podemos usá-las para aguardar para percorrer essas promessas, então tudo o que diríamos

07:51.610 --> 07:55.390
é dizer uma espera e então

08:00.120 --> 08:08.130
aqui vamos O say say request request of promises, que é admirável, percorrerá cada uma

08:08.130 --> 08:19.060
dessas promessas em cada uma das solicitações e extrairemos esses dados de cada uma das solicitações dizendo: oh wait request Drop.

08:19.110 --> 08:25.310
Jason, porque lembre-se de que usamos a palavra-chave desperta diante de uma promessa.

08:25.450 --> 08:33.820
E, como sabemos, estamos usando a palavra-chave wait aqui, porque estamos cumprindo nossas promessas

08:33.820 --> 08:36.600
e precisamos aguardar solicitação.

08:36.640 --> 08:41.650
Jason, que novamente é uma promessa que recebe nossos dados.

08:41.650 --> 08:49.830
Lembre-se de como foi feito aqui antes e, em seguida, simplesmente cancelamos nosso log, digamos que os dados sejam verificados enquanto o

08:49.890 --> 08:55.140
Fi fica claro isso e vamos apenas copiar nosso novo código, torná-lo um

08:58.020 --> 09:03.800
pouco maior e garantir que eu não tenha o ponto e vírgula Eu tenho aqui.

09:03.810 --> 09:07.980
Então, vamos copiar você ou atualizar uma página.

09:08.070 --> 09:14.140
Copie os seus URLs e, em seguida, também copiamos a função, cole-a aqui.

09:14.310 --> 09:23.990
Pressione Enter e vamos esclarecer isso. Se eu conseguir dados agora, quando executo isso, vemos que

09:23.990 --> 09:32.690
recebemos primeiro os usuários que estão aqui, vamos tornar isso um pouco maior

09:32.690 --> 09:43.850
para que possamos ver o que temos. usuários e a próxima parada, temos o que temos a seguir.

09:43.930 --> 09:52.710
Temos as postagens com centenas de postagens e, em seguida, a próxima parada é do álbum e esse é

09:58.370 --> 10:03.610
o novo recurso do Yes 2018, como você vê aqui.

10:03.650 --> 10:06.200
É exatamente a mesma coisa que fizemos acima.

10:06.620 --> 10:11.410
Se eu executar nossa função original, obter

10:18.390 --> 10:28.360
dados, veremos que obtemos exatamente os mesmos resultados que os álbuns que publicamos e os usuários.

10:28.570 --> 10:37.390
A única coisa que, por uma espera de recurso, nos permite percorrer essas múltiplas promessas quase

10:38.350 --> 10:48.150
como se estivéssemos escrevendo o código síncrono corretamente, para revisar, temos a função finalmente que podemos executar no

10:48.150 --> 10:56.280
final de uma promessa e temos o peso de cada item de uma série de

10:56.400 --> 11:01.590
promessas que retornam para nós na ordem correta.

11:01.590 --> 11:03.890
Todas as respostas.

11:03.980 --> 11:04.400
Tudo certo.

11:04.590 --> 11:05.590
Acho que é o bastante.

11:05.610 --> 11:07.990
É hora de você brincar com isso.

11:08.010 --> 11:09.490
Vejo você no próximo vídeo.

11:09.500 --> 11:09.960
Tchau tchau.
