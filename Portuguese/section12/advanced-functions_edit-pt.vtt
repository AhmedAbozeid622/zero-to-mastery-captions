WEBVTT

00:01.420 --> 00:02.820
Bem vindo de volta.

00:02.860 --> 00:08.330
Agora, o que você aprende nos próximos vídeos é bastante avançado.

00:08.350 --> 00:15.310
Leva algum tempo para realmente compreender os conceitos e compreendê-los e a melhor maneira de fazer isso

00:15.310 --> 00:17.450
é fazer esses mesmos.

00:17.710 --> 00:22.830
Portanto, use esses vídeos como uma referência para voltar quando tiver dúvidas.

00:22.870 --> 00:28.000
Eu vou cobrir os principais tópicos que você verá na natureza.

00:28.180 --> 00:31.950
Você pode voltar e fazer referência a esses vídeos sempre que tiver dúvidas.

00:33.150 --> 00:38.110
E neste vídeo vamos abordar funções avançadas.

00:38.310 --> 00:40.540
Agora eu tenho uma função de amostra para você aqui.

00:40.680 --> 00:46.680
Mas sabendo o que aprendemos sobre a nova sintaxe do javascript, vamos converter isso primeiro em como

00:46.680 --> 00:50.010
devemos escrever javascript em 2018.

00:50.520 --> 00:53.280
A palavra da função desapareceu agora.

00:53.640 --> 00:58.490
Podemos apenas dizer "const primeiro é igual a

01:01.900 --> 01:02.950
função de seta (=>) '.

01:04.390 --> 01:14.080
E esta função de seta tem um 'greet' que pode ser uma constante

01:14.090 --> 01:18.570
e uma função que novamente pode ser 'const second'.

01:18.800 --> 01:24.710
E finalmente, isso pode ser um 'const' também.

01:24.740 --> 01:32.210
Também aprendemos sobre o escopo, uma propriedade importante da função é que as variáveis ​​criadas dentro de

01:32.210 --> 01:38.010
eles incluindo seus parâmetros são locais para a função.

01:38.300 --> 01:47.090
Então, isso significa que toda vez que você executar a primeira função, esse bloco de código será executado e o 'cumprimento'

01:47.270 --> 01:50.740
variável é criada toda vez.

01:50.750 --> 01:58.100
Agora isso é realmente bom para nós, porque nos certificamos de que, se o nosso programa, toda vez que corremos 'primeiro'

01:58.310 --> 02:04.980
lembrou 'cumprimentar', bem eles vão ter conflitos porque é uma constante e estamos constantemente reatribuídos

02:05.000 --> 02:08.480
a mesma coisa para uma variável que já existe.

02:08.480 --> 02:15.050
Então, desta forma, dentro de uma função, nós nos certificamos de que toda vez que a rodarmos, seja uma lousa limpa.

02:15.170 --> 02:21.550
Você pode nomear as variáveis ​​como quiser, porque não há mais nada que colidirá com isso.

02:21.590 --> 02:28.850
Como eu disse, esse comportamento ajuda a evitar interferências acidentais entre funções e como desenvolvedores

02:29.060 --> 02:33.020
Queremos minimizar o número de erros ou erros no nosso código.

02:33.020 --> 02:39.710
Se todas as variáveis ​​foram compartilhadas por todo o programa, é preciso muito esforço para garantir que nenhum nome seja

02:39.710 --> 02:42.500
usado para dois propósitos diferentes.

02:42.500 --> 02:48.820
Imagine se "cumprimentar" estivesse em outra função e não tivéssemos idéia e não pudéssemos usá-la.

02:48.890 --> 02:56.960
Bem, felizmente, por ter nosso próprio escopo separado, podemos garantir que podemos usar "saudar" sem

02:56.960 --> 02:59.070
ter que verificar toda a base de código.

03:00.220 --> 03:07.000
Agora, tratando a função, as variáveis ​​locais como existentes apenas dentro da função, a linguagem torna isso possível

03:07.000 --> 03:15.850
ler e entender funções como pequenos universos,

03:16.060 --> 03:16.930
onde tudo o que acontece naquele universo só importa para si mesmo.

03:18.340 --> 03:26.170
Mas eu também queria demonstrar um conceito interessante com javascript e isso é 'closures'.

03:26.380 --> 03:31.760
Você pode pensar nisso como isso, uma função que é executada, a função executada.

03:31.900 --> 03:34.080
Agora nunca mais será executado novamente.

03:34.120 --> 03:37.920
Como se fosse a primeira função que acabamos de executar aqui.

03:38.170 --> 03:45.970
E o resultado que colocamos em nova função, vai lembrar que existem referências a essas variáveis

03:46.000 --> 03:48.640
vivo em uma memória primeiro.

03:48.960 --> 03:51.270
No entanto, vemos um problema aqui.

03:52.210 --> 03:59.740
Você vê que quando carregamos este programa em nosso site, o mecanismo de javascript verá isso e

03:59.740 --> 04:02.180
Eu direi OK, temos uma variável primeiro.

04:02.230 --> 04:03.540
Essa é uma função.

04:03.580 --> 04:04.660
Ótimo.

04:04.690 --> 04:12.100
E então, na próxima linha, vemos, oh! queremos atribuir nova função variável (newFunc) e queremos obter o

04:12.100 --> 04:13.460
resultado de 'primeiro'.

04:13.510 --> 04:20.980
Então, o programa é executado 'primeiro', vê que queremos criar um 'const greet', 'HI' e, em seguida, vemos também que,

04:21.760 --> 04:26.680
nós temos outra função chamada 'second' e estamos retornando essa função.

04:27.040 --> 04:32.590
Mas há um problema aqui certo, 'segundo' precisa lembrar o que 'cumprimentar' é.

04:32.830 --> 04:38.940
Embora 'primeiro' seja executado e retorne 'segundo'.

04:39.060 --> 04:45.140
Então você pode pensar nisso assim que fizermos isso,

04:48.480 --> 04:48.820
nós só teremos a função 'second'.

04:48.850 --> 04:52.440
Agora, e eu sei que isso é, isso parece confuso, mas basta olhar para o destaque aqui.

04:52.690 --> 04:55.590
Isso é o que chamar de 'primeiro' significa.

04:55.870 --> 04:58.640
Mas você vê aqui que a variável 'cumprimenta'.

04:58.720 --> 04:59.990
'Second' não.

05:00.010 --> 05:07.180
Bem, não está no escopo do 'segundo', certo? o que 'closures' faz e esta é a regra em Javascript

05:07.180 --> 05:14.870
é que o escopo filho sempre tem acesso ao escopo do pai.

05:14.950 --> 05:17.430
Então é quase como se lembrasse.

05:17.470 --> 05:21.720
Eles sempre lembram que há uma referência a essas variáveis ​​muito.

05:21.760 --> 05:28.890
Então, dentro do navegador da web, o navegador diz, ah! esta segunda função precisa 'cumprimentar'.

05:28.900 --> 05:30.370
Então eu vou lembrar disso.

05:30.400 --> 05:31.710
Deixe-me demonstrar isso para você.

05:31.990 --> 05:39.440
Então, se eu fizer 'primeiro' aqui e vou copiar isso no console.

05:39.660 --> 05:42.730
E agora nós temos uma nova função.

05:42.810 --> 05:52.040
Se eu correr, nova função eu recebo, 'HI', mesmo que 'primeiro' nunca seja executado novamente.

05:53.120 --> 05:59.730
A única coisa que nos resta é a segunda função que o navegador da Web se lembra de "saudar".

05:59.850 --> 06:04.200
Novamente, este é um conceito confuso quando você está aqui pela primeira vez.

06:04.350 --> 06:14.540
Mas como eu disse, lembre-se de 'encerramentos' é apenas dizer que uma função foi executada,

06:16.220 --> 06:16.910
a função executada

06:19.740 --> 06:21.680
nunca vai ser executado novamente.

06:26.590 --> 06:35.930
Mas vai lembrar que existem referências a essas variáveis.

06:36.130 --> 06:44.720
Portanto, o escopo filho sempre tem acesso ao escopo pai.

06:44.950 --> 06:58.320
Agora você pode estar se perguntando, se eu ouvi 'const name' é igual a 'Bobby',

06:58.320 --> 07:00.660
a primeira função terá acesso a 'Bobby'?

07:00.670 --> 07:01.780
Não, não seria.

07:01.780 --> 07:06.860
Portanto, pense dessa maneira, as crianças sempre têm acesso ao escopo dos pais.

07:07.030 --> 07:11.150
Mas os pais não têm acesso aos filhos.

07:12.640 --> 07:16.690
Tudo bem, vamos entrar em mais algumas coisas.

07:16.700 --> 07:25.270
Em seguida, vamos falar sobre 'Currying' e 'Currying' é o processo de conversão de uma função que leva

07:25.360 --> 07:30.290
vários argumentos em uma função que os leva um de cada vez.

07:30.310 --> 07:31.480
Vamos ver o que eu quero dizer.

07:31.660 --> 07:45.460
Nós temos uma função aqui vamos chamá-lo de "multiplicar" e "multiplicar" aceita dois parâmetros e, novamente, estamos usando

07:45.460 --> 07:49.000
nossa nova sintaxe de função dirá 'multiplies b'

07:51.840 --> 07:58.050
agora 'Currying' significa que estamos mudando esta função para aceitar apenas um parâmetro por vez.

07:58.470 --> 08:08.760
Então isso significa que nós 'CurryMultiply' é igual a ',' b '

08:12.270 --> 08:20.260
'a' vezes 'b'. Woh! woh! woh! quem! woh !, O que acabamos de fazer?

08:20.310 --> 08:25.570
Novamente, isso parece muito confuso, mas pense nessas setas como funções.

08:25.590 --> 08:34.690
Então, agora, se eu fizer curry, multiplique e direi três (3).

08:34.920 --> 08:39.390
Bem, você verá isso em ação, o que acontece.

08:39.570 --> 08:42.380
Eu recebo uma função que aceita 'b' multiplicar por 'a'.

08:42.510 --> 08:49.810
Então, ao executar isso, está dizendo que 'a' é '3'.

08:49.990 --> 08:58.780
E agora saberemos que quando multiplicamos 'a' é '3', mas porque isso tem uma função e outra função

08:58.870 --> 09:09.040
então uma função dentro de uma função, isso apenas retorna essa parte, então retorna uma função,

09:09.040 --> 09:10.370
como você pode ver aqui.

09:10.530 --> 09:12.710
Então, agora, para fazer isso funcionar.

09:12.720 --> 09:17.090
Deixe-me colocar isso de volta, para que funcione.

09:17.090 --> 09:31.820
Nós temos que dizer 'CurryMultiply' vai dizer '3' e depois outro suporte '4', e eu recebo '12'.

09:31.990 --> 09:39.460
Se olharmos para essa função comparada a aqui, vemos exatamente o que fizemos, criamos uma variável

09:39.460 --> 09:44.590
'curriedMultiply' que aceita um parâmetro.

09:44.590 --> 09:47.360
Então é uma função que aceita 'a'.

09:47.380 --> 09:52.920
Neste caso é '3' e uma vez que você chama essa função,

09:52.930 --> 10:02.590
depois de executá-lo, ele retorna uma (uma) outra função, que aceita 'b' e essa função multiplica 'a' e 'b'.

10:02.590 --> 10:09.120
Então, o que estou fazendo aqui é dizer 'curryMultiplier' 'a' is 3 'b' é 4.

10:09.440 --> 10:13.200
E agora multiplique 'a' times 'b'.

10:13.350 --> 10:19.960
E como você pode ver como eu disse sobre curry, é o processo de converter uma função que leva vários

10:19.960 --> 10:26.930
argumentos como eu disse em uma função que os leva um de cada vez.

10:26.930 --> 10:29.780
Agora, por que precisamos fazer isso?

10:30.500 --> 10:37.590
Porque agora é mais extensível, eu posso fazer algo como 'const' multiplplyBy5 '

10:37.650 --> 10:41.550
é igual e agora eu tenho isso.

10:41.820 --> 10:49.860
Então, a qualquer momento, eu quero multiplicar por cinco, eu poderia apenas dizer, deixe-me copiar isso.

10:50.250 --> 10:54.970
Agora, a qualquer momento, quero multiplicar um número por cinco, cinco

10:58.700 --> 11:09.480
dez, e agora eu tenho essa função que foi criada que sempre multiplica as coisas por 5, o que é muito legal.

11:09.480 --> 11:09.990
Tudo bem.

11:10.010 --> 11:16.260
Nós vamos entrar em mais uma coisa e então eu prometo que vou fazer sua cabeça parar de doer.

11:16.260 --> 11:25.760
Chama-se 'Compor' e 'Compor' é o ato de juntar duas funções para formar uma terceira função

11:26.210 --> 11:33.230
onde a saída de uma função é a entrada da outra, até eu dizendo que sou tipo,

11:33.230 --> 11:33.660
O que acabei de dizer?

11:33.800 --> 11:35.230
Então, vamos escrever isso.

11:36.170 --> 11:40.910
Um "compor" é assim.

11:41.130 --> 11:52.300
Vamos dizer que os parâmetros 'f' e 'g' 'f' e 'g' retornam uma função que usa o parâmetro 'a' que retorna uma função

11:53.200 --> 11:58.590
que tem isso, santo moly.

11:58.760 --> 12:03.830
E se você olhar para isso e não tiver ideia do que está acontecendo,

12:03.830 --> 12:04.710
isso é algo que leva anos para alguns conseguirem.

12:04.850 --> 12:06.650
É realmente muito avançado.

12:06.800 --> 12:13.260
Mas, se você é capaz de entender o funcionamento interno disso, você pode fazer praticamente qualquer coisa.

12:13.260 --> 12:15.310
Vamos dar uma chance.

12:17.240 --> 12:18.590
O que esta acontecendo aqui?

12:18.950 --> 12:23.480
Bem, parece que, olhando para 'f' e 'g',

12:23.730 --> 12:29.790
parece que 'f' é uma função porque, embora tenhamos os parênteses até realça em azul para você e

12:29.790 --> 12:33.450
'g' também é uma função.

12:33.510 --> 12:41.580
Se eu tivesse uma função soma que, digamos, leva um número

12:44.300 --> 12:49.960
e apenas adiciona 1.

12:50.120 --> 12:58.860
O que podemos fazer com "compor" é que eu posso dizer "compor", novamente temos a função "ouvir", "somar" "soma".

12:58.900 --> 13:03.730
Então ambos 'f' e 'g' são 'soma'.

13:03.850 --> 13:06.890
E agora, porque leva outro suporte,

13:11.230 --> 13:11.560
Posso dizer 5, tudo bem

13:11.560 --> 13:16.040
então vamos rodar isso e então podemos ir passo a passo para mostrar o que ele faz.

13:17.890 --> 13:19.550
Eu tenho 7.

13:19.570 --> 13:20.640
Então, por que isso?

13:20.890 --> 13:23.580
Bem, vamos pegar um por um.

13:23.790 --> 13:33.590
Se ambos 'f' e 'g' são 'sum' e 'a' é 5, nós olhamos para o que a função retorna.

13:33.740 --> 13:39.300
E porque mais uma vez temos dois parênteses estamos executando a primeira parte da função que retorna

13:39.300 --> 13:42.080
nos em outra função que é isso.

13:42.450 --> 13:44.600
E dentro dele damos o 'a', 5.

13:44.850 --> 13:49.460
Então, quando essa função é executada, diz 'a' é 5.

13:49.670 --> 13:50.180
ESTÁ BEM.

13:50.460 --> 13:53.270
E então vamos rodar a função interna 'g'.

13:53.370 --> 13:55.310
Neste caso, é soma.

13:55.350 --> 14:02.220
Então, se você se lembra, a soma é apenas dizer:dê cinco e depois cinco mais um.

14:02.220 --> 14:06.090
Então agora isso muda para seis.

14:06.310 --> 14:11.180
E, finalmente, a função 'f' é executada, o que é novamente 'soma'.

14:11.730 --> 14:15.240
E isso diz que "soma" está me dando seis.

14:15.270 --> 14:19.270
Então, seis mais um é sete.

14:19.350 --> 14:27.000
E tudo isso retorna sete.

14:27.230 --> 14:27.680
Hooh! tudo bem.

14:27.760 --> 14:37.310
Havia uma tonelada de coisas, mas eu quero que você lembre dessas três palavras-chave, porque quando você chegar

14:37.310 --> 14:43.450
para JavaScript avançado, as funções são realmente muito importantes.

14:43.460 --> 14:51.950
Você ouvirá palavras como 'Closures' e 'Currying' e 'Compose' e você encontrará ferramentas e bibliotecas

14:51.950 --> 14:54.210
que usam estes fortemente.

14:54.290 --> 14:57.460
Agora você não precisa saber a definição deles.

14:57.500 --> 15:01.820
Você só precisa ler um trecho de código e entender o que está acontecendo.

15:01.940 --> 15:11.180
E é por isso que eu gosto de te mostrar isso, embora seja muito avançado e muito difícil de entender,

15:11.180 --> 15:15.380
entendendo o processo passo a passo de como funciona uma função.

15:15.380 --> 15:21.470
Isso é realmente útil porque agora quando você encontra isso na natureza,

15:21.860 --> 15:22.660
Você entenderá como tudo funciona.

15:23.370 --> 15:29.640
Agora, para terminar, esta seção de função eu quero te dizer a coisa mais importante que você pode fazer

15:29.640 --> 15:42.550
como desenvolvedor web ao criar código e essa é a idéia de evitar efeitos colaterais e pureza funcional.

15:43.890 --> 15:44.630
O que isso significa.

15:44.700 --> 15:48.500
Bem, vamos voltar ao meu diagrama aqui.

15:48.510 --> 15:55.620
Você pode se lembrar disso desde a primeira parte em que dissemos que uma entrada é o que damos a uma entrada de função de

15:55.620 --> 15:56.350
algum tipo.

15:56.370 --> 16:04.110
Poderia ser uma entrada vazia ou poderia ter parâmetros como 5 e 10, uma função faz algo que definimos,

16:04.590 --> 16:05.740
tem seu próprio escopo.

16:05.760 --> 16:08.100
Lembre-se que é o seu próprio universo.

16:08.100 --> 16:14.410
Poderia ter 'log de console', ele poderia fazer um monte de coisas e, em seguida, ele pergunta, estou retornando alguma coisa?

16:14.970 --> 16:18.410
Você pode, Ooh! isso deve ser indefinido.

16:19.570 --> 16:27.690
Então você pode retornar um valor ou se ele não retornar nada que não é definido. Agora as duas palavras que

16:27.690 --> 16:38.680
Eu acabei de dizer, efeitos colaterais e pureza funcional. Bem efeitos colaterais são algumas dessas coisas, qualquer uma das ações

16:39.310 --> 16:48.020
isso acontece, dentro da função que nós realmente não sabemos nada. Se ele interage ou lê

16:48.020 --> 16:54.440
ou grava para uma variável externa, por exemplo, ou "logs do console",

16:54.440 --> 16:56.750
Bem, isso é um efeito colateral.

16:57.140 --> 17:02.300
Se mudarmos aqui, um variável, 'a' é igual a um

17:05.330 --> 17:08.000
e então eu tenho uma função

17:11.560 --> 17:15.920
que muda "a"

17:16.020 --> 17:17.550
Bem, isso é um efeito colateral.

17:17.670 --> 17:22.660
Isso é algo que a função está fazendo para afetar o mundo exterior.

17:22.680 --> 17:29.670
Lembre-se de que queremos pensar em funções como seu próprio universo e se ele começa a afetar o mundo exterior.

17:29.850 --> 17:31.440
Quer dizer, não é o fim do mundo.

17:31.440 --> 17:36.200
Nós fizemos 'log do console' antes de terminarmos, fizemos isso antes.

17:37.150 --> 17:45.460
Mas é uma boa prática evitar os efeitos colaterais e, evitando os efeitos colaterais, temos algo

17:45.460 --> 17:49.820
chamado pureza funcional e pureza funcional

17:50.770 --> 17:58.420
é um conceito onde dizemos, para que possamos escrever programas realmente bons que queremos evitar

17:58.420 --> 18:13.950
efeitos colaterais e sempre queremos um retorno, para que isso e isso acabem e sempre retornemos algo.

18:14.020 --> 18:21.460
E qual é o poder nisso? Evitando efeitos colaterais e sempre retornando.

18:21.570 --> 18:31.860
Criamos algo que chamamos de "determinista" e "determinista" é uma palavra que você pode ter ouvido.

18:31.860 --> 18:40.280
Isso significa que, não importa se minhas entradas, digamos cinco e dez, passarem por essa função.

18:40.320 --> 18:46.630
Este pequeno universo, o valor de retorno será sempre o mesmo.

18:46.680 --> 18:54.450
Deixe-me dizer isso de novo, a entrada o que nós colocamos nos parâmetros

18:54.450 --> 18:55.350
quer esteja vazio ou tenha certos parâmetros.

18:55.350 --> 18:57.990
Ele sempre volta, se nós corremos isso mil vezes.

18:57.990 --> 19:00h.080
Sempre retorna o mesmo valor.

19:01.430 --> 19:03.070
Isso é 'determinismo'.

19:03.110 --> 19:10.580
É um conceito muito importante e é um princípio fundamental para evitar erros, porque se esta função sempre

19:10.580 --> 19:16.770
faz a mesma coisa bem, então você sabe exatamente o que faz e você não terá erros aleatórios

19:16.770 --> 19:18.130
aparecendo aqui e ali.

19:18.990 --> 19:29.010
É com isso que eu quero deixar você. Embora esta não seja a lei e você encontrará bases de código

19:29.010 --> 19:30.270
isso terá muitos efeitos colaterais.

19:30.270 --> 19:35.250
Haverá muitas coisas acontecendo dentro de funções que talvez até afetem variáveis ​​que

19:35.250 --> 19:36.940
viver fora de uma função.

19:36.990 --> 19:43.950
É realmente uma boa prática ser um desenvolvedor de alto desempenho para ter isso em mente,

19:43.950 --> 19:51.150
de criar funções que minimizam os efeitos colaterais e têm pureza funcional.

19:51.290 --> 19:57.630
O que chamamos de "determinismo", onde qualquer coisa que você coloca na função, sempre retorna a mesma coisa.

19:59.430 --> 20:01.080
Tudo bem, é isso por agora.

20:01.080 --> 20:02.810
Vá experimentar alguns exercícios.

20:02.940 --> 20:04.400
Eu vejo você no próximo.

20:04.410 --> 20:04.900
Tchau tchau.