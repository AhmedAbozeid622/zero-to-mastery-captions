WEBVTT

00:01.990 --> 00:10.800
O ES8 tem mais alguns novos recursos que foram introduzidos em 2017, em comparação com o ES7. Neste vídeo,

00:10.810 --> 00:13.360
Nós vamos apenas passar por cima dos importantes.

00:13.660 --> 00:17.750
Portanto, o primeiro é o "preenchimento de cordas".

00:18.010 --> 00:28.110
Temos novas funções que podemos adicionar às strings que são '.padStart' e '.padEnd'. Agora para demonstrar

00:28.110 --> 00:43.810
isso, vamos para o console. E faça uma 'Tartaruga' e faremos um '.padStart' de 10, se eu fizer isso,

00:43.810 --> 00:48.230
Eu recebo 'Turtle' com 10 espaços na frente dele.

00:49.810 --> 01:01.170
Se eu fizer '.padEnd' pegue 'Turtle' com 10 espaços depois disso, e isso é útil apenas para alinhar caracteres,

01:01.170 --> 01:09.310
strings, se você quiser padding específico para eles. Novamente muito simples, fácil de pegar, apenas outra string

01:09.310 --> 01:11.980
método que recebemos.

01:11.980 --> 01:13.510
Tudo bem, vamos para o segundo.

01:13.510 --> 01:20.830
O segundo que temos é algo chamado de vírgulas à direita nas listas de parâmetros e chamadas da função.

01:21.040 --> 01:21.840
Hmm !, o que isso significa?

01:21.970 --> 01:33.200
Bem, agora eu posso fazer algo como 'const cool', 'a, b, c, d' e adicionar uma vírgula no final.

01:34.370 --> 01:38.610
E, se eu fizer uma função, digamos apenas 'console.log' (s)

01:38.930 --> 01:41.670
'a', apenas uma função simples boba.

01:41.690 --> 01:48.920
Agora eu posso executar essa função, como um, dois, três, quatro e, em seguida, uma vírgula no final.

01:49.220 --> 01:54.120
E isso ainda é válido javascript. Se eu executar isso,

01:54.200 --> 01:55.550
Você vê isso, funciona.

01:55.550 --> 01:56.680
Log do console 'a'.

01:56.690 --> 01:59.030
Qual é um, fica logado.

01:59.030 --> 02:03.850
Agora, por que isso seria útil?

02:03.860 --> 02:09.320
A principal razão é que, quando você começa a obter listas de parâmetros muito grandes, verá muitas pessoas

02:09.320 --> 02:12.420
fazendo coisas semelhantes a isso.

02:15.910 --> 02:18.140
Apenas para tornar as coisas um pouco mais limpas.

02:18.310 --> 02:27.080
E quando você começa a fazer isso, toda vez que você adiciona um novo parâmetro, é muito mais fácil.

02:27.100 --> 02:32.710
Mas também no github, quando você faz mudanças, isso realmente faz a diferença.

02:32.710 --> 02:35.860
As diferenças entre o verde e o vermelho são muito mais limpas.

02:35.860 --> 02:41.750
Então, é apenas sintático e apenas faz as coisas parecerem mais agradáveis.

02:41.760 --> 02:47.530
Mais uma vez, você normalmente não gostaria de fazer algo assim, mas talvez quando você tem uma longa lista de parâmetros

02:47.770 --> 02:54.520
assim, a vírgula final é válida e não causará um erro. Tudo bem.

02:54.630 --> 02:56.130
Vamos olhar o próximo.

02:56.400 --> 03:00.720
O próximo é que temos 'object.values'

03:03.310 --> 03:12.410
e 'object.entries' e estes são muito muito úteis porque antes disso, nós tínhamos algo chamado

03:12.420 --> 03:21.680
'object.keys' e 'object.keys' nos permitiram fazer algo semelhante a matrizes, mas em objetos.

03:22.030 --> 03:32.700
Então, por exemplo, se tivéssemos um objeto (obj), digamos que teria um objeto e esse objeto

03:32.790 --> 03:42.820
terá 'userName0', 'Santa', temos 'userName1', 'Rudolph'.

03:43.000 --> 03:51.920
E nós também temos 'userName2', 'Mr. Grinch '.

03:52.000 --> 03:57.550
Agora olhando para este objeto, porque não é um array

03:57.550 --> 04:05.790
nós não podemos fazer o 'mapa' ou 'filtrar' ou 'reduzir', mas esse tipo de objeto feio.

04:05.830 --> 04:10.810
E isso ilustra um bom ponto, às vezes quando você está trabalhando com servidores, você terá objetos que

04:10.930 --> 04:17.110
você realmente não gosta ou não quer trabalhar, mas ainda quer iterar sobre isso.

04:17.230 --> 04:22.360
E antes que pudéssemos fazer algo assim com 'object.keys', eu deixo um pouco mais de espaço aqui,

04:22.360 --> 04:31.450
para que possamos ver, eu poderia fazer 'object.keys' e aqui, vamos jogar o objeto.

04:31.450 --> 04:36.140
E agora, posso usá-lo como uma matriz ou ir um por um.

04:37.190 --> 04:38.240
Como uma matriz.

04:39.490 --> 04:42.120
Então é como se fosse uma matriz.

04:42.120 --> 04:45.310
Mas, exceto, tem propriedade e valores.

04:45.490 --> 04:53.180
Então, digamos que queremos fazer um loop 'forEach' e para cada chave, ou seja, para cada chave na matriz.

04:53.500 --> 05:05.840
Então, para cada 'nome de usuário', também temos o índice que é 0, 1, 2, apenas o rap entre colchetes.

05:05.980 --> 05:15.710
E agora, dentro de ouvir, podemos dizer 'console.log (key)' e, em seguida, 'object [key]'.

05:15.970 --> 05:20.500
Então, agora, estamos pegando o objeto com a chave 'username'.

05:20.500 --> 05:29.470
Então, se eu 'console.log' isso, vamos copiar e colar isso, limpar isso um pouco e eu vejo que eu tenho,

05:29.480 --> 05:34.970
'username' 'Santa', 'username1' 'Rudolph', 'username2' 'Mr. Grinch '.

05:35.190 --> 05:44.580
E essa é uma maneira de iterarmos ou percorrermos objetos, mas com 'object.entries',

05:44.760 --> 05:45.860
as coisas se tornam um pouco mais fáceis.

05:46.730 --> 05:58.610
Por exemplo, podemos fazer 'object', devemos criar mais espaço, podemos fazer 'object.values' e 'object.values',

05:58.970 --> 06:06.020
se eu fizer um 'forEach' aqui, eu simplesmente pego o 'valor' do valor.

06:06.140 --> 06:11.670
Eu posso apenas 'console.log (valor)'.

06:13.080 --> 06:19.530
E agora, eu obtenho o valor de cada objeto.

06:19.560 --> 06:28.830
Isso é loops através de 'Santa', 'Rudolf' e 'Mr. Grinch '.

06:29.060 --> 06:31.390
Com as entradas, se eu fizer 'object.entries'.

06:31.630 --> 06:33.250
Bem, vamos ver o que acontece.

06:34.360 --> 06:42.990
Vamos esclarecer isso, eu recebo uma matriz de 'username' 'Santa', 'username1' 'Rudolph' e 'username2' 'Mr. Grinch '.

06:43.030 --> 06:49.600
Então, isso dá a você muito controle, você obtém propriedade e valor ou chave e valor, e você pode fazer qualquer coisa

06:49.600 --> 06:55.910
você quer com ele e usar 'foreach', 'map', 'reduce', 'filter' todas as funções do array.

06:55.930 --> 06:58.130
Então, vamos usar um cenário da vida real aqui.

06:58.390 --> 07:04.330
Digamos, nós queríamos, nós acabamos de receber isso do backend, o backend nos manda um monte de

07:04.330 --> 07:09.940
usuários que eles tinham no banco de dados e queremos gerar 'usernames' para isso porque nós não gostamos

07:09.940 --> 07:16.540
o 'username0', 'username1', 'username2', você deseja exibir o nome que exibe o 'Santa' com

07:16.690 --> 07:21.540
o número de ID, que é 0, para 'Rudolf' será 1, para 'Mr. Grinch 'será 2.

07:21.610 --> 07:25.160
Como podemos fazer isso? usando nossos novos poderes.

07:25.570 --> 07:30.040
Bem, eu simplesmente posso fazer algo com 'object.entries',

07:31.340 --> 07:40.290
e 'object.entries' terá um 'objeto' que eu posso mapear e isso nos dará um 'valor',

07:40.860 --> 07:44.370
lembre-se novamente que isso retornará matrizes.

07:44.640 --> 07:55.700
E aqui nós só queremos voltar a um valor de 1 porque queremos pegar 'Papai Noel', 'Rudolph' e 'Sr. Grinch '.

07:55.740 --> 07:58.690
Então esse é o segundo item na matriz.

07:59.130 --> 08:06.710
E, em seguida, queremos adicionar a isso, como uma string 'valor 0', que é o primeiro item.

08:06.750 --> 08:09.540
Então, 'username0', 'username1', 'username2'.

08:10.080 --> 08:13.330
E aqui queremos "substituir",

08:13.440 --> 08:21.480
esta é apenas uma função que podemos usar em strings e queremos que ela substitua 'username' por uma string vazia ('').

08:22.710 --> 08:29.520
Então, o que estamos fazendo aqui é que estamos criando uma nova string com 'Santa', 0

08:29.940 --> 08:30.490
porque não precisamos do nome de usuário aqui.

08:30.510 --> 08:38.280
Então, agora, mesmo que tenhamos um objeto, podemos percorrê-lo como um array e, assim, temos novos

08:38.280 --> 08:42.430
nomes de usuário, 'Santa0', 'Rudolph1' e 'Mr. Grinch2 '.

08:42.780 --> 08:43.880
Quão legal é isso?

08:44.880 --> 08:50.790
Então, essas são realmente muito úteis adições à linguagem, especialmente 'object.values' e

08:50.790 --> 08:57.970
'objects.entries', você pode fazer muito com isso, mas há um grande recurso ES8 que chegou e

08:57.980 --> 09:03.870
todo mundo está animado, e eles são chamados 'Async', Oh espere!

09:04.100 --> 09:07.670
Agora é novo e todos na comunidade estão realmente animados com isso.

09:07.670 --> 09:14.710
No entanto, a fim de compreender plenamente o benefício e compreendê-lo, precisamos de um vídeo inteiro por conta própria.

09:14.960 --> 09:17.220
Então eu vou te ver nessa.

09:17.530 --> 09:17.790
Tchau tchau.