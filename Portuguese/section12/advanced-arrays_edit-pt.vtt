WEBVTT

00:01.370 --> 00:10.140
E estamos de volta para falar sobre matrizes novamente na primeira seção, quando falamos sobre matrizes, dissemos que

00:10.190 --> 00:11.980
eles se pareciam com algo assim

00:15.010 --> 00:18.230
colchetes e podemos colocar o que quisermos.

00:18.220 --> 00:20.920
Nós apenas colocamos alguns números aqui.

00:21.100 --> 00:27.340
Então, esses são arrays e falamos sobre o fato de que podemos fazer quatro loops com eles.

00:27.340 --> 00:32.590
Nós podemos fazer para cada um deles que era novo no meu script cinco.

00:32.720 --> 00:35.390
E hoje vamos aprender mais alguns.

00:35.540 --> 00:41.990
Mas antes disso, vamos nos lembrar de como o For Each funciona.

00:42.030 --> 00:47.200
Digamos que queremos multiplicar cada número no array.

00:47.430 --> 01:01.860
Podemos apenas lembrar Konst agora podemos apenas usar nossa nova sintaxe E6 e podemos dizer que nova matriz é igual a

01:03.240 --> 01:08.170
array ponto para cada um e ele lê muito bem para cada array.

01:09.290 --> 01:15.750
Vamos usar um número e vamos usar novamente como função.

01:15.980 --> 01:17.690
Não há mais palavra de função.

01:17.690 --> 01:28.290
Tudo parece mais bonito com a flecha gorda e para cada número no array Whalsay number times

01:29.040 --> 01:34.020
dois multiplicam tudo por dois.

01:34.020 --> 01:38.810
Agora vamos ver o que isso nos dá log do console.

01:39.830 --> 01:41.160
Você é

01:46.950 --> 01:47.700
Indefinido.

01:47.860 --> 01:50.250
Bem, porque não é assim.

01:50.260 --> 01:58.510
Para cada trabalho certo para cada apenas diz que eu vou passar por cima desses elementos e eu vou multiplicar

01:58.510 --> 02:02.280
um número por dois, mas não estamos mudando a matriz.

02:02.380 --> 02:08.500
Se olharmos para o array agora, ainda é a mesma coisa 1 a 10 16.

02:08.700 --> 02:14.190
Estamos apenas multiplicando aleatoriamente os números por dois, mas não estamos realmente armazenando em nenhum lugar.

02:14.830 --> 02:24.940
Se queremos fazer o que estamos fazendo, então temos que dizer Konst em dobro e vamos dizer que o dobro é uma matriz

02:25.600 --> 02:31.760
e, em seguida, pressione dois pontos.

02:31.820 --> 02:38.410
Então, estamos empurrando para o array enquanto percorremos o número de vezes para.

02:38.480 --> 02:40.210
Agora vamos ver o que o dobro nos dá.

02:43.440 --> 02:48.760
Eu salvo uma atualização e vejo isso.

02:48.820 --> 02:52.500
Eu tenho dois para 20 32.

02:52.570 --> 02:53.160
ESTÁ BEM.

02:53.380 --> 03:05.910
Agora, os que vamos falar hoje é o filtro do mapa e reduzir, eu diria que esses três são

03:05.910 --> 03:11.810
provavelmente os métodos mais importantes que você vai usar no seu dia hoje.

03:11.880 --> 03:17.340
Javascript eles são super úteis, então realmente comece a se familiarizar com eles.

03:17.390 --> 03:25.610
E sempre que você pensar em fazer algum tipo de loop, provavelmente você quer fazer um desses três.

03:25.680 --> 03:32.850
Vamos começar com o mapa da maneira acima de dobrar cada coisa na matriz e criar uma nova matriz

03:32.850 --> 03:52.430
bem com o mapa que podemos fazer mapa de custo parade array ponto número do mapa é o número de vezes para a forma como o mapa funciona

03:52.490 --> 04:01.720
é que você sempre precisa retornar alguma coisa porque o que é diferente para o mabbe do que para cada

04:01.930 --> 04:10.690
bem para cada loop apenas sobre algo e ele só faz o que a função diz contra com o

04:10.690 --> 04:11.530
array.

04:11.680 --> 04:19.330
Nós podemos fazer o que nós não pudemos fazer para cada um, que é um loop em cada elemento de cada número e retorna um novo

04:19.330 --> 04:21.100
array.

04:21.110 --> 04:22.310
Deixe-me mostrar o que quero dizer.

04:22.790 --> 04:25.270
Toda vez que a matriz faz um loop.

04:25.310 --> 04:29.110
Então, digamos que aqui o primeiro é o número um.

04:29.310 --> 04:36.340
Nós retornamos 1 vezes 2 que é colocado na matriz do mapa que agora é 2.

04:36.450 --> 04:39.370
E então vamos para o próximo número a 2 vezes 2.

04:39.390 --> 04:46.290
Agora é adicionado à matriz 10 vezes 2 é adicionado à matriz e 16 vezes 2 são adicionados à matriz.

04:46.300 --> 04:47.740
Então é por isso que nós devolvemos.

04:47.860 --> 04:53.980
E fazendo isso, se nós Konsole dog log array mapa

04:57.520 --> 05:00.460
e vamos atualizar aqui.

05:00.850 --> 05:07.890
E tem uma chave de fechamento aqui, vamos tentar de novo.

05:08.010 --> 05:09.900
Você vê aquela matriz de mapas.

05:09.900 --> 05:23.650
Portanto, a primeira linha é dupla e a segunda, a doentia, nomeará isso apenas para que saibamos a diferença.

05:23.670 --> 05:26.760
E vamos refazer tudo isso de novo.

05:27.260 --> 05:31.340
A propósito, você está se perguntando por que estou atualizando em vez de apenas copiar e colar aqui.

05:31.350 --> 05:38.570
Bem, isso é porque porque estamos usando a Konst está dizendo array já foi declarado então eu tenho

05:38.580 --> 05:39.960
para atualizar.

05:40.290 --> 05:41.520
Mas ai você vai.

05:41.520 --> 05:47.830
Para cada mapa olhando para esses dois eles parecem estar fazendo a mesma coisa.

05:48.720 --> 05:54.570
Mas há uma diferença crítica entre mapa e para cada um e eu estou aqui para te dizer que sempre que você

05:54.570 --> 06:00.160
quero loop fazer um loop simples e tomar alguma ação em algo como uma matriz.

06:00.450 --> 06:06.980
Você quer usar o mapa para cada um com para cada operação pode não fazer nada.

06:07.020 --> 06:15.310
Você pode deixar isso em branco ou fazer o log do Konsole, porque tudo para cada um deles é para iterar

06:15.350 --> 06:24.550
que está indo um por um para iterar sobre uma coleção de elementos como 1 a 10 e 16 e aplicar qualquer

06:24.550 --> 06:27.440
operação nós dizemos para cada elemento.

06:27.460 --> 06:31.800
Agora, o mapa, por outro lado, tem uma restrição na operação.

06:31.930 --> 06:35.230
Espera que a operação retorne um elemento.

06:35.230 --> 06:42.580
Então, com o mapa para cada um, você pode ter várias linhas de código fazendo todas essas coisas loucas versus mapa

06:42.970 --> 06:43.740
com mapa.

06:43.750 --> 06:46.900
Você sempre tem um elemento de retorno.

06:46.930 --> 06:54.280
O mapa itera novamente percorre uma coleção de elementos aplicando a operação em cada elemento

06:54.730 --> 07:00.510
e, finalmente, armazenar o resultado de cada invocação da operação.

07:00.520 --> 07:06.970
Isso é em outra coleção que é o array de mapas.

07:07.010 --> 07:12.920
Em outras palavras, o mapa transforma a matriz.

07:12.920 --> 07:22.490
Ele cria um novo array que é o array do mapa versus para cada um, o que faz um monte de ações baseadas

07:22.490 --> 07:27.620
na matriz e o que essas ações não são realmente limitadas.

07:27.620 --> 07:34.230
Se quisermos retornar uma nova matriz, temos que criar nossa própria matriz e, em seguida, empurrar.

07:34.370 --> 07:39.260
E você pode notar aqui algo que falamos na última seção, quando falamos sobre avançado

07:39.260 --> 07:49.990
funções e essa é a idéia de efeitos colaterais, se voltarmos com foreach podemos fazer um monte de

07:49.990 --> 07:52.010
efeitos colaterais dentro da função.

07:52.210 --> 08:00.650
Você pode criar uma nova matriz que você pode empurrar para aquela matriz que você pode retornar indefinida.

08:00.650 --> 08:07.960
Você viu que quando fizemos o primeiro para cada um ou até agora não estamos realmente retornando nada.

08:08.010 --> 08:12.120
Então, estamos retornando indefinido versus com um mapa.

08:12.220 --> 08:15.700
Todos esses efeitos colaterais estão teoricamente desaparecidos.

08:15.840 --> 08:19.190
E porque com um mapa nós temos que retornar.

08:19.240 --> 08:22.800
Deixe-me mostrar-lhe se eu não voltar aqui, vamos ver o que acontece.

08:30.910 --> 08:34.280
Eu tenho mapa indefinido, indefinido, indefinido, indefinido.

08:34.540 --> 08:37.660
Imediatamente sabemos que estamos fazendo algo errado que precisamos devolver.

08:38.140 --> 08:47.230
E como mencionamos na seção anterior, criamos agora uma função pura onde não há dúvida

08:47.230 --> 08:48.790
sobre se nós retornamos ou não.

08:49.660 --> 08:59.130
Temos entradas uma função sem efeitos colaterais que simplesmente retorna um valor.

08:59.180 --> 09:01.350
Mais uma vez um conceito muito importante.

09:01.370 --> 09:05.990
Queremos manter as coisas agindo de uma maneira esperada.

09:06.080 --> 09:13.310
Nós não queremos ter um pedaço de código que mora em um site, digamos por quatro anos e alguém

09:13.310 --> 09:21.350
vem quem não conhece intimamente e de repente todos esses efeitos colaterais acontecem

09:21.500 --> 09:23.950
eles não sabem.

09:24.080 --> 09:31.540
Mais uma vez, queremos escrever Foxtons simples e é isso que o mapa nos permite fazer.

09:31.650 --> 09:34.980
E o outro importante é que não estamos mudando o array.

09:34.980 --> 09:40.830
Essa matriz permanece exatamente igual à matemática porque estamos sempre apenas fazendo uma nova cópia da matriz que estamos

09:40.830 --> 09:44.420
nunca mutando os dados.

09:44.490 --> 09:44.910
Tudo bem.

09:44.910 --> 09:46.090
Então isso foi mapa.

09:46.200 --> 09:48.100
Vamos trazer de volta o retorno aqui.

09:48.420 --> 09:51.940
E vamos trazer de volta o cônsul.

09:51.960 --> 09:59.160
Eu também quero te mostrar que quando você só tem um único parâmetro com uma função de ar você pode realmente

09:59.640 --> 10:04.400
evite os suportes.

10:04.560 --> 10:11.410
E, novamente, porque estamos retornando e estamos apenas retornando uma única linha aqui podemos fazer taquigrafia que

10:11.410 --> 10:12.970
é apenas isso

10:16.290 --> 10:19.020
housecleaner faz outlook.

10:19.250 --> 10:24.050
Vamos novamente testar isso.

10:24.060 --> 10:24.490
Ai está.

10:24.490 --> 10:26.070
Tudo está bem.

10:26.070 --> 10:35.280
Olhe para aquela diferença entre o mapa e o para o próximo que eu vou te mostrar é o filtro.

10:35.600 --> 10:39.460
Agora, com filtro, podemos dizer matriz de filtros.

10:40.310 --> 10:51.230
E como o nome sugere, podemos filtrar nossa matriz com uma condição em nosso caso, podemos dizer Blits retornar

10:51.350 --> 11:00h.010
todos os elementos na matriz que estão acima, então podemos dizer que o número é maior que 5.

11:00.310 --> 11:11.360
E como no map, isso retorna um novo array, então temos que retornar algo porque o array de filtros está indo

11:11.360 --> 11:12.890
para conter essa informação.

11:12.890 --> 11:23.620
Então, a maneira que você lê isso é filtrar este Saray que está aqui enquanto você está indo um por um, então um número

11:24.190 --> 11:31.150
será o primeiro um retorno é um maior que 5.

11:31.190 --> 11:34.100
Neste caso, vai dizer que é falso.

11:34.310 --> 11:38.290
Então, não vamos adicionar isso na matriz de filtros.

11:39.090 --> 11:43.350
Então itera a dois é muito maior que cinco.

11:43.350 --> 11:44.580
Não é falso.

11:44.580 --> 11:50.940
Então, não vai para a matriz de filtros é 10 maior que 5.

11:51.390 --> 11:52.550
Sim, isto é bom.

11:52.560 --> 11:57.520
Dez vai para a matriz de filtros e é 16 maior que 5.

11:57.870 --> 11:58.350
Sim.

11:58.500 --> 12:03.100
Então 16 vai para o array.

12:03.000 --> 12:08.070
E, novamente, porque é apenas uma única linha, podemos fazer uma breve forma aqui.

12:11.410 --> 12:19.450
E agora, se cancelarmos o log e vamos dizer array de filtro de filtro.

12:22.590 --> 12:39.920
E atualize recebemos o filtro contendo 10 e 16, se fizermos igual a 5, nesse caso, teremos um

12:39.920 --> 12:43.850
array vazio porque nada é igual a cinco.

12:43.910 --> 12:46.000
Então você pode colocar qualquer condição que você quiser aqui.

12:46.010 --> 12:51.480
Se ele tivesse força e você quer ver se contém uma palavra olá Bem, você pode fazer isso também.

12:51.560 --> 12:56.210
Tudo o que você precisa fazer é retornar true ou false se retornar false.

12:56.210 --> 13:02.050
Não entrará na matriz se ela retornar verdadeira enquanto ela estiver na matriz.

13:02.050 --> 13:04.210
Muito legal muito útil.

13:04.500 --> 13:05.430
O que mais nos temos.

13:05.440 --> 13:11.550
Bem, o último que eu quero mostrar é reduzir e isso é realmente muito poderoso, você pode fazer muito com

13:11.550 --> 13:12.250
Reduzir.

13:12.330 --> 13:16.910
Você pode realmente fazer filtragem e mapeamento com redução.

13:17.040 --> 13:19.110
Então é um método realmente muito poderoso.

13:19.410 --> 13:22.470
Mas vou mostrar-lhe uma maneira fácil de começar.

13:23.910 --> 13:27.810
Bem, nós vamos fazer é dizer Konst

13:30.590 --> 13:43.270
reduzir a matriz que ele chama e, novamente, isso retorna uma nova matriz que salvar reduzir e reduzir leva algo chamado

13:43.300 --> 13:50.080
um acumulador e o número.

13:50.120 --> 13:52.490
Agora, obviamente, isso pode ser qualquer nome.

13:52.510 --> 13:58.190
Às vezes você vai ver um CC para um acumulador que vamos deixar assim por agora para que você possa ver

13:58.190 --> 13:59.180
sabe qual é o número.

13:59.180 --> 14:05.860
O número é de 1 a 10 e 16, mas o que é acumulador.

14:06.230 --> 14:15.140
Bem acumulador é algo onde podemos armazenar as informações que acontecem no corpo da função.

14:15.140 --> 14:25.180
Deixe-me explicar o acumulador mais o número e novamente porque reduzimos o retorno de um array.

14:25.260 --> 14:27.930
Temos que devolver um valor.

14:28.210 --> 14:36.030
E o que estamos dizendo aqui é que toda vez que você iterar Então vamos dizer que a primeira volta.

14:36.060 --> 14:42.220
Você tem o acumulador número um mais o número um é igual.

14:42.310 --> 14:49.050
Digamos que se o acumulador é zero, então tudo igual a 1 agora zero mais um é igual a 1.

14:49.270 --> 14:57.160
Quando 2 chega, fazemos 1 mais 2 porque o acumulador lembra o que havia antes e depois

14:57.160 --> 15:03.260
10 vem e você vai três mais 10.

15:03.270 --> 15:05.540
Agora, qual é o acumulador?

15:05.540 --> 15:10.800
Nós não definimos em nenhum lugar nos redos após a função.

15:11.010 --> 15:14.220
Você tem um segundo parâmetro.

15:14.340 --> 15:20.460
E aqui podemos especificar o que queremos que nosso acumulador estabeleça com o valor padrão.

15:20.910 --> 15:23.740
No nosso caso, digamos que zero.

15:23.740 --> 15:28.190
Agora, se eu fizer o diálogo do Konsole, reduza

15:31.000 --> 15:32.890
e reduzir.

15:33.220 --> 15:34.370
Vamos ver o que acontece.

15:39.150 --> 15:48.940
Temos redução 29 porque 10 mais 16 é 26 mais três é 29.

15:48.980 --> 16:05.560
Se eu mudei para 5 e copiei e tente novamente, obtemos 34 porque o número inicial é agora cinco.

16:05.600 --> 16:06.570
Muito legal.

16:06.610 --> 16:07.550
Então é isso.

16:07.660 --> 16:13.820
Eu quero que você lembre desses três métodos, porque você os usará muito em sua carreira.

16:13.810 --> 16:15.490
Eles são muito muito úteis.

16:15.550 --> 16:24.290
Eles são puros, o que significa que toda vez que fazemos uma operação, quaisquer entradas que recebemos sempre retornam

16:24.290 --> 16:24.940
valor.

16:24.980 --> 16:28.610
E não há efeitos colaterais.

16:28.690 --> 16:33.270
E como você pode ver, elas são muito fáceis e simples de ler.

16:33.400 --> 16:36.830
Então se acostumar com eles e boa sorte com os exercícios

16:36.880 --> 16:40.130
depois desse vídeo. Eu vou te ver no próximo tchau.
