WEBVTT

00:01.270 --> 00:02.500
Bem vindo de volta.

00:02.500 --> 00:06.490
Vamos falar sobre alguns conceitos avançados de 'objetos'.

00:06.490 --> 00:13.840
Agora, como eu disse, com arrays e funções, estes são conceitos avançados, você provavelmente não vai

00:13.840 --> 00:21.490
consiga 100 por cento na primeira vez, mas use esses vídeos como referência para voltar

00:21.490 --> 00:22.980
progredir em sua carreira.

00:24.250 --> 00:30.020
Agora neste vídeo, vou falar sobre três coisas que são importantes com objetos.

00:30.110 --> 00:35.260
Nós vamos falar sobre 'tipo de referência'.

00:35.350 --> 00:38.040
Nós vamos falar sobre 'contexto'.

00:38.620 --> 00:41.350
E finalmente vamos falar sobre 'instanciação'.

00:45.000 --> 00:51.690
Então vamos começar com a primeira linha. 'tipo de referência'. O que quero dizer quando digo um "tipo de referência"?

00:51.690 --> 00:58.810
Bem, eu queria ver se eu posso adivinhar o que vai acontecer quando eu fizer array '[]' é igual a array '[]'.

00:58.830 --> 01:00.530
O que você acha que a resposta vai ser?

01:00.570 --> 01:02.860
Vamos ver.

01:02.890 --> 01:05.930
Hmm! interessante.

01:05.930 --> 01:14.160
OK, e se eu fizer array um é igual a array um? interessante.

01:14.260 --> 01:15.270
OK mais uma pergunta.

01:15.550 --> 01:18.280
E algo assim?

01:19.650 --> 01:20.620
'Objeto1'

01:21.060 --> 01:25.090
é igual ao valor de 10,

01:29.230 --> 01:37.220
e nós diremos que 'object2' é igual a 'object1'.

01:39.120 --> 01:49.450
E finalmente diremos que uma variável (var) 'object3' é igual a valor 10.

01:49.460 --> 01:54.710
Então, olhando para estes e eu estou indo realmente para copiá-lo aqui, então você pode ver isso também.

01:59.260 --> 02:00.180
Olhando para isto,

02:00.310 --> 02:07.420
O que acontece se eu 'object1' for igual a 'object2'?

02:07.450 --> 02:08.510
O que você acha que acontecerá?

02:09.560 --> 02:10.100
Verdade.

02:10.300 --> 02:10.750
ESTÁ BEM.

02:10.880 --> 02:15.580
Isso faz sentido, quero dizer 'object2' é 'object1'.

02:15.760 --> 02:22.780
Mas e se eu 'object1' for igual a 'object3'.

02:22.860 --> 02:25.710
Aqui eu fico falso.

02:25.900 --> 02:29.160
Mas por que isso? Temos valor 10, valor 10.

02:29.180 --> 02:30.990
Ambos são a mesma coisa.

02:31.240 --> 02:32.060
Certo.

02:32.460 --> 02:33.190
Vamos verificar outra coisa.

02:33.200 --> 02:37.010
E se eu fizer 'object1.value'

02:38.230 --> 02:42.430
é igual a 15, OK.

02:42.610 --> 02:45.340
E agora eu faço 'object2.value'

02:48.390 --> 02:50.020
é igual a 15.

02:50.150 --> 02:59.590
Mas se eu fizer 'object3.value', eu recebo 10. Bem, isso estava confundindo certo.

03:00.000 --> 03:02.280
Vamos ver o que realmente está acontecendo.

03:02.430 --> 03:07.010
E este é o primeiro tópico sobre o qual estamos falando, que é 'tipo de referência'.

03:07.110 --> 03:08.220
Vamos olhar um diagrama.

03:11.020 --> 03:16.700
Objetos são chamados de 'tipos de referência' em Javascript.

03:16.940 --> 03:25.000
Até esse ponto, todos os outros tipos de javascript que aprendemos incluindo 'números', 'null', temos

03:27.530 --> 03:39.610
'indefinido', 'booleano', 'cordas' e até 'símbolos' são todos definidos pela linguagem de programação.

03:39.600 --> 03:48.150
Então Javascript, a pessoa que escreveu javascript e ECMAScript a norma diz que estes são tipos primitivos.

03:48.150 --> 03:57.990
Nós lhes dizemos o que são. Agora um 'tipo de referência' que é um tipo não primitivo não é definido pelo

03:57.990 --> 03:59.900
linguagens de programação.

03:59.910 --> 04:06.380
O que isso significa é que eles são criados pelo programador.

04:06.410 --> 04:08.750
Então, vamos olhar aqui como um exemplo.

04:09.760 --> 04:10.930
Quando digo variável.

04:10.930 --> 04:13.200
Número um é igual a um.

04:13.330 --> 04:15.170
Javascript sabe o que é.

04:15.170 --> 04:16.470
É um número.

04:16.480 --> 04:17.500
É um tipo primitivo.

04:17.500 --> 04:19.450
É sempre a mesma coisa.

04:19.590 --> 04:25.340
É imutável toda vez que usa aquele que é o mesmo que o javascript conhece.

04:25.460 --> 04:31.460
Quando eu faço a variável número dois, está usando o mesmo número um que o javascript conhece.

04:33.260 --> 04:40.750
No entanto, quando criamos 'object1' igual a 'valor 10' e 'object2' é igual a 'object1' e 'object3' é igual a

04:40.770 --> 04:45.620
o 'valor 10', bem esses são criados pelo programador.

04:45.630 --> 04:47.190
Existem 'tipos de referência'.

04:47.190 --> 04:55.310
Então, o que dissemos foi que eu quero 'object1' criar um novo objeto, vou dizer esta caixa aqui este arquivo

04:56.560 --> 05:06.590
e nele, coloque "valor 10" nessa caixa. 'object2' diz, eu quero que você apenas faça referência e é aí que o

05:06.590 --> 05:07.680
vem a palavra,

05:07.760 --> 05:19.360
referência 'object1', dizendo hey! Eu quero o que estiver dentro desta caixa. Quando 'object3' é criado,

05:19.470 --> 05:22.770
é um novo objeto porque temos os novos colchetes.

05:23.660 --> 05:27.770
E está dizendo colocar "valor 10" nesta caixa.

05:27.770 --> 05:35.320
Essencialmente o que estamos fazendo é dizer, quando criamos uma variável (var) 'object1' quando estamos armazenando apenas uma referência

05:35.330 --> 05:40.520
um endereço para onde estamos armazenando o 'valor 10' que é 'Box1'.

05:40.520 --> 05:43.780
Então estamos dizendo 'objeto1'

05:43.970 --> 05:49.660
Eu só estou deixando você saber que este é o endereço de todos os conteúdos que você quer

05:49.730 --> 05:55.710
e isso é no 'Box1'. 'object2' está dizendo, eu quero o que for um 'objeto1'

05:55.730 --> 06:01.220
e nós olhamos um 'objeto1', um 'objeto1' só tem a informação de 'box1'.

06:01.430 --> 06:08.110
Por isso, faz referência a isso, um 'object3' cria um novo objeto.

06:08.120 --> 06:15.140
Então está dizendo, vou colocar meu conteúdo em 'Box3' e só vou ter o endereço da caixa

06:15.470 --> 06:18.070
dizendo 'Box3' que está bem aqui.

06:19.500 --> 06:21.090
Então, voltando ao nosso exemplo,

06:24.280 --> 06:28.040
isso faz sentido, quando mudamos o valor 'object1' para 15,

06:28.090 --> 06:31.150
nós mudamos o conteúdo de 'Box1'.

06:31.150 --> 06:39.330
Então, quando fazemos 'object2.value' que está referenciando a mesma caixa como 'object1' que é 15,

06:39.340 --> 06:45.730
mas 'object3.value' não muda porque é isso que está interessado em uma caixa completamente diferente, é 'Box3'

06:46.720 --> 06:48.740
e voltando ao primeiro exemplo.

06:50.920 --> 06:58.970
Arrays, bem como mencionei em vídeos anteriores, os arrays são apenas objetos no final do dia.

06:59.090 --> 07:05.220
Então, quando você cria uma matriz, é a mesma coisa, criando uma caixa, uma estrutura de dados.

07:05.510 --> 07:09.100
E isso está criando uma segunda estrutura de dados.

07:09.120 --> 07:09.800
Certo.

07:09.860 --> 07:16.820
Então esse é um 'tipo de referência'. Um conceito muito importante, mas acho que você acerta.

07:17.670 --> 07:18.980
Vamos para o próximo.

07:18.990 --> 07:21.010
Isso fica um pouco mais complicado.

07:21.060 --> 07:30.090
Este é chamado de "contexto" e "contexto" se confunde muito com "escopo".

07:30.190 --> 07:37.230
Se você se lembra, dissemos que o 'escopo' é criado quando vê chaves, certo !.

07:37.270 --> 07:45.040
Nós dissemos que, se criarmos uma função, assim que criarmos essa função

07:45.040 --> 07:45.880
existe um novo 'escopo' que é criado.

07:46.450 --> 07:57.550
Então podemos ter, 'deixe um' igual a 'e' que vive dentro deste universo.

07:57.560 --> 08:02.180
Não sabe nada sobre o escopo da raiz que está aqui.

08:02.180 --> 08:06.680
Então, se eu fizer 'console.log (a)', bem, não vai funcionar.

08:06.880 --> 08:11.940
Oh! e precisamos realmente atribuir algo e precisamos nomear para dizer "b".

08:12.320 --> 08:16.380
Então, se eu fizer isso, bem 'console.log (a)'.

08:16.590 --> 08:20.710
bem, apenas retorne 'ReferenceError' porque ele não existe.

08:20.810 --> 08:22.370
Então isso é 'escopo'.

08:22.400 --> 08:31.520
Agora, como o 'contexto' é diferente? 'contexto' diz a você, onde estamos dentro do objeto.

08:31.520 --> 08:32.650
Deixe-me explicar.

08:32.990 --> 08:38.760
Se, nós dizemos 'console.log (this)'.

08:39.110 --> 08:45.350
Bem, você vê, eu tenho algum destaque, e esta é a primeira vez que estamos vendo 'isso',

08:45.350 --> 08:46.340
e é uma palavra especial em javascript.

08:46.340 --> 08:52.220
Provavelmente a palavra mais confusa que muitas pessoas têm problemas e até pessoas que eu tenho em

08:52.220 --> 08:57.150
a indústria por anos ainda tem um tempo difícil com 'isso'. Mas vamos ver o que é isso.

08:57.560 --> 09:03.950
'isto' é, como você pode ver, o 'objeto da janela'.

09:03.990 --> 09:14.610
Então, apenas para verificar novamente, se eu fizer 'console.log (this)' igual a 'janela', eu obtenho verdadeiro.

09:14.840 --> 09:23.990
E eu posso acessar 'this.alert ("hello")'

09:24.030 --> 09:35.670
Então, o que 'isso' significa, é o que é o ambiente de objetos em que estamos agora, a melhor maneira de pensar sobre isso é,

09:35.670 --> 09:42.500
o que está à esquerda do ponto?

09:42.510 --> 09:49.860
Então, agora, eu sou capaz de fazer 'alerta' porque eu estou dentro do 'objeto de janela'.

09:50.190 --> 09:54.060
Então, fazer 'janela' ou fazer 'isso' é a mesma coisa.

09:54.210 --> 09:57.170
Agora, por que isso é importante?

09:57.330 --> 10:04.110
Bem, quando chegarmos a 'instanciação', eu vou te mostrar porque é? mas é um conceito muito importante

10:04.110 --> 10:05.490
que você verá de novo e de novo.

10:05.550 --> 10:17.440
Mas lembre-se, 'isso' apenas se refere a qual objeto está dentro. Mais dois exemplos para demonstrar 'isso'.

10:17.480 --> 10:23.450
Uma é, se eu faço 'function a ()', com a função 'a',

10:26.240 --> 10:29.140
vai dizer 'console.log (this)'.

10:29.170 --> 10:30.840
Então, se eu chamo de 'a', o que você acha que acontece?

10:33.620 --> 10:35.660
Vamos ver. ainda o objeto da janela 'this'

10:35.660 --> 10:39.280
ainda se refere à função.

10:39.410 --> 10:47.240
E se você se lembra que é porque eu disse, tem que ser o objeto que estamos dentro agora.

10:47.240 --> 10:47.970
Tecnicamente, funcione 'a'.

10:48.020 --> 10:52.260
Eu posso ir 'window.a' e executar a função.

10:52.520 --> 11:02.940
Então, à esquerda do ponto, bem, essa é a 'janela', para criar um novo valor para 'this'.

11:03.070 --> 11:06.450
Você tem que fazer algo assim.

11:10.430 --> 11:13.560
'objeto', 'a' função 'a'.

11:13.580 --> 11:14.960
Agora, se eu fizer 'function ()'

11:19.930 --> 11:23.240
e aqui eu faço um 'console.log (this)'.

11:23.230 --> 11:32.550
Bem, nesse caso, se eu copiar isso e executar 'object4.a'

11:35.600 --> 11:36.340
Bem,

11:36.620 --> 11:45.780
Agora este é o objeto, que é 'object4'.

11:45.850 --> 11:49.910
Então, por que isso é importante para nós?

11:50.080 --> 11:54.510
Bem, primeiro de tudo você verá em outras bases de código, então é bom saber.

11:54.730 --> 12:01.840
Mas é realmente importante quando fazemos 'instanciação', 'instanciação' é quando você faz uma cópia de um objeto

12:02.470 --> 12:05.320
e reutilize o código.

12:05.320 --> 12:11.950
Imagine que você está construindo um grande jogo multiplayer online, e esse jogo terá muitos jogadores

12:11.950 --> 12:17.170
você pode ter magos que você pode ter trolls, warlocks, elves.

12:17.200 --> 12:24.130
Agora, se você tivesse que criar um objeto para cada jogador que é um monte de código repetido,

12:24.130 --> 12:28.040
isso é um monte de problemas e bem, isso é muito do seu tempo e não é muito eficiente.

12:29.410 --> 12:32.320
Para resolver isso, você pode fazer algo chamado 'instanciação'.

12:32.320 --> 12:37.490
Você está fazendo instâncias ou várias cópias de um objeto.

12:37.510 --> 12:42.990
Então deixe-me mostrar-lhe como fazemos 'instanciação' em javascript.

12:43.040 --> 12:49.340
Novamente, isso vai parecer um pouco estranho no início, assim como os loops 'for' fizeram, assim como as 'funções' fizeram

12:49.340 --> 12:54.000
no começo, mas é apenas a sintaxe, e você vai se acostumar com isso.

12:54.380 --> 12:59.290
Então, digamos que temos uma 'Player' 'class'.

12:59.430 --> 13:05.540
Agora você já vê a nova sintaxe e eu capitalizo uma 'classe'.

13:05.590 --> 13:10.060
Agora, pense em uma 'aula' como algo que eu quero fazer uma cópia.

13:10.210 --> 13:18.130
Se eu quiser fazer uma cópia de um 'objeto', é uma boa idéia fazer algo assim, então, bem, você

13:18.130 --> 13:20.060
veja como é fácil copiar isso agora.

13:20.070 --> 13:22.000
Então nós fazemos.

13:22.010 --> 13:23.680
'Jogador de classe'.

13:25.650 --> 13:28.650
E dentro daqui, vai dizer 'construtor'

13:31.360 --> 13:35.570
e eu sei que isso parece estranho, mas novamente é apenas sintaxe.

13:35.590 --> 13:45.650
Vamos dar, este 'Player' pode ter um 'nome' e um 'tipo' e dentro do construtor 'this.name' é igual

13:45.740 --> 13:51.350
'name' e 'this.type' são iguais a 'type'.

13:55.940 --> 13:58.150
Oh garoto! O que aconteceu aqui?

13:58.160 --> 14:00.890
'construtor', quando você cria uma 'classe', um 'Player', 'classe' diz.

14:01.190 --> 14:08.330
Toda vez que estou fazendo uma cópia de um 'Player', a primeira coisa que é executada é a função 'construtor' e

14:08.330 --> 14:14.760
esta função 'construtor' irá criar estas propriedades no objeto 'Player'.

14:14.990 --> 14:17.530
Então, 'nome' e 'tipo'.

14:17.660 --> 14:21.500
E agora eu posso criar qualquer coisa que eu quiser para o 'Player'.

14:21.500 --> 14:30.730
Digamos que nós queremos criar um método como 'introduction ()' que 'console.log (s)'

14:33.650 --> 14:42.980
com back ticks (`), 'Oi eu sou' e, novamente, se você se lembrar dessas strings de modelo de sintaxe,

14:43.420 --> 14:54.190
'this.name', 'I'm a', 'this.type'. Impressionante!

14:54.280 --> 15:02.560
Então, agora eu estou dizendo, essa classe 'Jogador', qualquer jogador que eu criar sempre será capaz de se apresentar e

15:02.560 --> 15:07.880
eles também terão 'this' 'name' e 'this.type'.

15:07.900 --> 15:14.930
E a razão pela qual usamos 'this' aqui é que, quando criamos um 'Player', podemos acessar o nome e a propriedade type.

15:14.980 --> 15:17.090
Eu vou te mostrar mais tarde como isso funciona.

15:17.320 --> 15:24.580
Mas esta é apenas a sintaxe com a qual você vai se acostumar. Para acessar

15:24.580 --> 15:25.090
o 'Player' e faça cópias dele.

15:25.120 --> 15:29.290
Você terá que executar um 'construtor', que é todas as propriedades e métodos

15:29.290 --> 15:29.970
que você quer que o 'Player' tenha.

15:30.250 --> 15:38.680
Você também pode criar métodos que 'Jogadores' podem ter e sempre que você quiser acessar uma propriedade

15:38.680 --> 15:47.160
dentro do 'construtor' use bem 'this.name' para (se eu) quiser usar 'introduzir', terei que fazer 'this.introduce'.

15:47.190 --> 15:54.030
OK, então temos um 'Player' mas quando estamos construindo nosso jogo multiplayer

15:54.030 --> 15:54.650
Queremos agora copiar isso, mas adicionar a ele.

15:54.750 --> 15:59.470
Digamos que tenhamos o que queremos para criar um assistente, um jogador que seja um mago.

15:59.520 --> 16:00h.570
Nesse caso, faríamos

16:00.570 --> 16:04.010
'classe Wizard' novamente letra maiúscula

16:05.030 --> 16:10.780
'extends' e novamente é apenas a palavra-chave do javascript 'Player'.

16:13.400 --> 16:14.260
Então, o que isso está dizendo?

16:14.270 --> 16:19.340
Eu estou dizendo, eu quero 'assistente' para estender o que 'Player' tem.

16:19.340 --> 16:26.540
Então eu quero adicionar em cima de qualquer 'Player', novamente porque é uma 'classe', eu tenho que fazer um 'construtor'.

16:28.410 --> 16:35.700
E este 'Wizard' vai aceitar 'name' e 'type' e aqui dentro, esta é a parte complicada.

16:35.700 --> 16:45.480
Sempre que estendemos algo, precisamos também chamar a função 'construtor' do 'Player'.

16:45.480 --> 16:52.010
Temos que fazer algo chamado 'super' com as propriedades que queremos passar para o 'construtor'.

16:52.080 --> 17:01.040
Neste caso, 'name' e 'type', eu sei que isso é confuso, é algo que você tem que fazer,

17:01.340 --> 17:02.410
sempre que você 'estende' uma classe,

17:02.630 --> 17:09.450
você quer usar o super para que você tenha essencialmente acesso a eles.

17:09.460 --> 17:14.440
OK, então vamos dizer que com o assistente, também queremos ter uma função de 'play'.

17:14.620 --> 17:18.600
E a função 'play' era apenas um 'console.log'.

17:19.060 --> 17:30.640
'WEEEEEE eu sou um', 'esse' 'tipo' 'e agora que temos o nosso mago, qual é o poder?

17:30.640 --> 17:31.340
Qual é a razão que nós fizemos isso?

17:31.360 --> 17:37.340
Agora podemos fazer isso, em vez de criar constantemente 'Jogadores' e depois dizer que eles têm seus assistentes

17:37.450 --> 17:38.760
e eles podem jogar.

17:38.770 --> 17:49.360
Agora posso dizer que 'wizard1' é igual a 'new' 'Wizard' e nós chamaremos o primeiro assistente novamente.

17:49.370 --> 17:50.830
Nós temos 'nome' e 'tipo'.

17:51.210 --> 17:58.220
Então, vamos dizer "Shelly" e ela será uma "curandeira".

18:00.000 --> 18:15.990
E se eu quiser criar um novo feiticeiro, direi apenas que 'wizard2' é igual a 'new' 'Wizard' 'Shawn' e ele é 'Dark Magic'.

18:16.270 --> 18:23.120
Ooh !, Houve muita sintaxe nova, então vamos passar por isso e ter certeza de que entendemos tudo.

18:23.610 --> 18:29.010
Como aprendemos, vamos usar o console log (console.log) para realmente entender o que estamos fazendo.

18:29.010 --> 18:34.240
Eu vou adicionar um log de console (console.log) à direita do topo aqui.

18:36.240 --> 18:37.620
E vai dizer "isso".

18:37.640 --> 18:38.730
O que é isso'.

18:39.950 --> 18:46.950
Eu vou salvar e, na verdade, vou copiar isso no console.

18:47.150 --> 18:48.010
Vamos copiá-lo.

18:49.100 --> 18:51.570
E veja o que o log do console nos dá?

18:51.570 --> 18:54.430
Nós vemos que temos 'Wizard'.

18:54.530 --> 18:56.220
Tudo bem, vamos passar por tudo aqui.

18:57.580 --> 19:02.440
Eu digo, nós temos um 'Player de classe' e um 'Assistente de classe' que estende 'Player'.

19:02.830 --> 19:07.440
E então nós temos duas variáveis ​​que criamos 'wizard1' e 'Wizard2'.

19:07.480 --> 19:14.350
Agora o programa vai ver a palavra-chave 'new' e sempre que vir uma palavra-chave 'new' ela diz, oh! estamos

19:14.350 --> 19:23.810
criar um novo 'Wizard' e este 'Wizard' vai ter dois parâmetros 'Shelly' e 'Healer'.

19:23.860 --> 19:30.280
Então, vai para a classe 'Wizard' novamente porque tem essa palavra 'nova'.

19:30.310 --> 19:38.740
Ele vai para a aula de 'Wizard' e diz, ei! 'Wizard' Eu quero que você estenda 'Player'.

19:38.900 --> 19:47.990
Então ele vai para o 'construtor', e vai ver isso 'super' e o que isso faz, é preciso

19:47.990 --> 19:51.570
nos até o 'construtor' do 'Player'.

19:51.800 --> 20:02.510
E corre isto, e agora atribui 'isto' como 'Wizard' e depois introduz a função 'new' e depois

20:02.540 --> 20:03.920
adiciona a função 'play'.

20:03.920 --> 20:16.550
Agora, se eu for para 'mago1' e eu disser 'brincar', eu recebo 'WEEEEEEE, eu sou um curador', porque Shelly é um curador.

20:16.760 --> 20:25.800
Mas também tenho acesso a 'wizard1.introduce', 'Oi, sou Shelly, sou curador'.

20:27.220 --> 20:34.580
E também temos acesso ao 'wizard2', Uh! Eu tenho que correr isso de novo.

20:34.720 --> 20:35.950
Vamos correr isso de novo.

20:38.970 --> 20:42.680
E eu não acho que copiei o segundo 'bruxo' da última vez.

20:42.810 --> 20:47.370
Então agora eu tenho 'wizard2. introduzir'.

20:47.380 --> 20:48.780
'Oi, eu sou Sean'

20:49.260 --> 20:50.890
'Eu sou uma magia negra'.

20:50.920 --> 20:54.480
Essa frase não faz sentido Sean, mas tudo bem por enquanto.

20:54.970 --> 20:57.250
Vamos apenas tentar algo.

20:57.250 --> 20:58.610
Se eu fizer 'console log'

21:01.320 --> 21:02.500
Aqui.

21:02.740 --> 21:05.520
E nós vamos apenas dizer 'mago'

21:08.190 --> 21:11.190
e aqui vai dizer "jogador", só assim podemos distinguir entre eles.

21:12.710 --> 21:19.820
E eu só vou copiar o primeiro assistente para que não tenhamos dois deles em execução, novamente porque

21:19.820 --> 21:25.760
estamos criando dois 'assistentes', vamos ter essa corrida duas vezes. Mas apenas para a nossa sanidade, vamos correr.

21:25.820 --> 21:32.090
'Shelly'. Então eu vou atualizar e adicionar aqui. Eu esqueci de adicionar uma vírgula

21:35.320 --> 21:43.690
e vamos atualizar, e eu recebo um erro, 'Reference Error',

21:43.690 --> 21:45.040
'Deve chamar super constructor e classe derivada antes de acessar' this ''.

21:45.520 --> 21:54.430
O que está dizendo é que, para eu acessar 'this' e pegar 'this.type', eu tenho que chamar 'super' que

21:54.880 --> 21:57.200
executa uma função 'construtor' e 'player'.

21:57.730 --> 21:59.260
Então é isso que 'super' está fazendo.

21:59.260 --> 22:05.080
Parece meio estranho, mas é apenas algo que você precisa. Vou colocar isso na parte de baixo depois que ligarmos

22:05.080 --> 22:08.830
'super' e agora deve funcionar.

22:08.830 --> 22:09.190
Vamos ver

22:14.230 --> 22:18.810
Eu recebo, o primeiro 'jogador' 'assistente'.

22:19.220 --> 22:24.660
Então, chamamos de "super" assim que dizemos "novo mago", "Shelly, Healer".

22:24.930 --> 22:32.400
Eu vou para o 'assistente' estende 'Player', eu corro a função 'construtor', que diz 'super', hey! execute o

22:32.400 --> 22:35.280
função 'construtor' e o 'jogador' e eu corro isso.

22:35.400 --> 22:44.570
E é por isso que nós logamos 'console log player' primeiro e depois vamos para 'console.log' 'wizard' e então rodamos

22:44.570 --> 22:46.530
o resto da turma.

22:46.550 --> 22:48.180
Muito legal!.

22:48.390 --> 22:50.730
Agora só para te mostrar uma coisa.

22:50.760 --> 22:57.950
Esta é realmente uma nova sintaxe que você verá e 'reage' e é parte do ES6.

22:57.960 --> 23:07.090
Mas no passado, é assim que costumávamos fazer isso. O mesmo código que eu tenho lá em cima

23:11.630 --> 23:20.060
está bem aqui é chamado de herança clássica e não parece muito ruim, mas você vê que há

23:20.520 --> 23:26.250
protótipo que é outra coisa que você verá em javascript e para ser honesto com você,

23:26.250 --> 23:27.000
você não deveria realmente usá-lo.

23:27.000 --> 23:34.320
Não parece muito legal e você vê que temos que anexar 'play' a ambos 'wizard1' e 'wizard2' e

23:35.650 --> 23:39.210
simplesmente não parece tão legal quanto isso.

23:39.340 --> 23:41.950
E quando você se acostumar com tudo.

23:42.160 --> 23:43.820
Não é tão ruim.

23:43.840 --> 23:49.600
Tudo o que estamos dizendo é que, assim que dizemos "classe", dizemos:23:49.600 --> 23:51.060
Ei! provavelmente vamos fazer uma cópia desse objeto.

23:51.270 --> 23:56.820
Então, queremos fazer cópias do player, queremos fazer cópias de 'wizard' e isso é chamado de 'instanciação'.

23:56.820 --> 24:06.020
Quando eu faço a palavra-chave 'new', eu digo que faça uma instância de 'wizard' e 'wizard' usa alguma funcionalidade de

24:06.020 --> 24:11.270
o jogador e também adiciona sua própria função de 'play'.

24:11.270 --> 24:18.770
Santo Moly, isso foi muito, como eu disse, isso é algo que você terá que voltar e você não vai

24:18.770 --> 24:19.940
obtenha imediatamente.

24:19.940 --> 24:26.380
É realmente muito difícil entender completamente o tópico sem realmente ter que usá-lo na vida real.

24:26.420 --> 24:32.900
Apenas tenha isso em mente, toda vez que você ouvir alguém falar sobre 'tipo de referência' ou 'contexto' ou até mesmo 'escopo'

24:33.290 --> 24:35.780
ou 'instanciando' algo.

24:35.840 --> 24:38.790
Bem, estas são as coisas que eles estão falando.

24:39.020 --> 24:40.980
Objetos são realmente muito complicados.

24:41.000 --> 24:42.570
Eles são muito difíceis.

24:42.680 --> 24:47.040
Mas com isso, nos dá muito poder.

24:47.050 --> 24:51.280
Então, com isso, boa sorte com os exercícios, vou te ver no próximo. Tchau tchau.