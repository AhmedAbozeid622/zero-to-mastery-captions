WEBVTT

00:00.930 --> 00:08.280
Quando comecei a aprender javascript, módulos e esse tópico foi a coisa mais confusa que já tive

00:08.280 --> 00:12.990
Eu tive um tempo muito difícil de entender o conceito.

00:13.020 --> 00:21.800
Demorei um ano para conseguir, mas criei uma imagem mental na minha cabeça para entender melhor.

00:21.820 --> 00:27.610
E como fazemos neste curso, primeiro começamos com o problema, depois vamos para a solução que temos agora,

00:27.640 --> 00:30.990
para ver onde nós onde e onde estamos agora.

00:31.150 --> 00:37.120
Este é o modelo mental que eu criei e eu chamo de escalar a montanha de módulos.

00:37.150 --> 00:38.260
Deixe-me explicar.

00:38.680 --> 00:47.090
Quando começamos a escrever javascript e criar sites com javascript, bem, tivemos um arquivo html

00:48.450 --> 00:53.400
e a primeira vez que as pessoas estavam usando javascript,

00:53.500 --> 01:02.520
você usou uma tag de script e o que chamamos de script in-line. Um script in-line é exatamente isso

01:02.790 --> 01:07.780
Nós apenas inline todo o nosso javascript dentro do arquivo html.

01:07.850 --> 01:11.850
Agora há problemas que vejo com isso.

01:11.940 --> 01:19.090
Imagine isso ficando enorme, um enorme arquivo javascript centenas e milhares de linha de código.

01:19.170 --> 01:25.180
Uma é a falta de reutilização de código e você ouvirá esse termo muito.

01:26.930 --> 01:36.170
Se precisarmos adicionar outra página, talvez e about.html página, bem, temos que copiar este código e colocar

01:36.170 --> 01:38.980
no outro arquivo html.

01:39.210 --> 01:50.770
E o segundo, foi a poluição do namespace global, ou seja, uma vez que eu uso 'a' como variável,

01:50.770 --> 01:53.370
neste caso, no objeto da janela.

01:53.380 --> 02:01.810
Bem, eu nunca posso usar 'a' novamente e talvez centenas de linhas abaixo, por engano atribuo uma variável 'a' e eu

02:01.810 --> 02:03.300
apague minha função 'a'.

02:03.610 --> 02:05.340
Bem, isso é um grande problema.

02:05.410 --> 02:07.190
E isso é um grande problema em geral.

02:07.210 --> 02:12.910
Você quer ter certeza de não poluir o namespace global, que é o objeto da janela com todos

02:12.910 --> 02:18.520
esses nomes, porque então você tem colisões, você tem diferentes membros da equipe trabalhando em diferentes partes

02:18.520 --> 02:22.620
de código e, de repente, nós dois saímos com o mesmo nome.

02:22.660 --> 02:23.460
É um grande problema.

02:24.470 --> 02:29.670
A próxima tentativa foi tags de script. E isso é algo que estamos familiarizados.

02:29.990 --> 02:41.920
Em vez de ter inline, tínhamos tags de script e brincávamos com bootstrap e j-query.

02:42.000 --> 02:43.230
Isto é o que nós fizemos.

02:43.560 --> 02:52.450
Nosso arquivo j-query foi carregado primeiro, depois nosso arquivo javascript foi carregado em segundo lugar e, como você pode ver,

02:52.450 --> 02:59.410
podemos ter um arquivo de script e o segundo e o terceiro, depois o quarto, dessa forma, você tem

03:00.430 --> 03:04.270
tudo fora do html. Resolve o problema certo?

03:05.330 --> 03:10.010
Bem, o problema com tags de script, até onde eu posso ver, são três coisas.

03:10.540 --> 03:18.400
Se precisarmos adicionar outra página como uma página sobre, bem, ainda temos que copiar e colar essas tags de script.

03:18.620 --> 03:21.630
E novamente, nós realmente não queremos fazer isso.

03:21.670 --> 03:28.660
O segundo é a falta de resolução de dependência, e você é responsável por garantir que

03:29.470 --> 03:32.560
os scripts são adicionados na ordem correta.

03:32.560 --> 03:39.340
Por exemplo, se esse script acessa uma função do arquivo de número 4.js, ele irá falhar

03:39.340 --> 03:43.210
porque o arquivo número 4.js ainda não foi carregado.

03:43.420 --> 03:46.580
Então, isso é falta de resolução de dependência.

03:46.830 --> 03:51.070
E finalmente um terceiro, isso realmente não resolve o problema do namespace global, certo?

03:51.090 --> 03:57.690
Está poluindo o namespace global todas as funções e variáveis ​​que são declaradas em cada um desses

03:57.690 --> 04:00.660
os arquivos estarão no objeto da janela.

04:01.040 --> 04:04.670
OK, e a terceira tentativa?

04:04.660 --> 04:10.700
O IIFE, que significa Execução da Função Imediatamente Invocada.

04:10.830 --> 04:14.700
Eu sei que é um bocado, mas parece algo como isto.

04:16.600 --> 04:24.820
E o IFFY é, na verdade, envolve uma função entre parênteses, para que o javascript leia e diga:Oh! Eu tenho que

04:25.150 --> 04:33.620
avalie isso, e execute isso, e então, esses colchetes no final dizem, execute a função então depois de você

04:33.620 --> 04:42.820
avalie isso, execute essa função. E foi uma maneira confusa de se certificar de uma coisa e isso é,

04:42.820 --> 04:47.230
Usando este método, você não polui o namespace global.

04:47.230 --> 04:55.030
Agora, se no primeiro arquivo você tiver variável, 'myapp' que estará no objeto window, mas todo o resto

04:55.360 --> 04:59.080
que está dentro de uma função, como sabemos, cria um novo escopo.

04:59.140 --> 05:06.520
Então, todos os arquivos, porque eles estão envoltos neste IFFY, tinham seu próprio escopo e se você quisesse adicionar

05:06.820 --> 05:13.660
para 'myapp' você acabou de adicionar tudo como uma propriedade ou método.

05:15.060 --> 05:21.300
Tão legal! isso reduziu nosso namespace global para apenas um.

05:21.330 --> 05:25.510
Quero dizer, não é zero, mas o que é muito melhor, certo.

05:25.600 --> 05:31.850
Mas ainda há um problema com isso, a ordem dos arquivos ainda é importante.

05:32.120 --> 05:39.320
E já trabalhei em aplicativos antes, onde estamos usando tantos scripts que isso era quase 100 tags de script

05:39.500 --> 05:44.660
e toda vez que você adicionou um arquivo, você tinha que se certificar de que você adicionou no lugar certo, porque

05:44.660 --> 05:48.640
arquivo pode ser dependente de outro arquivo, carregando antes dele.

05:48.650 --> 05:55.890
Então, como sabemos que é falta de resolução de dependência e, francamente, isso não parece muito bonito.

05:55.910 --> 06:02.560
Então nós tivemos o browserify, esse logo legal.

06:02.580 --> 06:04.810
Agora, o que o navegador faz?

06:05.010 --> 06:08.660
Na verdade, ele usou algo chamado JS comum.

06:08.700 --> 06:17.310
Então, vou comentar e mostrar o que o browserify fez. Usou JS comum que nos permitiu

06:17.310 --> 06:18.780
para usar uma certa sintaxe.

06:19.170 --> 06:27.870
E parece algo assim, se eu quiser ter no meu primeiro arquivo javascript uma função 'add', eu posso

06:28.170 --> 06:39.700
digamos 'module.exports' e agora, no segundo arquivo javascript, eu poderia exigir o 'add', le'me fix the

06:40.720 --> 06:42.560
cordas aqui e agora,

06:43.370 --> 06:53.940
Eu posso adicionar, 'adicionar' função no meu arquivo de '2' javascript. Agora browserify, use esta sintaxe comum de JS.

06:54.140 --> 06:57.570
Mas na verdade é um bundler de módulo.

06:57.680 --> 06:58.470
E o que isso significa?

06:58.490 --> 07:03.610
Bem, corre antes de você colocar o site online.

07:03.620 --> 07:12.710
O que isso significa é, lê todos os arquivos javascript lê toda a sintaxe e tudo empacota

07:12.740 --> 07:15.320
em um único arquivo.

07:15.410 --> 07:23.540
Depois de executar, todos os arquivos através do browserify e novamente é apenas uma ferramenta simples que nos permitiu apenas

07:23.840 --> 07:25.440
despejar todos os nossos arquivos secretos.

07:25.490 --> 07:29.480
Tudo isso em navegador.

07:29.730 --> 07:39.150
E enquanto usarmos a sintaxe comum do JS, saberemos o que fazer e criaremos automaticamente

07:41.010 --> 07:45.000
um arquivo. Geralmente será chamado algo como

07:45.100 --> 07:45.970
'bundle.js'

07:45.970 --> 07:50.420
Então, todos os nossos scripts estarão em apenas um arquivo enorme.

07:50.420 --> 07:56.470
E sim, isso pode ser ruim quando estamos realmente desenvolvendo, mas quando está na internet

07:56.470 --> 08:03.610
mundo real, nós realmente não nos importamos como parece, porque estamos apenas fazendo isso para enviá-lo em algum lugar para um servidor,

08:03.610 --> 08:07.080
para que o aplicativo da web possa ser visualizado pelos usuários.

08:07.370 --> 08:10.800
Isso não é o que realmente vai parecer quando os desenvolvedores estiverem trabalhando nisso.

08:10.900 --> 08:14.040
Quando os desenvolvedores estão trabalhando nisso, só temos nossos próprios arquivos separados.

08:14.050 --> 08:22.110
Nós apenas o executamos através do browserify, antes de implantar, que é divulgado ao público.

08:22.120 --> 08:22.330
Tudo bem,

08:22.330 --> 08:25.250
Então isso foi muito legal.

08:25.250 --> 08:28.570
E estamos chegando perto do topo da montanha aqui.

08:29.380 --> 08:36.610
Agora todos esses problemas aqui são porque o javascript não tem o que chamamos de um sistema de módulos construído

08:36.610 --> 08:44.110
para a língua. E pense nos módulos como blocos de construção, como diferentes partes de código.

08:44.270 --> 08:47.070
Então, ao invés de ter uma coisa gigante, você tem módulos.

08:47.150 --> 08:50.460
Cada peça é realmente muito boa em fazer uma coisa.

08:51.510 --> 08:57.990
E como o javascript não tem esse sistema de módulos, é por isso que temos tantas maneiras diferentes

08:57.990 --> 09:03.960
de importar e exportar módulos e há realmente muito mais alguns que eu não mostrei porque

09:03.960 --> 09:07.410
Bem, francamente, vai ser demais.

09:07.440 --> 09:13.180
Mas as coisas mudaram recentemente com a introdução do ES6,

09:13.410 --> 09:18.310
agora podemos fazer algo muito melhor.

09:20.010 --> 09:25.760
E parece algo como isto.

09:25.940 --> 09:28.080
Com o ES6, temos duas novidades.

09:28.220 --> 09:30.600
Exportar e importar.

09:30.710 --> 09:37.250
Por exemplo, em um arquivo javascript, eu posso ter uma função e você pode vê-las usando as funções de seta aqui,

09:37.990 --> 09:48.120
uma função add, e eu simplesmente exportarei ou posso até exportar 'default', no segundo arquivo, se eu quiser

09:48.120 --> 09:49.770
para usar a função add.

09:49.770 --> 09:52.270
Tudo o que eu digo é 'importar'.

09:52.680 --> 09:54.810
E então vemos aqui a desestruturação.

09:54.810 --> 09:56.670
Você pode se lembrar disso do.

09:56.700 --> 09:57.230
ES5

09:57.240 --> 09:59.410
Vídeo ES6.

09:59.640 --> 10:09.280
E estamos simplesmente pegando 'add', ou se a exportação foi default, o que significa que você pode exportar

10:09.280 --> 10:12.770
várias funções no mesmo arquivo, versus aqui,

10:12.910 --> 10:17.710
você só pode exportar uma coisa, então o arquivo só exporta uma coisa.

10:17.710 --> 10:23.210
Bem, nesse caso, não precisamos dos pequenos colchetes, podemos apenas adicionar o arquivo 'add'.

10:23.530 --> 10:24.950
Muito legal.

10:25.060 --> 10:26.380
Então isso é legal.

10:26.380 --> 10:27.880
Isso lê muito bem.

10:27.880 --> 10:33.640
Acabamos de colocar as importações no topo, para cada arquivo sabemos exatamente o que cada arquivo precisa e tudo

10:33.640 --> 10:37.980
está limpo, tudo funciona e não precisamos nos preocupar com nada disso.

10:38.440 --> 10:41.120
Bem, tipo.

10:41.410 --> 10:48.430
Como você já sabe, e eu me sinto como um disco quebrado, os navegadores não estão suportando tudo ainda porque

10:48.430 --> 10:49.780
é um novo recurso.

10:49.780 --> 10:56.030
Novamente, ainda estamos aguardando que os navegadores os implementem. Mas isso é o que esta coisa azul é para.

10:56.050 --> 11:04.900
É chamado o Webpack. E o Webpack, assim como o browserify é um modulebundler que é um pacote de módulos

11:04.930 --> 11:06.370
que é pacotes

11:06.370 --> 11:15.900
arquivos javascript. E assim como o browserify, ele percorre a árvore de dependência que é essa exportação e

11:16.290 --> 11:19.280
importar tags em um único arquivo,

11:19.290 --> 11:28.350
ou pode até ter vários arquivos, com base em suas necessidades e com o webpack, podemos usar o ES6

11:28.560 --> 11:29.750
em todos os navegadores.

11:30.520 --> 11:31.690
Isso não é incrível?

11:32.080 --> 11:33.560
Aqui é onde estamos agora,

11:33.670 --> 11:39.220
Nós escalamos a montanha de módulos e temos um sistema muito bom agora em javascript.

11:39.220 --> 11:44.020
Foi muito difícil chegar lá, mas estamos em um bom lugar agora, então é isso que vamos fazer

11:44.020 --> 11:44.680
estar usando.

11:44.680 --> 11:48.590
E é isso que a indústria está usando. Acostume-se com a sintaxe.

11:48.680 --> 11:53.920
Vou deixar um link no final deste vídeo, para que você possa conferir mais, mas quando reagirmos,

11:53.920 --> 11:58.840
vamos usar muito isso, e vai ser muito divertido, vai fazer as coisas realmente

11:58.840 --> 12:00.430
bom e limpo para nós.

12:02.050 --> 12:03.490
Uma coisa que eu queria te mostrar.

12:03.760 --> 12:07.270
Você pode pensar que essa coisa de webpack parece um pouco difícil.

12:07.270 --> 12:08.620
Como é que isso acontece?

12:08.620 --> 12:11.020
É muito simples, só tem um arquivo de configuração, assim.

12:12.010 --> 12:17.170
Como você pode ver, só temos uma saída que é bundle.js,

12:17.330 --> 12:19.390
e não precisamos nos preocupar muito com isso.

12:19.390 --> 12:26.830
Normalmente, quando alguém está iniciando um projeto, é uma pessoa na equipe que configura esse arquivo e

12:26.830 --> 12:28.570
tudo é feito, o resto

12:28.570 --> 12:32.290
você acabou de construir em cima de muito simples de começar.

12:32.350 --> 12:35.610
Eu não acho que seja super importante para nós atacarmos agora.

12:35.980 --> 12:41.130
Mas, novamente, uma ferramenta muito útil, e cria um bom,

12:41.360 --> 12:46.550
arquivo bundled.js. Então agora todos os nossos htmls parecem legais e simples.

12:46.790 --> 12:48.330
E sabe de uma coisa?

12:48.480 --> 12:49.920
É isso aí.

12:49.920 --> 12:55.920
Nós cobrimos alguns dos tópicos mais importantes em javascript e alguns tópicos realmente difíceis.

12:56.220 --> 13:01.230
E eu sei que seu cérebro está sofrendo com toda essa informação, mas você conseguiu.

13:01.380 --> 13:08.340
Terminamos esta seção e as seções anteriores e agora podemos realmente criar aplicativos incríveis com o

13:08.340 --> 13:09.370
ferramentas que temos.

13:10.880 --> 13:15.600
Mal posso esperar para te mostrar como todas essas peças se juntam para construir algo incrível.

13:17.060 --> 13:19.130
Eu vou te ver no próximo vídeo. Tchau tchau.