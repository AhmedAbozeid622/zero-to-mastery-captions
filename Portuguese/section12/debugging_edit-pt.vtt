WEBVTT

00:01.100 --> 00:02.330
Bem vindo de volta.

00:02.330 --> 00:10.550
Eu quero falar com você rapidamente sobre um tópico muito importante para um desenvolvedor, e isso é a depuração.

00:10.610 --> 00:14.810
A depuração é o ato de examinar o código

00:14.810 --> 00:22.870
entendendo o que está fazendo e descobrindo por que não está agindo como esperado ou talvez nem seja

00:22.880 --> 00:28.610
correndo, talvez você esteja recebendo erros ou talvez algo que o usuário faz em um site é

00:28.730 --> 00:30.570
desencadeando um comportamento estranho.

00:30.860 --> 00:36.100
Isso é o que é depuração. Descobrir por que o programa não está agindo do jeito que é.

00:36.440 --> 00:42.190
E quando você trabalha como desenvolvedor, muito do seu tempo é gasto na depuração.

00:42.230 --> 00:48.130
Portanto, é um tópico muito importante e quero falar sobre algumas das estratégias que podemos usar para depuração.

00:48.170 --> 00:56.090
Eu tenho aqui uma função bem complexa e, francamente, a menos que você tenha muita experiência com o javascript

00:56.720 --> 00:59.360
Essa é uma função bem difícil de entender.

00:59.510 --> 01:08.740
Vamos dizer que você entra no trabalho e alguém diz, ei! Eu não,

01:08.740 --> 01:09.870
Não sei o que está acontecendo com essa função,

01:10.240 --> 01:17.600
você pode olhar para isso? e você tem que descobrir, o que faz e se está funcionando bem ou não.

01:18.070 --> 01:23.490
Então, vou guiá-lo pelas etapas que eu usaria para depurar esse código.

01:23.530 --> 01:29.970
Talvez esteja funcionando bem, talvez não seja, mas eu quero entender o que esse pedaço de código faz.

01:30.880 --> 01:39.410
Então a primeira coisa que eu faria seria apenas ler, eu digo OK, estamos atribuindo uma variável e parece

01:39.410 --> 01:41.140
nós temos uma matriz.

01:41.270 --> 01:46.070
É uma matriz aninhada, portanto, há uma matriz dentro de uma matriz.

01:47.410 --> 01:51.800
E parece que esse código quer fazer algo chamado achatado.

01:51.870 --> 01:52.570
ESTÁ BEM.

01:52.840 --> 02:00.790
Sabemos que 'reduzir' do que aprendemos antes, 'a' é o 'acumulador'.

02:00.790 --> 02:01.690
Posso mudar o nome

02:01.720 --> 02:03.070
então faz mais sentido para mim.

02:03.070 --> 02:05.730
OK, 'acumulador' perfeito.

02:05.800 --> 02:08.790
E 'b' é bem o que é 'b'?

02:09.280 --> 02:20.320
'b' é isso mesmo, porque estamos interagindo, passando o primeiro array que nos dá três matrizes.

02:20.510 --> 02:23.240
Então eu posso apenas dizer, array aqui. ESTÁ BEM.

02:28.620 --> 02:38.250
Agora, também vejo que dentro desta redução, tenho o 'acumulador', tenho a matriz e quero o 'acumulador' para

02:38.370 --> 02:40.490
comece com uma matriz vazia.

02:40.680 --> 02:42.170
Isso faz sentido até agora.

02:42.270 --> 02:45.470
Então o 'acumulador' será um array vazio quando você começar.

02:45.720 --> 02:48.080
E o que vamos fazer é fazer

02:48.090 --> 02:50.410
concat de ponto de matriz vazia.

02:50.430 --> 02:58.580
E se você se lembrar, 'concat' anexa o conteúdo de um array em qualquer coisa que esteja sendo concatenada.

02:58.580 --> 03:06.590
Uma coisa que posso fazer é abrir essa função, para que agora, em vez de ter apenas uma linha, eu possa dizer

03:06.590 --> 03:18.120
'console.log' matriz e vamos descobrir o que matriz é e também dirá 'console.log' 'acumulador', vai dizer 'acumulador'.

03:18.170 --> 03:24.050
Então, temos o console aberto e também queremos ter certeza de que estamos retornando isso porque removemos

03:24.080 --> 03:29.160
de uma única linha que já implicitamente significa retorno, para fazer duas linhas.

03:29.410 --> 03:29.620
ESTÁ BEM.

03:29.630 --> 03:36.320
Então, vamos apenas atualizar e adicionar essa função e ver se podemos obter alguns logs do console para descobrir

03:36.320 --> 03:37.300
o que está fazendo.

03:37.410 --> 03:44.390
Haverá três loopings que vemos e no primeiro loop parece, diz o array

03:44.390 --> 03:48.050
é [0, 1] e o 'acumulador' é o array vazio.

03:48.140 --> 03:49.670
Ok, isso faz sentido.

03:49.670 --> 03:58.430
E então vemos o segundo loop em torno do array 2 e 3 que está aqui, é colocado em loop e o 'acumulador'

03:58.760 --> 04:01.940
agora tem 0 e 1.

04:01.940 --> 04:08.270
Então, parece que após o primeiro loop, eu adicionei o zero e um da matriz para o

04:08.270 --> 04:11.870
Matriz vazia que é o acumulador. ESTÁ BEM.

04:12.050 --> 04:15.690
E então a última passagem através da qual é quatro e cinco.

04:15.740 --> 04:23.260
Eu agora atribuo a matriz de 4 e 5 ao 'acumulador', que adiciona 0, 1, 2, 3.

04:23.300 --> 04:33.110
Então parece que, o que estamos fazendo é pegar cada array e estamos adicionando no acumulador.

04:33.150 --> 04:37.190
E porque parece algo assim.

04:37.260 --> 04:44.530
Então, isso é o que parece na primeira passagem, estamos usando apenas a função de concat

04:44.530 --> 04:53.560
junte as matrizes, [0, 1], de modo que estamos achatando a matriz, o que significa que, em vez de ter uma matriz

04:53.590 --> 04:58.360
dentro de uma matriz, podemos simplesmente achatar tudo.

04:58.360 --> 05:08.570
Isso significa que com 'achatado', se eu olhar para o que ele faz, bem, ele só encontra array [0, 1, 2, 3, 4, 5]. Impressionante.

05:08.720 --> 05:14.420
Há um outro truque que eu quero mostrar para você, e em vez de usar o log do console, você pode usar algo

05:14.420 --> 05:22.610
chamado debugger. E você percebe que a cor ficou vermelha, o que significa que sim! é uma palavra-chave javascript.

05:22.850 --> 05:24.460
E o que isso permite que você faça?

05:24.560 --> 05:32.060
Bem, vamos ver o que acontece quando eu executo esta função novamente para atualizar aqui e eu quero executá-lo,

05:32.570 --> 05:33.430
Uau! o que acabou de acontecer.

05:34.800 --> 05:43.350
Quando o mecanismo de javascript e o navegador entram no depurador de palavras, ele pára.

05:43.430 --> 05:49.720
É uma palavra que diz ao que está lendo este arquivo, hey! pare o que você está fazendo apenas congelar,

05:50.840 --> 05:55.120
e abre a janela para nós exatamente onde ela está parada.

05:55.400 --> 05:58.190
Então deixe-me fazer isso em tela cheia e mostrar a você.

05:58.390 --> 06:07.330
Ele pára no meio de sua execução. Mas vemos que aqui 'acumulador' é uma matriz vazia porque enquanto

06:07.330 --> 06:17.700
nós começamos e a matriz é 0 e 1, agora eu tenho algumas opções.

06:17.850 --> 06:21.600
Eu posso acertar o jogo que resume a coisa toda ou eu posso acertar o Step over

06:21.600 --> 06:26.750
e vamos ver o que acontece com o passo, vai para a próxima linha.

06:27.780 --> 06:31.460
E se eu clicar de novo, vai para a próxima linha.

06:32.400 --> 06:40.980
E agora vejo que o 'acumulador' é 0 e 1 e o array agora é 2 e 3.

06:41.020 --> 06:48.130
Então, eu sei que na próxima linha, o 'acumulador', bem, eu mudo isso para uma matriz por engano, mas isso vai

06:48.130 --> 06:59.550
ser o 'acumulador' será 0 e 1 ponto concat, 2 e 3. E eu posso continuar percorrendo isso e ver

06:59.550 --> 07:06.260
como os parâmetros mudam e literalmente passam por toda a função.

07:06.720 --> 07:07.950
Vamos fechar isso.

07:08.260 --> 07:13.070
Se eu trouxer isso de volta para o jeito que foi o 'acumulador',

07:18.470 --> 07:19.910
faça esta tela cheia.

07:19.910 --> 07:20.720
Tudo bem.

07:20.720 --> 07:24.950
Então array é [0, 1] 'acumulador' é um array vazio, eu vou passar

07:28.260 --> 07:34.470
que mudou 'acumulador' agora é [0, 1] array [2, 3] e eu continuo entrando e percebo exatamente o que está acontecendo

07:34.470 --> 07:40.460
no código e quando ele é executado, ele retorna e olha para isso.

07:40.620 --> 07:46.370
Nós temos nosso console de volta.

07:46.420 --> 07:47.500
Não é legal?

07:47.500 --> 07:53.080
O debugger nos permite literalmente entrar na função e ver o que acontece passo a passo. Quando eu retornar isso

07:53.080 --> 07:57.050
para o jeito que foi.

07:57.160 --> 08:01.780
Eu quero que você leve isso com você e entenda que, embora quando você vê algo assim,

08:01.780 --> 08:02.800
é esmagadora

08:02.800 --> 08:09.070
com bastante tempo e usando o console e o depurador, você pode entender o que uma função faz e se

08:09.070 --> 08:14.140
está fazendo algo que você não espera fazer ou está fazendo algo errado,

08:14.710 --> 08:17.390
você pode usar essas técnicas para consertá-lo.

08:17.400 --> 08:20.410
É uma habilidade muito útil que você vai usar muito.

08:20.730 --> 08:21.540
Então boa sorte.

08:21.660 --> 08:23.270
Divirta-se lá fora. Tchau tchau