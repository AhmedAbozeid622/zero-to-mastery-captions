WEBVTT

00:00.960 --> 00:09.500
Welcome back. Let's try and get this 'post' request to work, that we couldn't get in the previous video.

00:09.740 --> 00:16.100
Now in order for us to test something more than just GET, well we can use the Terminal but there's a

00:16.100 --> 00:21.570
really nice tool that allows us to make these requests to a server and see what we get back.

00:21.920 --> 00:25.690
And it's called Postman.

00:25.790 --> 00:33.620
If you go to www.getpostman.com it is one of the best tools if you're ever working

00:33.620 --> 00:34.310
with a server.

00:34.310 --> 00:38.910
It's free and you can download it for your operating system.

00:39.080 --> 00:42.320
Just simply click on whichever one you want.

00:42.320 --> 00:49.180
Sign up and once it's loaded then you can open it up and you'll have something like this.

00:50.330 --> 00:53.040
And don't worry it's very very simple to use.

00:53.120 --> 00:58.150
We simply have here the requests that we want to get.

00:58.190 --> 01:02.030
And you'll see a few that you've never seen before and don't worry about them.

01:02.030 --> 01:04.970
These are very very rarely used.

01:04.970 --> 01:08.810
We see the ones that we care about DELETE, PUT, POST, GET right there

01:11.640 --> 01:15.630
and you simply enter the URL that you want to have this running on.

01:16.110 --> 01:19.130
So in our example let's do 'npm start' again.

01:20.850 --> 01:25.370
And while the server is running let's just go to '/profile'.

01:25.620 --> 01:34.720
And then in here we want to say 'localhost:3000' – that's the port that we gave it – and we'll say

01:34.760 --> 01:36.320
'/profile'

01:36.420 --> 01:38.460
So we want to do a GET request over here.

01:38.520 --> 01:50.500
If I click send I get 'getting profile'. It gives me the Headers and the Body, which is great, but now because

01:50.500 --> 01:54.110
we have this tool we can also do a POST request.

01:54.190 --> 01:59.250
So let's say that we are no longer sending the 'user'.

01:59.740 --> 02:02.820
We want to send a response [res].

02:05.590 --> 02:10.790
And from this response we want to return whatever user that we submit to '/profile'.

02:14.060 --> 02:14.960
So let's start off here, first.

02:14.960 --> 02:19.960
We're going to change this to a POST and with a POST

02:20.090 --> 02:26.780
remember that we can actually add things to the body and you see over here that there's a couple of

02:26.900 --> 02:37.800
options: 'form-data' the 'x-www-form-urlencoded' we have 'raw' and then 'binary'. 

02:37.850 --> 02:39.160
Now don't let this scare you.

02:39.170 --> 02:43.390
These two are forms through HTML.

02:43.460 --> 02:51.230
If you usually do an HTML form tag and do a GET or a POST request you can just click on this and you

02:51.230 --> 02:58.620
can see here 'Key Value' so I can say name equals 'andrei'.

02:58.710 --> 03:09.330
And now when I send this I get 'Sally' and 'soccer' well because well I haven't saved this yet let's

03:09.330 --> 03:18.050
go back to what we had before and send that again we see that the POST request is working.

03:18.150 --> 03:22.650
And if I want to access this information I simply do

03:27.150 --> 03:29.520
'(req.body)'

03:29.860 --> 03:31.960
But let's see if this works.

03:32.260 --> 03:33.190
If I click send

03:37.590 --> 03:45.230
Hmm I get 'undefined' and that is because Express only gives you a little bit.

03:45.270 --> 03:48.470
You still need a few packages if you want this to work.

03:48.630 --> 03:58.200
If you ever want to access '(req.body)' well you need to use a middleware and the middleware that

03:58.200 --> 04:03.900
we want is called body-parser and you'll use it and most Express servers, so you'll just get used

04:03.900 --> 04:04.470
to it.

04:04.470 --> 04:09.110
It's 'npm install body-parser'.

04:09.360 --> 04:14.970
And now this body-parser what it's going to do is it's going to grab whatever information we receive

04:15.510 --> 04:26.440
and parse it just like JSON or forms into something that we can use. In order to actually use it

04:27.400 --> 04:32.080
well, we know how middleware works, we simply at the top say 'app.use()'

04:35.320 --> 04:48.540
and body-parser it will come with a 'bodyParser' that we'll just require with the package that we just

04:48.540 --> 04:48.960
installed.

04:53.740 --> 04:59.010
In 'app.use()' we simply do 

04:59.040 --> 05:01.040
'bodyParser.urlencoded'

05:02.450 --> 05:06.880
Which is how we're able to get this ['x-www-form-urlencoded'].

05:07.040 --> 05:12.290
And we just have to pass it a parameter: {extended: false}.

05:12.360 --> 05:13.150
Let's try that again.

05:13.200 --> 05:13.970
I'm going to save

05:17.200 --> 05:24.470
we'll do 'npm start' if we go back and send again.

05:24.640 --> 05:25.440
We see that.

05:25.480 --> 05:26.940
There you go it's working.

05:26.940 --> 05:33.940
{name: 'andrei'} because we've sent our 'Key Value' with form data.

05:34.010 --> 05:40.620
So if you're building a server for a form that gets submitted you'll use this.

05:40.770 --> 05:47.970
But as you know there's also JSON that we can use and the way we use JSON is we click on 'raw' and

05:47.970 --> 05:57.000
in here we can send whichever things we want; in our case it's going to be JSON, and with JSON we can

05:57.000 --> 06:06.590
now say what we want to send, and if we ever do any wrong syntax, it'll tell us that this is wrong JSON.

06:06.780 --> 06:14.290
But let's just say for the '/profile' I want to add a new user and this user will be called – remember

06:14.290 --> 06:20.810
double quotes here – we'll have "user" and this user will be called "Jenny"

06:24.540 --> 06:28.860
and "Jenny" will have a hobby of "tennis"

06:36.550 --> 06:37.590
Everything looks fine.

06:37.600 --> 06:40.540
That's JSON. If I now send this

06:45.660 --> 06:54.600
I get an empty object. Again because we've only told it to parse 'urlencoded' body-parser needs

06:54.600 --> 07:06.020
to also know about JSON. Again in order to do that we say 'app.use(bodyParser.json())'

07:06.020 --> 07:06.740
If we save that

07:09.380 --> 07:18.510
and send again - look at that - we have { user: 'Jenny', hobby: 'tennis' }.

07:18.590 --> 07:28.590
So now we can add that user by maybe adding it to our database and then sending a response 'Success'

07:31.800 --> 07:33.500
Let's try that again.

07:33.690 --> 07:41.340
We get a response 'Success' that we've posted "Jenny" "tennis" in this way we can also do PUT, which is very

07:41.340 --> 07:48.180
similar we just send the data but PUT is used for updating if we want to update perhaps Jenny to have

07:48.180 --> 07:56.420
a different hobby and DELETE to delete maybe that user, something that we'll get into in the next video.

07:56.490 --> 07:58.730
But as you can see Postman is great.

07:58.860 --> 08:03.810
It's a great way to test out your server before you connect it to your front-end, something that we'll

08:03.810 --> 08:08.600
definitely do in this course in our final project.

08:08.600 --> 08:09.950
Very cool.

08:10.010 --> 08:11.510
I'll see you in the next one.

08:11.520 --> 08:12.300
Bye-bye.
