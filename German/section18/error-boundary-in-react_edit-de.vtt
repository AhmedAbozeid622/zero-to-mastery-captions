WEBVTT 00:01.650 -&gt; 00:10.830 Fügen wir unserem Wissen in React andReact 16, das eine neue Version von react, 00:11.010 -&gt; 00:18.780 war, etwas hinzu, was &quot;Fehlergrenzen&quot; genannt wird und es gelöst wurde das Problem, das React zuvor hatte, das war 00:19.110 -&gt; 00:25.110, wenn es irgendeine Art von Fehler in einer Komponente gab, aus welchem ​​Grund auch immer gab es keinen anmutigen Weg 00:25.110 -&gt; 00:32.370 es. Beim nächsten Rendern würdest du all diese kryptischen Fehler bekommen und die Dinge würden einfach nicht funktionieren 00:32.370 -&gt; 00:34.710. Für einen Benutzer 00:35.130 -&gt; 00:42.900 Sie möchten sicherstellen, dass selbst wenn ein Teil Ihres Komponentenbaums bricht, Sie immer noch eine schöne Benutzeroberfläche haben, 00:42.910 -&gt; 00:48.780 vielleicht ein Stück davon Text, der sagt, dass etwas schiefgelaufen ist, aber die App nicht kaputt gehen lässt. 00:48.780 -&gt; 00:54.520 In diesem Video sprechen wir über Fehlergrenzen und wenden sie auf unsere RoboFriends App an. 00:54.600 -&gt; 00:55.500 Fangen wir an. 00:57.140 -&gt; 01:04.370 Die erste Sache, die ich tun möchte, ist in der Komponente Ich werde eine neue Datei hinzufügen und wir werden diese Komponente 01:04.760 -&gt; 01:13.330 ErrorBoundry.js und einfach anrufen eine Erinnerung, die Sie brauchen, um 16 oder höher zu reagieren, damit das funktioniert. 01:13.430 -&gt; 01:21.930 Stellen Sie also sicher, dass Sie in Ihrer package.json Datei die richtige Version von React haben. Jetzt können wir hier 01:22.110 -&gt; 01:25.980 unseren regulären Import reaktivieren 01:28.960 -&gt; 01:33.620 Komponente und wir importieren das aus dem react-Paket. 01:34.050 -&gt; 01:41.000 Und dann haben wir endlich eine Klasse von ErrorBoundry, die die Reaktionskomponente 01:43.830 -&gt; 01:45.840 erweitert und hier den Konstruktor 01:48.960 -&gt; 01:51.460 und wieder Wir nennen uns super hier. 01:52.610 -&gt; 02:03.420 Und damit wir Zugang zu den Requisiten haben, müssen wir - innerhalb des Konstruktors - den Requisiten-Parameter haben. 02:03.560 -&gt; 02:11.880 Und dann endlich für diesen.Status werden wir eine Eigenschaft namens hasError erstellen. 02:12.370 -&gt; 02:16.190 Und jetzt wird es falsch sein. 02:16.260 -&gt; 02:26.310 Und vergessen wir auch nicht, die Standard-ErrorBoundry zu exportieren, damit wir darauf zugreifen können und unseren Standard 02:26.520 -&gt; 02:29.760 rendern hier haben, der für uns zurückkommt. 02:30.830 -&gt; 02:32.760 Hmm, was soll es geben? 02:33.170 -&gt; 02:41.300 Nun, idealerweise können wir die Komponente mit dieser ErrorBoundry-Komponente umhüllen, oder wir können eine Komponente wie 02:41.300 -&gt; 02:48.890 als CardList-Komponente mit einer ErrorBoundry-Komponente umbrechen und die CardList-Komponente ausfällt Wir können 02:48.890 -&gt; 02:51.340 es in der ErrorBoundry fangen. 02:52.390 -&gt; 02:57.790 Ich weiß, das ist ein bisschen schwer zu folgen. React hat wirklich eine gute Dokumentation zu diesem Thema, so dass Sie später immer noch darüber nachlesen können. 02:57.790 -&gt; 02:59.520 02:59.530 -&gt; 03:01.150 Aber bleib bei mir. 03:01.150 -&gt; 03:03.220 Vertrau mir, es wird Sinn machen. 03:03.220 -&gt; 03:14.080 Als erstes wollen wir überprüfen, ob this.state.hasError gleich true ist. 03:14.150 -&gt; 03:23.000 Wenn es also einen Fehler gibt, dann wollen wir diesen Standardzustand zurückgeben, wie wir 03:24.330 -&gt; 03:29.670 dem Benutzer etwas anzeigen können, das macht es sinnvoll zu ihnen, obwohl wir 03:29.670 -&gt; 03:31.190 nicht zeigen konnten, was wir ursprünglich beabsichtigten. 03:32.040 -&gt; 03:44.590 In unserem Fall können wir einfach sagen, dass wir eine haben <h1> von &quot;Oooops. Das ist nicht gut&quot; für den Benutzer zu sehen. 03:44.620 -&gt; 03:52.760 Wir sagen hier also, dass wir aus irgendeinem Grund einen h1-Tag ausspucken. 03:53.940 -&gt; 03:54.870 Sonst 03:55.100 -&gt; 03:58.460 und wir können hier einfach zurückkehren. 03:58.560 -&gt; 04:06.150 Wir werden sagen, dass this.props.children rendern wird, wieder daran erinnern, weil Kinder 04:06.150 -&gt; 04:09.070 alles zwischen ErrorBoundry sein werden. 04:09.090 -&gt; 04:16.050 In unserem Fall wird es wahrscheinlich die CardList sein. Also render die Kinder, was auch immer drin ist 04:16.140 -&gt; 04:17.410 von ErrorBoundry, 04:17.470 -&gt; 04:19.330 ansonsten rendern <h1> . 04:19.710 -&gt; 04:28.390 Wie werden wir diesen hasError nun ändern können? Gut mit React 16 haben wir einen neuen Lebenszyklus 04:28.390 -&gt; 04:38.270 Methode, die eingeführt wurde, und es heißt ComponentDidCatch und diese ComponentDidCatch ist Art 04:38.270 -&gt; 04:49.390 von wie der Versuch catch Block in Javascript wenn alles Fehler raus es wird diesen Lebenszyklus-Haken laufen und dieser 04:49.400 -&gt; 04:52.420 Lebenszyklus-Haken bekommt tatsächlich ein paar Parameter. 04:52.450 -&gt; 04:55.690 Das ist der Fehler und die Info. 04:55.830 -&gt; 05:03.540 Aber in unserem Fall wollen wir nur sagen, dass this.setState jetzt geht, wenn diese Komponente 05:03.590 -&gt; 05:08.230 Fehler ausgibt, wird gleich Fehler haben wahr. 05:08.280 -&gt; 05:13.760 Also wenn das jemals ausgelöst wird, würde das H-1 Tag rendern. 05:13.870 -&gt; 05:14.190 Alles klar. 05:14.230 -&gt; 05:17.490 Lass uns sparen und gehen wir zu app.js 05:17.580 -&gt; 05:20.730 Lass uns unsere errorBoundry 05:25.190 -&gt; 05:26.630 aus unseren Komponenten importieren. 05:32.210 -&gt; 05:34.030 Und jetzt können wir das nutzen. 05:34.100 -&gt; 05:38.740 Verwenden wir es hier für die Kartenliste. 05:38.900 -&gt; 05:46.370 Wenn also etwas mit der CardList passiert, wollen wir eine Art elegante Ausgangsgrenze haben. 05:46.580 -&gt; 05:55.340 Also werden wir ErrorBoundary sagen und weil wir diesen Punkt retrendieren dot children, wenn wir ihn wie 05:55.340 -&gt; 05:55.970 umhüllen. 05:57.250 -&gt; 06:00.450 Und nichts geht weiter, CardList wird trotzdem gerendert. 06:00.490 -&gt; 06:03.030 Lasst uns sparen Lass uns sehen, ob wir Fehler gemacht haben. 06:03.130 -&gt; 06:04.570 So weit so gut. 06:04.690 -&gt; 06:08.320 Gehen wir zurück zu unserer App und. 06:08.380 -&gt; 06:10.400 Alles klar, schauen wir uns die Konsole an. 06:10.410 -&gt; 06:17.280 Keine Fehler hier, wenn wir hier keine Fehler aktualisieren, wenn ich Sachen eintippe, keine Fehler, das ist gut. 06:19.190 -&gt; 06:26.840 Nun mit dieser Fehlergrenze, wenn irgendetwas in der CardList fehlschlägt, fängt es es ab und zeigt unseren Fehler 06:26.840 -&gt; 06:28.000 Nachricht an. 06:28.070 -&gt; 06:29.420 Mal sehen, was ich meine. 06:29.710 -&gt; 06:39.420 Wenn ich hier und jetzt in CardList reingehe, wenn wir sagen, wenn wir jetzt nur wahr sagen. 06:39.660 -&gt; 06:48.440 Wir gehen davon aus, dass es in der CardList einen Fehler gab, also können wir das tun, indem wir einen neuen Fehler sagen und &quot;NOOOOOOO&quot; sagen 06:51.790 -&gt; 06:54.850 Wenn wir speichern das funktioniert alles noch. 06:54.850 -&gt; 06:59.750 Wenn ich zurückgehe, merkt man, dass ich immer noch den Fehler bekomme, es heißt, dass es sich nicht um einen Fehler handelt. 06:59.800 -&gt; 07:00.620 Nr. 07:00.910 -&gt; 07:07.030 Und unten steht der obige Fehler in der CardList-Komponente. React wird versuchen, 07:07.030 -&gt; 07:11.950 diesen Komponentenbaum von Grund auf mit dem von Ihnen bereitgestellten errorBoundry neu zu erstellen. ErrorBoundry. 07:12.360 -&gt; 07:16.670 OK, das ist großartig, aber ich sehe immer noch den Fehler. 07:16.900 -&gt; 07:23.770 Und das liegt daran, dass wir gerade im Entwicklungsmodus laufen. Für die Erstellung der App. 07:23.770 -&gt; 07:29.780 Sie möchten uns immer dann zeigen, wenn ein Fehler in unserer Komponente vorliegt. Fehlergrenzen sind sehr nützlich, wenn Sie Ihre Apps in der Produktion 07:29.780 -&gt; 07:38.750 einsetzen, wo Sie keine detaillierten Protokolle haben, welche Fehler Sie haben. Ihre 07:38.750 -&gt; 07:40.540 Benutzer werden das nie sehen. 07:40.550 -&gt; 07:45.040 Also, wenn ich hier wirklich schnell auffrische, siehst du das genau hier. 07:45.050 -&gt; 07:48.320 Wie es hieß - Oh, das ist nicht gut. 07:48.470 -&gt; 07:49.010 Hoppla! 07:49.100 -&gt; 07:50.450 Das ist nicht gut. 07:50.450 -&gt; 07:54.820 Also in der Produktion werden die Nutzer das sehen. 07:55.040 -&gt; 08:01.640 Aber für unseren Fall ist das beabsichtigte Verhalten für die Erstellung der React App in der Entwicklung, uns die Fehler 08:01.910 -&gt; 08:05.770 zu zeigen, aber mit Fehlergrenzen haben wir diese zusätzliche Sicherheit während der Produktion. 08:07.830 -&gt; 08:08.890 Das ist es für jetzt. 08:08.890 -&gt; 08:10.800 Ich werde in der nächsten sehen. Tschüss.