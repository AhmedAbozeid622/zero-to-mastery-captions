WEBVTT

00:01.470 --> 00:07.810
Ich möchte noch eine letzte Sache hinzufügen, die wir bis zu diesem Punkt übersehen haben, weil, nun, ich nicht

00:07.810 --> 00:10.300
Ich will dich mit zu vielen Dingen niedermachen.

00:10.300 --> 00:21.520
Wenn wir uns unser Projekt anschauen. Nun, es ist - es ist eine Menge Dateien. Obwohl es eine einfache App ist,

00:21.520 --> 00:26.380
Sie können sich vorstellen, wie (viel) größer und größer und größer diese Quelldatei werden kann.

00:26.530 --> 00:31.010
Und Organisation ist ein großer Teil der Arbeit an Projekten.

00:31.030 --> 00:36.940
Die meisten Anwendungen werden viel größer sein als die, die wir gebaut haben, und wir brauchen eine gute Organisation

00:36.940 --> 00:40.640
Diese und Ordner-Struktur ist eines der wichtigsten Dinge.

00:40.660 --> 00:42.520
Also lasst uns diesen Code aufräumen.

00:42.580 --> 00:48.780
Ich werde Ihnen zeigen, was ich tun würde, wenn ich an dieser Anwendung arbeiten würde, und ich möchte sie erweiterbarer machen

00:48.790 --> 00:52.660
das ist sauberer, wenn andere Leute in das Team kommen, verstehen sie es.

00:52.660 --> 00:56.110
Und auch ich kann diese Codebasis weiter ausbauen.

00:59.270 --> 01:09.350
Als erstes werde ich ein paar Ordner erstellen. Man wird "Komponenten" genannt werden und diese sind

01:09.350 --> 01:14.240
die von uns entwickelten Komponenten wie "CardList", "SearchBox" und "Scroll".

01:14.300 --> 01:20.560
Der zweite wird "Container" genannt. Und Container

01:20.990 --> 01:29.030
sind diese intelligenten Komponenten die enthaltenen Komponenten, die in ihnen Status haben, die Lebenszyklus-Haken haben,

01:29.120 --> 01:31.880
die haben die Klassensyntax.

01:31.880 --> 01:35.660
Sie sehen diese Komponenten oder diese Behälter,

01:35.660 --> 01:39.680
wir können keine reine Funktion mit ihnen verwenden, weil sie technisch nicht rein sind.

01:39.740 --> 01:45.630
Sie haben angegeben, dass sie innerhalb dieser Funktionen ändern und das ist OK.

01:45.680 --> 01:52.700
Es ist unmöglich, nur reine Funktionen zu haben, weil wir meistens Anfragen stellen müssen

01:52.820 --> 01:58.600
zur Außenwelt. Aber diese Komponenten sind speziell und wir nennen sie Container, die sie enthalten

01:58.600 --> 02:03.560
Dinge und sie geben nur den Status an Komponenten weiter.

02:03.570 --> 02:14.920
Jetzt können wir einfach sagen, dass wir "App.css" in "Container" verschieben werden.

02:14.920 --> 02:21.800
Wir werden auch "App.js" sagen, wir werden es auch in "Container" verschieben.

02:25.440 --> 02:30.030
Und dann die Komponenten, die einfachen Funktionen, die reinen Funktionen, die wir erstellt haben

02:30.090 --> 02:33.370
"SearchBox", "Scroll" und "CardList"

02:33.390 --> 02:42.370
Gut können diese in "Komponenten" sein. Öffnen wir einfach den Ordner und machen Sie das einfacher. Schließen Sie den Tab,

02:42.370 --> 02:54.740
Öffnen Sie Robofriends und lassen Sie uns die Quelle öffnen. Wir sagen "Scroll", "SearchBox", "Card" und "CardList"

02:54.790 --> 02:58.350
Das sind reine Funktionen innerhalb von "Komponenten".

02:59.420 --> 03:05.420
Jetzt, wenn Sie sich erinnern, ist unsere Schriftart auch Teil der Datei "App.css".

03:05.450 --> 03:11.550
Wir werden das auch dorthin verschieben, weil es dort definiert ist. Damit gehen wir zurück zu unserer App,

03:12.650 --> 03:20.290
und nun - jetzt haben wir viele Fehler, weil diese sich jetzt auf verschiedene Teile beziehen. Unsere App.js

03:20.300 --> 03:27.590
lebt in einem anderen Ordner als "CardList" und "SearchBox" und "Scroll". So wie wir das machen

03:27.590 --> 03:37.940
Wir benutzen ".." was bedeutet, dass Sie den Ordner verlassen oder zum Ordner gehen und von dort aus in die Container gehen

03:40.390 --> 03:44.140
Oh, Entschuldigung - gehen Sie aus den Containern-

03:44.200 --> 03:48.950
Also wo "App.js" ist, werde ich gehen, was ".."

03:49.210 --> 03:57.070
Und dann, wenn ich hier auf der Ordnerebene bin, werde ich "Komponenten" sagen und ich kann das Gleiche tun

03:57.610 --> 03:58.660
der Rest von ihnen auch.

04:05.410 --> 04:11.300
Speichern und wir haben auch "index.js"

04:11.640 --> 04:15.360
das bezieht sich jetzt auf "App", die in Containern lebt.

04:15.360 --> 04:21.540
Also wieder, weil wir jetzt einen Ordner leben, sind wir in der gleichen Nachbarschaft, während wir es einfach können

04:22.350 --> 04:25.390
"./containers/App"

04:25.610 --> 04:30.220
Lass uns sparen - oh, und ich habe falsch geschrieben.

04:30.220 --> 04:31.630
Gute Rechtschreibung von mir.

04:31.760 --> 04:32.920
Alles sieht gut aus.

04:33.080 --> 04:36.090
Lass uns auf unsere Website zurückkehren.

04:36.090 --> 04:36.840
Da gehst du.

04:36.840 --> 04:38.670
Alles kriecht schön.

04:39.880 --> 04:40.090
OK.

04:40.100 --> 04:43.640
Wir haben hier eine schöne Ordnerstruktur.

04:43.650 --> 04:45.360
Die Dinge haben aufgeräumt.

04:45.370 --> 04:47.750
Und wir haben auch "Scroll.js"

04:48.470 --> 04:55.500
Und ich denke, wir haben nur eine extra Kopie davon, also könnten wir einfach- eine Kopie davon gemacht haben.

04:55.770 --> 04:57.730
Stellen Sie sicher, dass alles noch funktioniert,

04:57.990 --> 04:59.160
Ja, alles funktioniert noch.

05:01.650 --> 05:05.440
Wir möchten hier ein paar Leerzeichen entfernen.

05:05.460 --> 05:10.120
Wir bemerken auch ein paar Fehler, also nicht unbedingt Fehler, sondern stilistische Dinge.

05:10.140 --> 05:16.710
Zum Beispiel sage ich mit dem Filter, dass ich die Roboter filtere und durch die Roboter iteriere, nicht

05:16.710 --> 05:18.270
macht wirklich Sinn, oder? Es sollte sein

05:18.270 --> 05:23.470
Jeder Gegenstand ist ein "Roboter" -Benutzer, den wir bekommen.

05:23.610 --> 05:28.380
Also ich speichere das immer noch gleich ohne Fehler.

05:28.410 --> 05:35.690
Ich sehe auch ein bisschen Reinigung, die man mit "this.state" machen kann,

05:35.770 --> 05:39.490
Wir können einfach sagen - wir können wieder sagen, dass wir die Destrukturierung verwenden

05:42.100 --> 05:44.320
"Const Roboter" und "Suchfeld"

05:44.350 --> 05:45.610
Wir machen Destrukturierung

05:45.700 --> 05:50.810
entspricht "this.state".

05:51.000 --> 05:54.780
Und jetzt kann ich "this.state" von hier entfernen.

05:54.780 --> 06:04.140
Ich kann "this.state" von hier und von all den anderen Orten entfernen, die wir "this.state" und

06:04.140 --> 06:08.630
das "Rendern". Wenn ich spare, funktioniert alles noch.

06:08.750 --> 06:11.680
Aber der Code ist viel sauberer.

06:11.700 --> 06:19.050
Wir haben auch bemerkt, dass "robots.length" hier gleich null ist, es gibt sogar einen einfacheren Weg dies zu tun.

06:19.050 --> 06:21.150
Und wieder ist es nur stilistisch.

06:21.150 --> 06:23.930
Dies wird gleich Null sein.

06:23.970 --> 06:29.070
Wenn das also null ist, wird das in JavaScript auf false ausgewertet.

06:29.070 --> 06:31.250
Also können wir einfach das Gegenteil sagen.

06:31.300 --> 06:36.470
Erinnere dich an die Syntax? Wenn das also Null ist, was falsch sein wird,

06:36.480 --> 06:45.390
Verwandle es in Wahrheit, so dass, wenn es keine Roboter gibt, wir "Laden". Speichern und das sollte noch funktionieren.

06:45.390 --> 06:56.220
Und schließlich, wenn Sie eine 'if ~ else-Anweisung' sehen, können wir zurückkehren, oder nicht? Wir können sagen-

06:56.470 --> 06:58.960
"Rückkehr Roboter". Wenn es Roboter gibt

07:02.540 --> 07:07.060
"Gib das zurück", lass uns sehen, ob das noch funktioniert.

07:09.040 --> 07:10.180
Wir brauchen diese zusätzliche Klammer nicht.

07:14.200 --> 07:15.630
Sieh dir das an, es funktioniert immer noch.

07:15.970 --> 07:19.210
Und Sie können jetzt sehen, dass die Dinge viel sauberer sind.

07:19.210 --> 07:26.670
Wir haben eine App, die all unsere Sachen für uns macht.

07:26.670 --> 07:34.800
Und zum Schluss, erinnerst du dich? "verpackt.json"? Wie hatten wir einige vorgefertigte Skripte? Und wir hatten dieses "Build"

07:35.510 --> 07:36.130
Befehl.

07:36.300 --> 07:48.700
Wenn ich jetzt damit aufhöre und "NPM build" oder "NPM run build" mache, überprüfen Sie dies. Während das baut

07:48.910 --> 07:57.200
Sie haben einen neuen Ordner namens "build" erstellt, und hier haben wir alle unsere Dateien

07:57.400 --> 08:00.090
Aber dieses Mal optimiert. Was bedeutet das?

08:00.100 --> 08:10.420
Nun, wenn wir zu "statisch" gehen und zu "js" gehen, schau dir das an, alles wird für uns minimiert, unser CSS ist optimiert

08:11.320 --> 08:19.540
und alles, was wir zur Bereitstellung der Website benötigen, befindet sich in diesem Ordner. Also können wir jetzt diesen "Build" -Ordner nehmen

08:19.840 --> 08:21.060
und leg es irgendwo hin.

08:21.070 --> 08:24.540
Es ist also im Internet und es gibt auch gute Informationen.

08:24.700 --> 08:28.780
Jetzt haben wir diesen optimierten "Build", wir müssen ihn nicht minimieren,

08:28.810 --> 08:31.420
Wir müssen nicht alle diese Optimierungen machen.

08:31.510 --> 08:35.240
Es geht durch babel, so dass wir Import-Anweisungen in den Browsern verwenden können.

08:35.290 --> 08:40.370
Und jetzt kann dieser "Build" -Ordner nun überall eingesetzt werden.

08:40.410 --> 08:44.670
Wie ich schon sagte "create react app" nimmt den ganzen Schmerz des Setups weg.

08:44.820 --> 08:51.120
Alles ist für Sie getan, Sie können einfach Code schreiben Reagieren Komponenten aus dem Internet

08:51.360 --> 08:55.250
um schöne Webseiten zu bauen.

08:55.280 --> 08:57.560
Ich hoffe du bist begeistert von React wie ich bin.

08:57.560 --> 09:02.680
Deshalb ist es so ein beliebtes Werkzeug und deshalb verwenden es so viele Firmen es jetzt.

09:03.710 --> 09:04.760
Wir sehen uns im nächsten.

09:04.970 --> 09:05.350
Tschüss
