WEBVTT

00:00.480 --> 00:01.230
Willkommen zurück

00:01.410 --> 00:05.020
Lasst uns weiterhin unsere RoboFriends App bauen

00:05.080 --> 00:12.460
Nun, bis zu diesem Punkt, wenn Sie sich unsere index.js ansehen - nun, es gab viel Kopieren und Einfügen

00:12.670 --> 00:15.640
Wir machten. Wenn wir viele Roboterfreunde hätten

00:15.640 --> 00:19.810
Stellen Sie sich vor, dass wir Hunderte davon haben, die wir ständig kopieren und einfügen müssen

00:19.910 --> 00:21.530
Das ist nicht sehr effizient, oder?

00:21.730 --> 00:30.160
Auch wenn Sie sich an unser Diagramm des One-Way-Datenflusses erinnern, hatten wir immer einen Elternteil wie eine App

00:30.160 --> 00:34.980
Komponente, die Kinder hatte, die ihre eigenen Kinder haben und so weiter und so weiter

00:35.050 --> 00:43.300
Mit diesem Wissen können wir also eine große App-Komponente haben, die verschiedene Kinder haben, so dass wir jedes machen

00:43.300 --> 00:47.970
Komponente klein und wiederverwendbar

00:47.990 --> 00:57.160
Lass uns zu unserem Beispiel zurückkehren. Jetzt, da wir robot.js haben, können wir alle diese 10 Benutzer im Idealfall auflisten

00:58.700 --> 01:09.740
Die Art und Weise, wie wir das tun - lassen Sie uns eine 'CardList' Komponente haben, so dass, wenn wir eine 'CardList' Komponente importieren, die

01:09.740 --> 01:17.000
ein Elternteil von 'Card', dann können wir das nur all diese Karten rendern

01:17.290 --> 01:30.390
Also werde ich 'CardList' sagen und wieder müssen wir es erstellen. Also ich werde eine neue Datei, 'CardList.js' sagen

01:33.060 --> 01:43.050
ändere es wieder in unsere "Babel" -Syntax - wir werden "React" von "React" importieren und ich mache das ein wenig

01:43.050 --> 01:44.970
ein bisschen größer

01:45.020 --> 01:52.800
Und wieder sagen wir einfach "const", "CardList" ist gleich - wir werden im Moment nichts akzeptieren

01:54.360 --> 01:56.530
Aber es wird zurückkehren ..

01:56.890 --> 02:01.700
Nun, was sollte es zurückgeben?

02:01.850 --> 02:05.070
Es sollte die Karten zurückgeben, oder?

02:05.920 --> 02:07.960
Wir können das einfach kopieren und einfügen

02:11.750 --> 02:13.160
leg das hier rein

02:13.480 --> 02:15.750
Lassen Sie uns die Einrückung hier ein wenig korrigieren

02:18.730 --> 02:26.660
Jetzt wird 'CardList' diejenige sein, die diese Karten und 'index.html' zurückgibt.

02:26.710 --> 02:33.280
wird nur 'Cardlist' rendern

02:33.350 --> 02:39.330
Wenn ich das speichere - nun, ich nehme an, dass 'Karte' nicht benutzt wird, damit wir sie entfernen können

02:39.770 --> 02:42.500
Und Roboter werden nicht benutzt

02:42.620 --> 02:48.400
Aber wir können jetzt die "Roboter" als "Roboter" benutzen

02:48.400 --> 02:59.560
entspricht dem "Roboter" -Array. 'CardList' akzeptiert eine 'Roboter'-Requisite

02:59.730 --> 03:05.880
Wenn ich das speichere, funktioniert alles, aber ich bekomme diesen Fehler, denn wie Sie sehen können, haben wir nicht exportiert

03:06.950 --> 03:13.910
Wenn wir zurück zur Cardlist gehen, exportieren, default - und hoffentlich fangen Sie an, den Dreh raus zu bekommen

03:13.920 --> 03:20.040
Es gibt eine Menge Wiederholungen hier, aber jedes Mal, solange Sie die Syntax lernen, erstellen wir diese

03:20.520 --> 03:28.410
Komponenten schön. Und wir bekommen eine Menge Fehler, weil wir keinen Zugang zu 'Robotern' und IDs haben und na ja

03:28.830 --> 03:30.270
Karte für diese Angelegenheit entweder

03:30.300 --> 03:37.520
Also lasst uns eine Karte importieren - wieder dasselbe Verzeichnis -

03:37.700 --> 03:38.400
"Card.js"

03:39.280 --> 03:40.960
Roboter ist nicht definiert

03:40.960 --> 03:45.540
Wir wissen, dass 'CardList' jetzt Roboter empfängt

03:45.540 --> 03:52.540
Also habe ich Zugang zu den "Requisiten" oder ich kann es zerstören und sagen, dass wir Zugang dazu haben

03:53.570 --> 04:04.940
mit "Robotern". Wenn ich das erhalte, schau, dass ich alles wieder so habe wie es war

04:05.080 --> 04:07.390
Aber es ist nicht alles von ihnen, oder?

04:07.390 --> 04:10.480
Wir greifen nur die 0, 1, 2

04:10.510 --> 04:11.800
Nur drei von ihnen

04:11.800 --> 04:17.970
Und wie wir auf robots.js gesehen haben, habe ich 10

04:18.130 --> 04:20.870
Hm. Wie können wir das besser machen?

04:21.040 --> 04:28.410
Lassen Sie uns das ein bisschen kleiner machen, damit Sie sehen können. Es sieht so aus, als wollten wir eine Art Schleife machen

04:28.510 --> 04:29.410
Recht?

04:29.410 --> 04:35.650
Wir wollen die Roboter durchlaufen und für jede eine Kartenkomponente erstellen

04:35.650 --> 04:36.880
Wie können wir das hier in React machen?

04:36.900 --> 04:45.060
Fangen wir an, indem wir hier eine weitere Variable hinzufügen. Wir werden es 'const' nennen

04:47.740 --> 04:50.300
'Kartenkomponente'

04:50.510 --> 04:56.630
Und innerhalb der 'cardComponent' wollen wir sagen, dass 'robots' - wir wollen

04:56.690 --> 04:59.390
Nun, was wollen wir tun? Wenn wir eine Schleife machen

04:59.420 --> 05:03.460
Wie ich schon sagte, wir wollen Karten, oder?

05:03.470 --> 05:06.740
Wir könnten auch jeweils vier machen, aber ich empfehle immer Karten zu machen

05:07.120 --> 05:09.280
Und in dieser Karte jeder Roboter

05:11.820 --> 05:12.930
bekommt das

05:12.990 --> 05:16.800
So bekommen wir jedes Mal einen Benutzer, wenn wir es durchforsten. Also können wir 'Benutzer' sagen

05:20.070 --> 05:26.550
sollte wieder zurückkehren, weil eine Karte zurückkehren muss, gibt es das zurück, oder?

05:26.610 --> 05:32.890
Wir möchten eine Kartenkomponente zurückgeben. Ich kann das hier kopieren und einfügen

05:34.500 --> 05:42.370
und innerhalb der Rendite kann ich jetzt nur sagen statt Roboter Index 0 - haben wir den Index? Nun ja, weil

05:42.450 --> 05:48.800
Sie erinnern sich, der zweite Parameter, den wir in einer Karte erhalten, ist der Index

05:48.800 --> 05:52.730
Also kann ich "user" und "i" für index sagen

05:52.790 --> 06:03.640
Und jetzt in 'Robotern' werde ich 'I' für Index sagen. Jedes Mal, wenn das erste Mal um Null geht, dann ist es 1

06:03.640 --> 06:07.610
2 bis 9, um unsere 10 Roboter einzubeziehen

06:08.840 --> 06:11.260
Mal sehen, ob das tatsächlich funktioniert

06:11.360 --> 06:19.260
Wenn ich hier eine Kartenkomponente hinzufüge .. Sie erinnern sich, dass wir es in geschweifte Klammern wickeln müssen, weil es Javascript ist

06:19.260 --> 06:22.170
also weiß es zu bewerten

06:22.410 --> 06:28.270
Wenn ich das speichere, sieht es so aus, als ob es erfolgreich kompiliert wird, gehe ich zurück und

06:28.630 --> 06:29.960
Heiliger Moly

06:30.240 --> 06:33.650
Wir haben uns ein Kartenarray besorgt

06:33.820 --> 06:35.140
Wie cool ist das!

06:35.140 --> 06:37.160
Das war unglaublich schnell

06:37.330 --> 06:40.820
Wir haben unser Wissen und unser JavaScript-Wissen verwendet

06:41.020 --> 06:46.240
Habe einfach 'Map' verwendet, um mehrere Komponenten zurückzugeben

06:46.240 --> 06:50.620
Ich hoffe, du erkennst, wie mächtig das ist und deshalb ist React gerade so beliebt

06:50.680 --> 06:57.510
Wir können Javascript verwenden, um diese HTML-Elemente zurückzugeben und Dinge wirklich sehr schnell zu erledigen

06:59.390 --> 07:04.240
Wenn ich die Konsole hier öffne, sehe ich, dass ich eine Warnung bekomme

07:04.250 --> 07:11.120
Jedes untergeordnete Element in einem Array oder Iterator sollte über eine eindeutige Schlüsselreproduktion verfügen, und es besteht ein Link zu diesem Element

07:11.120 --> 07:12.280
will mehr darüber lesen

07:13.370 --> 07:20.450
Dies ist ein spezieller Fall, an den Sie sich einfach erinnern müssen. Bei der Arbeit reagiert der Weg wie das virtuelle DOM

07:20.450 --> 07:23.950
funktioniert es, verfolgt, was all diese Karten sind

07:24.320 --> 07:35.300
Aber ohne etwas zu nennen, das eine Schlüsselrequisite genannt wird, wird React nicht wissen, wenn einige dieser Karten gelöscht werden

07:36.720 --> 07:42.660
welches ist was und wir müssen das gesamte DOM ändern. Versus, wenn es eine Schlüsselstütze hat, die sagt:"Oh diese

07:42.660 --> 07:43.230
wird entfernt "

07:43.230 --> 07:49.080
Ich kann das einfach aus dem DOM entfernen. Denken Sie daran, wir wollen die Menge an Arbeit minimieren, die wir für die

07:49.080 --> 07:50.190
DOM

07:50.280 --> 07:53.170
Wenn Sie also eine Schleife machen, müssen Sie sich daran erinnern

07:53.220 --> 07:57.100
Sie müssen ihm einen eindeutigen Schlüssel geben. In unserem Fall

07:57.240 --> 08:01.200
Wir können einfach 'ich' sagen, was Index ist

08:01.210 --> 08:02.250
Wenn wir das speichern

08:05.300 --> 08:10.130
Ups müssen wir es wieder in geschweifte Klammern wickeln

08:11.000 --> 08:14.720
weil es Javascript ist. Und da gehst du

08:14.740 --> 08:22.800
Jetzt haben wir den Fehler nicht mehr

08:23.020 --> 08:29.150
Und lasst uns das einfach in einer neuen Zeile machen, nur damit es hübscher aussieht

08:33.640 --> 08:39.270
Und weil wir es auf mehreren Zeilen zurückgeben, wollen wir das in eine Klammer einfügen, oder?

08:39.340 --> 08:42.070
In Ordung. Und das ist besser

08:42.120 --> 08:45.350
Das funktioniert also gut, so wie wir es wollen

08:45.420 --> 08:51.150
Ich möchte dir eine Sache zeigen. Weil dies Javascript ist - alles, was wir in diese geschweiften Klammern setzen, ist

08:51.150 --> 08:53.940
Javascript inklusive Kommentare -

08:54.450 --> 08:58.730
Nun, wir können das Ganze einfach kopieren und einfügen

08:58.800 --> 09:04.080
Entfernen Sie die Konstante und fügen Sie sie einfach in die Klammern ein

09:07.750 --> 09:14.360
Wenn ich das speichere, sollte es immer noch funktionieren, so wie es ist

09:14.500 --> 09:20.200
Und das ist eine andere Kraft von React. React macht Sie zu einem wirklich wirklich guten JavaScript-Programmierer, weil

09:20.920 --> 09:25.040
Abgesehen von dieser JSX-Syntax ist alles andere nur Javascript

09:25.390 --> 09:32.830
So können wir eine CardLList-Komponente erstellen, die Karten auflistet und alles, was wir tun müssen, ist eine Prop-Datei

09:33.310 --> 09:39.140
von Robotern. Und wir haben es einfach sauber gemacht

09:39.440 --> 09:40.840
Sehr cool

09:40.880 --> 09:42.880
Alles klar, das war's für dieses Video

09:42.890 --> 09:45.490
Weitere Dinge werden im nächsten passieren

09:45.500 --> 09:46.600
Wir sehen uns in diesem

09:46.610 --> 09:46.880
Tschüss
