WEBVTT

00:03.080 --> 00:06.920
Willkommen zurück. Sicherheit ist eine sehr sehr wichtige Sache im Internet.

00:07.280 --> 00:14.360
Und als Entwickler haben wir die Verantwortung sicherzustellen, dass wir mit allen Benutzerinformationen, die wir erhalten, umgehen

00:14.360 --> 00:17.160
es mit Sorgfalt in einer sicheren Art und Weise.

00:18.770 --> 00:27.160
Und bis jetzt habe ich dir gezeigt, wie man ein einfaches Anmelde-Setup macht, aber ich habe dir nicht wirklich ein sicheres gezeigt

00:27.160 --> 00:28.820
Art und Weise, das zu tun.

00:30.190 --> 00:32.810
Und in diesem Video werde ich über bcrypt-nodejs sprechen.

00:32.890 --> 00:39.560
Und bcrypt ist eine Bibliothek, die sehr, sehr mächtig ist.

00:40.660 --> 00:45.500
Es ermöglicht uns, eine sehr sichere Anmeldung zu erstellen.

00:45.500 --> 00:46.650
Was bedeutet das nun?

00:46.970 --> 00:49.000
Lass mich es dir zeigen.

00:49.120 --> 00:58.160
Bis jetzt hatten wir 'password' nur im Klartext. Im echten Leben

00:58.250 --> 01:06.800
Wir speichern niemals Passwörter als einfache Texte wie diese als String in unserer Datenbank.

01:08.530 --> 01:16.300
Genau so werden Unternehmen gehackt und Passwörter von Benutzern freigegeben, wenn sie es so speichern.

01:16.300 --> 01:24.040
Wir wollen Passwörter in etwas namens Hashes speichern und ich werde zu dem, was das ist, in einer Sekunde, aber ich

01:24.040 --> 01:31.540
Ich möchte die Datenbank ändern, um Ihnen ein realistischeres Aussehen zu zeigen, wie Dinge gespeichert werden.

01:31.540 --> 01:35.680
Sie sehen in unserer Datenbank können wir etwas vielleicht mögen

01:39.730 --> 01:46.910
'login:' und dieser Login enthält ein Array von Objekten

01:50.590 --> 01:51.760
das hat eine 'id:'

01:51.880 --> 02:05.320
Lassen Sie uns einfach '987' mit dem Hash sagen, der für jetzt leer ist und dann eine E-Mail und diese E-Mail wird nur

02:05.590 --> 02:08.150
Referenz john@gmail.com.

02:08.230 --> 02:12.480
Dies ist etwas, worüber wir uns bei Datenbanken Gedanken machen werden.

02:12.680 --> 02:18.230
Aber ich möchte dir zeigen - ich möchte dir diesen Punkt zeigen.

02:18.380 --> 02:27.920
Damit wir mit den sensiblen Informationen umgehen können, das heißt, wenn John sagen würde, betritt unsere Website und will

02:27.920 --> 02:40.010
um ein Login zu machen, wird er uns seine E-Mail und sein Passwort geben, das ist "Cookies". Jetzt vertraut er

02:40.010 --> 02:41.490
uns mit dieser Information.

02:41.690 --> 02:47.360
Und das allererste, was wir tun wollen, ist - wir werden es definitiv nicht als Abfragezeichenfolge hinzufügen

02:47.720 --> 02:52.020
in einer GET-Anfrage - wir werden es zu einer POST-Anfrage hinzufügen.

02:52.040 --> 02:55.530
Es ist also im Körper der Anfrage.

02:55.940 --> 02:59.220
Wir wollten es auch über HTTPS senden.

02:59.420 --> 03:01.750
Das erfordert ein Zertifikat.

03:02.180 --> 03:08.690
Und wir werden uns nicht damit beschäftigen, aber wir möchten es auf jeden Fall über eine HTTPS-Anfrage einbinden

03:08.690 --> 03:12.110
dass es verschlüsselt ist. Wenn er "Kekse" sendet

03:12.260 --> 03:20.510
es wird durcheinandergewürfelt und niemand in der Mitte kann das sehen oder sie werden es aber sehen können

03:20.510 --> 03:22.210
Sie werden nicht verstehen, was es bedeutet.

03:22.520 --> 03:30.750
Und nur der Server, der dieses Passwort erhält, kann tatsächlich verstehen, dass dies für "Cookies" steht.

03:32.100 --> 03:34.110
Alles klar, also ist man HTTPS.

03:34.150 --> 03:38.010
Die zweite Sache ist, wie speichern wir dieses Passwort?

03:39.230 --> 03:47.430
Nun, wir speichern es in einem Hash, und bcrypt, das Paket, von dem ich gerade gesprochen habe, erlaubt uns, dies zu tun.

03:47.480 --> 03:52.230
Lassen Sie mich dieses Paket herunterladen und Ihnen zeigen, wie es funktioniert.

03:58.680 --> 03:59.250
Da gehst du.

03:59.430 --> 04:07.300
Jetzt mit dem installierten bcrypt können Sie hier sehen, dass es ein paar Dinge, die wir verwenden können, und ich werde kopieren und einfügen

04:07.300 --> 04:14.770
dies und etwas von diesem Zeug bewegen.

04:14.770 --> 04:16.440
Ich werde das wirklich unten stellen.

04:20.490 --> 04:25.030
bcrypt gibt uns die Möglichkeit, ein Passwort zu hashen

04:27.940 --> 04:29.650
und eine Art zu vergleichen

04:32.210 --> 04:35.970
Passwörter oder Hashes. Aber was heißt das?

04:36.070 --> 04:40.850
Lass uns eins nach dem anderen gehen.

04:41.030 --> 04:43.880
Wenn ich diese Funktion ergreife und in unserem '/ signin'

04:46.770 --> 04:55.530
oder tut mir leid, denke ich in unserem '/ register', denn dann geben wir unser Passwort an. In unserem '/ register' wenn wir laufen

04:57.620 --> 05:01.410
'bcrypt.hash' und statt 'Speck'

05:01.420 --> 05:04.450
Das übergeben wir als das Passwort des Benutzers

05:04.660 --> 05:11.640
- Wenn wir das Passwort hier übergeben, haben wir ein paar Parameter, die sie uns geben

05:11.640 --> 05:13.240
und das sind Optionen, die wir eingeben können.

05:13.260 --> 05:15.200
Für jetzt lassen wir es einfach so, wie es ist.

05:18.840 --> 05:28.050
Wenn ich den Hash, den wir in dieser Funktion erhalten, 'console.log', dann wird bcrypt das Passwort hashen

05:28.410 --> 05:33.780
und dann diesen Hash zurückgeben - wir werden nur 'Hash' sagen.

05:33.840 --> 05:35.550
Alles klar, lass uns sehen, was hier passiert.

05:35.580 --> 05:37.980
Ich werde sparen. Dann renne ich

05:37.980 --> 05:44.000
'npm start' geht zurück zu unserem Postboten.

05:44.160 --> 05:48.830
Wenn ich mich bei Ann registriere, werde ich auf Senden klicken

05:51.940 --> 05:56.070
und ich bekomme 'bcrypt is not defined', weil ich es hier nicht aufgenommen habe.

05:56.080 --> 06:02.090
Lass es uns machen 'const bcrypt = require (' bcrypt-nodejs ')'

06:05.360 --> 06:08.750
-

06:08.740 --> 06:12.730
Lass uns das speichern und das nochmal versuchen.

06:12.840 --> 06:13.870
Ich werde auf senden klicken.

06:15.900 --> 06:28.030
Wir gehen zurück zur Konsole - siehst du das? Wir haben gerade einen Hash erhalten, und das ist was eine Hash-Funktion tut. Eine Hash-Funktion

06:32.820 --> 06:44.030
Eine Hash-Funktion nimmt eine Zeichenfolge und verwirbelt sie auf eine Weise, dass es unmöglich ist, dass ich dazu in der Lage bin

06:44.030 --> 06:50.650
herauszufinden, dass dies [der Hash] für das Passwort "Cookies" steht und Hash-Funktionen sind eine Möglichkeit.

06:50.970 --> 06:57.140
Das heißt, Sie können "Cookies" eingeben und Sie werden das bekommen, aber Sie werden nie in der Lage sein, zurück zu gehen.

06:57.620 --> 07:03.930
Und die andere Qualität der Hash-Funktionen ist, dass wenn ich das jetzt nochmal mit Passwort mache - Oh schätze ich das

07:03.930 --> 07:05.870
Passwort für Ann war "Äpfel"

07:05.880 --> 07:14.460
- Wenn ich auf Senden klicke gehe ich zurück Ich sehe, dass der Hash beim ersten Mal und beim zweiten Mal anders ist.

07:14.460 --> 07:19.920
Und obwohl Hash-Funktionen tatsächlich immer das Gleiche für den gleichen Wert zurückgeben, ist bcrypt ein

07:19.920 --> 07:25.800
ein bisschen sicherer als das und fügt ein bisschen Magie hinzu, um sicherzustellen, dass es unmöglich ist

07:25.950 --> 07:27.940
immer herausfinden, was das Passwort ist.

07:27.960 --> 07:37.270
Aber jetzt können wir diesen Hash - diesen durcheinandergewürfelten Wert - in unserer Datenbank hier für den Login und jederzeit speichern

07:37.320 --> 07:43.560
Wir melden uns an und möchten überprüfen, ob die Passwörter des Benutzers übereinstimmen.

07:43.890 --> 07:47.800
Nun, jetzt - lass mich das entfernen

07:47.940 --> 07:48.600
- wir haben

07:52.130 --> 07:53.940
- Gehen wir zu '/ signin' und ganz oben

07:57.130 --> 08:05.090
Wir können die Hashes vergleichen, um den Hash zu erhalten, den wir vorher hatten - benutzen wir diesen

08:05.390 --> 08:07.230
oder benutzen wir das neueste, das wir bekommen haben.

08:08.160 --> 08:09.330
Ich werde das ersetzen.

08:09.330 --> 08:18.450
Es wird ziemlich hässlich aussehen, aber ich werde diesen Hash durch diese lange Zeichenfolge ersetzen und ich werde gehen

08:18.450 --> 08:19.230
zu vergleichen

08:21.650 --> 08:26.170
"Äpfel", denn das ist Anns Passwort.

08:26.240 --> 08:31.480
Wenn ich "Äpfel" mit diesem Hashwert vergleiche, lass uns console.log.

08:32.680 --> 08:34.480
"erster Tipp"

08:38.230 --> 08:42.730
Wir werden die Antwort erneut haben

08:42.860 --> 08:46.970
- das bekommen wir nach bcrypt.

08:47.140 --> 08:52.380
Und beim zweiten Mal werden wir auch ein 'Konsolenprotokoll' mit dem falschen Passwort erstellen, das 'Gemüse' ist.

08:57.560 --> 09:04.480
und das wird die "zweite Schätzung" sein.

09:04.510 --> 09:06.640
Lass uns ein Login machen.

09:06.640 --> 09:11.990
Es ist nicht wirklich wichtig, was es ist, weil wir uns keine Gedanken über eine Reaktion machen.

09:13.330 --> 09:21.180
Und ich bekomme eine Fehlermeldung, dass Hash nicht definiert ist, weil ich diesen Hash nicht auf das aktualisiert habe, was wir gerade haben

09:21.180 --> 09:21.930
vorher kopiert.

09:21.930 --> 09:23.230
Lass mich das tun.

09:26.480 --> 09:27.080
Da gehst du.

09:28.860 --> 09:30.980
Lassen Sie mich zurück gehen klicken Sie auf Senden.

09:32.320 --> 09:34.110
Wenn ich hier zurückschaue, komme ich

09:34.120 --> 09:36.160
"erste Vermutung ist wahr"

09:36.370 --> 09:39.920
Das heißt, "Äpfel" entspricht diesem Hash

09:39.940 --> 09:45.310
Sie gaben uns aber "Gemüse" ist nicht gleich dem Hasch, den sie uns dort gegeben haben.

09:48.400 --> 09:53.830
Lass mich das ein bisschen schließen. Und bcrypt ist wirklich sehr mächtig.

09:53.840 --> 09:59.780
Wir werden das verwenden, wenn wir tatsächlich eine Datenbank für unsere Registrierung implementieren. Mit bcrypt, die

09:59.780 --> 10:07.730
ist ein erprobtes und getestetes Hashing - Paket, wir können die Informationen der Benutzer und die Passwörter der Benutzer sicher in unserem speichern

10:07.730 --> 10:14.840
Datenbank und niemandem, selbst wenn sie - selbst wenn Hacker auf unsere Datenbank zugreifen - sie werden es sehr schwer haben zu bekommen

10:14.840 --> 10:16.500
die Benutzerpasswörter.

10:17.300 --> 10:22.370
Sie können zwar ihre E - Mail - Adressen erhalten, aber niemals unsere Passwörter, und wir werden das in unseren

10:22.370 --> 10:25.770
Datenbank mit bcrypt.

10:25.830 --> 10:29.940
Aber ich möchte diesen Punkt wirklich betonen, weil Sicherheit wirklich wichtig ist.

10:30.930 --> 10:37.570
Senden Sie mithilfe von HTTPS immer vertrauliche Informationen vom Front-End zum Back-End

10:38.550 --> 10:48.960
in einem POST-Textkörper und wenn Sie etwas wie ein Kennwort erhalten, wird die Art, wie Sie es in der Datenbank speichern, verwendet

10:48.960 --> 10:51.820
etwas wie bcrypt, um einen Hash zu generieren,

10:52.140 --> 11:00.220
und jedes Mal, wenn sich ein Benutzer anmeldet, überprüfe diesen Hash mit dem, was der Benutzer eingegeben hat. Im nächsten Teil habe ich

11:00.250 --> 11:01.210
links für dich

11:01.330 --> 11:08.830
ein Sicherheitsartikel, den ich geschrieben habe, der vielleicht ein bisschen fortgeschritten ist, aber ich denke, deckt den besten Weg für

11:08.830 --> 11:14.710
Sie, um Benutzer Passwörter zu speichern - etwas, das oft übersehen wird, aber wieder sehr, sehr wichtig, wenn

11:14.710 --> 11:18.100
Sie wollen der Top-Entwickler sein.

11:18.180 --> 11:19.770
Ich werde in der nächsten sehen. Tschüss
