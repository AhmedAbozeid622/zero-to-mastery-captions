WEBVTT 00:00.760 -&gt; 00:07.620 Willkommen zurück, wie ich bereits erwähnt habe, sind die Entwickler wirklich sehr gut darin, dafür zu sorgen, dass sie 00:07.620 -&gt; 00:09.630 nicht immer wieder dasselbe machen. 00:09.900 -&gt; 00:15.940 Und wenn es etwas gibt, das immer wieder gemacht wird, bauen sie ein Werkzeug, damit es einfacher wird. 00:17.810 -&gt; 00:20.170 Nun, Server zu bauen war einer von ihnen. 00:20.170 -&gt; 00:23.290 Es ist etwas, das jeder benutzt. 00:23.450 -&gt; 00:29.360 Die Leute benutzen Bibliotheken genauso wie wir React im Front-End über JavaScript verwendet haben, um unsere Leben von 00:29.360 -&gt; 00:34.260 einfacher zu machen und schneller robustere Server zu bauen. 00:34.270 -&gt; 00:39.690 Und es gibt viele Bibliotheken, die Leute mit Node verwenden, um einen Server zu erstellen. 00:40.340 -&gt; 00:47.630 Aber der populärste und hands-down der beste ist Express und ich habe hier den Zustand von JavaScript 2017 00:47.630 -&gt; 00:54.290 Umfrage - es ist eine berühmte Umfrage, die bekommt jedes Jahr am Ende des Jahres, die Entwickler 00:54.350 -&gt; 00:57.740 fragt, was ihre Lieblingswerkzeuge sind, welche Front-End-Tools sie verwenden. 00:57.740 -&gt; 00:59.880 Und ich empfehle dringend, dass Sie es überprüfen. 01:00.050 -&gt; 01:07.910 Aber Sie können hier sehen, dass für das Backend die Bibliothek, die am beliebtesten ist, Express ist, und diese violette Leiste 01:07.910 -&gt; 01:10.710 bedeutet &quot;Ich habe sie benutzt vorher und würde es wieder verwenden &#39;. 01:11.430 -&gt; 01:17.500 Es gibt andere wie Koa, Meteor, Hapi, aber ihre Verwendung ist sehr, sehr klein. 01:17.510 -&gt; 01:24.370 Express ist nur erprobt; es gibt viele Tools und Informationen online dafür 01:24.370 -&gt; 01:29.140 Wenn Sie also einmal stecken bleiben, können Sie sofort eine Antwort auf Ihr Problem finden. 01:29.260 -&gt; 01:33.160 Also Express ist der Weg 2018. 01:33.160 -&gt; 01:40.130 Also lasst uns etwas Express lernen und zeigen, wie viel einfacher es ist, einen eigenen Server zu erstellen. 01:41.610 -&gt; 01:48.510 Wir werden also den Server löschen, den wir zuvor im letzten Video erstellt haben, und Express installieren. 01:48.860 -&gt; 01:55.680 Lass uns &#39;npm install&#39; machen und wieder über npm haben wir das Express-Paket. 01:58.930 -&gt; 02:01.620 Und jetzt haben wir Express zur Verfügung. 02:01.660 -&gt; 02:03.070 Also lass es uns greifen. 02:03.110 -&gt; 02:13.230 Die Art, wie Sie einen Express-Server erstellen, ist sehr einfach:Sie müssen einfach &#39;const express = require (&#39; express &#39;);&#39;. 02:13.550 -&gt; 02:25.800 Wir müssen eine &#39;const app&#39; machen und dann diese App erstellen, um Express zu starten, wir tun einfach &#39;express ()&#39; 02:25.970 -&gt; 02:27.650 Und dann endlich 02:27.650 -&gt; 02:32.710 &#39;app.listen (3000)&#39; und das war&#39;s. 02:32.730 -&gt; 02:35.710 Wir haben Express läuft. 02:36.010 -&gt; 02:44.920 Lassen Sie mich &#39;npm start&#39; machen und wir sehen, dass unser Node-Server läuft. 02:45.150 -&gt; 02:51.140 Und wenn ich zurück zu localhost:3000 gehe, habe ich &#39;Can not GET&#39;. 02:51.370 -&gt; 02:54.150 Und das ist, weil wir wieder nichts machen. 02:54.470 -&gt; 03:01.580 Aber in nur drei Zeilen haben wir einen Server und ich möchte dir zeigen, dass Express super 03:04.510 -&gt; 03:09.600 ein großartiger Leitfaden für den Einstieg und eine Menge Informationen darüber ist um es zu benutzen. 03:10.680 -&gt; 03:14.120 Und Dokumentation dafür, die du selbst ausprobieren kannst. 03:14.250 -&gt; 03:15.630 Aber jetzt können wir unsere eigenen bauen. 03:18.440 -&gt; 03:20.890 Nun, Express ist wirklich sehr gut im Routing. 03:21.030 -&gt; 03:29.690 Wenn du dich an unseren lokalen Gastgeber erinnerst, haben wir &#39;Can not GET&#39; bekommen. Um eine GET-Anfrage mit Express zu machen, tun wir einfach 03:29.930 -&gt; 03:34.450 &#39;app.get ()&#39; - im ersten Parameter ist der Pfad; Wir machen nur den Routenpfad [&#39;/&#39;]. 03:36.710 -&gt; 03:43.580 Und der zweite Parameter erhält eine Anfrage und eine Antwort und in Express anstatt alles 03:43.580 -&gt; 03:56.620 zu schreiben, ist es üblich, &#39;req&#39; und &#39; res &#39;und hier können wir&#39; res.send () &#39;sagen und wir werden 03:56.720 -&gt; 04:06.780 senden Sie einfach ein&#39; hellooooo &#39;, genau wie wir es in unserem vorherigen Video getan haben, wo wir das HTTP-Modul verwenden mit Knoten. 04:06.920 -&gt; 04:19.750 Lasst uns das überprüfen; Mal sehen, ob das funktioniert. Ich werde sparen, auffrischen und ich bekomme &#39;hellooooo&#39;. Wenn ich die Konsole 04:19.750 -&gt; 04:28.560 hier öffne und die Registerkarte Netzwerk und ich wieder auffrische sehe ich, dass die Antwort &quot;hellooooo&quot; ist. 04:28.690 -&gt; 04:40.520 Wir sehen &#39;Content-Type:text / html&#39;, das für uns automatisch konvertiert wurde. Ich kann auch statt 04:40.730 -&gt; 04:43.710 nur einen HTML schicken. 04:43.880 -&gt; 04:47.150 Also anstatt etwas zu tun wie &#39; <h1> &#39;04:49.990 -&gt; 04:51.010 und&#39; </h1> &#39;04:54.400 -&gt; 05:06.080 was uns ein gibt <h1> &#39;Hellooooo&#39; Ich kann jetzt auch JSON senden. &#39;const user&#39; nochmal und diesmal wird der Benutzername 05:06.080 -&gt; 05:08.300 sein Sally 05:13.590 -&gt; 05:23.470 und ihr Hobby wird Fußball sein und wir müssen hier und da ein &#39;=&#39; hinzufügen Pass &#39;Benutzer&#39; 05:26.370 -&gt; 05:31.430 Wenn ich das speichern und zurück gehen und aktualisieren. Sieh dir das an! 05:31.780 -&gt; 05:37.180 Es führt automatisch die &#39;JSON.stringify ()&#39; für mich aus und gibt 05:37.280 -&gt; 05:46.000 einen JSON-Inhalt zurück - Geben Sie einen &#39;application / json&#39; Content-Type mit der Antwort ein das ist JSON. Sehr cool. So können Sie 05:46.000 -&gt; 05:49.400 die Macht von Express sogar von diesem einfachen Beispiel sehen. 05:49.690 -&gt; 05:56.420 Es nimmt viel von der Wiederholung und macht unser Leben viel einfacher. 05:56.440 -&gt; 06:01.990 Nun haben wir nur GET hier gemacht, aber Sie können auch POST-Anfragen machen. 06:01.990 -&gt; 06:05.920 Also wenn ich zum Beispiel &#39;/ profile&#39; gepostet habe, gut 06:06.190 -&gt; 06:11.440 jetzt, wenn ich mich aktualisiere, bekomme ich einen Fehler, weil 06:14.390 -&gt; 06:19.410 weil ich jetzt die Request-Methode gemacht habe, die vom Browser GET war. 06:19.640 -&gt; 06:30.950 Aber hier akzeptiere ich nur eine POST-Anfrage von &#39;profile&#39;. Wenn ich &#39;/ Profil&#39; hier 06:35.620 -&gt; 06:45.060 bekomme, bekomme ich &#39;Can not GET / profile&#39;, denn obwohl wir jetzt zur richtigen URL gehen, machen wir eine GET-Anfrage. 06:45.070 -&gt; 06:46.750 Bei jeder Aktualisierung eines Browsers 06:46.780 -&gt; 06:48.290 handelt es sich um eine GET-Anfrage. 06:48.790 -&gt; 06:56.530 Und um das zu tun, müssen wir tatsächlich einige Daten senden und ich werde dir zeigen, wie das geht in 06:56.620 -&gt; 06:58.200 die nächsten paar Videos. 06:58.240 -&gt; 07:07.890 Aber um Ihnen zu zeigen, wie Express funktioniert, kann ich diese Routen weiter hinzufügen - lasst uns ein &#39;/ profile&#39; holen, das 07:12.790 -&gt; 07:15.460 &quot;Profil bekommen&quot; zurückgibt. 07:15.640 -&gt; 07:17.110 Und wenn ich eine 07:21.230 -&gt; 07:26.760 mache, dann geh &#39;ich diesmal zu der&#39; root&#39;-URL und / / und ich sage nur &quot;bekomme root&quot; 07:29.580 -&gt; 07:30.630 wenn ich das jetzt spare 07:30.620 -&gt; 07:43.340 und &#39;/ profile&#39; aktualisiere, bekomme ich ein &#39;200 OK&#39; mit der Antwort &#39;Pro werden und wenn ich Nein mache &#39;/ profile&#39; 07:43.340 -&gt; 07:45.830 und nur die &#39;root&#39;-URL Ich werde&#39; root &#39;bekommen. 07:48.950 -&gt; 07:53.780 Und so wie Express arbeitet, prüft es jede Zeile für Zeile. 07:53.790 -&gt; 08:01.670 So wird zum Beispiel überprüft:&quot;Hey, hat die GET-Anfrage die &#39;root&#39; -URL [/]?&quot;. 08:02.100 -&gt; 08:05.160 &quot;Hatte die GET-Anfrage &#39;/ profile&#39;. 08:05.160 -&gt; 08:07.760 Hat die POST-Anfrage &#39;/ profile&#39;. 08:07.980 -&gt; 08:10.150 Und wenn es passt zu jedem dieser 08:10.260 -&gt; 08:14.640, es wird laufen, was auch immer die Funktion darin ist 08:14.940 -&gt; 08:28.280 Wenn ich eine URL mache, die es nicht gibt, bekomme ich &#39; 404 Not Found, weil wir eine GET-Anfrage an diese URL 08:28.280 -&gt; 08:33.660, die nicht existiert, gemacht haben.Wir verwenden also die GET-Methode 08:33.670 -&gt; 08:41.830 die POST-Methode , die PUT-Methode und die DELETE-Methode, die wir in der nächsten Ausgabe 08:41.830 -&gt; 08:43.210 paar Videos zeigen werden 08:43.210 -&gt; 08:49.990 Aber wie wir sehen können, ist es eine einfache Sache Wenn du zu dieser Route gehst, tu das, wenn du zu dieser Route gehst 08:50.200 -&gt; 08:54.510 mach das und alles ist nur logisch und rieselt den ganzen Weg hinunter 08:56.040 -&gt; 08:58.480 Alles klar Wir sehen uns im nächsten Video 08:58.480 -&gt; 08:58.930 Auf Wiedersehen.