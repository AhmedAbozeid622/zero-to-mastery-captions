WEBVTT 00:00.670 -&gt; 00:04.770 Willkommen zurück. Ich denke, es ist Zeit, jetzt unseren eigenen Server zu erstellen. 00:06.270 -&gt; 00:09.620 So erstellen wir eine neue Datei namens &#39;server.js&#39;. 00:09.660 -&gt; 00:11.470 [touch server.js] 00:11.700 -&gt; 00:15.540 Und damit nodemon &quot;server.js&quot; hört. 00:15.540 -&gt; 00:19.630 Geben wir einfach &#39;nodemon&#39; und dann &#39;server.js&#39; ein. 00:19.830 -&gt; 00:27.450 Wenn ich nun dieses nodemonon speichere, höre ich das so lange ich sage &#39;npm start&#39; 00:31.120 -&gt; 00:33.070 Wie ich schon vorher erwähnt habe 00:34.360 -&gt; 00:42.250 Node kommt mit einem eigenen HTTP-Modul und das werden wir verwenden, um unseren Server zu erstellen. 00:42.250 -&gt; 00:44.080 Und es ist sehr, sehr einfach zu benutzen. 00:44.260 -&gt; 00:56.600 Wir greifen einfach das HTTP-Modul und erstellen dann einen Server, indem wir es mit dem Namen http.createServer () definieren. In diesem 00:56.600 -&gt; 01:05.940 &#39;createServer&#39; werden wir eine Pfeil-Funktion erstellen und hier für den Moment lass uns einfach 01:05.970 -&gt; 01:11.100 &#39;console.log (&#39; Ich höre dich! Danke für die Anfrage) &#39;01:12.910 -&gt; 01:20.320 Und dann müssen wir&#39; server.listen () &#39;machen und ihm die Portnummer geben, die wir hören wollen 01:20.320 -&gt; 01:20.660 für. 01:20.770 -&gt; 01:23.930 Mach einfach 3000 für jetzt aber wieder kannst du alles machen, du kannst 01:23.930 -&gt; 01:27.710 3001 wenn du willst, aber 3000 ist nett. 01:27.940 -&gt; 01:31.160 Machen wir &#39;node server.js&#39; 01:31.180 -&gt; 01:32.020 - 01:34.690 -&gt; 01:37.000 Und es sieht so aus, als würde es dort hängen. 01:38.000 -&gt; 01:43.680 Aber gehen wir zu Port 3000 auf unserem localhost, das ist unsere Maschine und sehen, was passiert. 01:45.140 -&gt; 01:51.910 Wenn ich einen neuen Tab öffne und zu localhost 3000 hmm gehe, passiert nichts. 01:52.180 -&gt; 01:59.160 Wenn ich die Konsole öffne, ist nichts da, aber wenn ich zurückgehe, sehe ich &quot;Ich höre dich. 01:59.230 -&gt; 02:05.080 Danke für die Anfrage&quot; und das ist weil sich &#39;Server merken&#39; .js &#39;läuft im Knoten. 02:05.230 -&gt; 02:11.350 Es läuft hier im Terminal. Aber es hört Verbindungen. 02:11.350 -&gt; 02:19.570 Wenn ich hier &#39;Refresh&#39; drücke, oder Enter drücke und versuche mich zu verbinden, wird es hören und es wird 02:19.870 -&gt; 02:24.410 &#39;console.log ()&#39; und Sie können das zweite &quot;Ich höre dich. Danke für die Anfrage&quot; gerade hier. 02:24.520 -&gt; 02:25.180 Wenn ich 02:25.180 -&gt; 02:26.300 zwei weitere Male aktualisiere. 02:28.190 -&gt; 02:31.260 Nun, ich bekomme noch zwei. 02:31.480 -&gt; 02:36.150 Aber im Moment hängt der Browser einfach da, weil wir nichts machen. 02:36.190 -&gt; 02:37.800 Wir reagieren nicht mit irgendetwas. 02:37.800 -&gt; 02:40.760 Unten siehst du &quot;auf Localhost warten&quot;. 02:40.960 -&gt; 02:44.080 Wir melden uns nur an der Konsole, aber wir bekommen keine Antwort. 02:46.060 -&gt; 02:47.050 Lass uns das machen. 02:47.050 -&gt; 02:53.950 Ich werde das Konsolenprotokoll entfernen und die Parameter verwenden, die &#39;createServer&#39; uns bringt. 02:53.980 -&gt; 03:02.510 Wenn wir also versuchen, eine Verbindung herzustellen, haben wir eine &quot;Anfrage&quot; und dann einen &quot;Antwort&quot; -Parameter, den wir verwenden können, und lassen Sie uns 03:02.510 -&gt; 03:07.240 etwas kleiner machen Nur damit wir sehen können. 03:07.430 -&gt; 03:16.700 Und hier können wir etwas wie &#39;response.setHeader ()&#39; machen ... 03:19.760 -&gt; 03:26.010 &#39;Content-Type&#39; - wir sagen dir, was für eine Art der Inhalt, den wir senden wollten, und es wird 03:26.580 -&gt; 03:37.950 &#39;text / html&#39; sein - und das ist nur die übliche Art, den Inhaltstyp zu deklarieren und wir werden &#39;response.end ()&#39; sagen mit 03:39.470 -&gt; 03:42.200 und &#39; <h1> &#39;Etikett, das&#39; Helloooooo &#39;sagt. 03:46.740 -&gt; 03:50.730 Wenn ich das speichere und 03:54.350 -&gt; 03:57.530 nochmal durchführe, müssen wir unseren Server neu starten. 03:57.620 -&gt; 04:02.840 Also lasst uns hier Nodemon einbinden, damit er Dateiänderungen abhört. 04:02.880 -&gt; 04:05.000 Ich gehe zu &#39;package.json&#39; Ich werde das speichern. 04:05.000 -&gt; 04:10.340 Und jetzt werde ich &#39;npm start&#39; laufen sehen, dass alles läuft. 04:10.340 -&gt; 04:12.150 Gehen wir zurück zu unserer &#39;server.js&#39; Datei. 04:12.410 -&gt; 04:19.560 Wenn ich zurückgehe und mich erfrische, bekomme ich &#39;höllooooo&#39;; wenn ich auf die Registerkarte Netzwerk gehe 04:20.350 -&gt; 04:28.670 sehe ich, dass localhost bekomme ich eine 200 Antwort; Wenn ich darauf klicke, sehe ich, dass die Antwort &quot; <h1> helloooooo </h1> &#39;04:28.900 -&gt; 04:39.970 Wenn ich zu Headers gehe, sehe ich, dass es sich um einen 200 Statuscode handelt und der Inhaltstyp&#39; text / html &#39;ist. 04:40.150 -&gt; 04:41.230 Sehr cool. 04:41.260 -&gt; 04:43.940 Ich kann auch Anfragen zuhören. 04:43.990 -&gt; 04:51.720 Also zum Beispiel hätte ich hier &#39;console.log (request.headers)&#39; 04:54.700 -&gt; 05:05.880 sagen können. Ich hätte auch sagen können, ich hätte es auch können sagte &quot;Methode&quot; und schließlich so etwas wie &quot;URL&quot; 05:05.880 -&gt; 05:10.430 &quot;Anfrage&quot; gibt uns eine Menge Informationen über die Anfragen, die wir erhalten. 05:10.530 -&gt; 05:13.700 Und so sind wir uns einig, was jeder einzelne davon ist. 05:13.710 -&gt; 05:25.680 Ich kann &#39;Header&#39;, &#39;Methode&#39; und &#39;URL&#39; sagen. Wenn ich dieses 05:28.820 -&gt; 05:29.540 speichere und 05:32.440 -&gt; 05:36.680 erneut abspiele sehe ich, dass ich Header bekomme, sind &#39;localhost:3000&#39;. 05:36.850 -&gt; 05:42.310 Wir sehen, dass &quot;User-Agent&quot; Mozilla, Macintosh war. Das haben wir also benutzt. 05:42.610 -&gt; 05:44.180 Wir verwendeten einen Apple, um diese Anfrage zu stellen. 05:44.180 -&gt; 05:44.930 Alles klar. 05:46.050 -&gt; 05:51.830 Und die Methode war eine &#39;GET&#39; Methode und die URL war nur der Backslash [\]. 05:51.900 -&gt; 05:55.890 Lasst uns die Header jetzt einfach kommentieren und euch zeigen, wie sich die Dinge ändern. 05:55.890 -&gt; 06:01.020 Wenn ich jetzt &#39;localhost:3000 / profile / 123&#39; 06:04.450 -&gt; 06:07.930 eingebe, bekomme ich &#39;method GET&#39; und &#39;url&#39; war &#39;/ profile / 123&#39; 06:07.990 -&gt; 06:12.530 So bekommen wir Informationen über die Anfrage, die das Frontend gemacht hat, was sehr cool ist. 06:13.560 -&gt; 06:22.240 Jetzt antworteten wir mit &#39;text / html&#39;, aber Sie erinnern sich an JSON, oder? Wir haben darüber gesprochen, wie nützlich 06:22.240 -&gt; 06:26.260 JSON bei AJAX-Anfragen ist. 06:26.370 -&gt; 06:27.630 Können wir das hier machen? 06:27.690 -&gt; 06:35.870 Natürlich, wenn ich &#39;Content-Type&#39; zu &#39;application / json&#39; ändere, dann muss man sich nur an 06:35.870 -&gt; 06:39.980 gewöhnen, aber das ist es Die Art, wie Sie sagen, dass der Inhaltstyp JSON ist. 06:40.040 -&gt; 06:50.270 Nun können wir ein JavaScript-Objekt wie &#39;user&#39; senden und sagen &quot;name:&#39;John&#39;&quot; 06:53.210 -&gt; 06:57.280 &quot;hobby:&#39;Skating&#39;&quot;. 06:57.320 -&gt; 07:05.360 Jetzt kann ich diesen Benutzer hier übergeben, aber denken Sie daran, um zwischen den Drähten, die wir verwenden müssen 07:05.510 -&gt; 07:12.980 &#39;JSON.stringify&#39; zu übertragen und stellen Sie sicher, dass Sie überprüfen das JSON-Video aus, wenn das für dich verwirrend ist. 07:13.040 -&gt; 07:22.090 Aber wir ändern dieses Objekt wieder in eine JSON-Zeichenfolge, damit wir es über die Leitungen senden können. 07:22.230 -&gt; 07:33.390 Wenn ich spare und zurück gehe und mich erfrische, bekomme ich - sieh dir das an! - wieder eine JSON-Antwort &quot;name:&#39;John&#39;, hobby:&#39;skating&#39;&quot; 07:33.960 -&gt; 07:40.560 und wenn ich hier auf die Registerkarte &quot;Network&quot; klicke, sehe ich, dass der &#39;Content-Type&#39; &#39;application / json ist und die Antwort 07:40.620 -&gt; 07:43.610 ist im JSON-Format. 07:43.640 -&gt; 07:47.740 Also auf dem Front-End laufen wir &#39;json.parse ()&#39; 07:47.750 -&gt; 07:52.520 Und dann dieser [{&quot;Name:&quot; John &quot;,&quot; Hobby &quot;:&quot;Skating&quot;}], um es in ein JavaScript-Objekt zu konvertieren 07:52.580 -&gt; 07:53.340 Sehr cool 07:54.340 -&gt; 08:03.670 Wir haben gerade unseren allerersten Server erstellt, aber dieses HTTP ist Wie Sie sich vorstellen können, ist der Aufbau von Servern 08:03.670 -&gt; 08:11.670 etwas, das jeder hat, der eine Website hat und es gibt viele Tools, die wir jetzt verwenden können, 08:11.790 -&gt; 08:12.780 eleganter 08:12.840 -&gt; 08:19.500 als läuft HTTP, und die beliebteste und die beste mit Node.js zu verwenden ist etwas 08:19.500 -&gt; 08:23.510 Express, die wir sprechen werden etwa im nächsten Video 08:23.620 -&gt; 08:25.360 Wir sehen uns in diesem. Tschüß