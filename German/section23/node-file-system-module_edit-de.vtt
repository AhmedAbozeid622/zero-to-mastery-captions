WEBVTT

00:00.980 --> 00:02.900
Hallo zusammen.

00:02.900 --> 00:04.000
Willkommen zurück.

00:04.280 --> 00:12.170
Und in diesem Video möchte ich dir etwas zeigen, das mich wirklich sehr aufgeregt hat, als ich angefangen habe

00:12.170 --> 00:19.040
Lernknoten, und hoffentlich wirst du genauso aufgeregt wie ich, wenn wir durch dieses Video gehen und es dann tun

00:19.040 --> 00:20.300
ein bisschen eine Herausforderung.

00:20.300 --> 00:21.310
Es wird dich umhauen.

00:21.330 --> 00:25.760
Zumindest hat es für mich getan, als ich angefangen habe zu programmieren.

00:25.850 --> 00:34.250
Jetzt im vorherigen Video haben wir über etwas gesprochen, das FS-Modul genannt wird, das mit Knoten kommt, und dies

00:34.250 --> 00:39.590
ist etwas, das in Knoten eingebaut ist und die Art und Weise, wie wir es bekommen, ist, dass wir einfach const machen.

00:39.760 --> 00:50.360
Naja, eigentlich brauchen wir zuerst eine Datei, also lass uns ein touch script.js machen, wir erstellen ein neues Skript perfekt.

00:50.400 --> 00:52.920
Gut, wir können das schließen, weil wir das nicht brauchen.

00:53.490 --> 01:02.190
Und in der script.js, die wir in diesem Ordner oder einem Knoten haben, können wir 'const fs' haben.

01:02.210 --> 01:14.990
equals 'require (' fs ')', also steht FS hier für Dateisystem und wenn Sie Knoten heruntergeladen haben, haben Sie Zugriff

01:14.990 --> 01:15.460
dazu.

01:15.470 --> 01:17.680
Indem Sie das tun.

01:17.880 --> 01:21.750
Warum ist das so aufregend und so nützlich?

01:22.320 --> 01:30.830
Nun, weil das FS-Dateisystem Ihnen erlaubt, auf unser Dateisystem zuzugreifen, was wiederum nicht so aufregend klingt.

01:30.840 --> 01:38.230
Aber lassen Sie mich demonstrieren, was passiert und warum das nützlich ist - also, ertragen Sie mich hier.

01:38.280 --> 01:42.080
Ich werde ein bisschen programmieren und dann werde ich genau erklären, was passiert.

01:43.140 --> 01:48.470
Wir werden also 'fs.readFile' verwenden.

01:48.560 --> 01:50.720
Es ist ziemlich selbsterklärend.

01:51.200 --> 02:01.380
Wir haben einen leeren Parameter und dann haben wir Fehler für Fehler, Daten.

02:01.760 --> 02:03.710
Und das ist eine Pfeilfunktion.

02:05.450 --> 02:12.270
Der zweite Parameter ist also eine Funktion, und diese Funktion hat entweder Fehler oder Daten.

02:12.310 --> 02:24.630
Also für den Fehler, ich werde sagen, wenn es einen Fehler gibt, werfen wir einfach einen Fehler, oder wir können einfach einen Konsolenpunkt sagen

02:25.020 --> 02:30.660
log errrroooorrr. Wirklich schiebe es in ihr Gesicht.

02:31.550 --> 02:42.680
In Ordung! Nun, wenn es keinen Fehler gab, sagen wir einfach, wir sagen einfach console.log und wir melden uns einfach ab

02:42.680 --> 02:45.150
was auch immer Daten sind.

02:45.370 --> 02:45.990
In Ordung.

02:46.150 --> 02:47.720
Lassen Sie mich die Semikolons hinzufügen.

02:48.830 --> 02:51.090
Und speichern Sie das.

02:51.100 --> 02:59.440
Also was ich hier gerade mache. Ich habe gerade das FS-Modul importiert, das mit Knoten geliefert wird, und das FS-Modul hat eine Methode

02:59.740 --> 03:01.670
readFile () das

03:01.720 --> 03:05.480
Nun, es sieht so aus, als würde es eine Art Datei lesen.

03:05.560 --> 03:13.300
Der erste Parameter ist die eigentliche Datei, die wir machen wollen, also der Pfad zu der Datei, die wir noch nicht haben.

03:13.300 --> 03:14.650
Also lass uns eins erstellen.

03:14.650 --> 03:25.200
Ich werde neue Datei sagen und wir werden es "Hallo.txt" nennen, und mit "Hallo.txt" werden wir unseren Klassiker machen

03:26.300 --> 03:27.850
halllloooooo !!!

03:29.090 --> 03:32.300
Und aufregende Sachen, so Ausrufezeichen.

03:32.540 --> 03:37.120
Wir haben das gespeichert und jetzt können wir sagen, dass wir die Datei lesen wollen.

03:37.190 --> 03:40.340
'hello.txt' aus dem aktuellen Verzeichnis.

03:41.140 --> 03:42.340
Hallo Punkt

03:42.790 --> 03:45.140
Text.

03:45.280 --> 03:50.450
Nun wird diese readFile-Methode die Datei mit dem Pfad finden,

03:50.500 --> 03:52.700
Ok, also hier ist es.

03:52.840 --> 03:59.420
Es wird es lesen und dann, wenn es einen Fehler gibt, wird es einen Fehler ausspucken.

03:59.590 --> 04:06.670
Wenn es irgendeine Art von Daten gibt und alles erfolgreich ist, wird es Daten ausspeien. Mit dem

04:06.670 --> 04:08.300
So können wir diese Datei im Knoten ausführen.

04:08.310 --> 04:13.720
Nun gut, zuerst muss ich es speichern. Wir sagen Knoten script.js

04:15.140 --> 04:19.740
Geben Sie ein und ich habe Puffer.

04:20.920 --> 04:22.740
Was ist das?

04:22.840 --> 04:27.460
Und das ist, weil wir ein bisschen Kodierung machen müssen.

04:27.670 --> 04:34.680
Und was das bedeutet ist, wenn ich diese 'toString ()' mache, lasst uns das versuchen und dir zeigen, was ich meine.

04:37.450 --> 04:38.530
Und ich verstehe.

04:38.770 --> 04:41.250
Hallo.

04:41.260 --> 04:49.530
Also liest 'readFile' die Datei wie es der Name andeutet und spuckt aus was auch immer es liest.

04:50.010 --> 04:50.750
Daten.

04:51.500 --> 04:55.490
Nun, warum müssen wir hier 'toString ()' einfügen?

04:56.970 --> 05:04.380
Nur damit Sie wissen, dass "toString ()" etwas ausführt, standardmäßig, wenn Sie nichts hinzufügen, wird es das verwenden

05:04.380 --> 05:11.280
Codierung mit der Bezeichnung UTF 8 und UTF 8 ist eine Art von Codierung.

05:11.420 --> 05:14.640
Lassen Sie uns das einfach ausführen, um sicherzustellen, dass dies immer noch das Gleiche ist.

05:14.750 --> 05:15.530
Ja.

05:15.530 --> 05:20.300
UTF 8 ist also eine Art von Codierung, die wir haben.

05:20.300 --> 05:22.980
Das ist bei HTML 5 ziemlich Standard.

05:23.000 --> 05:26.900
Und so ziemlich jeder benutzt es im Internet.

05:27.290 --> 05:37.160
Es ist eine Möglichkeit für uns, Charaktere zu haben, seien es lateinische Buchstaben, ABC oder Koreanisch

05:37.160 --> 05:45.770
Japanische, chinesische Zeichen, sie sind alle durch eine Zahl dargestellt, und UTF 8 ist eine Möglichkeit, diese zu kodieren

05:45.770 --> 05:48.870
Zahlen, um sicherzustellen, dass wir sie lesen können.

05:48.920 --> 05:55.910
Es ist eigentlich ein ziemlich komplexes Thema, daher empfehle ich die Wikipedia-Seite, die über UTF 8 spricht.

05:55.970 --> 06:03.420
Im Moment wissen Sie einfach, dass UTF 8 eine Kodierung ist, die im Web weit verbreitet ist.

06:03.500 --> 06:09.290
Möglicherweise haben Sie auch gesehen, dass ASCII und ASCII vor der Existenz von UTF 8 existierten.

06:09.290 --> 06:19.610
ASCII war hauptsächlich für lateinische Sprachen, also das ABC; und UTF erweiterte das um viele weitere hinzuzufügen

06:19.860 --> 06:22.540
viele weitere Sprachen aus verschiedenen Teilen der Welt.

06:22.960 --> 06:29.780
Alles klar, ein bisschen eine Tangente, die wir nicht weiter machen mussten, aber wie Sie hier sehen können

06:30.530 --> 06:30.990
haben

06:31.070 --> 06:35.300
"Helllloooooo da" und wir können die Datei lesen.

06:35.300 --> 06:36.320
In Ordung.

06:36.330 --> 06:37.030
Sehr cool.

06:38.270 --> 06:42.810
Lass mich einfach eine andere Methode zu deinem Repertoire hinzufügen.

06:43.250 --> 06:57.160
Lassen Sie uns auch 'fs.readFileSync ()' und 'fs.readFileSync ()' funktioniert ein wenig anders als die vorherigen

06:57.160 --> 07:00.210
eins und sync steht für synchron.

07:00.580 --> 07:01.540
Wir werden sehen, was passiert.

07:01.540 --> 07:02.500
Ich werde reinlegen

07:05.340 --> 07:12.230
'Hallo.txt' noch einmal, und dieses Mal werde ich es einfach so lassen.

07:14.150 --> 07:26.630
Und sagen wir einfach, dass dies der Datei gleicht und wir werden nur 'console.log (file)'.

07:26.650 --> 07:27.020
In Ordung.

07:27.050 --> 07:31.710
Lass mich das speichern und das ausführen.

07:31.760 --> 07:32.390
In Ordung.

07:32.460 --> 07:37.370
Wir wissen noch einmal, dass wir das haben, weil wir toString () machen müssen.

07:37.440 --> 07:38.610
Also lass uns das tun.

07:38.640 --> 07:42.660
Ich werde 'toString ()' versuchen

07:46.060 --> 07:51.020
Ich werde das nochmal speichern und ausführen. Okay, ich verstehe

07:51.280 --> 07:52.410
'höllloooooo da !!!'

07:52.510 --> 08:05.020
Aber nur um sie zu unterscheiden, lassen Sie uns einfach sagen, dass dies die Nummer eins ist und dies die Nummer zwei ist.

08:05.450 --> 08:07.660
Ich speichere das, führe das nochmal aus.

08:08.630 --> 08:12.510
Und whoa, was gerade passiert ist.

08:14.050 --> 08:21.140
Wir haben eins nach den beiden.

08:21.920 --> 08:30.830
Wenn Sie sich in diesem Kurs das asynchrone synchrone Video angeschaut haben, können Sie verstehen, was es ist

08:30.830 --> 08:32.090
passiert hier.

08:32.090 --> 08:34.210
Wenn nicht, werde ich eine kurze Zusammenfassung machen.

08:34.220 --> 08:42.610
Aber ich empfehle Ihnen, dieses Video anzuschauen. Jetzt lesen Datei ist asynchron, und deshalb hat es etwas

08:42.610 --> 08:45.200
Callback-Funktion aufgerufen.

08:45.220 --> 08:53.290
Es heißt:Hey, ich werde diese Datei lesen, und wenn ich damit fertig bin, gehst du einfach weiter mit deiner

08:53.290 --> 08:55.120
Geschäft und lesen Sie weiter.

08:55.120 --> 08:59.010
Zeile drei, Zeile vier, Zeile fünf, Zeile sechs, bis 11.

08:59.260 --> 09:07.010
Wenn ich fertig bin, lasse ich es Sie wissen und ich gebe Ihnen entweder einen Fehler oder einige Daten. 'readFileSync ()' welches

09:07.010 --> 09:11.740
ist synchron sagt:Ich werde diese Datei lesen.

09:11.780 --> 09:14.750
Mach nichts, warte hier, wenn ich fertig bin

09:14.750 --> 09:18.600
Ich werde es "Datei" zuweisen und dann können Sie weitermachen.

09:20.210 --> 09:30.080
Wie Sie hier sehen können, lesen wir die Datei und weil dies asynchron ist, geht es

09:30.080 --> 09:41.280
Um das auszuführen, kommen Sie zu Zeile 10 und führen Sie 'fs.readFileSync ()' und 'readFileSync ()' aus, weil es sagt

09:41.280 --> 09:45.150
Hey, warte, bis ich fertig bin, es wird gedruckt

09:45.330 --> 09:46.920
'höllloooooo da !!!'

09:47.160 --> 09:52.340
und dann wird der asynchrone Code sagen:Hey, ich habe die Datei gelesen,

09:52.380 --> 09:55.770
Hier sind die Daten und es wird hier gedruckt.

09:55.770 --> 09:59.860
Auch hier empfehle ich wirklich, dass Sie das asynchrone synchrone Video auschecken.

10:00.330 --> 10:03.070
Aber jetzt macht das hoffentlich Sinn.

10:03.240 --> 10:12.240
Nun schau dir das an, welchen solltest du benutzen? Nun, für einen einfachen Fall wie diesen,

10:12.400 --> 10:19.690
Wir können verwenden, was wir wollen. Aber Sie können ein Problem mit dem zweiten sehen, besonders wenn wir bauen

10:19.690 --> 10:21.150
so etwas wie ein Server.

10:21.250 --> 10:25.090
Wenn wir eine riesige Datei haben, die etwas mehr als "höllloooooo !!!" hat,

10:25.300 --> 10:34.360
Nun, wenn wir 'readFileSync ()' machen, werden wir die Ausführung unseres Programms anhalten oder pausieren

10:34.360 --> 10:39.980
Datei und es wird den gesamten Text lesen.

10:40.370 --> 10:47.000
Und das Programm wird nur darauf warten, dass es zu Ende geht; gegenüber der Lesedatei, die sagt:Hey du

10:47.000 --> 10:48.230
kann weitermachen.

10:48.320 --> 10:50.340
Ich werde dich wissen lassen, wenn ich damit fertig bin.

10:50.360 --> 10:56.210
Also, wenn Sie einen Server bauen und sagen wir einen Express-Server mit Routen.

10:56.360 --> 11:03.530
Nun, in diesem Fall wollen wir readFile () verwenden, wenn wir irgendeine Art von Datei oder Textdatei lesen

11:03.530 --> 11:04.160
es ist.

11:04.310 --> 11:08.680
Denn auf diese Weise blockieren wir nicht die Ausführung und das Programm kann weiterarbeiten.

11:09.700 --> 11:10.050
In Ordung.

11:10.150 --> 11:12.750
Also ein letztes Mal nur um Dinge zu klären.

11:12.760 --> 11:17.690
Ich werde dies als "Async" und "Sync" bezeichnen.

11:17.710 --> 11:22.350
Also noch einmal, wenn wir das ausführen, haben wir 'Sync' und 'Async'.

11:22.420 --> 11:23.360
'höllloooooo da !!!'

11:23.790 --> 11:32.350
Aber sehr cool sind wir in der Lage, eine Datei und beide Instanzen zu lesen, was irgendwie cool war.

11:32.350 --> 11:38.800
Lassen Sie mich Ihnen noch ein paar davon zeigen und Ihnen dann genau sagen, warum das so aufregend ist und wie wir es können

11:38.800 --> 11:40.880
benutze es um wirklich aufregende Dinge zu tun.

11:44.090 --> 11:50.770
Also lass uns sagen, das "Hölllooooo da !!!" Text ist irgendwie langweilig und wir wollen etwas hinzufügen.

11:51.110 --> 11:54.230
Nun, wir können so etwas machen.

11:55.280 --> 12:01.160
'fs.appendFile ()' geben wir die Datei, die wir anhängen möchten.

12:01.430 --> 12:05.220
Also in diesem Fall ist es "./hello.txt".

12:05.780 --> 12:10.130
Und wenn das nicht existiert, wird es die Datei für uns erstellen.

12:10.130 --> 12:13.130
Und der zweite Parameter wird sagen, was wir hinzufügen möchten.

12:13.130 --> 12:28.150
Also sagen wir, wir wollten vielleicht auch einen Platz hinzufügen und dann sagen "Das ist so cool", jetzt gibt es ein Ausrufezeichen.

12:28.210 --> 12:36.020
Und schließlich nimmt dritten Parameter einen Fehler und dieser Fehler wird nur sagen, wenn ein Fehler vorliegt.

12:36.040 --> 12:37.020
Lass mich das kleiner machen

12:37.040 --> 12:43.540
so dass Sie sehen können - sagen wir einfach, wenn es einen Fehler gibt, werden wir nur "console.log"

12:47.320 --> 12:49.790
'console.log (Fehler)'

12:49.870 --> 12:50.210
In Ordung.

12:50.260 --> 12:51.780
Perfekt.

12:51.830 --> 12:53.900
Lasst uns das laufen lassen und sehen, was passiert.

12:53.900 --> 12:57.520
Ich werde das Skript ausführen und ich bekomme

12:57.530 --> 12:58.360
'höllloooooo da !!!'

12:58.370 --> 12:58.970
'höllloooooo da !!!'

12:58.970 --> 13:10.710
Weil diese zuerst gelaufen sind, aber wenn ich zu 'hello.txt' gehe, schau dir das an, wir haben gerade in eine Datei geschrieben. Und jetzt haben wir "Das

13:10.710 --> 13:11.690
ist so cool."

13:12.000 --> 13:17.440
Also wenn ich das nochmal durchführe und lasse mich das reinräumen damit wir mehr Platz haben

13:21.160 --> 13:22.180
Sieh dir das an. Ich bekomme

13:22.270 --> 13:22.930
'höllloooooo da !!!'

13:22.930 --> 13:23.860
'Das ist so cool'

13:23.860 --> 13:24.520
'höllloooooo da !!!'

13:24.520 --> 13:25.990
'Das ist so cool'

13:26.010 --> 13:30.770
Wenn wir zurück zur Datei hello.txt gehen, Oh, wir haben noch mehr hinzugefügt

13:30.770 --> 13:31.850
'Das ist so cool'

13:32.490 --> 13:33.460
Text.

13:33.680 --> 13:35.140
Das ist ziemlich cool.

13:35.140 --> 13:39.740
Wir haben unserer Datei nur ein paar Zeilen hinzugefügt.

13:39.800 --> 13:42.450
Lass mich das entfernen, damit es nicht zu nervig wird.

13:42.800 --> 13:44.780
Ich werde es retten und zurückkommen.

13:46.190 --> 13:48.930
Alles klar, also haben wir den Append gelernt.

13:49.090 --> 13:57.880
Lass mich das einfach so kommentieren, dass es die anderen nicht stört.

13:57.900 --> 14:04.570
Lassen Sie uns dieses Mal "schreiben" - schaffen Sie jetzt etwas Platz, damit wir sehen können

14:07.240 --> 14:09.220
Mit dem Schreiben, wie du dir vorstellen kannst,

14:10.320 --> 14:17.020
'fs.writeFile ()' und wir werden nur sagen, dass diese Datei 'bye.txt' heißen wird.

14:17.020 --> 14:19.550
Sehr originelle Benennung von mir.

14:20.400 --> 14:21.540
Und werde nur sagen.

14:21.540 --> 14:23.750
Traurig dich gehen zu sehen.

14:27.200 --> 14:44.280
Und noch einmal, es wird einen Fehler machen und dieser Fehler wird 'if (err)' 'console.log (err)'

14:44.340 --> 14:50.640
Alles klar, also lass uns das speichern, die Datei ausführen oder das Skript ausführen.

14:51.890 --> 14:56.110
Und schau dir das an, "tschüss.txt" wurde gerade hinzugefügt.

14:56.240 --> 15:00.580
Wenn wir darauf klicken, haben wir "traurig, dich gehen zu sehen".

15:00.650 --> 15:03.090
Wir haben gerade eine neue Textdatei erstellt.

15:03.940 --> 15:05.870
Sehr sehr cool.

15:05.930 --> 15:17.010
Übrigens, damit du weißt, was passiert, wenn ich sagen darf, dass ich die gelesene Datei falsch geschrieben habe und jetzt ist es "hell.txt"

15:17.150 --> 15:22.280
Nun, wenn ich das ausführe, erhalte ich einen Fehler und das sieht man.

15:22.340 --> 15:30.610
Weil es ausgeht bekomme ich die Fehlermeldung, Fehler mit vielen R's.

15:30.620 --> 15:30.930
In Ordung.

15:30.950 --> 15:39.260
Ein bisschen von einem Übergang dort, aber nur für den Fall, dass Leute fragen oder Sie darüber nachdenken.

15:39.340 --> 15:39.990
In Ordung.

15:40.160 --> 15:45.190
Woo ~ Ich werde müde, lass uns einen letzten machen und dann werde ich dir genau sagen, warum das so ist

15:45.190 --> 15:46.670
cool.

15:46.840 --> 15:54.180
Das letzte, was wir machen werden - wir wollen hier wieder etwas Platz schaffen - wird das "Löschen" sein.

15:54.490 --> 15:59.240
Mit dem 'Löschen' können wir 'fs.unlink ()' machen.

15:59.270 --> 16:08.500
Der Name ist ein bisschen daneben, aber "fs.unlink ()" und wir werden die "tschu.txt" sagen und bemerken, dass ich es konnte

16:08.500 --> 16:18.730
mach einfach 'tschüss.txt', aber um es konsistent zu halten, werde ich einfach './bye.txt' mit dem './' davor sagen

16:18.730 --> 16:18.940
es

16:23.530 --> 16:24.400
und mit diesem.

16:24.400 --> 16:25.970
Auch wenn es irgendwelche Fehler gibt

16:28.550 --> 16:29.680
nur 'console.log (err)'

16:29.790 --> 16:32.720
Hoppla, ich habe vergessen das 'wenn' zu machen

16:37.540 --> 16:39.900
perfekt, jetzt

16:40.130 --> 16:42.020
Na, mal sehen, was hier passiert.

16:43.460 --> 16:52.940
Und nur zum Spaß, lassen Sie uns hier einfach eine 'console.log ()' hinzufügen, nachdem sie gelöscht hat und wir sagen 'Anfang', weil

16:52.940 --> 16:58.590
wir sagen 'tschüss' zu './bye.text'. Verblüfft.

16:58.990 --> 17:00.290
Okay, lass uns das laufen lassen.

17:00.290 --> 17:06.220
Ich werde sagen - und wir werden die Schreibdatei hier auskommentieren, weil du sie nicht schreiben musst,

17:06.220 --> 17:08.320
wir haben bereits den "bye.text".

17:08.420 --> 17:09.640
Lass mich sparen.

17:09.810 --> 17:13.280
Nun, wenn Sie sich den 'tschi.text' anschauen, sehen wir, was hier passiert, wenn ich das Skript starte

17:16.580 --> 17:20.410
schau dir das an, der 'tsch.text' wurde gerade entfernt.

17:20.830 --> 17:22.910
Anfang ist gerade geschehen.

17:25.290 --> 17:26.430
Genial.

17:26.490 --> 17:30.840
Das war sehr aufregend für mich, hoffentlich war es auch für dich.

17:30.900 --> 17:34.270
Aber warum ist das aufregend?

17:34.650 --> 17:42.900
Nun, da wir nun in der Lage sind, JavaScript außerhalb von Webbrowsern und außerhalb zu verwenden

17:42.900 --> 17:46.760
nur Websites und Server zu bauen.

17:46.890 --> 17:52.760
Was wir jetzt mit diesem Wissen tun können, ist, dass wir unser Leben leichter machen können.

17:52.800 --> 18:01.540
Sie können Fälle denken, vielleicht wollen Sie eine Excel-Datei lesen und es gibt Dinge, die Sie verwenden können, mit

18:01.540 --> 18:05.690
Lesen Sie die Datei und verwenden Sie NPM-Module, die Sie lesen können.

18:05.830 --> 18:06.180
Sagen wir.

18:06.180 --> 18:10.730
Spalten in einem Excel und etwas Mathe.

18:11.140 --> 18:18.100
Oder vielleicht haben Sie ein Excel-Blatt mit all diesen E-Mails und Sie möchten eine E-Mail senden, sagen wir

18:18.190 --> 18:24.160
100 Leute auf dieser Liste, aber Sie wollen auch nicht erwischt werden, Leute durch den Google-Filter zu spammen, der sagt

18:24.160 --> 18:32.650
dass hey dieses Konto Spamming ist, weil sie nur 100 E-Mails in zwei Minuten gesendet haben. Gut mit etwas

18:32.650 --> 18:40.150
Wie Node kannst du vielleicht etwas schaffen, das alle sechs Stunden fünf E-Mails versendet.

18:40.150 --> 18:48.520
Eine andere Sache, die Sie tun können, wenn Sie einen Roboter zum Beispiel etwas ähnlich einem Dateisystem anstelle von hatten

18:48.520 --> 18:50.010
Lesen aus der Datei.

18:50.000 --> 18:58.000
Sie können vom Roboter lesen, vielleicht durch Wireless, vielleicht durch Drähte und bekommen eine Eingabe von einigen Daten

18:58.450 --> 19:00.040
dass der Roboter hat.

19:00.400 --> 19:03.570
Vielleicht hat es eine Katze entdeckt.

19:03.910 --> 19:10.120
Nun, mit dieser Eingabe können Sie etwas tun, das Sie beantworten können, vielleicht senden Sie eine E-Mail, die besagt, dass

19:10.120 --> 19:16.420
Roboter hat gerade eine Katze entdeckt und diese E-Mail gesendet oder eine Ausgabe gesendet.

19:16.420 --> 19:24.160
Und das nennen wir Input-Output, bei dem Sie eine Eingabe von einer anderen Quelle oder einem anderen Computer erhalten

19:24.760 --> 19:32.140
Und dann gibst du auch etwas zum Konsum aus, das ist wirklich sehr aufregend, weil es so ist

19:32.170 --> 19:35.490
öffnet die Welt, in der Sie Werkzeuge für sich selbst erstellen können.

19:35.620 --> 19:36.730
Sie können Dinge automatisieren.

19:36.730 --> 19:41.760
Du kannst buchstäblich alles tun, was dein Verstand denken kann.

19:42.310 --> 19:48.310
Und ich weiß, das ist noch früh und du bist immer noch am Anfang deiner Entwicklerkarriere, aber das ist es

19:48.310 --> 19:54.370
Der erste Schritt, um zu verstehen, wie Sie programmieren können, um Probleme zu lösen und Ihr Leben zu gestalten

19:54.610 --> 19:58.580
effizienter oder vielleicht nur ein bisschen mehr Spaß.

19:58.630 --> 20:02.040
Also werden wir im nächsten Video etwas Spaß machen.

20:02.140 --> 20:07.650
Wir werden das verwenden, was wir gerade gelernt haben, und wir werden dem Weihnachtsmann bei einer Programmieraufgabe helfen.

20:08.720 --> 20:10.190
Ich sehe dich in diesem.

20:10.360 --> 20:10.570
Tschüss
