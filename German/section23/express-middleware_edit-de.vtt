WEBVTT 00:01.450 -&gt; 00:03.440 Willkommen zurück. In diesem Video 00:03.450 -&gt; 00:09.000 möchte ich über ein wichtiges Konzept in Express sprechen und das ist Middleware. 00:09.110 -&gt; 00:10.430 Lassen Sie mich Ihnen zeigen, wie es funktioniert. 00:10.550 -&gt; 00:20.030 Wenn ich den Server hier betreibe, habe ich nur einen einfachen Server, der &#39;testet&#39;, Express hat ein Konzept von Middleware 00:21.180 -&gt; 00:28.720 und wenn ich &#39;app.use&#39; () &#39;Dies ist eine generische Express-Middleware, die ich hier eingeben kann. 00:29.040 -&gt; 00:35.730 Und was Middleware tut ist - wie der Name schon sagt - wenn die Anfrage kommt, wird sie durch 00:35.730 -&gt; 00:40.420 diese &#39;Use&#39;-Funktion durchlaufen und dann nach unten rinnen Was immer wir bekommen:00:40.420 -&gt; 00:47.430 POST, PUT, DELETE und diese Middleware wird etwas tun, um die Anfrage, die wir gerade in der Reihenfolge 00:47.430 -&gt; 00:50.880 hatten, einfacher zu machen arbeite hier unten. 00:52.280 -&gt; 01:02.020 Lassen Sie uns dieses Beispiel demonstrieren:&#39;app.use ()&#39; erhält &#39;Anfrage&#39;, &#39;Antwort&#39; und dann etwas &#39;nächstes&#39;. 01:02.240 -&gt; 01:04.010 Und innerhalb dieser Funktion 01:07.830 -&gt; 01:10.710 werden wir einfach &#39;console.log ()&#39; 01:14.390 -&gt; 01:15.000 &#39;sagen <h1> Helllöu </h1> 01:18.750 -&gt; 01:27.600 Wenn wir sparen und zurückgehen und localhost laufen, hmmm, es hängt hier. 01:27.700 -&gt; 01:31.170 Selbst wenn ich die Konsole öffne, passiert nichts. 01:31.390 -&gt; 01:38.170 Wenn ich zurückgehe, sehe ich das <h1> Teufelchen </h1> &#39;wird ausgelöst, weil ich die Konsole logge, aber es erreicht nie 01:41.540 -&gt; 01:49.950, weil die Middleware weiterhin Daten weiterleiten muss, um&#39; next &#39;aufzurufen. 01:50.340 -&gt; 01:52.720 Der dritte Parameter. 01:52.810 -&gt; 01:59.530 Jetzt, indem ich &#39;next&#39; anrufe, wenn ich mich aktualisiere, erhalte ich &#39;testest&#39;. 01:59.620 -&gt; 02:09.620 So wie die Middleware funktioniert, benutzen wir &#39;app.use ()&#39;, sie bekommt die Anfragen der Webseite; die 02:09.620 -&gt; 02:10.510 Anfrage kommt durch. 02:10.520 -&gt; 02:12.190 Wir können damit machen, was wir wollen. 02:12.200 -&gt; 02:17.010 In unserem Fall berühren wir es nicht wirklich, wir sind nur Konsolenprotokollierung <h1> Teufelchen </h1> &#39;und dann schlagen wir nächsten 02:17.030 -&gt; 02:21.740 und dann Express durchläuft diese [app.get () und app.listen ()]. 02:21.830 -&gt; 02:26.030 Und obwohl Sie vielleicht denken, warum ist das nützlich? 02:26.060 -&gt; 02:31.920 Es gibt viele viele Fälle, die ich Ihnen später zeigen werde, während Middleware wichtig ist, und Middlewares 02:31.920 -&gt; 02:40.220 sind großartige Skripte, die von Leuten so vorgeschrieben wurden, dass sie es können fügen Sie Ihrem Server hinzu, aber Sie werden mehr 02:40.220 -&gt; 02:40.970 im nächsten Video sehen. 02:40.970 -&gt; 02:47.760 Ich wollte Ihnen nur das Grundkonzept der Middleware zeigen:Etwas, das vor der Zeit vor 02:47.760 -&gt; 02:55.570 empfangen wird, wir gelangen auf die Routen, die Anfrage, modifiziert sie und dann Übergibt die nächste Funktion, um weiterzumachen. 02:56.640 -&gt; 02:58.410 Ich werde in der nächsten sehen. Tschüss.