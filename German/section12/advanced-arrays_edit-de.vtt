WEBVTT

00:01.370 --> 00:10.140
Und wir sind zurück, um im ersten Abschnitt wieder über Arrays zu sprechen, wenn wir über Arrays sprechen, die wir gesagt haben

00:10.190 --> 00:11.980
sie sahen ungefähr so ​​aus

00:15.010 --> 00:18.230
eckige Klammern und wir können setzen, was wir wollen.

00:18.220 --> 00:20.920
Wir haben hier nur ein paar Zahlen angegeben.

00:21.100 --> 00:27.340
Das sind Arrays und wir haben darüber gesprochen, dass wir mit ihnen vier Schleifen machen können.

00:27.340 --> 00:32.590
Wir können für jeden mit ihnen was neu in meinem Skript fünf machen.

00:32.720 --> 00:35.390
Und heute werden wir noch ein paar mehr lernen.

00:35.540 --> 00:41.990
Aber bevor wir das tun, erinnern wir uns daran, wie das For Each funktioniert.

00:42.030 --> 00:47.200
Nehmen wir an, wir wollen jede einzelne Zahl im Array multiplizieren.

00:47.430 --> 01:01.860
Wir können uns gerade an Konst erinnern, jetzt können wir einfach unsere neue E6-Syntax verwenden und wir können sagen, dass ein neues Array gleich ist

01:03.240 --> 01:08.170
Array-Punkt für jeden und es liest sich nett rechts für jedes Array.

01:09.290 --> 01:15.750
Wir werden eine Nummer verwenden und sie wieder als Funktion verwenden.

01:15.980 --> 01:17.690
Kein Funktionswort mehr.

01:17.690 --> 01:28.290
Alles sieht auf diese Weise mit dem fetten Pfeil und für jede Zahl im Whalsay-Array number mal schöner aus

01:29.040 --> 01:34.020
zwei also multipliziere alles mit zwei.

01:34.020 --> 01:38.810
Jetzt werden wir sehen, was das Konsolenprotokoll gibt.

01:39.830 --> 01:41.160
Du bist

01:46.950 --> 01:47.700
nicht definiert.

01:47.860 --> 01:50.250
Nun, weil das nicht so ist.

01:50.260 --> 01:58.510
Für jeden funktioniert das für jeden nur so, ich werde über diese Elemente hinweggehen und ich werde mich vermehren

01:58.510 --> 02:02.280
eine Zahl von zwei, aber wir ändern das Array nicht.

02:02.380 --> 02:08.500
Wenn wir uns das Array jetzt genau ansehen, ist es immer noch das Gleiche von 1 bis 10 16.

02:08.700 --> 02:14.190
Wir multiplizieren die Zahlen nur zufällig mit zwei, speichern sie aber nicht wirklich irgendwo.

02:14.830 --> 02:24.940
Wenn wir das tun wollen, was wir tun, müssen wir sagen, dass Konst doppelt ist und wir sagen, dass Double ein Array ist

02:25.600 --> 02:31.760
und dann Doppelpunkt drücken.

02:31.820 --> 02:38.410
Wir schieben also auf das Array, während wir es mehrmals durchlaufen.

02:38.480 --> 02:40.210
Jetzt wollen wir sehen, was uns das Doppelte gibt.

02:43.440 --> 02:48.760
Ich speichere eine Aktualisierung und schaue mir das an.

02:48.820 --> 02:52.500
Ich bekomme zwei für 20 32.

02:52.570 --> 02:53.160
OK.

02:53.380 --> 03:05.910
Jetzt sind die, über die wir heute sprechen, Kartenfilter und reduziere ich würde sagen, dass diese drei sind

03:05.910 --> 03:11.810
wahrscheinlich die wichtigsten Methoden, die Sie heute in Ihrem Tag verwenden werden.

03:11.880 --> 03:17.340
Javascript sie sind super nützlich, also fangen wirklich an, mit ihnen vertraut zu werden.

03:17.390 --> 03:25.610
Und jedes Mal, wenn Sie daran denken, eine Art Loop zu machen, möchten Sie höchstwahrscheinlich eines dieser drei machen.

03:25.680 --> 03:32.850
Beginnen wir mit dem obigen Weg, jede Sache im Array zu verdoppeln und ein neues Array zu erstellen

03:32.850 --> 03:52.430
gut mit karte können wir kosten karte parade array punkt karte nummer ist zahl mal zu und die weg karte funktioniert

03:52.490 --> 04:01.720
ist, dass du immer etwas zurückgeben musst, weil das für mabbe anders ist als für jedes andere

04:01.930 --> 04:10.690
gut für jede gerechte Schleife ist über etwas und es tut einfach, was auch immer die Funktion sagt gegen die

04:10.690 --> 04:11.530
Array.

04:11.680 --> 04:19.330
Wir können tun, was wir nicht für jedes Element haben konnten, das über jedes Element jede Nummer schleifen und ein neues zurückgeben kann

04:19.330 --> 04:21.100
Array.

04:21.110 --> 04:22.310
Lass mich dir zeigen, was ich meine.

04:22.790 --> 04:25.270
Jedes Mal, wenn das Array eine Schleife ausführt.

04:25.310 --> 04:29.110
Also sagen wir hier, der erste ist die Nummer eins.

04:29.310 --> 04:36.340
Wir geben 1 mal 2 zurück, das in das Map-Array gebracht wird, das jetzt 2 ist.

04:36.450 --> 04:39.370
Und dann gehen wir zur nächsten Nummer 2 mal 2.

04:39.390 --> 04:46.290
Jetzt wird dem Array 10 Mal hinzugefügt, 2 wird zum Array hinzugefügt und 16 Mal wird 2 zum Array hinzugefügt.

04:46.300 --> 04:47.740
Deshalb geben wir es zurück.

04:47.860 --> 04:53.980
Und indem wir dies tun, wenn wir Konsole Hund Karte Array zuordnen

04:57.520 --> 05:00.460
und lass uns hier auffrischen.

05:00.850 --> 05:07.890
Und habe eine schließende Klammer hier, lass es uns nochmal versuchen.

05:08.010 --> 05:09.900
Sie sehen das Karten-Array.

05:09.900 --> 05:23.650
Also die erste Zeile ist doppelt und die zweite Zeile ist knackery wird diese nur benennen, damit wir den Unterschied kennen.

05:23.670 --> 05:26.760
Und wiederholen wir das noch einmal.

05:27.260 --> 05:31.340
Übrigens wundern Sie sich, warum ich erfrischend bin, anstatt es nur hier zu kopieren und einzufügen.

05:31.350 --> 05:38.570
Nun, das ist, weil, weil wir Konst verwenden, es sagt, Array wurde bereits deklariert, also habe ich

05:38.580 --> 05:39.960
erneuern.

05:40.290 --> 05:41.520
Aber da gehst du.

05:41.520 --> 05:47.830
Für jede Karte, die diese beiden betrachtet, scheinen sie beide dasselbe zu tun.

05:48.720 --> 05:54.570
Aber es gibt einen entscheidenden Unterschied zwischen Karte und für jeden und ich bin hier, um Ihnen das zu sagen, wann immer Sie

05:54.570 --> 06:00.160
möchte eine einfache Schleife Schleife und etwas Aktion auf etwas wie ein Array machen.

06:00.450 --> 06:06.980
Sie möchten für jedes Map over verwenden, für das die Operation nichts tun kann.

06:07.020 --> 06:15.310
Sie können dies komplett leer lassen oder Konsole-Protokoll erstellen, da alles für jeden interessiert ist zu iterieren

06:15.350 --> 06:24.550
Das geht eins nach dem anderen über eine Sammlung von Elementen wie 1 bis 10 und 16 zu iterieren und was auch immer anzuwenden

06:24.550 --> 06:27.440
Operation sagen wir es zu jedem Element.

06:27.460 --> 06:31.800
Die Karte hat auf der anderen Seite eine Einschränkung der Operation.

06:31.930 --> 06:35.230
Es erwartet, dass die Operation ein Element zurückgibt.

06:35.230 --> 06:42.580
Also mit Karte mit für jeden können Sie mehrere Zeilen Code haben alle diese verrückten Dinge im Vergleich zu Karte

06:42.970 --> 06:43.740
mit Karte.

06:43.750 --> 06:46.900
Sie haben immer ein Rückgabeelement.

06:46.930 --> 06:54.280
Die Map iteriert erneut durch eine Sammlung von Elementen, die die Operation auf jedes Element anwenden

06:54.730 --> 07:00.510
und schließlich Speichern des Ergebnisses jedes Aufrufs der Operation.

07:00.520 --> 07:06.970
Das ist das in einer anderen Sammlung, die ein Karten-Array ist.

07:07.010 --> 07:12.920
Mit anderen Worten transformiert map das Array.

07:12.920 --> 07:22.490
Es erstellt ein neues Array, welches ein Map-Array gegenüber jedem ist, das nur eine ganze Reihe von Aktionen ausführt

07:22.490 --> 07:27.620
auf dem Array und was diese Aktionen sind, sind nicht wirklich so begrenzt.

07:27.620 --> 07:34.230
Wenn wir ein neues Array zurückgeben wollen, müssen wir ein eigenes Array erstellen und dann drücken.

07:34.370 --> 07:39.260
Und Sie könnten hier etwas bemerken, über das wir im letzten Abschnitt gesprochen haben, als wir über Fortgeschrittene sprachen

07:39.260 --> 07:49.990
Funktionen und das ist die Idee von Nebenwirkungen, wenn wir zurück mit foreach können wir eine ganze Reihe von tun

07:49.990 --> 07:52.010
Nebenwirkungen innerhalb der Funktion.

07:52.210 --> 08:00.650
Sie können mit der Konsole-Regel ein neues Array erstellen, das Sie an dieses Array senden können, das Sie nicht definiert zurückgeben können.

08:00.650 --> 08:07.960
Du hast gesehen, dass wir, als wir das erste Mal für jedes oder sogar jetzt getan haben, nichts zurückgeben.

08:08.010 --> 08:12.120
Wir kehren also undefiniert gegen eine Karte zurück.

08:12.220 --> 08:15.700
All diese Nebenwirkungen sind theoretisch weg.

08:15.840 --> 08:19.190
Und weil wir mit einer Karte zurückkehren müssen.

08:19.240 --> 08:22.800
Lass mich dir nur zeigen, wenn ich nicht zurück komme, lass uns sehen, was passiert.

08:30.910 --> 08:34.280
Ich bekomme map undefined undefined undefined undefined.

08:34.540 --> 08:37.660
Sofort wissen wir, dass wir etwas falsch machen, dass wir zurückkehren müssen.

08:38.140 --> 08:47.230
Und wie wir im vorigen Abschnitt erwähnt haben, haben wir jetzt eine reine Funktion geschaffen, bei der es keine Frage gibt

08:47.230 --> 08:48.790
ob wir zurückkehren oder nicht.

08:49.660 --> 08:59.130
Wir haben eine Funktion ohne Nebenwirkungen eingegeben, die einfach einen Wert zurückgibt.

08:59.180 --> 09:01.350
Wieder ein sehr wichtiges Konzept.

09:01.370 --> 09:05.990
Wir wollen die Dinge in einer erwarteten Art und Weise halten.

09:06.080 --> 09:13.310
Wir wollen keinen Code haben, der auf einer Website lebt, sagen wir seit vier Jahren und jemand

09:13.310 --> 09:21.350
kommt mit, wer es nicht genau kennt und plötzlich all diese Nebenwirkungen passieren

09:21.500 --> 09:23.950
sie wissen nichts davon.

09:24.080 --> 09:31.540
Wieder wollen wir reine einfache Foxtons schreiben und das ist es, was uns die Map ermöglicht.

09:31.650 --> 09:34.980
Und die andere wichtige Sache ist, dass wir das Array nicht ändern.

09:34.980 --> 09:40.830
Dieses Array bleibt exakt gleich, weil wir immer nur eine neue Kopie des Arrays erstellen

09:40.830 --> 09:44.420
niemals die Daten mutieren.

09:44.490 --> 09:44.910
Gut.

09:44.910 --> 09:46.090
Das war also Karte.

09:46.200 --> 09:48.100
Lasst uns die Rückkehr hierher bringen.

09:48.420 --> 09:51.940
Und bringen wir den Konsul zurück.

09:51.960 --> 09:59.160
Ich möchte Ihnen auch zeigen, dass Sie tatsächlich nur einen einzigen Parameter mit einer Luftfunktion haben können

09:59.640 --> 10:04.400
vermeide die Klammern.

10:04.560 --> 10:11.410
Und wieder, weil wir zurückkommen und wir hier nur eine Zeile zurückgeben, können wir Abkürzungen machen

10:11.410 --> 10:12.970
ist nur das

10:16.290 --> 10:19.020
housecleaner macht Ausblick.

10:19.250 --> 10:24.050
Lass es uns nochmal testen.

10:24.060 --> 10:24.490
Da gehst du.

10:24.490 --> 10:26.070
Alles sieht gut aus.

10:26.070 --> 10:35.280
Schau dir den Unterschied zwischen der Karte und dem nächsten an, den ich dir zeigen werde, ist Filter.

10:35.600 --> 10:39.460
Jetzt mit Filter können wir Filterarray sagen.

10:40.310 --> 10:51.230
Und wie der Name schon sagt, können wir unser Array mit einer Bedingung filtern, in unserem Fall können wir sagen, dass Blits zurückkehren

10:51.350 --> 11:00.010
alle Elemente in dem Array, die weiter oben sind, so dass wir sagen können, dass die Nummer größer als 5 ist.

11:00.310 --> 11:11.360
Und wie bei map gibt dies ein neues Array zurück, so dass wir etwas zurückgeben müssen, weil das Filter-Array geht

11:11.360 --> 11:12.890
um diese Informationen zu enthalten.

11:12.890 --> 11:23.620
So, wie du das liest, filtere dieses Saray, das hier oben ist, da du eins nach dem anderen gehst, also eine Nummer

11:24.190 --> 11:31.150
wird zuerst eine Rückkehr ist eine größer als 5.

11:31.190 --> 11:34.100
In diesem Fall wird es sagen, dass es falsch ist.

11:34.310 --> 11:38.290
Wir werden das also nicht in das Filter-Array aufnehmen.

11:39.090 --> 11:43.350
Dann iteriert zu zwei ist zu groß als fünf.

11:43.350 --> 11:44.580
Nein, das ist falsch.

11:44.580 --> 11:50.940
Also wird es nicht gehen in das Filter-Array ist 10 größer als 5.

11:51.390 --> 11:52.550
Ja es ist gut.

11:52.560 --> 11:57.520
Zehn wird in das Filterfeld gehen und ist 16 größer als 5.

11:57.870 --> 11:58.350
Ja.

11:58.500 --> 12:03.100
Dann wird 16 in das Array gehen.

12:03.300 --> 12:08.070
Und wieder, weil es nur eine einzige Linie ist, können wir hier kurze Form machen.

12:11.410 --> 12:19.450
Und jetzt, wenn wir das Protokoll abbrechen, sagen wir Filter Filter Array.

12:22.590 --> 12:39.920
Und erfrischen wir bekommen den Filter mit 10 und 16, wenn wir tun, gleich 5, während in diesem Fall erhalten wir ein

12:39.920 --> 12:43.850
leeres Array, weil nichts gleich fünf ist.

12:43.910 --> 12:46.000
Sie können also jede gewünschte Bedingung hier eingeben.

12:46.010 --> 12:51.480
Wenn er Kraft hat und du sehen willst, ob es ein Wort hallo enthält, kannst du das auch tun.

12:51.560 --> 12:56.210
Alles, was Sie tun müssen, ist wahr oder falsch, wenn es falsch zurückgibt.

12:56.210 --> 13:02.050
Es wird nicht in das Array gehen, wenn es wahr zurückgibt, während es in das Array gehen wird.

13:02.050 --> 13:04.210
Sehr cool sehr nützlich.

13:04.500 --> 13:05.430
Was haben wir sonst noch?

13:05.440 --> 13:11.550
Nun, die letzte, die ich Ihnen zeigen möchte, ist reduzieren und das ist wirklich sehr mächtig, mit dem Sie viel tun können

13:11.550 --> 13:12.250
Reduzieren.

13:12.330 --> 13:16.910
Sie können tatsächlich Filterung und Zuordnung mit Reduzieren durchführen.

13:17.040 --> 13:19.110
Es ist also eine sehr mächtige Methode.

13:19.410 --> 13:22.470
Aber ich werde Ihnen einen einfachen Weg zeigen, wie Sie beginnen können.

13:23.910 --> 13:27.810
Nun, wir werden es tun, werden wir Konst sagen

13:30.590 --> 13:43.270
Reduzieren Array ruft er und wieder dies ein neues Array, das wir speichern reduzieren und reduzieren dauert etwas aufgerufen

13:43.300 --> 13:50.080
ein Akku und die Nummer.

13:50.120 --> 13:52.490
Das kann natürlich jeder Name sein.

13:52.510 --> 13:58.190
Manchmal wirst du ein CC für einen Akku sehen, wir werden es jetzt so lassen, damit du es sehen kannst

13:58.190 --> 13:59.180
weiß welche Nummer ist.

13:59.180 --> 14:05.860
Nummer ist 1 bis 10 und 16 aber was ist Akku.

14:06.230 --> 14:15.140
Gut Akku ist etwas, wo wir die Informationen speichern können, die im Körper der Funktion passiert.

14:15.140 --> 14:25.180
Lassen Sie mich Akkumulator plus Nummer erklären und wieder, weil wir reduzieren, geben wir ein Array zurück.

14:25.260 --> 14:27.930
Wir müssen einen Wert zurückgeben.

14:28.210 --> 14:36.030
Und was wir hier sagen, ist, dass jedes Mal, wenn Sie iterieren, also sagen wir, die erste Runde.

14:36.060 --> 14:42.220
Sie haben Nummer eins Akku plus Nummer eins ist gleich.

14:42.310 --> 14:49.050
Nehmen wir an, wenn der Akkumulator Null ist, dann sind alle gleich 1, jetzt null plus eins gleich 1.

14:49.270 --> 14:57.160
Wenn 2 kommt, machen wir 1 plus 2, weil der Akku merkt, was vorher da war

14:57.160 --> 15:03.260
10 kommt herum und du gehst drei plus 10.

15:03.270 --> 15:05.540
Nun, was ist der Akku?

15:05.540 --> 15:10.800
Wir haben es nirgendwo in Redos nach der Funktion definiert.

15:11.010 --> 15:14.220
Sie haben einen zweiten Parameter.

15:14.340 --> 15:20.460
Und hier können wir spezifizieren, was wir wollen, dass unser Akkumulator mit dem Standardwert beginnt.

15:20.910 --> 15:23.740
In unserem Fall sagen wir Null.

15:23.740 --> 15:28.190
Jetzt, wenn ich den Dialog Konsole reduziere

15:31.000 --> 15:32.890
und reduziere es.

15:33.220 --> 15:34.370
Mal sehen was passiert.

15:39.150 --> 15:48.940
Wir bekommen reduzieren 29, weil 10 plus 16 ist 26 plus drei ist 29.

15:48.980 --> 16:05.560
Wenn ich das auf 5 ändere und ich es kopiere und es nochmal versuche, dann erhalten wir 34, weil die Startnummer jetzt fünf ist.

16:05.600 --> 16:06.570
Sehr cool.

16:06.610 --> 16:07.550
So, das war es.

16:07.660 --> 16:13.820
Ich möchte, dass du dich an diese drei Methoden erinnerst, weil du sie in deiner Karriere oft verwenden wirst.

16:13.810 --> 16:15.490
Sie sind sehr, sehr nützlich.

16:15.550 --> 16:24.290
Sie sind rein, was bedeutet, dass jedes Mal, wenn wir eine Operation ausführen, die Eingaben, die wir bekommen, immer eine zurückgibt

16:24.290 --> 16:24.940
Wert.

16:24.980 --> 16:28.610
Und es gibt keine Nebenwirkungen.

16:28.690 --> 16:33.270
Und wie Sie sehen können, sind sie sehr einfach und einfach zu lesen.

16:33.400 --> 16:36.830
Also gewöhne dich an sie und viel Glück mit den Übungen

16:36.880 --> 16:40.130
nach diesem Video. Wir sehen uns im nächsten Tschüss.
