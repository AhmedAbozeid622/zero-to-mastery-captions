WEBVTT

00:01.990 --> 00:10.800
ES8 hat einige neue Funktionen, die 2017 im Vergleich zu ES7 eingeführt wurden. In diesem Video,

00:10.810 --> 00:13.360
Wir werden nur die wichtigen besprechen.

00:13.660 --> 00:17.750
Das erste ist also 'string padding'.

00:18.010 --> 00:28.110
Wir haben neue Funktionen, die wir zu Strings hinzufügen können, nämlich '.padStart' und '.padEnd'. Jetzt zu demonstrieren

00:28.110 --> 00:43.810
Lass uns in die Konsole gehen. Und tu 'einfach' Turtle 'und wir machen einen' .padStart 'von 10, wenn ich das tue,

00:43.810 --> 00:48.230
Ich bekomme 'Turtle' mit 10 Feldern davor.

00:49.810 --> 01:01.170
Wenn ich '.padEnd' bekomme 'Turtle' mit 10 Leerzeichen danach, und das ist nur nützlich für die Ausrichtung von Zeichen, von

01:01.170 --> 01:09.310
Strings, wenn Sie eine spezifische Auffüllung für sie wünschen. Wieder sehr, sehr einfach, einfach aufzuheben, nur eine andere Saite

01:09.310 --> 01:11.980
Methode, die wir erhalten haben.

01:11.980 --> 01:13.510
Okay, lass uns in die zweite gehen.

01:13.510 --> 01:20.830
Die zweite, die wir bekommen haben, ist etwas, das in den Parameterlisten und -aufrufen der Funktion als Komma bezeichnet wird.

01:21.040 --> 01:21.840
Hmm !, was heißt das?

01:21.970 --> 01:33.200
Nun, ich kann etwas wie "const fun", "a, b, c, d" machen und am Ende ein Komma hinzufügen.

01:34.370 --> 01:38.610
Und wenn ich eine Funktion mache, sagen wir einfach 'console.log' (s)

01:38.930 --> 01:41.670
'a', nur eine dumme, einfache Funktion.

01:41.690 --> 01:48.920
Ich kann jetzt diese Funktion ausführen, wie eins, zwei, drei, vier und dann ein Komma am Ende.

01:49.220 --> 01:54.120
Und das ist immer noch gültig Javascript. Wenn ich das führe,

01:54.200 --> 01:55.550
Du siehst das, es funktioniert.

01:55.550 --> 01:56.680
Konsolenprotokoll 'a'.

01:56.690 --> 01:59.030
Welches ist eins, wird eingeloggt.

01:59.030 --> 02:03.850
Warum sollte das überhaupt nützlich sein?

02:03.860 --> 02:09.320
Der Hauptgrund ist, wenn Sie wirklich sehr große Parameterlisten bekommen, werden Sie viele Leute sehen

02:09.320 --> 02:12.420
Ähnliches tun.

02:15.910 --> 02:18.140
Nur um die Dinge ein bisschen sauberer zu machen.

02:18.310 --> 02:27.080
Und wenn Sie damit beginnen, ist es jedes Mal, wenn Sie einen neuen Parameter hinzufügen, viel einfacher.

02:27.100 --> 02:32.710
Aber auch in GitHub, wenn Sie Änderungen vornehmen, macht es tatsächlich den Unterschied.

02:32.710 --> 02:35.860
Die grünen und roten Unterschiede sind viel sauberer.

02:35.860 --> 02:41.750
Es ist also nur syntaktisch und lässt die Dinge ein bisschen schöner aussehen.

02:41.760 --> 02:47.530
Normalerweise möchten Sie normalerweise nicht so etwas tun, aber vielleicht, wenn Sie eine lange Parameterliste haben

02:47.770 --> 02:54.520
So ist das Endkomma jetzt gültig und es wird kein Fehler ausgegeben. Gut.

02:54.630 --> 02:56.130
Schauen wir uns den nächsten an.

02:56.400 --> 03:00.720
Der nächste ist, wir haben 'object.values'

03:03.310 --> 03:12.410
und "object.entries" und diese sind sehr sehr nützlich, denn vor diesen hatten wir etwas genannt

03:12.420 --> 03:21.680
Mit 'object.keys' und 'object.keys' konnten wir etwas ähnlich wie Arrays, aber auf Objekten tun.

03:22.030 --> 03:32.700
Wenn wir zum Beispiel ein Objekt (obj) haben, dann haben wir ein Objekt und dieses Objekt

03:32.790 --> 03:42.820
wird 'userName0', 'Santa', wir haben 'userName1', 'Rudolph'.

03:43.000 --> 03:51.920
Und wir haben auch, 'userName2', 'Mr. Grinch '.

03:52.000 --> 03:57.550
Betrachten wir nun dieses Objekt, weil es kein Array ist

03:57.550 --> 04:05.790
Wir können nicht die "Karte" oder "filtern" oder "reduzieren", sondern diese Art von einem hässlichen Objekt.

04:05.830 --> 04:10.810
Und das veranschaulicht einen guten Punkt, manchmal, wenn Sie mit Servern arbeiten, erhalten Sie Objekte, die

04:10.930 --> 04:17.110
Sie mögen es nicht wirklich, oder Sie wollen nicht mit arbeiten, aber Sie wollen immer noch darüber iterieren.

04:17.230 --> 04:22.360
Und bevor wir sowas mit 'object.keys' machen könnten, mach ein bisschen mehr Platz hier drüben,

04:22.360 --> 04:31.450
so können wir sehen, ich könnte "object.keys" tun und hier werden wir das Objekt werfen.

04:31.450 --> 04:36.140
Und jetzt kann ich es wie ein Array verwenden oder eins nach dem anderen gehen.

04:37.190 --> 04:38.240
Wie ein Array.

04:39.490 --> 04:42.120
Es ist also als ob es ein Array ist.

04:42.120 --> 04:45.310
Aber außer, es hat Eigenschaft und Werte.

04:45.490 --> 04:53.180
Nehmen wir an, wir wollten eine "forEach" -Schleife und für jeden Schlüssel, das heißt für jeden Schlüssel im Array, machen.

04:53.500 --> 05:05.840
Also haben wir für jeden 'Benutzernamen' auch den Index, der 0, 1, 2 ist, klopfen Sie einfach in Klammern.

05:05.980 --> 05:15.710
Und jetzt können wir innerhalb von hear 'console.log (key)' und dann 'object [key]' sagen.

05:15.970 --> 05:20.500
Jetzt greifen wir das Objekt mit dem Schlüssel 'username' an.

05:20.500 --> 05:29.470
Also, wenn ich das "console.log" schreibe, lasst uns das kopieren und einfügen, reinigt das ein wenig und ich sehe, dass ich

05:29.480 --> 05:34.970
'Benutzername' 'Santa', 'Benutzername1' 'Rudolph', 'Benutzername2' 'Mr. Grinch '.

05:35.190 --> 05:44.580
Und das ist eine Möglichkeit für uns, Objekte zu durchlaufen oder zu durchlaufen, aber mit 'object.entries',

05:44.760 --> 05:45.860
Dinge werden ein bisschen leichter.

05:46.730 --> 05:58.610
Zum Beispiel können wir 'Objekt' machen, müssen mehr Platz schaffen, wir können 'Objekt.Werte' und die 'Objekt.Werte'

05:58.970 --> 06:06.020
Wenn ich hier ein "forEach" mache, nehme ich einfach den 'Wert' aus dem Wert.

06:06.140 --> 06:11.670
Ich kann nur 'console.log (Wert)'.

06:13.080 --> 06:19.530
Und jetzt bekomme ich den Wert jedes Objekts.

06:19.560 --> 06:28.830
Das ist es Schleifen durch "Santa", "Rudolf" und "Mr. Grinch '.

06:29.060 --> 06:31.390
Mit den Einträgen, wenn ich 'object.entries' mache.

06:31.630 --> 06:33.250
Nun, mal sehen, was passiert.

06:34.360 --> 06:42.990
Lassen Sie uns das klären, ich bekomme eine Reihe von 'Benutzername' 'Santa', 'Benutzername1' 'Rudolph' und 'Benutzername2' 'Mr. Grinch '.

06:43.030 --> 06:49.600
Das gibt Ihnen viel Kontrolle, Sie erhalten sowohl Eigenschaft und Wert oder Schlüssel und Wert, und Sie können alles tun

06:49.600 --> 06:55.910
Sie wollen damit arbeiten und 'foreach', 'map', 'reduce', 'filter' all diese Array-Funktionen verwenden.

06:55.930 --> 06:58.130
Lassen Sie uns hier ein Szenario aus dem echten Leben verwenden.

06:58.390 --> 07:04.330
Nehmen wir an, wir wollten es, wir haben es gerade vom Backend erhalten, das Backend schickt uns einfach einen Haufen

07:04.330 --> 07:09.940
Benutzer, die sie in der Datenbank hatten und wir wollen 'Benutzernamen' dafür generieren, weil wir es nicht mögen

07:09.940 --> 07:16.540
die 'username0', 'username1', 'username2', Sie möchten den Namen anzeigen, der die 'Santa' mit anzeigt

07:16.690 --> 07:21.540
die ID Nummer, das ist 0, für 'Rudolf' wird 1, für 'Mr. Grinch 'wird 2 sein.

07:21.610 --> 07:25.160
Wie können wir das machen? mit unseren neu gewonnenen Kräften.

07:25.570 --> 07:30.040
Nun, ich kann einfach etwas mit 'object.entries' machen,

07:31.340 --> 07:40.290
und 'object.entries' wird ein 'Objekt' haben, das ich überlagern kann und das wird uns einen 'Wert' geben,

07:40.860 --> 07:44.370
Denken Sie daran, dass dies Arrays zurückgibt.

07:44.640 --> 07:55.700
Und hier wollen wir einfach zu einem Wert von 1 zurückkehren, weil wir 'Santa', 'Rudolph' und 'Mr. Grinch '.

07:55.740 --> 07:58.690
Das ist also das zweite Element im Array.

07:59.130 --> 08:06.710
Und dann wollen wir hinzufügen, wie eine Zeichenfolge 'Wert 0', die das erste Element ist.

08:06.750 --> 08:09.540
Also 'Benutzername0', 'Benutzername1', 'Benutzername2'.

08:10.080 --> 08:13.330
Und hier wollen wir "ersetzen",

08:13.440 --> 08:21.480
Dies ist nur eine Funktion, die wir für Strings verwenden können und wir möchten, dass 'Benutzername' durch eine leere Zeichenfolge ('') ersetzt wird.

08:22.710 --> 08:29.520
Was wir hier machen, ist, dass wir eine neue Zeichenfolge mit "Santa", 0, erstellen

08:29.940 --> 08:30.490
weil wir den Benutzernamen hier nicht brauchen.

08:30.510 --> 08:38.280
Nun, obwohl wir ein Objekt haben, können wir es wie ein Array durchlaufen, und so haben wir Neues

08:38.280 --> 08:42.430
Benutzernamen "Santa0", "Rudolph1" und "Mr. Grinch2 '.

08:42.780 --> 08:43.880
Wie cool ist das?

08:44.880 --> 08:50.790
Also, das sind wirklich sehr nützliche Ergänzungen der Sprache, besonders 'object.values' und

08:50.790 --> 08:57.970
'objects.entries' kann man viel damit machen, aber es gibt ein großes ES8-Feature, das angekommen ist und

08:57.980 --> 09:03.870
Alle sind begeistert, und sie heißen 'Async', oh warte!

09:04.100 --> 09:07.670
Jetzt ist es brandneu und jeder in der Community ist wirklich begeistert.

09:07.670 --> 09:14.710
Um den Nutzen zu erfassen und zu verstehen, benötigen wir jedoch ein ganzes Video.

09:14.960 --> 09:17.220
Ich sehe dich also in diesem.

09:17.530 --> 09:17.790
Buh-Tschüss.