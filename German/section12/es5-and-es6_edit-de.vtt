WEBVTT

00:01.650 --> 00:08.220
Wenn es eine Sache gibt, die wir die ganze Zeit gelernt haben und dieser Kurs ist, dass es nichts Statisches gibt

00:08.220 --> 00:10.190
darüber, ein Webentwickler zu sein.

00:10.380 --> 00:19.700
Verbesserungen werden ständig in HTML, CSS und Javascript und sogar in den Browsern gemacht,

00:19.910 --> 00:21.450
werde ständig aktualisiert

00:22.680 --> 00:25.480
Bibliotheken werden auch ständig erstellt.

00:25.560 --> 00:31.140
Wenn Sie sich daran erinnern, dass Bibliotheken nur Teile von Code sind, könnten sie CSS sein und könnten HTML sein

00:31.140 --> 00:36.630
sei Javascript. Code-Stücke, die von jemand anderem geschrieben wurden, damit wir es benutzen können.

00:36.630 --> 00:38.240
Wir müssen also nicht bei Null anfangen.

00:40.090 --> 00:43.790
Jetzt ist es die menschliche Natur, sich ständig verbessern zu wollen.

00:43.890 --> 00:51.200
Und in diesem Video lernen wir die neuen Funktionen kennen, die alle 2018 nutzen werden.

00:52.190 --> 01:00.310
Aber lassen Sie uns zuerst etwas aus unseren vorherigen Videos rekapitulieren. Wenn Sie sich erinnern, dass Javascript von der

01:00.310 --> 01:06.600
Netscape-Browser und alle anderen Browser begannen mit Javascript.

01:06.640 --> 01:13.950
Also hat Netscape Javascript an etwas gesendet, das ECMA International heißt.

01:14.200 --> 01:20.620
Damit JavaScript standardisiert werden kann und sie sagen können, hey, benutzen alle diese Version von Javascript

01:20.890 --> 01:23.090
in allen Browsern.

01:23.270 --> 01:29.640
Das ist, was ECMA Script ist ECMA Script ist gut, es ist Javascript

01:29.690 --> 01:36.590
 Aber es ist nur die übliche Art, es so zu nennen, wenn die Browser was implementieren

01:36.590 --> 01:43.670
Javascript sollte tun und wie sie Javascript lesen Nun stimmt jeder auf den Standard.

01:43.680 --> 01:52.390
Jedes Mal, wenn Sie so etwas wie ES6 sehen, und Sie werden das ziemlich oft sehen, steht ES6 einfach

01:52.390 --> 01:59.150
für die ECMAscript-Version 6.

01:59.200 --> 02:08.500
Also ja, es gab Ecmascript Version 1 den ganzen Weg bis 6 und wir sind derzeit bei Version 7 aber

02:08.740 --> 02:13.470
Es ist immer noch neu und wir lernen erst Version 5 und Version 6.

02:13.870 --> 02:21.040
Aber Version 5 und Version 6 stellen einige neue Funktionen vor, die wirklich sehr leistungsfähig sind und das Programmieren erleichtern

02:21.040 --> 02:23.190
in Javascript wirklich sehr nett.

02:23.380 --> 02:29.090
Die meisten Codebasen, die 2018 angezeigt werden, verwenden diese Funktionen.

02:29.530 --> 02:36.370
Es ist ein sehr, sehr aufregendes Thema für mich, es ist einer meiner Lieblingsteile von Javascript jetzt und ich bin aufgeregt

02:36.370 --> 02:42.350
um Ihnen einige dieser neuen Funktionen zu zeigen, die Ihnen das Leben sehr erleichtern werden.

02:42.370 --> 02:48.640
Nun, eine Sache, die Sie vielleicht denken, ist, Ah! Andre Ich möchte nichts lernen, wenn Browser das nicht tun

02:48.640 --> 02:51.350
Unterstütze sie und ich kann sie nicht wirklich benutzen.

02:51.880 --> 02:54.170
Aber Uh! Mach dir keine Sorgen, mein Freund.

02:54.250 --> 02:58.950
Das sind alles Funktionen, die unterstützt werden, weißt du warum?

02:59.330 --> 03:03.080
Nun, hauptsächlich wegen etwas namens BABEL.

03:03.340 --> 03:10.120
Sie sehen vor ein paar Jahren Programmierer BABEL erstellt, so dass Entwickler neue Javascript-Funktionen verwenden können

03:10.780 --> 03:11.650
wie sie kommen.

03:11.650 --> 03:18.130
Denken Sie immer an die Versionen von ECMAScript Releases, ohne auf die Implementierung warten zu müssen

03:18.130 --> 03:19.330
die Merkmale.

03:19.330 --> 03:24.440
BABEL, erlaubt uns, sie sofort zu benutzen.

03:24.510 --> 03:26.330
Wie machen sie das?

03:26.340 --> 03:28.120
Werfen wir einen Blick,

03:28.160 --> 03:37.140
Wenn ich hier reingehe, wirst du sehen, dass BABEL mir etwas zeigt, was ich schreiben kann und lernen werde

03:37.140 --> 03:42.720
die Syntax bald genug, mach dir keine Sorgen, ich kann so etwas nicht schreiben, das ist die neue Art zu schreiben

03:42.720 --> 03:50.550
Javascript mit ECMAScript 6 und es kompiliert in diese.

03:50.550 --> 03:51.750
Nun, was heißt das?

03:51.750 --> 04:00.630
Es bedeutet, dass es eine Datei Zeile für Zeile liest und dann in eine Version von Javascript ändert, die alle Browser verwenden

04:00.630 --> 04:03.480
wissen und es funktioniert auf allen Browsern.

04:03.480 --> 04:10.650
Wenn wir unsere Anwendung oder Website tatsächlich bereitstellen, was bedeutet, dass wir sie online stellen können, nachdem wir damit fertig sind,

04:10.650 --> 04:18.780
Wir können BABEL benutzen, um zu sagen, dass er unsere Javascript-Datei liest und sie in diese umwandelt, damit es funktioniert

04:18.780 --> 04:20.410
alle Browser.

04:20.520 --> 04:26.670
Also ohne darüber nachzudenken, kannst du schreiben

04:26.670 --> 04:26.790
all Ihren Code in der neuesten und besten Art, es zu schreiben.

04:26.790 --> 04:34.470
Sie können sehen, wie sauber das ist und BABEL wird sich darum kümmern, alles für Sie zu ändern

04:34.470 --> 04:35.480
so dass Browser es lesen können.

04:36.560 --> 04:38.400
Ist das nicht toll? Genug davon.

04:38.420 --> 04:40.280
Lassen Sie uns einige neue Syntaxen lernen.

04:40.430 --> 04:41.320
Und hab keine Angst.

04:41.330 --> 04:48.410
ES5 und ES6 haben Javascript viel einfacher gemacht und mehr Spaß beim Schreiben. Von jetzt an werden wir was nehmen

04:48.410 --> 04:54.140
wir lernen in diesem Video, unseren gesamten Code zu schreiben, weil es genau das ist, was die Industrie gerade benutzt.

04:54.170 --> 04:57.320
Und deshalb werden Sie während der Interviews gefragt.

04:57.320 --> 04:59.200
Also lasst uns anfangen.

05:04.760 --> 05:09.850
Das erste Feature, das ich Ihnen zeigen werde, ist "Let" und "Const".

05:10.020 --> 05:13.500
Diese sind eigentlich sehr, sehr einfach.

05:13.530 --> 05:17.090
Dies sind neue Möglichkeiten, Variablen zu deklarieren.

05:17.220 --> 05:25.230
Also, wenn Sie hier in unserem Abschnitt Out-Line sehen, sehen Sie, dass Javascript Variablen jetzt zwei neue Möglichkeiten hat

05:25.380 --> 05:33.370
eine Variable zu deklarieren, und tatsächlich eine Variable, die wir bis zu diesem Punkt benutzt haben, tun wir nicht

05:33.370 --> 05:35.010
wirklich müssen es immer wieder verwenden.

05:36.080 --> 05:40.530
Wir haben jetzt etwas, das man "lassen" nennt, um Ihnen zu zeigen, wie beides funktioniert.

05:40.790 --> 05:42.340
Lass uns ein kleines Beispiel machen.

05:42.350 --> 05:53.970
Ich werde sagen "const player" und "const" steht für constant, sagt "bobby" und wird sagen

05:54.170 --> 05:59.420
"lass die Erfahrung gleich hundert sein" und werde sagen

05:59.830 --> 06:15.260
'let wizardLevel gleich false'. Nun, wenn ich etwas mache, zum Beispiel wenn die Erfahrung größer als 90 ist

06:18.630 --> 06:21.850
(lassen Sie wizardLevel) gleich wahr '.

06:21.980 --> 06:26.500
OK, also diese sehen aus wie Variablen, nichts ist anders.

06:26.650 --> 06:30.010
Lassen Sie uns das durch die Konsole laufen und sehen, was passiert.

06:31.450 --> 06:32.020
OK.

06:32.080 --> 06:34.000
Wenn ich jetzt 'wizardLevel' überprüfe, bekomme ich 'false'

06:39.820 --> 06:46.510
Hmmm! das ist komisch, denn im vorherigen Video haben wir über den Spielraum gesprochen

06:46.510 --> 06:51.430
Hätte 'wizardLevel' eine Variable, wäre ich hier 'wahr' geworden.

06:51.470 --> 06:59.450
Also, wenn dies Variable war und dies war Variable 'wizardLevel' anstelle von 'falsch' wird 'wahr'.

06:59.590 --> 07:02.810
Das ist jetzt richtig verwirrend.

07:02.810 --> 07:05.860
Das liegt daran, dass es nicht in einer Funktion enthalten ist.

07:05.870 --> 07:13.430
Dies ist ein wenig schwierig, aber mit Variable konnten wir nur einen Bereich innerhalb einer Funktion erstellen,

07:13.880 --> 07:16.720
aber niemals, wenn es geschweifte Klammern hatte.

07:16.790 --> 07:22.110
Aber innerhalb von 'wenn'.

07:22.290 --> 07:27.230
Mit 'Let', wenn ich 'Let' und 'Let' sage, nun,

07:27.420 --> 07:37.230
jetzt habe ich eine "wizardLevel" -Variable innerhalb von 'if' erstellt, also ist der einzige Weg, auf den ich zugreifen kann, darin

07:37.230 --> 07:38.430
das 'wenn'.

07:38.430 --> 07:42.220
Wenn ich 'console.log (wizardLevel)' hier mache

07:44.930 --> 07:53.880
und 'console.log (wizardLevel)' draußen und dann lass '' hinein '

07:56.350 --> 08:08.430
und "draußen". Wenn ich das kopiere, füge das ein, "drinnen", ich bekomme "wahr", "draußen",

08:08.680 --> 08:17.890
Ich bekomme 'falsch', weil jetzt mit 'lassen', jedes Mal, wenn es um eine geschweifte Klammer gewickelt wird, nun, es schafft ein neues

08:18.130 --> 08:21.610
Umfang, im Vergleich zu einer Variablen,

08:22.000 --> 08:23.500
wenn ich das in eine Variable ändere (var)

08:27.420 --> 08:29.910
und ich kopiere das nochmal und aktualisiere,

08:32.970 --> 08:46.010
Wenn ich das kopiere, bekomme ich "drinnen", ist gleich "wahr" und "draußen" ist gleich "wahr", weil "wizardLevel" bereits hat

08:46.010 --> 08:46.660
wurde geändert.

08:46.730 --> 08:55.550
In den geschweiften Klammern wird kein neuer Bereich erstellt, da dies keine Funktion ist.

08:55.550 --> 08:56.940
Jetzt weiß ich, dass das wirklich sehr verwirrend ist.

08:56.960 --> 09:03.690
Aber das eine große Ausweg daraus ist, verwenden Sie nicht mehr Variable (var) mehr. Variablen (var) ist eigentlich ziemlich verwirrend.

09:03.710 --> 09:08.870
Denken Sie jetzt an 'lassen' als die neue Variable.

09:08.960 --> 09:14.980
Also werden wir von nun an 'let' für Variablen verwenden, aber was 'const' ist.

09:15.380 --> 09:19.130
Gut "const" ist noch cooler.

09:19.220 --> 09:20.240
Schau dir das an.

09:20.570 --> 09:28.720
Wenn ich das Erfahrungsniveau ändern möchte, kann ich sagen "Erfahrung ist gleich 80".

09:28.930 --> 09:31.040
Und wenn ich jetzt auf "Erfahrung" schaue,

09:31.300 --> 09:32.940
Nun, Erfahrung ist gleich 80.

09:32.980 --> 09:44.050
Aber wenn ich den Spieler 'Bobby' in einen neuen Namen, gleich 'Sally' ändern will, bekomme ich einen Fehler,

09:44.050 --> 09:44.960
'Zuordnung zu konstanter Variable'.

09:44.960 --> 09:47.040
Was das bedeutet ist, als Konstante,

09:47.070 --> 09:54.870
Sie können der Variablen nicht neu zuweisen. Es kann also nicht aktualisiert werden.

09:54.870 --> 09:56.820
Nun, warum wäre das nützlich?

09:56.820 --> 10:02.820
Es ist wirklich sehr nützlich, weil viele Bugs passieren, wenn man in einem Team arbeitet.

10:02.910 --> 10:07.920
Wenn Sie etwas wie "Spieler" haben und jemand den Namen des Spielers ändert, während Sie daran arbeiten

10:07.920 --> 10:13.200
ein Programm und du denkst immer noch, es ist "Bobby" und du bekommst immer Fehler

10:13.200 --> 10:13.510
weil jemand anders es berührt hat.

10:13.620 --> 10:15.970
Nun, das ist ein kleines Problem, nicht wahr?

10:15.990 --> 10:23.930
Mit 'const' stellen Sie jedoch sicher, dass diese Playervariable immer denselben Wert hat.

10:23.970 --> 10:30.960
Also das ist eigentlich ein sehr sehr nützliches und meine Empfehlung ist, dass wenn Sie etwas haben, das nicht ist

10:30.960 --> 10:33.630
gehen, um es zu ändern sollte eine Konstante sein.

10:33.720 --> 10:43.740
Eine Funktion könnte also eine Konstante sein, wenn diese Funktion gut ist oder wenn die Zuweisung von 'a' nicht geht

10:43.740 --> 10:51.990
zu ändern, dann fühlen wir uns viel sicherer mit "const" als sagen wir "lassen" weil wir sicherstellen, dass niemand

10:51.990 --> 10:56.000
weist 'a' etwas anderes zu.

10:56.080 --> 11:00.110
Die Regel von nun an lautet "const",

11:00.370 --> 11:07.060
Wenn Sie eine Variable verwenden, die sich nicht ändert, verwenden Sie die meiste Zeit und Sie verwenden eine Variable

11:07.060 --> 11:12.720
stirb deine neue Zuordnung etwas wie Wizard level, wo es von 'wahr' zu 'falsch' wechselt

11:12.730 --> 11:13.470
"falsch" bis "wahr".

11:13.810 --> 11:16.470
Na dann benutz 'lass'.

11:16.690 --> 11:28.490
Eine Sache mit "const", die Sie beachten müssen, ist, dass wenn Sie ein "const" -Objekt (obj) gleich "player" machen

11:29.950 --> 11:37.760
"Bobby", "Erfahrung", "einhundert" und "

11:37.970 --> 11:39.220
'WizardLevel' auf 'falsch'.

11:39.410 --> 11:50.470
Nun, wenn ich dieses Objekt kopiere und versuche, dieses Objekt einer Zahl zuzuweisen, bekomme ich einen Fehler, weil

11:50.470 --> 11:51.610
Es ist eine Konstante.

11:51.610 --> 11:55.780
Aber! wenn ich versuche, eine Eigenschaft zu ändern

12:00.060 --> 12:04.750
jetzt ist mein 'wizardLevel' 'wahr'.

12:04.750 --> 12:15.370
Eine Sache mit Konstante ist, dass Sie die Eigenschaften der Objekte ändern können,

12:16.860 --> 12:18.480
Sie können die Variable jedoch immer noch nicht zuweisen.

12:18.520 --> 12:20.520
Alles klar für mehr lustige Dinge.

12:23.310 --> 12:26.410
Lass uns Destrukturierung machen.

12:26.950 --> 12:30.510
Und diese, die ich dir zeigen werde, werden dein Leben viel einfacher machen.

12:32.050 --> 12:41.780
Wenn wir unser "Objekt (obj)" hier tatsächlich haben, sagen wir, dass wir diese Objekte greifen wollten, so werden wir es haben

12:41.780 --> 12:49.460
zu tun "Const Spieler gleich Objekt (Obj) .player" wird tun,

12:49.470 --> 13:03.590
'const experience ist gleich object (obj) .experience' und dann 'let wizardLevel'

13:03.980 --> 13:05.620
gleich 'object (obj) .wizardLevel'.

13:05.870 --> 13:08.710
Und es war eine Menge zu tippen, um auf diese Eigenschaften zuzugreifen.

13:08.750 --> 13:18.530
Nun, mit der Destrukturierung können Sie das tun, Sie können sagen "Const Player" und "Erfahrung"

13:21.890 --> 13:23.560
aus dem Objekt.

13:23.570 --> 13:31.970
Also, mit dieser Syntax, es macht genau das Gleiche wie die ersten beiden Zeilen hier, wählen Sie einfach die

13:31.970 --> 13:35.440
Eigenschaften, die Sie von einem Objekt wünschen.

13:35.690 --> 13:45.290
Und jetzt haben Sie 'const' 'player' und 'experience' zur Verfügung, so dass Sie 'player' verwenden können, wo Sie wollen

13:45.290 --> 13:56.520
in Ihrer Codebasis und dann für 'lassen' können wir tun 'wizardLevel' gleich 'object (obj)', viel viel sauberer.

13:56.570 --> 14:00.500
Man muss sich erst daran gewöhnen, aber es ist viel schöner anzusehen.

14:00.510 --> 14:09.370
Alles klar, eine coole Sache, die du mit Objekten machen kannst. Der Name "const" entspricht "John Snow".

14:10.680 --> 14:26.600
Wir können hier einfach ein neues Objekt starten und wir können jetzt sagen "Name" ist "Hallo"

14:26.730 --> 14:27.980
und wir können 'ray', 'smith' machen

14:28.110 --> 14:29.600
"Hihi".

14:29.770 --> 14:30.000
Gut.

14:30.010 --> 14:36.730
Das ist also ein dummer Gegenstand, aber ich wollte Ihnen ein paar neue Möglichkeiten zeigen, Objekteigenschaften zu deklarieren

14:41.320 --> 14:42.280
Jetzt können Sie in ES6

14:42.320 --> 14:50.980
anstelle der alten Art, nur 'Spieler' oder 'Erfahrung' oder 'WizardLevel' zu haben

14:51.250 --> 15:00.160
wir können etwas Dynamisches haben, das wir zuordnen können wie 'John Snow' oder wir können 'Ray' plus 'Smith' oder wir können es tun

15:00.160 --> 15:07.450
tue 'eins' plus 'zwei' und habe diese dynamischen Eigenschaftswerte.

15:07.450 --> 15:11.660
Lass mich dir zeigen, wie sie funktionieren.

15:11.960 --> 15:16.240
Wenn ich jetzt auf Objekt (Obj) zugreife, habe ich drei gleich.

15:16.240 --> 15:16.660
"Hihi".

15:16.670 --> 15:18.040
Und "John Schnee" entspricht "Hallo"

15:18.080 --> 15:25.400
Wieder neue Möglichkeiten, Eigenschaften zu deklarieren, sehr nützlich, wenn man etwas für die Berechnung berechnen muss

15:25.400 --> 15:26.530
Eigentumswert.

15:27.290 --> 15:34.630
Aber noch cooler kann so etwas machen.

15:34.640 --> 15:37.210
Stellen Sie sich vor, Sie hätten eine

15:37.250 --> 15:38.620
'const a' entspricht

15:38.670 --> 15:39.390
"Simon"

15:43.450 --> 15:46.560
'const b' ist gleich 'wahr'.

15:47.890 --> 15:52.920
Und 'const c' ist ein leeres Objekt.

15:53.130 --> 16:06.540
Und wenn wir diese zu einem Objekt hinzufügen wollten, hätten wir tun müssen:a ist a, b ist b, und c ist c und manchmal

16:06.540 --> 16:09.820
Sie wollten, dass die Eigenschaft dem Wert entspricht.

16:09.820 --> 16:12.150
Wieder mit dem neuen Javascript.

16:12.150 --> 16:23.760
Wenn Eigenschaft und Wert in diesem Fall gleich sind, können wir einfach a, b, c sagen, damit wir sie entfernen können

16:23.760 --> 16:29.700
Erklärung, die wir mit Eigenschaft und Wert haben, wenn sie gleich sind und einfach so bleiben.

16:29.700 --> 16:34.330
Auch das ist etwas, das, wenn wir in die Riact-Sektion kommen, sehr nützlich werden wird.

16:35.450 --> 16:45.950
Alles klar, etwas noch mehr Spaß und diesmal seine Template-Strings, also 'Template-Strings'.

16:46.060 --> 16:52.030
Nun erinnern Sie sich, wenn wir, sagen wir, eine Begrüßung haben, wie nervig es war, dass wir tun mussten.

16:52.120 --> 16:53.050
"Hallo "

16:55.580 --> 16:56.590
'Name'

16:56.690 --> 17:09.520
Plus 'Sie scheinen zu tun' plus 'Gruß' und dann sagen, Sie hatten ein Ausrufezeichen und Sie mussten auch

17:09.520 --> 17:12.460
Sorgen Sie sich um Backslash, wenn Sie ein Apostroph hatten.

17:12.460 --> 17:15.550
Das war wirklich langweilig und nervig.

17:15.550 --> 17:20.460
Nun, wenn Sie etwas wirklich Spaß haben, anstatt es auf diese Weise zu tun.

17:22.500 --> 17:24.930
Sie können 'grußBest' haben

17:24.950 --> 17:30.800
entspricht etwas namens Templates-Strings und diese sind Back-Ticks.

17:31.020 --> 17:34.270
Die hinteren Ticks befinden sich also direkt über der Tabulatortaste.

17:34.290 --> 17:43.650
Wenn Sie auf einem Mac statt mit doppelten oder einfachen Anführungszeichen arbeiten, bedeutet dies Template-Strings und jetzt

17:43.680 --> 17:50.920
Sie können doppelte Anführungszeichen oder einfache Anführungszeichen verwenden, wo immer Sie möchten, und es wird eine Zeichenkette sein.

17:51.420 --> 18:02.020
Aber noch cooler, wenn Sie "Name" gleich "Sally" haben und "Alter" gleich "34" ist.

18:02.060 --> 18:06.350
"Haustier" ist "Pferd".

18:06.390 --> 18:07.550
Jetzt können wir machen,

18:07.560 --> 18:08.250
'Hallo'

18:10.980 --> 18:12.050
'Name'

18:12.240 --> 18:18.430
"Du scheinst zu sein", beachte die Syntax und die Farbgebung.

18:18.430 --> 18:20.920
"Alter" minus 10

18:23.750 --> 18:25.520
'Was für ein schönes' Haustier ($ Haustier)

18:27.780 --> 18:29.310
'du hast'

18:32.570 --> 18:34.240
merke also, was wir hier gemacht haben.

18:34.450 --> 18:39.350
Ich werde das kopieren, nur damit wir es haben, wenn ich dies ausmache.

18:39.380 --> 18:43.880
Wenn ich jetzt in die Konsole schaue, werde ich auffrischen.

18:43.880 --> 18:53.390
Sie sehen das jetzt, anstatt all diese doppelten Anführungszeichen und Pluszeichen zu machen und sich Gedanken über den Abstand innerhalb dieser hinteren Ticks zu machen,

18:53.420 --> 19:02.360
Ich kann ein Stück Schnur sagen und dann dynamisch hinzufügen, indem ich das Dollarzeichen benutze

19:02.360 --> 19:05.220
geschweifte Klammern sind ein Wert, den wir wollen.

19:05.400 --> 19:08.640
Wir können wieder jede Art von Ausdruck machen.

19:08.640 --> 19:10.560
Also "Alter" minus 10.

19:10.560 --> 19:12.070
'Was für ein schönes Haustier ($ Haustier) hast du'

19:12.090 --> 19:13.620
Mal sehen, was passiert, wenn ich es tue,

19:13.620 --> 19:17.470
'grußBest'. Sieh dir das an,

19:17.690 --> 19:18.460
"Hallo Sally.

19:18.470 --> 19:20.570
Du scheinst 24 zu sein.

19:20.720 --> 19:22.590
"Was für ein schönes Pferd hast du".

19:23.720 --> 19:24.430
Sehr cool.

19:24.470 --> 19:29.060
Also das ist sehr sehr nützlich, wird definitiv dies verwenden, spät im Kurs.

19:30.150 --> 19:38.440
Eine andere Sache, die ich dir zeigen möchte, sind 'Standardargumente', die etwas wie 'Grüßen' sagen können, wir werden 'Name' sagen.

19:38.450 --> 19:46.790
ist leerer String, "Alter" entspricht "30" und wir werden sagen.

19:46.800 --> 19:51.760
"Haustier" ist eine "Katze".

19:52.130 --> 19:54.450
Lass uns einfach kopieren, was wir vorher hatten.

19:55.520 --> 19:58.880
Mit der Begrüßung werde ich das kommentieren

20:01.810 --> 20:03.410
und wird das zurückgeben.

20:03.790 --> 20:05.790
Also hat sich nichts geändert.

20:05.800 --> 20:08.570
Wir haben nur eine Funktion, die eine Begrüßung zurückgibt.

20:09.590 --> 20:14.740
Das Einzige, was neu ist, ist das. Lassen Sie mich Ihnen zeigen, was es tut.

20:15.700 --> 20:26.210
Wenn ich das herausziehe, kopiere ich das in die Konsole, und jetzt laufe ich "grüße", "Hallo, du scheinst 20 zu sein."

20:26.230 --> 20:27.870
"Was für eine schöne Katze du hast".

20:29.560 --> 20:35.470
Haben Sie das verstanden, obwohl unser Browser, und lassen Sie mich nur aktualisieren, damit Sie sicher wissen, dass unser Browser hat

20:35.470 --> 20:39.150
keine Ahnung von welchem ​​Alter oder Haustier.

20:39.250 --> 20:41.800
Aber, wenn ich diese Funktion ausführen

20:46.250 --> 20:53.870
Wegen der Art und Weise, wie ich die Parameter gemacht habe, habe ich ihnen Standardargumente gegeben, die sagen, wenn, ich nicht stelle

20:53.870 --> 20:58.640
ein Wert für den Namen, den ich nicht habe, habe ich keine Argumente gegeben.

20:58.910 --> 20:59.810
Na dann mach.

20:59.810 --> 21:14.490
'name' leere Zeichenfolge, make 'age' '30', und mache 'pet', 'cat', wenn jetzt, 'grüße', 'John', '50' und wir machen 'Affe'.

21:14.490 --> 21:15.260
Jetzt bekomme ich,

21:15.270 --> 21:16.940
"Hallo John, du scheinst 40 zu sein."

21:16.950 --> 21:24.990
"Was für ein schöner Affe du hast". Dies wird ignoriert, weil ich die Parameter übergeben habe, aber ansonsten kann ich bestehen

21:24.990 --> 21:31.410
ein Standardparameter, so dass, wenn jemand diese Funktion aufruft und sie diese Argumente nicht bereitstellen

21:32.640 --> 21:38.210
Meine Funktion wird nicht fehlschlagen, weil ich Standardargumente habe.

21:38.410 --> 21:39.610
Sehr cool.

21:39.680 --> 21:40.000
Gut.

21:40.010 --> 21:42.060
Was haben wir sonst noch?

21:42.500 --> 21:50.880
Lassen Sie uns hier auffrischen, wenn Sie sich erinnern, dass wir noch einen Typ für 'JAVASCRIPT TYPES' hatten und das ist ein 'Symbol'.

21:50.900 --> 21:56.720
Es wird eigentlich nicht oft benutzt, aber ich wollte es dir zeigen, nur weil es eine Art von, wir wollen

21:56.720 --> 22:09.000
vervollständige die sieben Arten von Javascript, und ein Symbol ist besonders, denn wenn ich eins (sym1) habe, erstelle ich ein Symbol

22:09.000 --> 22:18.600
Indem ich diesen Index mache, könnte ich ein zweites Symbol (sym2) haben, das 'symbol ()' ist.

22:18.760 --> 22:32.110
Und hier können wir alles setzen, wir können 'foo' und Variable (var) symbol 3 (sym3) gleich 'Symbol ()' setzen und wir werden

22:32.110 --> 22:34.490
sag 'foo' auch.

22:34.540 --> 22:37.540
Was ist so einzigartig an Symbolen,

22:37.870 --> 22:40.310
Oh! Wir sollten "Let" hier verwenden.

22:41.560 --> 22:54.580
Wenn ich das kopiere und auf 'sym1' zugreife, bekomme ich "symbol ()" Zugriff auf "sym2", ich bekomme "foo" und "sym3" bekomme ich "foo".

22:54.790 --> 23:05.240
Aber das Einzigartige ist, wenn ich 'sym2' gleich 'sym3' mache, werde ich falsch.

23:05.290 --> 23:12.430
Auch wenn sie aussehen, als wären sie genau das Gleiche, und Symbole werden verwendet, weil sie erschaffen

23:12.430 --> 23:20.630
diese völlig einzigartige Art. So können Sie sicherstellen, dass es nie zu Konflikten kommt.

23:20.740 --> 23:26.410
Und der Symbolwert wird meist als Identifikator für Objekteigenschaften verwendet.

23:26.410 --> 23:32.080
Das ist eigentlich der einzige Zweck, denn manchmal wollen Sie keine Objekteigenschaften

23:32.080 --> 23:37.660
Tausende von ihnen zu kollidieren und die gleichen zu sein, denn dann werden sie Bugs bekommen.

23:37.780 --> 23:42.550
Wir werden es nicht zu viel sehen und natürlich werden Sie es nicht zu sehr in der Wildnis sehen, aber ich wollte es zeigen

23:42.550 --> 23:48.820
Du es, obwohl wir alle Javascript-Typen wissen wollen.

23:48.930 --> 23:49.470
Gut.

23:49.590 --> 23:55.980
Ein letzter, ich weiß, wir haben viel gecovert, aber das ist das beste und das sind 'Pfeilfunktionen'.

23:57.910 --> 24:09.140
Bis zu diesem Punkt mussten wir, wenn wir etwas wie Add machen wollten, 'a', 'b' und 'a' plus 'b' zurückgeben.

24:09.700 --> 24:17.500
Und Sie könnten es satt haben, immer und immer wieder Funktionen zu schreiben.

24:17.660 --> 24:19.330
Nun, Sie haben Pfeilfunktionen.

24:19.370 --> 24:21.590
Also mit einer Pfeilfunktion, die du machen kannst, Schau dir das an,

24:32.020 --> 24:35.090
also jedes Mal, wenn Sie diese Syntax sehen.

24:35.220 --> 24:37.530
Oop! und ich musste auch 'a' und 'b' hierhin gehen,

24:37.540 --> 24:44.440
Wann immer Sie diese Syntax sehen, ist es dasselbe wie das Sprechen von Funktionen, aber jetzt ist es nur die Kurzform

24:44.440 --> 24:47.180
damit Sie nicht ständig Funktion schreiben müssen.

24:47.410 --> 24:56.680
Und das Schöne daran ist, dass du 'a' und 'b' hätte machen können, und das funktioniert völlig.

24:56.680 --> 25:04.180
Der einzige Unterschied ist, dass wir einen Funktionsausdruck haben, der einen Parameter akzeptiert, und wir haben diesen Parameter

25:04.180 --> 25:08.620
dicker Pfeil, aber mit einer Pfeilfunktion.

25:08.990 --> 25:11.240
Wenn Sie eine einzige Rückkehr haben,

25:13.870 --> 25:18.100
Nun, Sie können es einfach auf eine Zeile setzen, und es geht davon aus, dass Sie das zurückgeben möchten.

25:18.190 --> 25:27.440
Wenn ich das hier speichere und es hier hineinkopiere, oop! Ich brauche diese Syntax nicht.

25:27.560 --> 25:33.530
Lassen Sie uns noch einmal 'add 4 und 2' kopieren.

25:33.700 --> 25:37.060
Das ist die erste Funktion und dann der neue Weg mit der Pfeilfunktion.

25:37.080 --> 25:41.440
'add2', '4' '2'.

25:41.680 --> 25:43.060
Wieder bekomme ich das Gleiche.

25:43.060 --> 25:48.240
Es kehrt automatisch zurück, weil alles in einer Zeile steht.

25:48.250 --> 25:51.900
Es sieht sehr, sehr schön aus, viel einfacher zu schreiben als die oben genannten.

25:53.220 --> 25:55.360
Und da hast du es.

25:55.620 --> 25:58.370
Ich weiß, das war eine Menge Information.

25:58.380 --> 26:04.380
Stelle sicher, dass du die Übungen nach diesem Video machst, um dich mit der Syntax vertraut zu machen,

26:04.380 --> 26:05.770
ist nur neue Wege, Dinge zu tun.

26:05.790 --> 26:10.480
Diese werden Ihnen helfen, besseren, saubereren Code zu schreiben.

26:11.330 --> 26:19.050
Und nur um Ihnen zu zeigen, was wir besprochen haben, haben Sie es geschafft, alles und die Gliederung des Abschnitts zu beenden.

26:20.090 --> 26:25.530
Von Variablen zu Konditionalen, schließlich zur Pfeilfunktion.

26:25.610 --> 26:30.760
Wir haben alles abgedeckt, was wir für Javascript und vorwärts bewegen wollten.

26:30.890 --> 26:37.600
Wir werden diese neuen Syntaxen verwenden, um unseren Code zu schreiben.

26:37.610 --> 26:40.430
Ich hoffe, Sie sind aufgeregt, wenn ich anfange, diese zu benutzen.

26:40.670 --> 26:42.630
Wir sehen uns im nächsten.
Buh-Tschüss.