WEBVTT

00:01.000 --> 00:06.710
Willkommen zurück! Funktionen sind der schwierigste Teil von JavaScript.

00:07.140 --> 00:11.380
Und es wird einige Zeit brauchen, um es vollständig zu bekommen. Jedoch,

00:11.480 --> 00:13.810
In diesem Video werden wir versuchen, das zu tun.

00:13.880 --> 00:18.020
Wir werden JavaScript-Funktionen lernen.

00:18.030 --> 00:21.710
Beginnen wir mit "Was sind Funktionen?"

00:22.640 --> 00:28.040
Nun, sie sind ein Stück Code, die Aktionen ausführen. Ohne Funktionen

00:28.040 --> 00:30.730
JavaScript würde nichts wirklich tun.

00:30.740 --> 00:40.340
Das Schöne ist, dass Funktionen eine Aktion oder mehrere Aktionen ausführen können. Aber wir werden darauf zurückkommen. Zuerst,

00:40.390 --> 00:45.560
Lassen Sie uns darüber sprechen, wie Sie bereits einige JavaScript-Funktionen kennen, ohne es zu merken.

00:45.640 --> 00:47.250
Du hast sie schon einmal gesehen.

00:47.300 --> 00:53.160
'Alarm' - das ist eine Funktion. "Aufforderung" -

00:56.130 --> 00:57.970
das ist eine Funktion.

00:58.150 --> 00:59.350
Das hast du schon mal gesehen.

01:00.240 --> 01:07.500
Also, JavaScript stellt uns einige Funktionen zur Verfügung, die wirklich-wirklich nützlich sind, so dass jeder schreibt

01:07.500 --> 01:12.380
JavaScript kann sie verwenden, ohne sie immer wieder neu schreiben zu müssen.

01:12.430 --> 01:15.700
Also mit Funktionen haben wir 2 Möglichkeiten.

01:15.830 --> 01:20.990
One - verwendet vorhandene JavaScript-Funktionen wie "alert" und "prompt".

01:21.980 --> 01:25.880
Und zwei - wir können unser eigenes schaffen.

01:25.880 --> 01:32.900
Bevor wir uns näher damit beschäftigen, wie wir unsere eigenen Funktionen erstellen und was an ihnen so nützlich ist, haben Sie vielleicht

01:32.900 --> 01:37.920
aufgefallen - eines fiel auf:diese klammern, die mit funktionen direkt nebeneinander stehen.

01:37.940 --> 01:45.800
Was meinen sie? Nun, das in JavaScript bedeutet, die Funktion auszuführen.

01:46.840 --> 01:52.750
Also, mal sehen, ob was passiert, wenn ich einfach 'alert' eintippe und 'enter' drücke.

01:52.810 --> 02:01.540
Ich werde aufmerksam () und etwas komisches Zeug. Hmmm, 'f' hier steht für Funktion und kann sehen, wenn ich schwebe

02:01.540 --> 02:01.990
darüber.

02:01.990 --> 02:04.450
Es heißt "Funktion alert ()".

02:04.450 --> 02:08.060
Dies bedeutet, dass das Ausführen einer Funktion bedeutet:um zu laufen

02:08.080 --> 02:08.960
'aufmerksam()'

02:09.010 --> 02:13.090
Ich führe es aus, indem ich es so nenne ['alert ()']

02:15.010 --> 02:23.330
Diese Klammern bedeuten also "eine Funktion aufrufen", damit ich eine Funktion aufrufen kann.

02:23.490 --> 02:28.580
Und du hast auch bemerkt, dass ich in "Alarm" Dinge wie hinzufügen kann

02:29.050 --> 02:33.800
"Hallo!"

02:33.910 --> 02:42.190
Diese werden alle "Argumente" genannt und ich weiß, ich werfe einen Haufen Jargon, einen Haufen Worte auf dich, aber diese

02:42.190 --> 02:44.670
sind nur Dinge, die du immer wieder hören wirst,

02:44.710 --> 02:51.490
wenn du ein Entwickler bist, und sie werden bei dir bleiben - es wird nicht das erste Mal, aber, wie ich schon sagte, einfach versuchen und

02:51.700 --> 02:53.990
Gehe einen Schritt nach dem anderen.

02:54.010 --> 02:58.630
Also 'Argumente' sind das, was Funktionen gegeben wird.

02:58.840 --> 03:03.880
Zum Beispiel, als wir es taten, in unserem Beispiel hier.

03:03.970 --> 03:13.190
"Hellooooo" und "console.log" waren ein "Argument". Und das Interessante ist, dass Sie mehrere Argumente haben können:03:13.200 --> 03:19.820
Zum Beispiel, wenn ich das entfernt habe und nur habe, lass uns jetzt 'console.log' für jetzt.

03:20.190 --> 03:24.690
Ich kann "Wie geht es dir" machen.

03:24.700 --> 03:27.950
Ich spare und erfrische und bekomme.

03:27.950 --> 03:29.150
"Hellooooo Wie geht es dir?"

03:29.210 --> 03:37.800
Ich kann mehrere Argumente haben, aber nur ein Komma hinzufügen. Aber wieder hängt das von der Funktion ab.

03:37.810 --> 03:47.870
Jetzt, bevor wir anfangen, unser eigenes zu erstellen, lassen Sie uns das überprüfen. 'alert' ist eine Funktion, 'alert' mit den Klammern,

03:47.960 --> 03:56.220
Ich rufe die 'alert' Funktion an und ich rufe die 'alert' Funktion mit dem Argument auf

03:56.400 --> 03:59.910
'Hallo'. "Alarm" muss aufgerufen werden,

04:00.090 --> 04:02.460
sonst sitzt es nur da.

04:03.900 --> 04:08.880
Der Hauptgrund für die Verwendung von Funktionen ist, dass Sie sie so oft aufrufen können, wie Sie möchten.

04:08.970 --> 04:19.080
Denken Sie an "Alarm", stellen Sie sich vor, jedes Mal sagen zu müssen "Hey, Computer, erstelle dieses Popup-Fenster und drucke was auch immer

04:19.080 --> 04:21.090
Argument, das ich jedes Mal eingib.

04:21.270 --> 04:27.540
Ich meine, das wäre echt scheiße. Ist es nicht schön, dass wir einfach 'alert' rufen können und das Popup-Fenster erscheint

04:27.540 --> 04:29.770
uns und alles ist für dich gemacht?

04:29.780 --> 04:32.010
Nun, das sind Funktionen, die funktionieren.

04:32.010 --> 04:39.810
Sie machen das Leben einfacher, indem Sie Aktionen haben, gebündelt, so dass Sie nur einmal schreiben und dann können Sie einfach

04:39.810 --> 04:41.450
nennen.

04:41.480 --> 04:43.480
OK. Kommen wir zum spaßigen Teil.

04:43.490 --> 04:54.970
Lassen Sie uns unsere eigenen Funktionen erstellen. Also, wenn wir hier zu unserem Dokument zurückkehren, schauen wir uns hier an. Wir haben 2

04:54.970 --> 05:00.180
Möglichkeiten zum Erstellen von Funktionen und ich zeige Ihnen den ersten Weg.

05:00.340 --> 05:01.980
Eigentlich werde ich dir das zuerst zeigen.

05:02.200 --> 05:08.970
Also, lasst uns unsere eigene Funktion erstellen, indem wir die erste Methode verwenden, die 'Funktionsdeklaration' ist.

05:09.310 --> 05:17.780
Und wir werden hier unsere 'script.js' verwenden, die mit unserem HTML verknüpft ist, das wir im vorherigen Video gemacht haben.

05:17.930 --> 05:23.840
Also, hier kann ich sagen 'Funktion sayHello ()'

05:27.960 --> 05:30.510
ist 'console.log ("Hallo")'.

05:35.380 --> 05:38.700
Auch hier ist die Syntax etwas anders, aber Sie müssen sich daran erinnern.

05:38.800 --> 05:41.850
Ich sage 'Funktion' - wird 'sayHello' genannt.

05:42.070 --> 05:49.150
Wir haben diese Klammern, die uns sehr vertraut sind. Und dann 'console.log ("Hallo");'. Mal sehen was passiert

05:49.150 --> 05:53.480
wenn ich spare. Ich erfrische mich.

05:53.830 --> 05:54.860
Hmmm, passiert nichts.

05:55.980 --> 05:56.920
Warum das?

05:57.240 --> 06:00.530
Nun, wir haben diese Funktion erklärt.

06:00.540 --> 06:09.430
Aber denken Sie daran, was wir mit "Alarm" gemacht haben? Nun, es existiert, aber wir haben es nicht ausgeführt.

06:09.480 --> 06:16.170
Wir müssen die Funktion aufrufen, also müssen wir "sayHello" sagen, so. Jetzt wenn ich auffrische.

06:16.740 --> 06:19.430
Ich bekomme "Hallo".

06:19.570 --> 06:25.610
Denken Sie also an die Variable. Wenn ich 'var a gleich 5' sage,

06:25.720 --> 06:29.260
das wird nichts tun, bis wir das "a" bekommen.

06:29.560 --> 06:34.120
Und das ist, wenn es "5" druckt.

06:34.130 --> 06:36.500
OK. Also das ist ein Weg.

06:36.510 --> 06:39.060
Was ist die zweite Möglichkeit, eine Funktion zu erstellen?

06:39.270 --> 06:45.150
Der zweite Weg wird 'Funktionsausdruck' genannt.

06:45.340 --> 06:47.900
Und das geht so.

06:48.130 --> 07:01.430
Ich kann sagen 'var sayBye = function ()' console.log ("Tschüss"); '.

07:02.300 --> 07:05.620
Wieder werde ich das speichern und aktualisieren.

07:05.810 --> 07:11.660
Und wieder bekommen wir nur 'Hallo', weil, nun, wieder müssen wir diese Funktion aufrufen.

07:11.720 --> 07:20.560
Also sage ich 'sayBye', führe es aus und aktualisiere es. "Hallo Tschüss". Jetzt

07:20.640 --> 07:30.040
Eine Sache, die Sie vielleicht bemerkt haben, ist, dass wir diese Funktion der Variablen 'sayBye' zuweisen, aber

07:30.940 --> 07:33.240
Wie lautet der Name der Funktion?

07:33.250 --> 07:40.520
Ich meine hier klar, der Name der Funktion ist 'sayHello', aber hier sind wir, wir ordnen nur der Variablen zu.

07:40.520 --> 07:48.230
Ich meine, technisch hat die Funktion keinen Namen und das nennt man eine "anonyme Funktion".

07:48.360 --> 07:54.480
Wir haben diese Funktion 'sayBye' zugewiesen, also können wir sie über 'sayBye' referenzieren, aber sonst können wir nicht

07:54.480 --> 07:56.350
wirklich auf diese Funktion zugreifen.

07:56.640 --> 07:59.880
Nun, Sie werden sehen, warum das wichtig ist

07:59.940 --> 08:01.500
in späteren Videos.

08:01.500 --> 08:06.770
Aber Sie könnten das technisch tun:und diese Funktion 'byebye' nennen.

08:13.110 --> 08:13.760
OK.

08:14.050 --> 08:20.560
Jetzt, wo wir wissen, wie man Funktionen erstellt, warum brauchen wir diese Argumente?

08:20.830 --> 08:23.740
Denken Sie daran, warum brauchen wir Zeug in den Klammern?

08:23.740 --> 08:26.660
Ich meine - diese sehen nützlich genug aus, oder?

08:27.630 --> 08:40.090
Nun, lass uns etwas versuchen. 'singen', lasst uns eine Funktion 'singen' machen und diese 'singen' haben, haben 'console.log'

08:40.120 --> 08:46.220
und ich werde sagen "AHHHHHHHHHHHH". Das bin ich, singe ich.

08:46.230 --> 08:51.550
Und es hat auch "console.log (" TEEEEEEEEE) ".

08:52.030 --> 09:00.390
So singe ich. Wenn ich das jetzt speichere und aktualisiere, stelle sicher, dass es immer noch singt. Oh, ich muss es nennen!

09:03.440 --> 09:04.920
Lass uns auffrischen.

09:05.040 --> 09:07.410
Schönes Lied:AHHHHHHHHHHH, TEEEEEEEEE.

09:07.680 --> 09:18.530
Aber jetzt, jedes Mal, wenn ich zu einem anderen Lied wechseln möchte, wollte ich vielleicht 'laaa deeee daaa' sagen.

09:18.660 --> 09:31.840
Nun, ich muss das entweder löschen und zu 'laaa deeee daaa' ändern oder ich muss einen neuen erstellen, der anruft

09:32.260 --> 09:33.640
'singen2'

09:36.310 --> 09:50.750
'console.log' und man kann hier sehen, wie nervig das ist, dass ich immer wieder dasselbe tippe

09:51.020 --> 09:52.710
und diese Dinge einfach ändern.

09:52.910 --> 10:00.090
Und jetzt muss ich 'sing2' laufen lassen. Und ich erfrische mich, und Puh, das war ermüdend! OK.

10:00.460 --> 10:07.600
Ich habe das alles gemacht und stelle mir jetzt vor, wenn wir Tausende von Liedern hätten, die wir singen wollen; wir sind 'Spotify' und

10:07.600 --> 10:10.330
Wir möchten alle Songtexte anzeigen.

10:10.330 --> 10:13.210
Ich meine, das ist ziemlich anstrengend, oder?

10:13.210 --> 10:18.680
Und eine der Regeln mit Entwicklern ist diese Idee von "DRY:Wiederhole dich nicht".

10:18.730 --> 10:21.790
Idealerweise möchten Sie die Dinge so effizient wie möglich gestalten.

10:22.000 --> 10:34.820
Und eine Sache, die Sie tun können, ist - indem Sie Argumente hinzufügen. Also kann ich etwas wie "Lied" hinzufügen und jetzt - lass mich einfach

10:34.820 --> 10:35.970
lösche das für jetzt.

10:37.720 --> 10:46.670
In der 'console.log' kann ich einfach 'Song' sagen.

10:46.820 --> 11:01.190
So, jetzt, wenn ich das Lied ändern will, kann ich "Laaa deee daaa" sagen. 'singen ("höllloooooo")

11:02.140 --> 11:02.990
Dann "singen

11:05.330 --> 11:08.990
("Backstreets back in Ordnung")

11:11.770 --> 11:14.470
Jetzt speichere und aktualisiere ich.

11:14.500 --> 11:23.060
Und sieh dir das an! Du siehst, wie viele Zeilen Code wir gerade gespeichert haben und wie ich jetzt "singen" kann, wann immer ich will,

11:23.330 --> 11:26.600
und ich kann es anpassen, was ich will.

11:26.600 --> 11:28.050
Ein bisschen wie 'Alarm'.

11:28.130 --> 11:30.570
Das ist es, was Argumente tun.

11:30.830 --> 11:37.790
Argumente erlauben uns, uns nicht zu wiederholen und unsere Funktionen, die wir erweiterbarer nennen, zu machen.

11:37.790 --> 11:40.530
Sie können angepasst werden.

11:40.590 --> 11:44.860
Lassen Sie uns noch etwas anderes tun, um etwas über Funktionen zu lernen.

11:44.970 --> 11:57.450
Wir werden dies löschen und versuchen 'Funktion multiplizieren ()'. Und wir geben es "a" und "b", also akzeptiert es zwei

11:57.450 --> 12:01.330
Argumente und wir werden 'a * b' tun.

12:01.710 --> 12:15.320
Und jetzt in 'a * b' werden wir 'multiplizieren' sagen, und wir werden 'multiplizieren (5, 10)' nennen. Speichern und aktualisieren.

12:15.460 --> 12:18.890
Und jetzt sollten wir uns 'multiplizieren'.

12:18.910 --> 12:24.570
Sie können hier "multiplizieren (a, b)" sehen, das ist genau das, was wir geschrieben haben.

12:24.600 --> 12:27.370
OK, also was passiert, wenn ich "multipliziere"

12:29.630 --> 12:32.020
(5, 10)?

12:32.480 --> 12:33.410
Was glaubst du, werde ich bekommen?

12:33.560 --> 12:33.910
Mal schauen!

12:37.980 --> 12:39.770
Hmmm, das ist wirklich komisch.

12:39.780 --> 12:42.340
Versuchen wir es nochmal mit einer anderen Nummer.

12:42.370 --> 12:44.180
Immer noch 'undefiniert'.

12:44.380 --> 12:47.530
Warum das? Nun, das nennt man Debugging.

12:47.530 --> 12:50.680
Mal sehen, ob wir herausfinden können, was hier passiert.

12:50.680 --> 12:53.580
Ich werde hier ein 'console.log' machen.

12:54.490 --> 12:59.050
Und ich werde 'a' und 'b' abmelden, um sicherzustellen, dass diese Funktion tatsächlich ausgeführt wird.

12:59.210 --> 13:11.600
Also werde ich speichern und aktualisieren. OK. 'console.log', 'a' und 'b' und ich führe die Funktion einfach noch einmal aus.

13:11.660 --> 13:17.610
'konsole.log'. OK. Es sieht so aus, als ob es läuft, aber dann werde ich hier undefiniert.

13:17.770 --> 13:23.440
Nun, ich kann dir das in einem Diagramm zeigen.

13:23.440 --> 13:27.270
Eine Funktion ist also eine "Eingabe".

13:27.330 --> 13:32.270
Wir geben ihm eine Art "Eingabe", vielleicht ist es manchmal leer, also ist es das, was in der Klammer steht.

13:32.460 --> 13:34.900
In unserem Fall ist es "a" und "b".

13:35.010 --> 13:42.790
Also das sind Zahlen, also '5' und '10'. Und dann tut die Funktion, was immer wir ihnen sagen.

13:42.790 --> 13:51.550
In unserem Fall war es, "5 und 10 zu multiplizieren". Und dann bekommen wir eine "Ausgabe", aber diese "Ausgabe" bekommen wir nicht.

13:51.550 --> 13:52.280
Warum das?

13:52.350 --> 13:56.270
Nun, weil eine Funktion so funktioniert.

13:56.650 --> 14:01.450
Und keine Sorge, ich habe gerade ein paar Pfeile hinzugefügt, aber ich werde alles durchgehen und es dir erklären.

14:01.450 --> 14:03.400
Die 'Eingabe' erhält '5' und '10'.

14:03.400 --> 14:11.950
Die Funktion macht einige Sachen, und bis zu diesem Punkt haben wir nur 'console.log' und den Weg 'console.log' gemacht

14:11.950 --> 14:18.870
funktioniert, lautet die Funktion:"Logge es einfach an die Konsole im Browser".

14:19.100 --> 14:24.400
Aber wir haben es noch nie gemacht, wo wir einen "Wert" zurückgegeben haben.

14:24.470 --> 14:25.820
Lass mich dir zeigen, was ich meine.

14:26.600 --> 14:29.300
Wenn wir etwas nicht zurückgeben, werden wir "undefiniert".

14:29.330 --> 14:32.240
Wenn wir etwas zurückgeben, erhalten wir den "Wert".

14:32.240 --> 14:37.090
Lasst uns hier sehen, wenn wir das erklären können.

14:37.110 --> 14:47.410
Also, hier, wann immer ich sage "multipliziere (10, 5)", und ich werde das "console.log" entfernen, nur damit es nicht verwirrend ist

14:47.410 --> 14:50.400
uns, speichern und aktualisieren ...

14:50.770 --> 14:51.820
Ich bekomme 'undefiniert'.

14:52.000 --> 14:56.710
Wie Sie in diesem Diagramm sehen, geben wir nichts zurück.

14:56.710 --> 15:04.330
Also, in JavaScript ist die Art und Weise, wie Sie die Dinge zurückgeben, - Sie müssen in einer Funktion 'Rückkehr' einfügen.

15:04.690 --> 15:12.400
So, jetzt wird es 'a * b' zurückgeben und Sie sehen, dass es ein - es ist ein spezielles Wort in JavaScript - es ist

15:12.400 --> 15:13.740
in rot hervorgehoben.

15:14.020 --> 15:20.310
Nun, jetzt sagt es "Ja, wir werden den Wert zurückgeben".

15:20.370 --> 15:28.320
Also, auch wenn wir "console.log" hinzugefügt haben. Du machst 'console.log' und fragst dann "Hey, habe ich eine 'Rückkehr'?".

15:28.470 --> 15:31.160
Wenn ich es tue, schicke ich ihm einen Wert.

15:32.170 --> 15:33.520
Hoffentlich ist das nicht zu verwirrend.

15:33.520 --> 15:35.170
Mal sehen, ob es funktioniert.

15:35.930 --> 15:37.980
Ich werde speichern und aktualisieren.

15:38.240 --> 15:47.700
Und jetzt, wenn ich "multipliziere (5, 10)", bekomme ich "50".

15:47.840 --> 15:56.860
Yay! Wir haben unsere Funktion funktioniert und das ist ein sehr wichtiges Schlüsselkonzept, an das wir uns erinnern müssen

15:56.860 --> 16:01.010
ist, dass wir etwas von einer Funktion zurückgeben müssen.

16:01.030 --> 16:02.870
Ich meine, wir müssen nicht.

16:02.980 --> 16:07.990
Aber im Idealfall tun wir das, deshalb bekommen wir diese Fälle nicht, wo wir nur 'undefiniert' haben und wir nicht wissen, was

16:07.990 --> 16:08.680
Funktion tut es.

16:08.680 --> 16:14.830
Es ist irgendwie wie eine "Black Box", die etwas macht und wir könnten ein "console.log" bekommen oder nicht, aber wir tun es nicht

16:14.830 --> 16:16.410
weiß, was drinnen passiert.

16:16.410 --> 16:22.620
Es ist schön, eine "Rückkehr" zu haben, um sicherzustellen, dass die Funktion so funktioniert, wie wir es erwarten.

16:22.650 --> 16:24.540
Ok, was ist, wenn wir so etwas machen?

16:24.540 --> 16:33.550
Was, wenn ich 'a' zurückgebe, und ich habe hier ein Semikolon vergessen, und 'return b'. Was denkst du wird passieren? Lasst uns

16:33.550 --> 16:37.930
Aktualisiere und führe dies aus.

16:37.960 --> 16:38.540
OK.

16:38.830 --> 16:41.870
Was passiert, wenn ich die Reihenfolge ändere und zuerst "a" einstelle?

16:41.960 --> 16:43.080
Lass es uns nochmal versuchen.

16:44.960 --> 16:54.550
Ich bekomme "5" und "Return" ist der letzte Weg, um eine Funktion zu beenden, wenn das Sinn macht. Also, sobald du sagst

16:54.550 --> 16:57.770
'Zurück' in einer Funktion, wird das Programm beendet.

16:57.820 --> 17:04.240
Um dies zu tun, sage ich "multipliziere (5, 10)". Es geht um die Funktion, es heißt:"Ja, ich habe die Funktion

17:04.240 --> 17:10.690
'multiplizieren'. Ich werde 'a' als '5' und '10' als 'b' "setzen.

17:10.840 --> 17:20.540
Und jetzt geht es in die Funktion und sagt:"return 5", was "a" ist. Also gibt es das zurück und verlässt die Funktion.

17:20.950 --> 17:23.290
So, jetzt werden diese zwei Linien überhaupt nicht ausgeführt.

17:23.290 --> 17:30.090
Das Programm liest das einfach, geht hierhin, liest die erste Zeile der Funktion und beendet dann.

17:30.100 --> 17:37.630
Also, in einer Funktion sollten Sie eine "Return" -Anweisung haben, oder ist das richtig?

17:38.500 --> 17:41.910
Sehen wir uns einen Fall an, in dem das nicht stimmen könnte.

17:41.920 --> 17:43.750
Lassen Sie uns dazu eine 'if'-Anweisung hinzufügen.

17:44.080 --> 17:53.330
Nehmen wir an, wir wollen "multiplizieren", aber wir sind auch ein bisschen faul und wollen nicht allzu hart sein

17:53.330 --> 17:54.040
der Computer.

17:54.140 --> 18:05.420
Nehmen wir an, wir möchten sagen, "wenn" - wir erinnern uns an die "if-Anweisung". "Wenn 'a' größer ist als '10'" oder "wenn 'b' ist

18:05.420 --> 18:07.430
größer als '10' ".

18:10.170 --> 18:18.430
Wir können "Rückkehr" sagen, das ist zu schwer ";".

18:18.710 --> 18:19.290
Sonst [sonst]

18:25.850 --> 18:33.380
Wir werden 'a * b' zurückgeben. Mal sehen, was hier passiert.

18:34.890 --> 18:39.050
Ich werde speichern und aktualisieren. Lass uns 'multiplizieren (5.4)' machen.

18:43.400 --> 18:46.220
Ich bekomme '20'.

18:46.270 --> 18:49.680
Was ist, wenn wir '5' und '40' machen? Ich bekomme

18:49.690 --> 19:01.180
"Das ist zu schwer", weil es jetzt die Funktion '5' und '10' liest, und es heißt:"Hmmm, 'b', welches '40' ist, ist höher

19:01.180 --> 19:02.440
als '10' ".

19:02.470 --> 19:06.560
Also werde ich laut "if statement" gehen "das ist zu schwer".

19:06.670 --> 19:19.480
Und weil eine "Rückkehr" die Funktion verlässt, kommt sie nie dazu, selbst wenn ich "a * b" zurückgebe, wirst du niemals

19:19.480 --> 19:24.490
kommen Sie dorthin, weil die 'Rückkehr' die Funktion verlässt. Nur um zu überprüfen,

19:24.490 --> 19:28.960
Lass uns das tun:Lass uns '5 * 40' machen.

19:28.970 --> 19:34.750
Und es kommt zu keiner dieser Zeilen, weil sobald diese eine "Rückkehr" sieht, sie die Funktion verlässt.

19:35.790 --> 19:37.320
Ich weiß, es ist viel.

19:37.320 --> 19:41.980
Und wir werden verstehen, warum diese Dinge in den nächsten Videos wichtig sind.

19:42.210 --> 19:50.540
Aber ich wollte dir auch zeigen, dass du innere Funktionen haben kannst. Also in JavaScript-Funktionen sind "Variablen".

19:50.880 --> 19:54.120
Und das bedeutet, dass wir zuordnen konnten

19:56.880 --> 19:59.990
funktioniert so. Recht?

20:00.200 --> 20:02.960
Und wenn wir so etwas machen,

20:03.080 --> 20:09.640
Nun, wir können 'a' auf die gleiche Weise wie wir aufrufen und haben die Funktion einfach als Variable zugewiesen.

20:09.680 --> 20:15.030
Technisch könnten wir so etwas machen.

20:15.050 --> 20:22.830
Lass uns also "multiplizieren" - Lass uns zurückgehen wie wir es hatten. Wir werden "multiplizieren" so wie es ist in der

20:22.830 --> 20:23.580
einfache Form.

20:27.330 --> 20:29.640
Und wir können es tatsächlich

20:32.140 --> 20:38.190
sag 'alert (multiplizieren)'.

20:38.650 --> 20:43.900
Und dann werden wir '3' und '4' machen. Und ich weiß, das sind viele Klammern.

20:43.900 --> 20:45.620
Mach dir keine Sorgen wir werden es durchmachen.

20:45.760 --> 20:49.490
Aber, lasst uns das einfach speichern und aktualisieren und sehen, was passiert.

20:49.570 --> 20:58.150
Ich bekomme '12'. Denn was passiert ist:Wir beginnen mit der inneren Funktion und sagen:"Hey, wir

20:58.150 --> 20:59.330
möchte etwas warnen! ".

20:59.470 --> 21:00.630
"Was willst du warnen?"

21:00.640 --> 21:03.610
"Nun, wir wollen" multiplizieren ""

21:03.610 --> 21:06.330
"Wir wollen diese Funktion aufrufen und geben 'a' es '3' und '4'".

21:06.400 --> 21:14.560
Also geht es "multiplizieren" und es heißt:"Ja, wir werden 'a' und 'b' '3' und '4' zuweisen, und ich möchte 'a' und 'b' zurückgeben.

21:14.560 --> 21:24.010
Jetzt wird 'multiplizieren' zu '12' geändert und dann 'alarmiert'.

21:24.020 --> 21:33.580
Also, du siehst das jetzt, anstatt etwas wie 'total' zu haben, 'multipliziere (4.5)' und dann 'total'

21:33.590 --> 21:37.420
hier können wir hier einfach "multiplizieren" zuweisen.

21:40.370 --> 21:41.620
Wütend! das war, das war viel!

21:41.640 --> 21:44.850
Aber ich möchte Ihnen zeigen, dass wir - wir haben in Angriff genommen,

21:44.880 --> 21:51.000
Ich denke, das schwerste Thema in JavaScript, das Funktionen ist. Und Sie haben auch die "Rückkehr" abgedeckt, die

21:51.000 --> 21:53.040
ist sehr, sehr gut.

21:53.050 --> 21:59.140
Das eine andere Ding, das ich Ihnen zeigen will, ist, dass viele Leute mit der Terminologie verwirrt werden und

21:59.260 --> 22:02.340
Ich denke nicht, dass es so wichtig ist, aber ich möchte es nur verdeutlichen.

22:02.390 --> 22:11.370
Es gibt das Konzept der "Parameter" und "Argumente".

22:11.400 --> 22:18.520
Nun sind "Parameter" und "Argumente" sehr ähnlich, unterscheiden sich aber nur geringfügig.

22:18.520 --> 22:22.420
Also "Argumente", wie wir gesagt haben, sind "4" und "5".

22:22.480 --> 22:27.640
So können Funktionen "Argumente" haben und sie werden mit "Argumenten" aufgerufen.

22:28.060 --> 22:31.330
"Parameter" sind was "a" und "b" ist.

22:31.330 --> 22:36.290
Also hat 'multiplizieren' zwei 'Parameter' von 'a' und 'b'.

22:36.420 --> 22:38.210
Ich weiß, das ist ein bisschen verwirrend.

22:38.210 --> 22:40.010
Sie können etwas mehr darüber lesen.

22:40.010 --> 22:46.860
Ich denke nicht, dass es wichtig ist, den Unterschied wirklich zu kennen, aber nur so, wenn Sie Artikel lesen

22:46.860 --> 22:52.550
oder lernen, vielleicht über YouTube, dass Sie diese Wörter fast austauschbar hören.

22:52.590 --> 22:56.710
Sie bedeuten ziemlich dasselbe, nur ein kleiner Unterschied in ihnen.

22:58.460 --> 23:00.290
Gut!

23:00.910 --> 23:03.690
Ich weiß, ich weiß, dass ich eine Menge Terminologie auf dich geworfen habe!

23:03.730 --> 23:10.780
Aber nachdem ich es ein paar Mal wiederholt habe, wird es Sinn machen, also bleib stark. Aber das ist es für Funktionen.

23:11.080 --> 23:13.580
Es ist Zeit für Sie, einige Übungen auszuprobieren.

23:13.600 --> 23:15.420
Schaut dieses Video bei Bedarf nochmal an.

23:15.430 --> 23:21.370
Sie möchten wirklich sicherstellen, dass Sie Funktionen verstehen, da dies der Kern von JavaScript sein wird.

23:21.370 --> 23:28.360
Denken Sie daran, was wir mit Funktionen machen, wir erstellen neue Wörter in der Sprache, im JavaScript

23:28.360 --> 23:34.510
Sprache. So können wir "Variablen" erstellen oder "Funktionen" erstellen, um der Sprache Vokabeln hinzuzufügen

23:34.750 --> 23:37.370
Bis zu diesem Punkt haben wir nichts anderes gemacht.

23:37.390 --> 23:44.950
Wir haben dieses JavaScript, das ein paar Wörter enthält, die wir verwenden können, und wir haben neue hinzugefügt, wie 'multiplizieren' und '

23:45.370 --> 23:48.760
"total", um es für uns nützlicher zu machen.

23:49.000 --> 23:51.020
Und das ist Programmieren.

23:51.210 --> 23:53.110
Wir sehen uns im nächsten. Tschüss
