WEBVTT

00:01.790 --> 00:05.860
Objekte. Sie sind wirklich mächtige Datenstrukturen.

00:06.810 --> 00:12.270
Und wie Sie sehen, ist es die zweite Datenstruktur, die wir in Javascript lernen werden.

00:12.270 --> 00:22.440
Und in der Tat sind sie auch ein Javascript-Typ. Objekte sind Eigentumssammlungen. Also was

00:22.440 --> 00:23.270
bedeutet das?

00:24.410 --> 00:27.530
Werfen wir einen Blick darauf, indem wir versuchen, ein Objekt zu schreiben.

00:27.530 --> 00:37.700
Um also ein Objekt zu schreiben, kann ich etwas wie einen Benutzer und geschweifte Klammern haben und innerhalb dieses können wir sagen

00:37.820 --> 00:41.790
Name ist gleich "John".

00:42.170 --> 00:46.000
Ich kann sagen, dass H "34" ist.

00:46.050 --> 00:49.320
Hobby ist "Fußball".

00:50.900 --> 00:54.490
Und vielleicht können wir sogar "ist verheiratet"

00:56.660 --> 01:00.390
zu falsch und das Komma an

01:00.540 --> 01:03.440
Das Ende hier kann ich ablegen oder hinzufügen,

01:03.460 --> 01:04.630
es funktioniert in beide Richtungen.

01:05.770 --> 01:13.880
Aber jetzt, wenn ich das speichern und aktualisieren - mal sehen, ob wir das Benutzerobjekt haben. Ja.

01:13.950 --> 01:20.820
Sieht so aus als hätten wir "Name:John Alter:34 Hobby:Fußball ist verheiratet:Falsch".

01:20.990 --> 01:28.190
Und Sie sehen hier, dass wir ein Objekt haben, und es sieht ein bisschen anders aus als ein Array, nicht wahr?

01:28.220 --> 01:38.210
Denn wenn wir uns an ein Array erinnern, das so aussieht, "Apfel", "Banane", "Orange".

01:38.240 --> 01:47.100
Also - ein Array, wenn wir aktualisieren, wir haben 'Benutzer', der so aussieht und eine 'Liste', die so aussieht.

01:47.210 --> 01:57.280
Wenn ich das öffne, sehen wir, dass wir ein bisschen einen Unterschied haben, weil ein Objekt dynamischer ist

01:57.280 --> 02:00.000
Ich kann Eigenschaften und Wert haben.

02:00.220 --> 02:12.770
So Eigenschaft 'Name', Wert "John", Eigenschaft, 'Alter', Wert "34". Mit einem Array hatten wir einen Index '0', der "Apfel" enthielt

02:12.890 --> 02:17.720
und ein Index "1", der "Banane" enthielt.

02:17.720 --> 02:18.680
Hmm, interessant.

02:18.740 --> 02:19.000
OK.

02:19.010 --> 02:30.370
Aber wie greife ich Eigenschaften, weil ich mit einem Array "listen" könnte, das zweite Element mit "1" greifen

02:30.940 --> 02:39.520
und ich habe eine "Banane". Was mit Objekten, was Sie tun können, ist, dass Sie 'user.name' sagen können,

02:39.690 --> 02:51.950
John. 'User.age', 34. 'User.hobby', Fußball. Und "user.isMarried", falsch. OK.

02:52.250 --> 03:06.510
Bei einem Array hatten wir Methoden wie "Pop" oder "Push", um das Array zu ändern.

03:06.590 --> 03:08.740
Wir hatten sogar "concat".

03:09.210 --> 03:14.930
Wie können wir einem Objekt Eigenschaften hinzufügen? Nun, es ist sehr einfach.

03:14.930 --> 03:29.700
Alles, was wir tun müssen, ist etwas wie "user.favoriteFood" zu sagen, und ich werde gleich tun und Spinat machen.

03:29.890 --> 03:36.320
Wenn ich nun auf das Benutzerobjekt schaue, habe ich Lieblingsessen,

03:36.320 --> 03:39.160
Spinat.

03:39.230 --> 03:44.060
Also haben wir gerade das Benutzerobjekt erweitert.

03:44.100 --> 03:44.730
Was ist damit -

03:44.730 --> 03:53.000
Kann ich zu "isMarried" zu "true" wechseln, um zu sagen, dass unser Freund John hier gerade geheiratet hat?

03:53.130 --> 04:01.510
Nun, wenn ich zum Benutzer gehe, habe ich 'isMarried' zu 'true'.

04:01.560 --> 04:02.940
Sehr cool.

04:02.940 --> 04:07.890
Sie sehen also den Unterschied zwischen einem Array und einem Objekt.

04:07.890 --> 04:22.370
Nun eine Frage, die Sie vielleicht haben, ist:"Warum ist 'Array' nicht ein Javascript-Typ, sondern 'Objekt'? Nun, weil

04:22.370 --> 04:32.120
Vereinfacht ausgedrückt, ist ein Array technisch gesehen etwas ähnliches.

04:36.480 --> 04:44.040
Wir haben es sogar gesehen, als wir uns die Liste angeschaut haben, dass wir "0" an Apple haben.

04:44.040 --> 04:52.220
"1" entspricht Banane und "2" entspricht Orange. Und Sie sehen, was die Stärke von Datenstrukturen ist

04:52.580 --> 04:54.020
in Javascript.

04:54.080 --> 05:01.120
Diese Idee von einer Schreibtischschublade und in dieser Schublade will man keine Sauerei haben, die man nicht einfach nur stellen möchte

05:01.130 --> 05:07.920
eine Sache, Sie wollen mehrere Dinge haben, aber Sie wollen sie organisiert. Vielleicht willst du also die Stifte haben

05:07.930 --> 05:12.420
in einem Abschnitt organisiert und die Dateien in einem anderen Abschnitt organisiert.

05:12.830 --> 05:18.280
Und wie gesagt, Datenstrukturen helfen uns, die Dinge besser zu organisieren.

05:18.350 --> 05:26.570
Zum Beispiel ist ein Array wirklich wirklich gut darin, vielleicht eine Einkaufsliste oder eine Aufgabenliste zu enthalten.

05:27.140 --> 05:33.190
Aber ein Objekt kann wirklich wirklich gut darin sein, etwas wie Benutzerinformationen zu enthalten.

05:34.000 --> 05:39.610
Wenn Sie also an ein Spiel denken, nehmen wir an, Sie bauen ein Spiel, in dem Sie diesen Assistenten steuern.

05:39.940 --> 05:48.050
Nun, dieser Zauberer - wie groß der Zauberer ist, wie mächtig er ist, wie viele Erfahrungspunkte er hat.

05:48.250 --> 05:54.040
Nun, das wäre wirklich sehr gut, um ein Objekt einzufügen, weil dieser Assistent ein Objekt ist.

05:54.040 --> 06:03.400
Wir brauchen Eigenschaften und Werte, aber vielleicht die Sprüche, die eine Liste sein könnten, weil wir einfach eine Zeichenkette haben können

06:03.520 --> 06:07.050
von all den Zaubersprüchen, die der Zauberer wissen würde.

06:07.090 --> 06:11.890
Bedeutet das, dass wir Arrays innerhalb von Objekten haben können?

06:12.010 --> 06:25.350
Ja, wenn der Benutzer ein Zauberer ist, kann ich 'Zauberspruch' oder 'Zaubersprüche' eingeben und ich kann eine Reihe aller Zaubersprüche erstellen

06:25.740 --> 06:35.340
"Abrakadabra" oder "Shazam" oder ich kann "boo" machen.

06:35.430 --> 06:39.800
So, jetzt habe ich ein Array in einem Benutzer.

06:40.080 --> 06:41.460
OK, was ist umgekehrt?

06:41.460 --> 06:48.310
Kann ich einen Benutzer innerhalb eines Arrays haben?

06:48.710 --> 06:49.480
Nun ja, du kannst.

06:49.640 --> 06:59.790
Nehmen wir an, wir wollten eine Liste von Nutzern über eine App für unsere Website haben. Wir können eine Liste von Objekten haben

06:59.790 --> 07:01.710
wo wir 'Benutzername' haben

07:06.960 --> 07:15.830
"Andy", der "Passwort", "geheim" hat und wir haben können

07:18.540 --> 07:28.310
"Benutzername", "Jess", die das "Passwort" "123" hat. Lass uns das in Aktion sehen.

07:28.370 --> 07:37.370
Ich werde mich auffrischen und "Liste" sagen und mir das ansehen. Innerhalb dieser Liste habe ich den ersten Artikel mit der

07:37.370 --> 07:38.520
Benutzername und Passwort.

07:38.520 --> 07:44.500
Und der zweite Punkt Benutzername und Passwort. Also Listen sind wirklich sehr gut

07:44.530 --> 07:52.240
Nun, Listen zu machen und das sind Arrays. Und Objekte sind wirklich sehr gut darin, Objekte zu enthalten. Aber

07:52.360 --> 07:54.520
Wie greifen wir jetzt auf sie zu?

07:55.000 --> 07:57.580
Nun, schauen wir uns zuerst den Benutzer an.

07:57.670 --> 08:07.630
Wenn ich auf einen Zauber gut zugreifen wollte, konnte ich 'user.spells' machen und ich werde ein Array zurückbekommen, aber wenn ich wollte

08:07.630 --> 08:10.050
zu - sagen wir Zugang "Shahzam"

08:10.450 --> 08:15.680
Nun, ich würde einfach 'user.spells' und dann, weil es ein Array ist

08:15.730 --> 08:28.740
Ich bekomme den zweiten Gegenstand mit '[1]' - "Shahzam". Andersherum für die Liste kann ich "Liste" sagen - die erste

08:28.740 --> 08:35.320
Artikel, der "Andy" ist und ich möchte sein Passwort bekommen.

08:35.450 --> 08:37.410
Nun, ich werde 'Passwort' tun.

08:37.770 --> 08:42.590
Und jetzt bekomme ich - nun, Andy hat sein Passwort falsch geschrieben, es soll "geheim" heißen.

08:42.600 --> 08:45.930
Aber wir bekommen "geheim".

08:46.180 --> 08:48.220
So greifen Sie auf Dinge zu.

08:48.570 --> 08:49.350
OK.

08:49.840 --> 08:51.480
Eine andere Frage, die ich habe.

08:51.850 --> 09:05.590
Was, wenn ich sagen wollte, dass dieser Benutzer John, der ein Zauberer ist, auch "schreien" kann. Vielleicht kann es eine Art tun

09:05.590 --> 09:06.510
einer Handlung.

09:06.640 --> 09:09.320
Können wir einem Objekt eine Funktion hinzufügen?

09:09.580 --> 09:13.080
Ja, wir können, wir müssen nur 'funktionieren'

09:13.120 --> 09:17.260
Und du siehst die Farbe verändert, bedeutet, dass wir etwas richtig machen.

09:17.260 --> 09:20.840
Ich kann 'function console.log' sagen

09:24.380 --> 09:29.070
Schreien "Ah" lassen Sie uns das speichern und sehen wir das in Aktion.

09:31.720 --> 09:35.940
'User' - stellen Sie sicher, dass wir den Ruf haben, ja

09:35.960 --> 09:38.380
Und schau, es hat das "F" für "Funktion".

09:38.900 --> 09:45.350
Und jetzt, wenn ich 'user.shout' gehe und mich erinnere, muss ich die Funktion aufrufen.

09:45.770 --> 09:53.960
Ich bekomme "AHHHHH!". Sehr cool. So kann ich Funktionen innerhalb von Objekten haben.

09:54.320 --> 10:00.680
Und eine Sache, die Sie bemerken könnten, ist - halten Sie eine Sekunde an, ich dachte, dass Funktionen etwas sagen sollten

10:00.680 --> 10:03.120
wie, weißt du, wachsam.

10:03.330 --> 10:08.710
Aber dieses haben wir "user.shout".

10:08.770 --> 10:16.240
Das ist ein bisschen anders als das, was wir vorher gesehen haben, und das nennt man eigentlich eine Methode und

10:16.240 --> 10:18.250
Das ist eine andere Terminologie, die wir lernen werden.

10:18.250 --> 10:23.110
Aber eine Funktion in einem Objekt ist eine "Methode".

10:23.110 --> 10:29.500
Ich kann also sagen, dass "Schreien" eine "Methode" des "Benutzers" ist.

10:29.720 --> 10:42.090
Genau wie bei einem Array wie Listen und wenn ich 'Pop' mache - nun 'Pop' ist eine 'Methode' von 'Liste'.

10:42.230 --> 10:48.390
Und eine andere Sache, die Sie vielleicht bemerkt haben, ist "console.log".

10:48.620 --> 10:49.310
Was denken Sie

10:49.370 --> 10:58.190
"Log" ist, dass wir die ganze Zeit getan haben? Nun, "Konsole", wie sich herausstellt, ist nur ein Objekt.

10:58.260 --> 11:06.300
Siehst du das? "Konsole" hat all diese Methoden wie es aussieht.

11:06.360 --> 11:10.180
Also haben wir die ganze Zeit nur console.log gemacht.

11:10.400 --> 11:19.770
Aber ich kann auch tun - lass uns 'Info' machen. Wenn ich console.info mache, sage ich "Hallo".

11:23.930 --> 11:24.850
Ich bekomme "Hallo"

11:24.990 --> 11:26.220
Nichts verändert sich.

11:26.220 --> 11:29.150
Aber was, wenn wir etwas wie "Fehler" machen.

11:29.340 --> 11:40.100
Nun, ich kann 'console.error' tun und jetzt - sieh dir das an, ich bekomme den Fehler.

11:40.420 --> 11:46.690
Das sind also Methoden. Sie sind Funktionen in einem Objekt.

11:46.700 --> 11:55.510
OK, ich habe eine letzte coole Sache, die ich euch zeigen kann und das heißt:"Kann ich so etwas tun?

11:57.450 --> 12:03.200
Kann ein Benutzer ein leeres Objekt sein? "Ja, es funktioniert.

12:03.200 --> 12:09.170
Wenn ich 'user2' bekomme, bekomme ich einfach das leere Objekt und da ist nichts wirklich drin.

12:10.630 --> 12:10.940
OK.

12:10.960 --> 12:11.950
Was ist mit Arrays?

12:11.950 --> 12:15.490
Kann ich eine leere Liste erstellen?

12:18.010 --> 12:24.050
Ja, ich kann eine Liste machen, die leer ist.

12:24.210 --> 12:31.040
Aber wie Sie sehen können, kann ich keine Eigenschaften in 'user2' wirklich verwenden, da es keine Eigenschaften hat.

12:31.920 --> 12:41.610
Und ich kann nicht wirklich auf 'list [0]' oder 'list2 [0]' zugreifen, das ist das leere,

12:41.680 --> 12:44.130
Nun, da ist gerade nichts drin.

12:46.200 --> 12:57.440
Das erinnert uns daran, wenn wir eine Variable nicht deklarieren, erhalten wir "undefiniert", aber mit einem Objekt und einer Liste

12:57.500 --> 13:03.030
wir können etwas leer haben und es ist nicht undefiniert. Aber es gibt eine Sache, die ich dir zeigen möchte.

13:03.230 --> 13:06.350
Es kann ein leeres Objekt geben.

13:06.350 --> 13:18.730
Wenn ich also ein leeres Objekt 'var' mache, dann ist es ein leeres Objekt, aber es gibt etwas, das 'null' heißt.

13:19.120 --> 13:33.030
Und das ist unser sechster Datentyp und "null" ist ein spezieller Typ, der nur sagt, dass ein Objekt null ist.

13:33.040 --> 13:34.530
Lasst uns sehen, was das bedeutet.

13:34.600 --> 13:39.640
Wenn ich ein leeres Objekt betrachte, bekomme ich ein leeres Objekt.

13:39.970 --> 13:46.920
Wenn ich ein "Null" -Objekt bekomme, gibt es null zurück.

13:46.960 --> 13:54.850
Das ist ein besonderer Charakter, auf den wir später im Unterricht eingehen werden, aber es bedeutet nur, dass es da ist

13:54.850 --> 13:57.190
ist nichts in diesem Objekt.

13:57.190 --> 14:09.150
Wenn ich 'null0bj.name = Andy' gehe

14:09.340 --> 14:13.230
Ich kann den Eigenschaftsnamen von null nicht festlegen.

14:13.400 --> 14:22.430
Aber wenn ich das für ein leeres Objekt mache, das nur ein leeres Objekt ist, kann ich den Namen sagen

14:22.790 --> 14:27.300
entspricht Andy

14:27.370 --> 14:30.400
Und schau, ich habe Andy.

14:30.610 --> 14:32.230
Das ist also ein "Null" -Objekt

14:32.290 --> 14:40.140
Es ist leer, völlig leer und im Moment sieht es irgendwie nutzlos aus, als ob wir es nicht brauchen.

14:40.150 --> 14:44.580
Aber ich werde Ihnen Fälle zeigen, in denen dies für uns wichtig ist.

14:44.590 --> 14:46.930
OK, das war eine ganze Menge Zeug.

14:47.020 --> 14:51.870
Aber du hast tatsächlich so viel in Javascript gelernt.

14:51.990 --> 14:59.550
Das ist ziemlich viel, ich würde sagen, 80 Prozent von dem, was Sie in Javascript wissen müssen, um professionell zu arbeiten

14:59.670 --> 15:05.650
und es hört sich so an, als hätten wir nicht so viel gecovert, oder vielleicht hat es sich so angefühlt, als ob wir viel gecovert hätten.

15:05.670 --> 15:12.390
Aber in Bezug auf die Syntax haben wir nur ein paar Worte und ein paar Methoden gelernt.

15:13.470 --> 15:20.190
Mit dieser neuen Kraft werde ich Ihnen zeigen, wie wir mit dem, was wir gerade haben, ein einfaches Facebook bauen können

15:20.190 --> 15:20.780
gelernt.

15:22.630 --> 15:23.730
Wir sehen uns im nächsten Video. Tschüss
