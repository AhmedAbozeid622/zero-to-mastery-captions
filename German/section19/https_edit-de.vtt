WEBVTT

00:01.450 --> 00:07.380
Im Jahr 1989 erfand Tim Berners-Lee das HTML, das die Welt veränderte.

00:07.400 --> 00:13.930
Aber HTML würde nicht wirklich viel bewirken, wenn wir nicht Dokumente aus der ganzen Welt und von verschiedenen Computern abrufen könnten.

00:13.930 --> 00:16.860
Damit das passiert

00:16.870 --> 00:24.280
Tim hat das 'Hypertext Transfer Protocol' oder kurz HTTP erstellt.

00:24.290 --> 00:29.810
Nun erinnere dich an diese Pfeile aus den Diagrammen, die wir hatten.

00:30.020 --> 00:37.070
Wir haben dir gesagt, dass diese Pfeile einfach die verbundenen Drähte und Kabel sind, die den weltweiten Anschluss haben

00:37.250 --> 00:37.860
Netz.

00:38.840 --> 00:39.960
"Dieses Recht?

00:39.980 --> 00:46.590
Du erinnerst dich an das Diagramm. "Aber du siehst, das sind nur Drähte.

00:46.610 --> 00:53.840
Es gibt keine Anweisungen dazu, wie man etwas macht, für das man ein Protokoll braucht.

00:53.840 --> 01:00.830
Betrachten Sie es als einen Standard, dem jeder folgt. Wenn alle einverstanden sind, funktioniert das Protokoll und kann sein

01:00.830 --> 01:11.570
von allen benutzt. HTTP, das ich hier habe, ist ein Protokoll, das das Abrufen von Ressourcen wie HTML ermöglicht

01:11.700 --> 01:12.630
Unterlagen.

01:12.670 --> 01:17.470
Ich meine, es ist im Namen richtig Hypertext Transfer Protocol.

01:17.540 --> 01:24.120
Mit der Verwendung von HTML und HTTP haben wir jetzt das World Wide Web.

01:24.260 --> 01:31.610
Wir können uns HTML-Dateien schnappen und sie empfangen, wenn wir zu 'google.com/about' gehen, gehen wir in den About

01:31.610 --> 01:34.260
HTML-Seite greifen wir sie und erhalten sie.

01:34.280 --> 01:43.290
Also HTTP ist das Protokoll oder die Regeln, die wir über die Drähte verwenden.

01:43.440 --> 01:50.550
Es ist die Grundlage für jeglichen Datenaustausch im Internet und ebnet den Weg für etwas, das Kunde genannt wird

01:50.730 --> 02:01.870
Server-Protokoll, dh Anfragen werden vom Empfänger initiiert, in unserem Fall vom Web-Browser.

02:01.950 --> 02:09.240
Sie senden also eine Anfrage über HTTP. Der Server versteht jetzt, was der Webbrowser sagt, weil

02:10.200 --> 02:18.000
Es spricht in HTTP und der Server kann jetzt mit HTML antworten und der Browser versteht es deshalb

02:18.270 --> 02:20.310
es spricht über HTTP

02:20.340 --> 02:21.780
Noch einmal.

02:21.940 --> 02:29.950
Sie sollten sich also HTTP als eine gemeinsame Sprache vorstellen, die ein Client und ein Server zur Kommunikation verwenden können.

02:29.950 --> 02:33.930
Sie sagen einfach Hey, kannst du mir dieses Dokument geben?

02:34.170 --> 02:36.570
Und der Server kann ja kein Problem sagen.

02:36.630 --> 02:37.920
Hier ist es.

02:37.920 --> 02:43.330
Und bis zu diesem Punkt haben wir nicht wirklich mit einem Server in unserer App gesprochen, haben wir?

02:43.440 --> 02:50.160
Wir erstellen die Front-End-Anwendungen oder die Client-Anwendungen mit HTML, CSS, Javascript

02:50.190 --> 02:54.120
und reagieren, aber wir lebten in unserer eigenen Welt.

02:54.340 --> 03:01.860
Keine Kommunikation mit einem anderen Computer. HTTP ermöglicht uns jetzt mit Servern zu kommunizieren, mit der Außenseite

03:01.860 --> 03:02.990
Welt.

03:03.060 --> 03:06.050
Lassen Sie uns die Terminologie noch einmal durchgehen.

03:06.200 --> 03:15.780
Clients und Server können miteinander kommunizieren, indem sie einzelne Nachrichten austauschen. Die vom Client gesendeten Nachrichten

03:16.320 --> 03:28.180
In der Regel werden Webbrowser Anfragen genannt, und die vom Server gesendeten Nachrichten werden normalerweise als Antworten bezeichnet.

03:28.220 --> 03:35.120
Also, wenn HTTP die Sprache ist, die es uns ermöglicht, zwischen diesen beiden zu kommunizieren, lerne mir einiges bei

03:35.120 --> 03:35.990
Worte richtig.

03:36.290 --> 03:37.690
Ich meine, das ist eine gute Frage.

03:37.820 --> 03:44.690
Und Glück für dich HTTP ist ziemlich einfach zu lernen, weil du nur ein paar Wörter hast und ich werde es zeigen

03:44.690 --> 03:45.940
Sie, was sie gerade sind.

03:46.070 --> 03:51.910
Du hast 'GET', du hast 'POST', du hast 'PUT'.

03:51.990 --> 03:53.880
Und schließlich hast du "LÖSCHEN".

03:57.360 --> 04:00.130
und jetzt denkst du "ähm das ist es?"

04:00.130 --> 04:04.880
Und ja, HTTP ist schön, weil es einfach ist.

04:04.920 --> 04:06.660
Sie müssen die Dinge nicht zu kompliziert machen.

04:07.750 --> 04:15.520
Du lernst diese vier Wörter und diese Sprachen und du kannst die App deiner Träume bauen.

04:15.520 --> 04:18.810
Lasst uns eins nach dem anderen durchgehen. "GET" bedeutet

04:18.820 --> 04:22.530
Nun, ich möchte eine HTML-Datei bekommen.

04:22.660 --> 04:28.360
Sie fragen also nach etwas und der Server antwortet mit dieser Anfrage.

04:28.420 --> 04:31.700
Ein 'POST' sagt, dass ich etwas posten möchte.

04:31.710 --> 04:38.410
Das heißt, ich werde einige Daten an Google-Server senden und möchte, dass Sie "POST" - ich möchte, dass Sie es hinzufügen

04:38.950 --> 04:44.520
zu Ihren Servern oder Ihrer Datenbank. "PUT" ist

04:44.780 --> 04:46.530
Ich werde dir Daten senden.

04:46.700 --> 04:51.950
Und ich möchte, dass Sie einige Daten aktualisieren, die bereits auf Google-Servern vorhanden sind, und sie einfach mit diesem neuen aktualisieren

04:51.950 --> 04:59.270
Informationen und dann 'DELETE' bedeutet, löschen Sie einen Teil der Daten auf dem Backend - auf den Servern oder auf der

04:59.270 --> 05:01.240
Datenbank.

05:01.250 --> 05:08.270
Wenn wir also Twitter als Beispiel verwenden, wird 'GET' den Twitter-Feed mit allen Tweets von erhalten

05:08.270 --> 05:18.450
heute. "POST" wäre, wenn Sie einen neuen Benutzer erstellt haben und diesen Benutzer den Twitter-Servern hinzufügen möchten. 'STELLEN'

05:18.600 --> 05:25.880
wäre, wenn Sie einen Tweet erstellt hätten, aber Sie möchten eine Änderung oder eine Bearbeitung vornehmen, damit Sie diesen Tweet bearbeiten und 'LÖSCHEN'

05:25.890 --> 05:32.080
Das heißt, du löschst entweder dein Benutzerkonto oder löschst einen Tweet. Und keine Sorge, wir werden es tun

05:32.080 --> 05:36.130
nutze diese, wenn wir zum Backend-Bereich kommen und wir bauen unser finales Projekt auf.

05:36.520 --> 05:45.040
Im Laufe der Jahre wurde HTTP erweitert, um sich nicht nur um Text zu kümmern. Holen Sie nicht nur Hypertext-Dokumente

05:45.040 --> 05:53.500
wie HTML, aber auch Bilder und Videos und Post-Inhalte auf Servern wie mit HTML-Formular-Ergebnissen.

05:53.650 --> 06:01.300
und HTTP kann auch verwendet werden, um Teile von Dokumenten zu holen, um Webseiten auf Anfrage zu aktualisieren, die AJAX genannt wird

06:01.750 --> 06:04.900
und wir haben ein Video, in dem wir darüber reden.

06:05.020 --> 06:09.170
Aber die Hauptidee steht immer noch mit diesen vier Verben

06:09.190 --> 06:13.230
wir haben gerade gelernt, wir können jetzt mit Servern kommunizieren.

06:13.340 --> 06:13.630
Gut.

06:13.630 --> 06:23.220
Wir wissen also, dass dieser Pfeil hier oben HTTP verwendet, um Anfragen mit einem dieser vier Verbs zu stellen.

06:23.230 --> 06:23.680
Okay,

06:23.700 --> 06:27.630
also denke ich, du bekommst den Anfrageteil. Jetzt,

06:27.700 --> 06:29.320
Worauf reagiert der Server?

06:29.320 --> 06:30.770
Was ist mit Antwort hier?

06:30.850 --> 06:38.140
Der Server sendet Ihnen zwei wichtige Dinge. Einer ist eine HTTP-Nachricht.

06:38.210 --> 06:42.780
Das ist etwas, das Sie schon einmal gesehen haben und ich werde darauf verlinken

06:42.800 --> 06:49.360
W3school Ressourcen eine 200 Nachricht bedeutet erfolgreich.

06:49.410 --> 06:57.250
Sie haben wahrscheinlich 200 OK gesehen, bevor Sie möglicherweise 404 Nachrichten gesehen haben, was bedeutet, dass sie nicht gefunden wurden.

06:57.390 --> 07:03.530
Wenn Sie eine URL eingeben, die nicht existiert, erhalten Sie eine 404 und vielleicht bekommen Sie manchmal eine 500

07:03.570 --> 07:05.080
Fehlermeldung, die ist

07:05.230 --> 07:07.260
Nun, mit dem Server stimmt etwas nicht.

07:07.530 --> 07:15.000
Das ist also nur ein Zahlencode, der mit jeder Antwort geliefert wird, die Ihnen die Antwort des Servers mitteilt.

07:15.000 --> 07:16.080
Das ist der erste.

07:18.390 --> 07:22.980
Die zweite ist normalerweise eine Art von Daten wie HTML.

07:23.190 --> 07:25.530
Und bis jetzt haben wir HTML gemacht.

07:25.830 --> 07:31.160
Aber in den nächsten Videos zeige ich dir, dass es andere Dinge als nur einfaches HTML senden kann.

07:31.230 --> 07:33.600
Also fügen wir dieses Diagramm jetzt hinzu.

07:34.230 --> 07:43.760
Wir möchten sagen, dass dies auch einen Statuscode hat und wir sagen jetzt 200, dass alles in Ordnung war

07:43.790 --> 07:50.770
Die Antwort würde den Statuscode plus die neue HTML-Datei enthalten.

07:51.020 --> 07:51.890
Gut.

07:52.070 --> 07:56.900
Lassen Sie uns dies online demonstrieren, um zu sehen, wie Sie diese Aktion beobachten können.

07:58.360 --> 08:04.410
Ich habe hier eine großartige Website namens "example.com" und es ist eine einfache Website, die Sie besuchen können

08:04.510 --> 08:05.330
jetzt sofort.

08:05.440 --> 08:12.830
Aber der coole Teil ist, wenn Sie Ihre Entwicklerkonsole öffnen, bis zu diesem Punkt haben wir uns angeschaut

08:12.830 --> 08:20.450
Auf der Registerkarte "Elemente" und dann auf der Registerkarte "Konsole" möchte ich Ihnen die Registerkarte "Netzwerk" anzeigen, die wir hier haben. Jetzt

08:20.450 --> 08:21.620
das Tab "Netzwerk"

08:21.980 --> 08:27.610
Sie müssen möglicherweise auf einige dieser Symbole klicken und Sie werden sehen, dass verschiedene Dinge auftauchen werden.

08:27.710 --> 08:30.900
Stellen Sie sicher, dass der Filter nicht mehr vorhanden ist.

08:31.780 --> 08:39.960
Alles ist nicht angeklickt und jetzt auf 'example.com', während dies geöffnet ist, einfach nur aktualisieren

08:43.010 --> 08:44.420
und sieh dir das an.

08:44.600 --> 08:47.880
Ich werde auf dieses Symbol klicken, das es ein wenig größer macht.

08:47.900 --> 08:52.010
Dies ist ein Plugin also mach dir keine Sorgen über dieses Javascript aber das Wichtigste, was es sagt.

08:52.010 --> 08:55.940
"example.com" "Status:200 OK"

08:55.970 --> 09:03.140
Und "Typ:Dokument" und es sagt mir sogar die Größe - die Zeit, die es brauchte, um das zu bekommen, was 53 Millisekunden ist ...

09:03.140 --> 09:04.760
Das ist ziemlich schnell.

09:04.760 --> 09:07.790
Das bedeutet, dass der Server mit 200 geantwortet hat.

09:07.790 --> 09:13.830
Wenn ich darauf klicke, bekomme ich eine ganze Reihe von Dingen, um die wir uns eigentlich nicht kümmern müssen, aber ein paar

09:13.830 --> 09:16.080
Dinge 'Anfrage-URL'

09:16.080 --> 09:23.340
das haben wir gefordert. Wir erhalten einen Statuscode von 200 vom Server.

09:23.340 --> 09:31.280
Und wenn wir auf die Antwort klicken, gibt es eine Antwortnachricht. Wir haben das HTML-Dokument von der

09:31.280 --> 09:32.760
Server.

09:32.860 --> 09:36.870
Wenn wir zu Header zurückkehren, sehen wir auch, dass unsere Anfrage-Methode ein 'GET' war.

09:36.970 --> 09:44.430
Wir haben eine 'GET' Anfrage gestellt. Schließen wir das und aktualisieren Sie es erneut.

09:44.490 --> 09:48.880
Ich bekomme jetzt einen 304 Status. A 304

09:48.930 --> 09:55.050
Wenn wir hier nachsehen, bedeutet "nicht geändert", dass die Anforderungsseite seit der letzten Änderung nicht geändert wurde

09:55.050 --> 09:59.150
zuletzt angefordert. Weil ich das schon beantragt habe

09:59.170 --> 10:04.800
jetzt ist Google schlau genug zu sagen, oh, ich werde mir keine Sorgen um den Server machen und dasselbe verlangen

10:04.800 --> 10:05.640
Ding immer und immer wieder.

10:05.640 --> 10:09.960
Ich habe es bereits auswendig gelernt, also ist es hier.

10:10.130 --> 10:10.730
Sehr cool.

10:10.730 --> 10:13.740
Die Registerkarte "Netzwerk" ist dafür wirklich sehr nützlich.

10:14.030 --> 10:14.420
Gut.

10:14.420 --> 10:20.330
Sie können also mit 'example.com' spielen und selbst sehen, wie HTTP funktioniert.

10:21.970 --> 10:29.590
Und übrigens dieses HTTP, das Sie hier sehen, das ist, was es bedeutet, wenn Sie eine HTTP-Anfrage ausführen, heißt es

10:29.680 --> 10:34.340
hey tun HTTP - wir benutzen das weltweite Netz.

10:34.640 --> 10:38.260
Und fordere das vom Server an.

10:38.450 --> 10:39.110
Sehr cool.

10:39.140 --> 10:40.650
Und wenn Sie sich über das "S" wundern.

10:40.670 --> 10:43.850
Mach dir keine Sorgen, ich werde dich am Ende dieses Videos wissen lassen, was das auch bedeutet.

10:46.410 --> 10:46.970
Gut.

10:47.120 --> 10:49.780
Was nun, wenn ich Daten senden will.

10:49.850 --> 10:53.790
Wenn wir zu unserem Diagramm zurückkehren, mache ich nur eine 'GET' Anfrage.

10:53.840 --> 10:58.090
Aber was, wenn ich tatsächlich Informationen an den Server senden möchte.

10:58.100 --> 11:02.120
Anders als irgendeine URL, die sagt, dass ich diese Information will.

11:02.120 --> 11:04.330
Nun, es gibt zwei Möglichkeiten, wie Sie es tun können.

11:05.440 --> 11:08.300
Einer ist eine so genannte Abfragezeichenfolge.

11:08.530 --> 11:13.140
Und dann ist der zweite durch den Körper der Anfrage.

11:13.250 --> 11:20.450
Also werde ich Ihnen zeigen, wie diese beiden Arbeiten, die ich hier habe, die Form haben, die wir in unserem ersten geschaffen haben

11:20.660 --> 11:24.270
erweiterter HTML-Bereich, wenn wir nur HTML kannten.

11:24.860 --> 11:25.990
Lass uns diese Datei öffnen.

11:29.810 --> 11:30.850
Ich habe es hier drüben.

11:30.870 --> 11:34.650
Wenn ich einen Doppelklick mache - du erinnerst dich daran, nicht wahr?

11:34.650 --> 11:37.990
Wir sind sehr weit gekommen. In dieser Form

11:38.100 --> 11:46.280
Wenn Sie sich erinnern, hatten wir eine Formularmethode 'GET' und jetzt verstehen Sie vielleicht, was 'GET' bedeutet.

11:46.320 --> 11:52.220
Mit diesem Formular möchte ich, dass Sie eine 'GET' Anfrage machen.

11:52.350 --> 11:59.960
Mal sehen, was passiert, wenn ich beim Öffnen des Netzwerk-Tabs auf Register klicke.

12:00.160 --> 12:04.000
Ich werde auf "Registrieren!" Klicken.

12:04.010 --> 12:04.650
Gut.

12:04.730 --> 12:07.190
Also haben wir diese Anfrage.

12:07.190 --> 12:14.810
Wir sehen, dass wir eine Anfrage gestellt haben und diese Dinge als Abfragestrings bezeichnet haben.

12:14.840 --> 12:21.370
Die erste Möglichkeit, Daten an den Server zu senden. Mit einer 'GET' Anfrage, wenn Sie Informationen über eine

12:21.380 --> 12:29.710
Form es fügt es der URL mit diesem Fragezeichen hinzu, das sagt, hey, ich bin im Begriff, Ihnen etwas Frage zu schicken

12:29.710 --> 12:34.400
Strings und es wird einen Schlüssel und einen Wert haben.

12:34.630 --> 12:36.550
In diesem Fall Vorname, Nachname

12:36.550 --> 12:38.310
alles ist leer, also gibt es keine Informationen.

12:38.320 --> 12:42.110
Aber ansonsten werde ich sagen, der Vorname ist Andrei.

12:42.400 --> 12:51.900
Wenn ich darauf klicke, sehen wir, dass es Abfragestringparameter gibt, die wir gesendet haben. Wir haben Vornamen,

12:51.960 --> 12:55.370
Nachname, E-Mail, Passwort und Geburtstag, die leer ist.

12:55.710 --> 13:02.590
Aber wenn wir in Autos nach unten scrollen, ist Volvo Standard, damit wir Autos haben:Volvo.

13:02.730 --> 13:07.140
Diese Information wird nun an den Server gesendet.

13:07.140 --> 13:10.260
Das sind Abfragezeichenfolgenparameter, die 'GET' verwenden.

13:10.260 --> 13:12.390
Und wir haben eine Sache erwähnt.

13:12.480 --> 13:16.530
Wir sehen, dass wir hier ein Passwort haben, das nicht sehr sicher ist.

13:16.560 --> 13:27.850
Wenn ich zu dem Formular zurückkehre und ich 'geheim' eintippe und ich klicke erneut auf Registrieren Nun, jetzt habe ich mein Passwort

13:28.270 --> 13:34.900
im Freien gesendet über den Draht und ich habe es sogar hier in meiner URL-Leiste.

13:35.070 --> 13:35.370
Gut.

13:35.370 --> 13:36.350
Wir werden darauf zurückkommen.

13:37.790 --> 13:39.060
Das ist also ein Weg.

13:39.170 --> 13:44.930
Der zweite Weg ist durch den Körper der Anfrage.

13:44.930 --> 13:48.210
Lassen Sie mich Ihnen zeigen, wie das funktioniert, wie wir Informationen senden

13:48.230 --> 13:57.110
Der Körper ist eine "POST" Anfrage und das ist etwas, was Sie öfter sehen als eine "GET" Anfrage

13:57.110 --> 14:04.690
ist, dass wir einige Formulardaten zum Server hinzufügen wollen, also wollen wir etwas posten, wenn ich das ändere

14:04.690 --> 14:06.790
hier werde ich das retten.

14:06.970 --> 14:09.300
Und lassen Sie uns einen neuen Tab öffnen.

14:10.430 --> 14:14.920
Bei neuen gespeicherten Daten handelt es sich um ein Postformular.

14:15.010 --> 14:23.540
Wenn ich es hier öffne, gebe ich das Passwort 'secret' ein und klicke auf 'Registrieren!'

14:26.590 --> 14:32.230
Ich bekomme 'register.html', aber keine Abfragezeichenfolgen.

14:32.350 --> 14:33.370
Wenn ich darauf klicke,

14:36.350 --> 14:41.290
Ich sehe das jetzt anstelle von Abfragezeichenfolgen, es sind Formulardaten.

14:41.480 --> 14:48.650
Und es heißt sogar 'Content-Type:application / x-www-form-urlencoded'.

14:49.070 --> 14:57.830
Und das ist nur eine HTML-Art zu sagen, dass dies eine Form ist und dies ist der Körper, aber hier nicht angezeigt.

14:57.860 --> 15:03.200
So kann der Server jetzt nicht von den Abfrageparametern darauf zugreifen und mach dir keine Sorgen, ich zeige dir wie Server

15:03.200 --> 15:03.780
TU das.

15:03.860 --> 15:09.740
Wenn wir zum Backend-Bereich kommen. Anstatt über die Abfrageparameter darauf zuzugreifen, kann ich jetzt zugreifen

15:09.740 --> 15:12.160
es durch die Formulardaten.

15:12.170 --> 15:15.440
Lasst uns also zurück zum Diagramm gehen.

15:15.610 --> 15:22.850
Wir verstehen jetzt, dass wir HTTP-Anfragen mit 'GET', 'POST', 'PUT' und 'DELETE' ausführen können.

15:22.850 --> 15:35.140
Ich kann Abfragezeichenfolgen verwenden, die sich an der Spitze der URL befinden, um die Daten oder den Hauptteil der Anfrage zu senden

15:35.500 --> 15:41.350
und dann antwortet der Server mit einem Statuscode, basierend darauf, wie meine Anfrage war und sie gibt das mit zurück

15:41.350 --> 15:42.440
eine Antwort.

15:42.820 --> 15:52.290
Aber das einzige Problem, das wir sahen, war, dass das Passwort in beiden Fällen sichtbar war, oder?

15:52.300 --> 15:57.550
Und wenn wir hier eine unheimlich aussehende Person hätten.

15:57.560 --> 15:58.360
Da gehst du.

15:58.580 --> 16:08.140
Was wäre, wenn wir eine Person hätten, die unsere Kommunikation überwacht und unsere HTTP-Anfragen überwacht.

16:08.380 --> 16:15.370
Wenn ich Query-Strings benutzt habe, um mein Passwort gut einzutragen, kann er einfach über meine Schultern schauen und sehen

16:15.440 --> 16:18.790
oh Andreas Passwort ist geheim.

16:18.790 --> 16:29.510
Ich kann mich jetzt in sein Google-Konto einloggen oder wenn ich die Art und Weise verwende, Daten gut zu senden, kann er einen Weg finden

16:29.510 --> 16:33.460
um diese Bitte zu bekommen, zuerst zu ihm zu kommen. Und

16:36.900 --> 16:44.160
Schau dir einfach die Formulardaten an und sieh, dass mein Passwort geheim ist. "Das ist nicht

16:44.180 --> 16:44.750
sehr gut ist es? "

16:44.750 --> 16:57.210
Nun eine Lösung war die Idee von HTTPS. Jetzt bedeutet HTTPS Hypertext-Transfer

16:57.240 --> 17:06.820
Protokoll Secure und Sie können hier sehen, dass "W3C" die sichere Version von HTTPS verwendet.

17:06.860 --> 17:11.280
Die Kommunikation zwischen dem Browser und den Websites ist jetzt verschlüsselt.

17:12.610 --> 17:13.330
Und was bedeutet das?

17:13.330 --> 17:22.380
Verschlüsselt bedeutet nur, dass es durcheinander ist, so dass nur der Client und der Server den geheimen Pass kennen

17:22.390 --> 17:25.360
geheimer Schlüssel zum Lesen der Nachricht.

17:26.740 --> 17:35.050
Und dieses 'S' Teil des Geheimnisses verwendet eine Technologie namens Transport Layer Security oder deren Vorgänger Secure

17:35.050 --> 17:41.870
Socket Layer oder TLS und SSL für kurze.

17:41.920 --> 17:51.820
Also jetzt auch mit HTTPS wenn der Angreifer oder was wir einen Mann in der Mitte nennen die Person die gerade überwacht

17:51.820 --> 17:58.030
unsere Wünsche. Selbst wenn sie unser Passwort bekommen, wird es nur kompletter Jibberish sein

17:58.030 --> 18:06.120
habe etwas ähnliches und das ist nicht unser Passwort, also wird es bedeutungslos es vermeidet

18:06.170 --> 18:07.690
dieser Angriff.

18:07.690 --> 18:08.960
Dies ist nur der Tipp.

18:09.280 --> 18:17.040
Als Entwickler solltest du all deinen Freunden sagen, wenn du sensible Informationen schickst

18:17.040 --> 18:18.330
auf ein Bankkonto.

18:18.450 --> 18:26.130
Stellen Sie sicher, dass es HTTPS gibt, wenn es beim Senden keine HTTPS gibt - vielleicht Ihre Anmeldung

18:26.130 --> 18:27.560
mit deinem Passwort.

18:27.690 --> 18:30.250
Nun, das ist nicht sicher.

18:30.400 --> 18:30.890
Gut.

18:31.010 --> 18:40.860
Lass uns das überprüfen. Ihr Webbrowser ist ein HTTP-Client, der Anfragen an die Servercomputer sendet. Wenn der Browser

18:40.920 --> 18:48.930
Der Benutzer gibt Folgeanfragen ein, indem er entweder eine Datei öffnet oder eine URL eingibt oder auf einen Hypertext klickt

18:48.930 --> 18:50.500
Verknüpfen Sie ein Anker-Tag.

18:50.880 --> 18:56.530
Der Browser erstellt eine HTTP-Anforderung und sendet sie zur Kommunikation mit dem Server.

18:56.730 --> 19:02.380
Jetzt kann der Server Informationen an uns zurück erhalten. Die früheste Version, die wir verwenden konnten

19:02.470 --> 19:09.430
URL-Parameter wie "www.google.com/about" und nur spezifisch HTML erhalten.

19:09.510 --> 19:11.020
Das war's.

19:11.050 --> 19:18.950
Dann kam das Formular, so dass wir jetzt tatsächlich mehr Daten senden können als nur die URL, die wir sagen

19:18.950 --> 19:20.880
möchte zu dieser HTML-Datei gehen.

19:21.260 --> 19:34.930
Jetzt könnten wir 'GET' oder 'POST' verwenden, um Daten zu senden. Entweder über einen Body oder eine Abfragezeichenfolge und einen Server aufnehmen können

19:34.930 --> 19:40.540
Aktion basiert auf diesen Daten und gibt eine neue Seite zurück.

19:40.630 --> 19:47.200
Und dies ist die Grundlage des Webs und wie das weltweite Web, das wir jetzt haben, ermöglicht wurde. Durch

19:47.380 --> 19:53.140
Client-Server-Kommunikation. In den nächsten Videos werden wir noch mehr lernen.

19:53.390 --> 19:56.820
Um diese Kraft wirklich zu verstehen, sehe ich dich im nächsten. Tschüss.
