WEBVTT

00:01.060 --> 00:09.590
Willkommen zurück in den vorherigen Videos, die wir über HTTP und JSON gelernt haben. Wir haben gelernt, dass wir Anfragen senden können

00:09.650 --> 00:14.830
und bekomme Antworten. Aber es gibt ein Problem. Bis jetzt

00:14.920 --> 00:23.720
Jedes Mal, wenn wir mit dem Server kommunizieren müssen, machen wir diese Anfrage dann beim Empfang des Browsers

00:23.870 --> 00:29.930
Die Antwort führt eine Seitenaktualisierung durch. Ursprünglich

00:30.810 --> 00:35.710
Laden von Seiten im Web war einfach, Sie würden eine Anfrage für eine Website an einen Server senden.

00:35.940 --> 00:43.350
Und solange nichts schief gelaufen ist, werden die Assets von der Webseite heruntergeladen und auf Ihrem Display angezeigt

00:43.350 --> 00:44.150
Computer.

00:45.280 --> 00:51.820
Das Problem mit diesem Modell ist, dass, wenn Sie beispielsweise Teile der Seite aktualisieren möchten

00:51.820 --> 00:59.390
eine neue Reihe von Produkten wie auf Amazon. Nun, Sie müssen das gesamte Programm erneut laden,

00:59.510 --> 01:09.050
sogar der Umriss, sogar die Navigationsleiste oben. Alles musste neu geladen werden - eine komplette Seitenaktualisierung.

01:09.080 --> 01:16.070
Dies ist extrem verschwenderisch und führt zu einer schlechten Benutzererfahrung, insbesondere wenn Seiten größer und mehr werden

01:16.070 --> 01:17.770
Komplex.

01:17.930 --> 01:20.220
Sie können sich das auf der Udemy-Website vorstellen.

01:20.810 --> 01:34.640
Wenn wir nach Udemy gehen, also wenn ich auf "Marketing" klicke, bleibt die oberste Leiste erhalten. Hast du das gesehen?

01:34.640 --> 01:37.230
Es ist eine nette Benutzererfahrung.

01:37.520 --> 01:41.500
Ich kann auf Tabs klicken und ich bekomme keine vollständige Seitenaktualisierung.

01:41.510 --> 01:48.630
Es ist - es lädt Daten automatisch auf der Seite.

01:48.640 --> 01:55.450
Dieses Problem, das wir hier hatten, führte nun zur Entwicklung von Technologien, die Webseiten kleine Anfragen ermöglichen

01:55.450 --> 02:04.520
Teile von Daten wie HTML, XML, Nur-Text, JSON und zeigen sie nur bei Bedarf.

02:05.740 --> 02:07.990
Helfen, dieses Aktualisierungsproblem zu lösen.

02:09.340 --> 02:14.010
Und die Technologie wurde AJAX genannt.

02:14.040 --> 02:22.470
Es ermöglicht Ihnen, nach dem Laden der Seite von einem Webserver zu lesen und eine Webseite ohne Neuladen zu aktualisieren

02:22.470 --> 02:31.610
Die Seite. Und senden Sie schließlich Daten im Hintergrund, während der Benutzer mit der Website interagiert.

02:31.660 --> 02:40.000
Es wurde ursprünglich von Google im Jahr 2006 eingeführt und jetzt erwarten wir von Websites und jeder Web-App, die Sie benötigen

02:40.000 --> 02:42.790
siehe online verwendet Ajax jetzt.

02:42.800 --> 02:50.920
Sie sehen, Google hatte dieses große Problem, wenn wir etwas suchen, nun, Sie würden zuerst tippen

02:50.920 --> 02:56.430
in 'Apfel' und es würde eine komplette Seite aktualisieren.

02:56.430 --> 03:03.270
Aber jetzt kann ich die obere Leiste beibehalten und diese laden lassen.

03:03.410 --> 03:05.050
Ich kann sogar Vorschläge haben

03:07.980 --> 03:09.190
Vom Server aufgezogen.

03:09.300 --> 03:17.070
Und das ist alles eine Antwort vom Server, dass dies einige der Vorschläge sind, auf denen sie basieren

03:17.080 --> 03:18.200
Apple Laden.

03:18.650 --> 03:24.410
Es war also ein großes Problem für Google und sie konnten es mit Ajax lösen, aber jetzt haben wir das alle

03:24.410 --> 03:25.650
Fähigkeit.

03:25.670 --> 03:27.530
Wie können wir das machen?

03:27.530 --> 03:37.430
"Was ist Ajax?" AJAX ist nur eine Technologie - eine Methode, Stücke zu kombinieren, um dies zu erreichen.

03:37.590 --> 03:46.280
Und es wurde mithilfe eines von den Browsern erstellten Tools erreicht, das als XML-HTTP-Anforderung bezeichnet wurde.

03:46.620 --> 03:49.670
Es sah ungefähr so ​​aus.

03:50.130 --> 03:58.110
Sie haben ein neues XML-HTTP-Anfrageobjekt erstellt. Wie Sie sehen können, sieht es ein bisschen schwierig aus.

03:58.980 --> 04:08.810
Sie stellen eine Anfrage - Sie geben eine Anfrage an diese URL, die Sie beim Laden von onload sagen. Wenn die

04:08.810 --> 04:15.200
Status Die Antwort ist größer als 200 oder kleiner als 400.

04:15.200 --> 04:16.300
Es ist ein Erfolg.

04:16.310 --> 04:25.880
Wir werden den Antworttext analysieren, weil wir eine Zeichenfolge vom Server empfangen. Wenn es

04:25.880 --> 04:36.640
Nicht ein Erfolg gut wir können einen Fehler zurückgeben und wir senden dann unsere Anfrage und hören auch auf Fehler.

04:37.320 --> 04:44.440
Es sieht ziemlich hart aus, aber es sind Dinge, über die wir gegangen sind. Aber mach dir keine Sorgen, wir machen das eigentlich nicht

04:44.440 --> 04:44.770
nicht mehr.

04:44.770 --> 04:49.560
Dies war der alte Weg, es zu tun, als Ajax zum ersten Mal vorgestellt wurde.

04:49.570 --> 04:52.980
jQuery kam und sagte, das ist ziemlich schwierig

04:52.980 --> 04:58.320
jedes Mal. Wir machen es Ihnen leicht, indem Sie dies tun.

04:58.550 --> 05:01.820
Und das war ein weiterer Grund, warum jQuery populär war.

05:01.820 --> 05:05.700
Wir können nur Ajax-Anfragen machen, die diese Methode ausführen.

05:06.050 --> 05:11.690
Aber jetzt gibt es tatsächlich einen noch schöneren neueren Weg, den wir tatsächlich genutzt haben, als wir unsere Reaktion aufbauen

05:11.690 --> 05:17.220
App und es wird von den Browsern unterstützt und das heißt fetch.

05:17.510 --> 05:26.930
Wie Sie sich erinnern, wurde es bei der URL abgeholt und dann haben wir das getan. Dann (Antwort) und wir erhielten eine Antwort.

05:26.930 --> 05:31.790
Jetzt ist das eine wirklich gute Sache, denn Seitenupdates sind viel schneller und Sie müssen nicht warten

05:31.790 --> 05:33.140
die Seite zum Aktualisieren.

05:33.140 --> 05:36.660
Das bedeutet, dass sich die Website schneller und reaktionsschneller anfühlt.

05:38.390 --> 05:44.250
Außerdem werden bei jedem Update weniger Daten heruntergeladen, was zu weniger verschwendeter Bandbreite führt.

05:44.750 --> 05:50.840
Und das ist ein großes Problem, vor allem bei mobilen Geräten, wo die Internetverbindung nicht sein könnte

05:50.840 --> 05:52.460
genauso gut.

05:52.580 --> 06:03.370
Ajax erlaubt Webseiten und damit auch Webanwendungen dynamisch Inhalte zu ändern.

06:04.080 --> 06:06.510
Es ist etwas, das einfach sehr nett ist.

06:06.510 --> 06:14.140
Es sieht einschüchternd aus, aber es ist nur eine Frage des Abrufens, das HTTP für dich und alles andere tut

06:14.140 --> 06:21.090
Das heißt, wenn Sie einen GET, einen POST ausführen und dieser Anfrage einige JSON-Daten hinzufügen möchten.

06:21.220 --> 06:29.460
Lasst uns noch einmal überprüfen, was mit Ajax passiert. Ein Ereignis tritt auf einer Webseite auf, wie das Anmelden und ich

06:29.460 --> 06:34.200
Klicken Sie auf Anmelden. XML HTTP-Anfrage Objekt-

06:34.290 --> 06:41.280
Wieder etwas, das Webbrowser implementiert haben, wird erstellt und das wird mit Javascript erstellt.

06:41.560 --> 06:49.800
Das XML-HTTP-Request-Objekt sendet eine Anfrage an den Webserver, auf dem der Server die Anfrage bearbeitet, und dann an den Server

06:49.920 --> 06:54.500
Der Server sendet eine Antwort zurück an die Webseite.

06:54.590 --> 07:03.650
Die Antwort wird von Javascript gelesen und der Benutzer kann sich anmelden. Zur gleichen Zeit nur eine kleine aktualisieren

07:03.650 --> 07:06.490
Teil des Fensters.

07:06.530 --> 07:12.380
Das ist, was eine einzelne Seite Anwendung ist und es ist ein Wort, das Sie wahrscheinlich schon gehört haben, und es ist ein Trend

07:12.410 --> 07:21.770
wie man Web Apps macht. Wo Sie eine Basis laden eine fast leere Seite und bauen Sie den Inhalt im laufenden Betrieb

07:21.770 --> 07:25.010
basierend auf den vom Server abgerufenen Daten.

07:25.010 --> 07:27.790
Lass uns zu dir zurückgehen, Udemy.

07:27.900 --> 07:36.270
Wenn ich auf einen Kurs klicke, machen wir "Public Relations". Sie sehen, dass diese nacheinander geladen werden. ich hatte

07:36.810 --> 07:38.040
die obere Leiste geladen.

07:38.160 --> 07:41.350
Dann habe ich eine Pause gemacht und dann den Rest geladen.

07:41.400 --> 07:45.900
Wenn ich auf "Kurs durchsuchen" klicke, wird wieder die geladene oberste Leiste angezeigt.

07:45.930 --> 07:50.540
Andere Teile des Webs werden langsam dynamisch geladen.

07:50.620 --> 07:59.820
Und wenn ich zum Beispiel wieder zur 'Fotografie' gehe, werden wieder Teile der Webseite dynamisch geladen und das ist

07:59.820 --> 08:06.890
die Schönheit. Diese Anwendungen führen fast nie einen vollständigen Neuaufbau durch, sie zerstören den vorherigen Inhalt alle oder

08:06.890 --> 08:12.270
ein Teil davon und wir bauen es basierend auf neuen Daten - neue Seite.

08:12.470 --> 08:14.760
Und das kommt Ihnen bekannt vor.

08:15.720 --> 08:19.350
Erinnerst du dich daran, wie wir unsere "robofriends" -App gebaut haben?

08:19.740 --> 08:24.950
Wir haben diese URL abgerufen, über die wir Nutzer erhalten haben.

08:25.330 --> 08:30.260
Jetzt, wo wir diese Konzepte verstehen, gehen wir Zeile für Zeile und sehen, was passiert.

08:30.280 --> 08:34.790
Ich benutze fetch -based auf, was ich sagte, sollte Fetch ein Teil des Fensterobjekts sein, richtig?

08:34.990 --> 08:41.500
Lass uns das Prüfen. Wenn ich die Konsole öffne und das mache ich

08:41.730 --> 08:43.870
'window.fetch' ja

08:43.940 --> 08:53.520
Fetch ist eine Funktion, die wir verwenden können, und diese URL, wenn Sie sich erinnern, kehrt für uns zurück

08:53.620 --> 08:54.200
Was ist das?

08:54.220 --> 08:56.540
Ja, ein JSON-Objekt.

08:56.800 --> 09:05.500
Und dieses JSON-Objekt, fetch, erlaubt uns, etwas zu tun, das response - 'response.json ()' genannt wird.

09:05.840 --> 09:08.800
Nun, lass uns das jetzt tun und sehen, was passiert.

09:08.810 --> 09:14.750
Ich werde das kopieren und einfügen. Ich öffne die Konsole und du weißt, dass ich aufmachen werde

09:14.750 --> 09:17.180
ein neuer Tab, um Ihnen zu zeigen, dass Sie dies von überall aus tun können.

09:18.170 --> 09:25.770
Wenn ich diesen Abruf kopiere und einfüge, erhalte ich etwas, das als Versprechen bezeichnet wird, und das ist etwas in Javascript

09:26.040 --> 09:27.630
an die du dich gewöhnen wirst.

09:27.750 --> 09:34.050
Promise sagt "Hey, ich stelle eine Anfrage über das Internet und ich verspreche, es euch mitzuteilen

09:34.050 --> 09:37.160
wenn ich diesen Wert zurückgegeben habe. "

09:37.650 --> 09:42.310
Die Art und Weise, wie Sie auf das Versprechen zugreifen, ist - also haben Sie Folgendes:"Sobald dies zurückgegeben wird

09:42.360 --> 09:43.540
gib mir den Wert ".

09:43.620 --> 09:45.540
Sie tun 'dann'

09:45.660 --> 09:51.600
und es gibt dir die Antwort. Wenn ich zu meiner vorherigen Anfrage hinzufügen

09:51.920 --> 10:05.520
Und ich antworte console.log (Antwort).

10:05.690 --> 10:11.510
Schau, dass ich eine Antwort bekomme. Status 200 werden wir uns daran erinnern.

10:11.720 --> 10:12.520
Ok das ist gut.

10:12.530 --> 10:19.690
Und wir bekommen auch diesen Körper, aber es sagt Atmungsaktivität. Und holen

10:19.850 --> 10:25.930
Ich meine, wir haben über JSON.parse erfahren, um JSON zu parsen.

10:26.340 --> 10:32.300
Aber tatsächlich kommt fetch mit einer eigenen Methode namens "json".

10:32.450 --> 10:39.770
Wenn wir also "json" machen, wird es für uns konvertiert.

10:39.770 --> 10:49.310
Mal schauen. Wenn ich noch einmal auf diese Anfrage zurückgehe, bekomme ich eine Antwort. Wenn ich statt der Konsolenprotokollierung sage, sage ich

10:49.380 --> 10:51.320
'Antwort.json ()'

10:51.530 --> 10:55.800
In diesem Fall bekomme ich wieder ein Versprechen.

10:55.800 --> 11:03.300
Das bedeutet, dass wir tun müssen, um zu erhalten, wann immer dies das Versprechen zurückgibt, welches der Wert ist.

11:03.680 --> 11:07.440
Also gehe ich wieder hoch und mache

11:07.600 --> 11:13.780
Und in diesem Fall sehen wir, welche Daten wir erhalten, wir erhalten Daten und wir werden console.log Daten.

11:17.680 --> 11:31.800
Wenn ich die Eingabetaste drücke. Sieh dir an, dass wir unsere Nutzer - die gleichen Nutzer, die hier waren - empfangen.

11:31.880 --> 11:40.160
Sie sehen jetzt, dass wir einfach die Fetch-API verwenden, die es uns ermöglicht, einen AJAX-Aufruf nach der Komponente durchzuführen

11:40.160 --> 11:40.740
montiert.

11:40.880 --> 11:48.830
Nachdem unsere Robo-Freunde-App geladen wurde, haben wir eine Ajax-Anfrage mit der Fetch-API gemacht.

11:49.100 --> 11:53.350
Wir haben eine Antwort bekommen, die ein Versprechen war.

11:53.360 --> 12:01.190
Also mussten wir das dann tun und diese Antwort und das ist nur Standard, dass, wann immer Sie holen, Sie werden

12:01.190 --> 12:03.420
Erinnere dich einfach an .json

12:03.710 --> 12:11.270
Ich konvertierte das in etwas, das wir gut in Javascript verwenden können und weil dies ein Versprechen gab

12:11.270 --> 12:21.440
Wir haben .dann haben wir die Benutzer und jetzt haben wir die Benutzer-Objekt und wir mussten nie die Seite aktualisieren.

12:21.510 --> 12:29.870
Und übrigens, wenn Sie dieses JSON wollen, wann immer Sie darauf zugreifen, um hübscher und ein wenig zu sein

12:29.870 --> 12:36.560
etwas leserlicher benutze ich eine Chrome-Erweiterung namens "JSONView".

12:36.590 --> 12:37.130
Es ist kostenlos.

12:37.130 --> 12:39.580
Sie fügen es einfach hinzu Chrome macht es automatisch für Sie.

12:39.590 --> 12:43.000
Ich empfehle es sehr. okay

12:43.460 --> 12:46.030
Lass uns zurückgehen

12:46.040 --> 12:47.450
Das sollte jetzt einen Sinn ergeben.

12:47.810 --> 12:56.670
Wir haben jetzt die Möglichkeit, unsere Webseiten dynamisch zu erstellen und mit AJAX und

12:56.750 --> 13:07.640
Ajax ist eine Kombination aus Tools zur Verwendung der Fetch-API unter Verwendung von HTTP und zur Kommunikation mit JSON

13:07.640 --> 13:08.630
Server.

13:09.080 --> 13:20.000
Und jetzt haben wir ein komplettes Bild von unserem Frontend. Unser Frontend kann HTML, CSS, Javascript haben, reagieren.

13:20.000 --> 13:31.670
Wir können AJAX verwenden, um mit Servern zu kommunizieren, und wir verwenden JSON-Daten, um Daten über die Leitung zu senden. Ja wirklich

13:31.670 --> 13:33.660
aufgeregt für die nächsten paar Videos.

13:34.500 --> 13:35.470
Also werde ich in diesem einen sehen. Tschüss.
