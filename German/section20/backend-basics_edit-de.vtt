WEBVTT

00:00.540 --> 00:05.330
Es ist Zeit, ein weiteres spannendes Thema zu lernen und wir werden uns mit den Backend-Grundlagen beschäftigen.

00:05.610 --> 00:10.650
Aber ich wollte dir zeigen, was wir bisher im Front-End behandelt haben.

00:10.840 --> 00:17.950
Wir haben mit diesem Diagramm angefangen, um nach "Wer ist google.com?" Zu fragen. und gehen durch den ISP fragen

00:17.950 --> 00:20.810
der Domain-Name-Server für die IP-Adresse.

00:20.950 --> 00:29.460
Wir bitten dann die IP-Adresse, um die Google-Server zu finden und dann die Google-Server gibt uns unser HTML,

00:29.470 --> 00:34.400
CSS- und JavaScript-Datei, die wir über HTML erhalten können

00:34.420 --> 00:43.040
Und dann die Link-Tags und die Skript-Tags, um CSS und Javascript zu erhalten. Der Browser liest die Datei für

00:43.040 --> 00:51.860
Wir verwenden die HTML-, CSS- und V8-Engine oder die JavaScript-Engine des Browsers, um JavaScript zu lesen

00:51.920 --> 00:58.510
und wir manipulieren das DOM mit JavaScript.

00:58.520 --> 01:05.300
Wir haben auch gelernt, dass der Standort des Servers wichtig ist, wie viele Reisen wir machen, wie viele HTTP-Anfragen

01:05.300 --> 01:06.590
wir machen ist wichtig.

01:06.590 --> 01:08.560
Die Größe der Dateien ist wichtig.

01:08.810 --> 01:16.660
Und wir haben einige dieser Lösungen kennengelernt, z. B. Netzwerke zur Bereitstellung von Inhalten, bei denen das Skript nur in eine bundle.js-Datei integriert wurde

01:16.820 --> 01:21.230
und auch unsere Dateien minimieren.

01:23.740 --> 01:33.040
Und dann haben wir auch etwas über diese neue Technologie namens AJAX gelernt, bei der wir einfach Benutzer holen und mit ihnen reden können

01:33.040 --> 01:40.750
der Server, während der Benutzer die Website noch durchsucht und eine JSON - Antwort erhält, um die

01:40.750 --> 01:43.050
Website in Echtzeit.

01:43.390 --> 01:49.730
Und dieses Bild, mit dem wir angefangen haben, sieht viel klarer aus als im ersten Video, oder?

01:49.780 --> 01:53.210
Wir verstehen, was ein Front-End-Entwickler macht.

01:53.230 --> 02:00.760
Wir sehen die Macht von React und wir wissen auch, dass diese Pfeile einfach HTTP-Anfragen bedeuten; eine Sprache, die

02:01.090 --> 02:08.310
Sowohl Front-End als auch Back-End können sprechen und mit AJAX und JSON können wir das dynamisch machen.

02:09.570 --> 02:15.930
Jetzt das Back-End und die Rolle eines Back-End-Entwicklers. Sie sind diejenigen, die für die Arbeit verantwortlich sind

02:15.930 --> 02:24.330
mit Servern und Datenbanken. Und ein Server ist verantwortlich für alles, was Sie im Browser bekommen.

02:24.650 --> 02:32.140
Ich kann vom Browser nichts verlangen; wie "Gehe zu google.com". Aber am Ende des Tages der Webserver

02:32.170 --> 02:38.890
kann mir einfach geben, was immer es will. Wenn es mich nur an twitter.com anstatt an google.com sendet,

02:38.920 --> 02:42.500
Nun, das hängt vom Server ab. Was immer wir brauchen,

02:42.520 --> 02:47.740
wir machen nur die Anfrage und wir hoffen, dass der Server uns das gibt, wonach wir gefragt haben. Und wenn du dich erinnerst

02:47.980 --> 02:57.740
Ein Server ist nur ein Computer; ein Computer, der irgendwo in der Welt nur dieses HTTP hört

02:57.880 --> 03:02.770
Verbindung, um zu sehen, ob wir irgendwelche Dateien haben.

03:02.830 --> 03:11.800
Die einfachste der Server und Sie könnten dies verwendet haben, bevor Sie vielleicht Hostgator eine Hosting-Site verwenden

03:11.860 --> 03:19.120
oder sogar WordPress-Seiten und setzen sie auf Hostgator. Es benutzt etwas, das 'LAMP STACK' genannt wird.

03:19.120 --> 03:28.330
Dies war nützlich für die grundlegendsten Websites, die (wenn) Sie nur eine einfache Information haben möchten

03:28.330 --> 03:28.920
Webseite

03:29.050 --> 03:33.460
Vielleicht eine einfache WordPress-Website, auf der nichts komplex ist.

03:33.550 --> 03:41.380
Nichts Professionelles wirklich. Was sie benutzten, war ein Linux-Server, der das Betriebssystem ist.

03:41.740 --> 03:47.280
Genau wie ich Mac habe, wird Linux das Betriebssystem des Servers sein.

03:47.430 --> 03:48.810
Wir haben den Apache-Server.

03:48.810 --> 03:51.980
Apache ist wieder ein Server

03:52.080 --> 03:58.500
ein Programm, das von jemandem geschrieben wurde, der wirklich gut darin ist, Anfragen anzunehmen und zu senden

03:58.500 --> 04:01.070
aus Antworten von Dateien.

04:01.200 --> 04:03.990
Wir hatten MySQL als Datenbank.

04:03.990 --> 04:09.230
Vielleicht hatten Sie einen Kommentarbereich in Ihrem Blog und Sie müssen diese Daten speichern,

04:09.260 --> 04:16.680
das wäre die Datenbank. Und dann hatten wir die PHP, die nur eine Sprache war, die Sie verwenden können

04:16.680 --> 04:23.040
ein wenig Logik in Ihren Servern. Und der Server, genau wie Ihr Computer, hatte ein Dateisystem, in dem alle

04:23.040 --> 04:29.140
Dateien Ihrer Website werden gespeichert. Und Apache hat das gerade getan.

04:29.330 --> 04:31.790
Hör einfach zu, ob jemand eintritt

04:31.790 --> 04:37.650
funfunwebsite.com in die URL. Wenn es diese Anfrage bekam,

04:37.770 --> 04:42.270
Es wird nur Standard geben Sie index.html.

04:42.720 --> 04:51.260
Wenn jemand funfunwebsite.com/about eingegeben hat, wird es dir nur ungefähr.html geben. Es war sehr

04:51.260 --> 04:53.640
einfacher sehr einfacher Server.

04:53.750 --> 05:00.860
Das ist, was die meisten Hosting-Websites wie Hostgator verwenden. Und Sie könnten fragen:"Könnte ich einfach Apache herunterladen

05:00.860 --> 05:05.150
Server und führe einfach meinen eigenen Server von deinem Computer aus? "

05:05.160 --> 05:07.320
Ja, das kannst du absolut.

05:07.490 --> 05:11.630
Aber ohne eine Server-Software zu haben,

05:12.080 --> 05:14.210
nun, unser Computer ist unerreichbar.

05:14.360 --> 05:21.350
Niemand über das Internet kann auf unseren Computer zugreifen, weil unser Computer kein Server ist

05:21.350 --> 05:25.570
sagt es "Hey, wenn ich eine Anfrage bekomme, sende das aus."

05:25.710 --> 05:33.930
Aber wie wir in unseren vorherigen Videos gesehen haben, können wir gefälschte Server erstellen, um unsere Websites zu testen.

05:33.960 --> 05:36.710
Das war die alte Art, Dinge zu tun.

05:36.720 --> 05:39.530
Es gab nicht viel Logik, man konnte es nicht wirklich erweitern.

05:39.720 --> 05:46.190
Sie können keine Websites wie Facebook oder Amazon mit dieser Art von System haben.

05:46.350 --> 05:51.940
Wie ich schon sagte, dies war für sehr einfache Websites.

05:52.000 --> 05:59.310
Jetzt sieht ein neuer Stapel, den wir einen Anwendungsserver nennen, eher so aus.

05:59.380 --> 06:06.580
Jetzt unterscheidet sich ein Anwendungsserver von unserem vorherigen Beispiel, da er nicht mit dem Apache-Server arbeitet

06:06.610 --> 06:14.050
das ist sehr einfach und erfordert nur eine Antwort, geben Sie einfach Dateien hin und zurück. Mit etwas wie

06:14.050 --> 06:23.750
Auf einem Knotenserver, auf dem Node.js läuft, können Sie ein Skript schreiben und sagen:"Wenn ich eine Anfrage erhalte

06:23.750 --> 06:33.230
für eine Anmeldung dann überprüfen Sie den Benutzernamen des Benutzers in der Datenbank. Wenn es übereinstimmt, lass es mich wissen und dann

06:33.320 --> 06:42.260
Senden Sie eine Antwort über JSON an die Front-End-Anwendung. Und wir können anpassen, was diese Skripte sagen.

06:42.260 --> 06:50.990
Bisher konnten wir nur JavaScript im Web verwenden. Aber jetzt, mit Node.js, können wir es auf einem Server verwenden,

06:51.680 --> 06:55.670
auf einem Computer, auf dem kein Webbrowser ausgeführt wird. Mit Node.js,

06:55.670 --> 07:02.630
Wir können JavaScript schreiben, wo, wenn ich etwas auf Facebook gepostet habe, dieser Beitrag auf Facebook, wenn ich auf "Post" geklickt habe,

07:02.630 --> 07:08.060
Es wird an den Knotenserver gesendet, der auf Anfragen wartet.

07:09.000 --> 07:18.060
Es wird sagen, dass "Andrei gerade diese Nachricht im JSON-Format gepostet hat." Die Datei Node.js und Express.js

07:18.180 --> 07:27.000
auf dem Server wird es lesen und es wird sagen "Ah, wir wollen diesen Beitrag in unserer Datenbank speichern." und das

07:27.000 --> 07:32.460
Datenbank wird diesen Beitrag speichern, so dass, wenn ich das nächste Mal zurückkomme, es immer noch da ist.

07:32.460 --> 07:39.360
Und dann, wenn das erledigt ist, wird es mit einem Erfolg antworten und sagen:"Mein Beitrag ist ein Erfolg" und jetzt

07:39.360 --> 07:42.060
wird in meiner Zeitleiste angezeigt.

07:42.420 --> 07:49.410
Ich kann den Beitrag bearbeiten, ich kann den Beitrag löschen, und Node Server kann diesen Beitrag erneut aus der Datenbank löschen

07:49.410 --> 07:52.520
Dann sende eine Antwort und entferne sie von der Timeline.

07:52.560 --> 07:59.070
Sie haben nur die Kraft, ständig mit dem Front-End zu interagieren. In den nächsten paar Videos

07:59.070 --> 08:03.570
Wir werden ein Projekt aufbauen, das all dies beinhaltet.

08:03.630 --> 08:07.320
Wir werden einen Node Server mit einem Express erstellen,

08:07.320 --> 08:14.610
Wir werden unsere eigene Datenbank erstellen, in der wir Benutzerinformationen speichern. Und wir werden AJAX verwenden

08:14.610 --> 08:20.400
und JSON, um ständig Benutzerinformationen zu erstellen, sich anzumelden und zu aktualisieren.

08:20.460 --> 08:26.880
Wir haben also ein Verständnis für dieses Gesamtsystem. Wenn Sie Websites und Web-Apps erstellen,

08:26.910 --> 08:34.540
Nun, du machst das nicht wirklich. Als Webentwickler bauen Sie etwas ähnliches auf:08:34.750 --> 08:38.300
aber du fragst dich vielleicht selbst:"Ist es das?"

08:38.320 --> 08:44.420
"Ist dies das ultimative Ende dessen, was eine Back-End-Serverinfrastruktur leisten kann?"

08:44.770 --> 08:53.760
Nun, nein, wenn Sie Facebook, Twitter oder Amazon sind, würden Sie so etwas tun und sich nicht zu sehr sorgen

08:53.760 --> 08:57.210
Hier können wir erklären, was vor sich geht.

08:57.280 --> 09:01.740
Sie erstellen nur Kopien Ihres Computers.

09:01.750 --> 09:11.660
Denken Sie also an jedes dieser Rechtecke als Computer. Und weil Facebook viele Leute bekommt, macht es

09:11.660 --> 09:15.720
eine Kopie ihres Servers und legte es vielleicht in Asien,

09:15.860 --> 09:22.640
und einer in Afrika, damit jeder aus Asien auf diesen zugreifen kann und jeder aus Afrika kann

09:22.640 --> 09:23.530
Zugang zu diesem,

09:23.630 --> 09:30.530
anstatt dass alle auf einen Server zugreifen und das System überlasten. Weil sie denselben Server haben

09:30.560 --> 09:35.910
es kopiert nur diese Dateien und legt sie woanders auf einen Server.

09:35.970 --> 09:36.570
Das ist es.

09:36.650 --> 09:43.900
Und das nannten wir Skalierung. Aber sie verwenden auch immer noch die gleiche Datenbank, so dass von diesem Server aus

09:43.900 --> 09:51.460
jemand aktualisiert die Informationen, nun, diese Person hier, die diesen Server verwendet, wird dieser Benutzer noch

09:51.460 --> 09:55.920
Zugriff auf die Informationen, die diese Person mit diesem Server aktualisiert hat.

09:55.960 --> 10:04.640
Und dann haben wir endlich einen sogenannten Load Balancer. Und das ist ähnlich wie Apache oder NginX

10:05.240 --> 10:14.090
würdest du. Wo es auf eine HTTP-Anfrage wartet und es bemerkt, dass "Hmm, das hier in Nordamerika

10:14.090 --> 10:15.700
es ist gerade sehr beschäftigt. "

10:15.720 --> 10:22.940
"Ich werde diese Person hier auf diesen Server übertragen." und es gleicht nur die Last der Server aus.

10:24.040 --> 10:29.290
und es kann weiter wachsen mit immer mehr Servern, da Sie immer mehr Benutzer haben.

10:29.410 --> 10:33.390
Und schließlich können Sie sogar mehrere Datenbanken haben.

10:33.400 --> 10:40.600
Wiederum repräsentieren diese Quadrate jeweils einen Computer; ein Computer, auf dem eine Datenbank läuft, ein Computer

10:40.600 --> 10:48.380
Ausführen eines Servers, eines Computers, auf dem ein Lastenausgleich ausgeführt wird. Und Sie können wieder mehrere Datenbanken haben,

10:48.400 --> 10:52.220
damit sie nicht mit all diesen Anfragen überfordert werden.

10:52.420 --> 10:59.250
Und jeder behält eine Kopie des anderen. Und darüber reden wir (mehr), wenn wir es schaffen

10:59.250 --> 11:02.030
der Knotenbereich und der Datenbankbereich.

11:02.100 --> 11:08.160
Aber ich möchte Ihnen die Idee hinter den Servern zeigen. Um mit dem Back-End zu arbeiten,

11:08.370 --> 11:18.050
Das Hauptziel besteht darin, sicherzustellen, dass wir eine Antwort erhalten, wenn wir eine HTTP-Anfrage vom Front-End machen

11:18.470 --> 11:22.100
so schnell wie möglich zurück mit den richtigen Daten.

11:22.370 --> 11:28.680
Und das ist die Back-End-Entwicklung. Sicherstellen, dass wir diese Ressourcen zurückgeben, damit unser Front-End

11:28.700 --> 11:35.870
Das Team kann sicher sein, dass wir genau das erhalten, was wir brauchen.

11:35.880 --> 11:42.090
Ich möchte, dass Sie sich aufregen, denn in den nächsten Abschnitten werden wir uns auf das Back-End konzentrieren

11:42.090 --> 11:49.920
genauso wie das Front-End. Wir werden eine App erstellen, die all diese Technologien an einem Ort nutzt.

11:49.920 --> 11:57.210
Sie wissen also genau, wie alles zusammenhängt und Sie haben eine Idee, wie Sie von etwas wie ausgehen können

11:57.210 --> 12:04.290
dies zu einem Tag, der so etwas hat.

12:04.400 --> 12:05.210
Ich werde im nächsten auf Wiedersehen sehen.
