WEBVTT 00:00.670 -&gt; 00:04.770 Bine ai revenit. Cred că este momentul să creăm propriul nostru server acum. 00:06.270 -&gt; 00:09.620 Deci, să creăm un nou fișier numit &#39;server.js&#39;. 00:09.660 -&gt; 00:11.470 [touch server.js] 00:11.700 -&gt; 00:15.540 Și pentru ca nodemon să asculte &quot;server.js&quot;. 00:15.540 -&gt; 00:19.630 Să scrieți doar &quot;nodemon&quot; și apoi &quot;server.js&quot;. 00:19.830 -&gt; 00:27.450 Acum dacă salvez acest nodemon, voi asculta acest lucru atâta timp cât spun &quot;npm start&quot; 00:31.120 -&gt; 00:33.070 Așa cum am menționat mai înainte 00:34.360 -&gt; 00:42.250 Nodul vine cu propriul modul HTTP și asta vom folosi pentru a crea serverul nostru. 00:42.250 -&gt; 00:44.080 Și este foarte simplu de folosit. 00:44.260 -&gt; 00:56.600 Pur și simplu apucăm modulul HTTP și apoi creăm un server definindu-l spunând &quot;http.createServer ()&quot;. În acest 00:56.600 -&gt; 01:05.940 &#39;createServer&#39; vom crea o funcție de săgeată și înăuntru aici, acum să facem doar 01:05.970 -&gt; 01:11.100 &#39;console.log (&#39; cererea) &#39;01:12.910 -&gt; 01:20.320 Și apoi, în final, trebuie să facem serverul&#39; ll (&#39;)&#39; și să-i dăm numărul portului pe care dorim să-l ascultăm 01:20.320 -&gt; 01:20.660. 01:20.770 -&gt; 01:23.930 Așa că fă doar 3000 de acum, dar din nou poți face orice, poți să faci 3001 dacă vrei, dar 3000 e drăguț. 01:27.940 -&gt; 01:31.160 Să facem &#39;nodul server.js&#39; 01:31.180 -&gt; 01:32.020 - 01:34.690 -&gt; 01:37.000 Și se pare că este doar agățat acolo. 01:38.000 -&gt; 01:43.680 Dar hai să mergem la portul 3000 pe localnicul nostru, care este mașina noastră și să vedem ce se întâmplă. 01:45.140 -&gt; 01:51.910 Dacă deschid o nouă filă și merg la localhost 3000 hmm, nimic nu se întâmplă. 01:52.180 -&gt; 01:59.160 Dacă deschid consola nu e nimic acolo, dar dacă mă întorc văd &quot;te-am auzit. 01:59.230 -&gt; 02:05.080 Mulțumesc pentru cerere&quot; .js &quot;rulează în Nod. 02:05.230 -&gt; 02:11.350 Acesta rulează aici în Terminal. Dar ascultă conexiunile. 02:11.350 -&gt; 02:19.570 Așa că atunci când am apăsat &quot;refresh&quot; aici sau apăs pe Enter și încerc să mă conectez, va fi ascultat și va rula 02:19.870 -&gt; 02:24.410 &#39; și puteți vedea al doilea &quot;Te-am auzit, mulțumesc pentru cerere&quot; doar aici. 02:24.520 -&gt; 02:25.180 Dacă am reîmprospăta 02:25.180 -&gt; 02:26.300 încă de două ori. 02:28.190 -&gt; 02:31.260 Din nou, încă două. 02:31.480 -&gt; 02:36.150 Dar în momentul de față, browser-ul este doar atârnat acolo pentru că nu facem nimic. 02:36.190 -&gt; 02:37.800 Nu răspundem cu nimic. 02:37.800 -&gt; 02:40.760 Puteți vedea în partea de jos se spune &quot;așteptare pentru localhost&quot;. 02:40.960 -&gt; 02:44.080 Suntem doar consolă logging la sfârșitul nostru, dar nu avem nici un răspuns. 02:46.060 -&gt; 02:47.050 Să facem asta. 02:47.050 -&gt; 02:53.950 Voi elimina jurnalul consolei și voi folosi parametrii pe care &quot;createServer&quot; ni le obține. 02:53.980 -&gt; 03:02.510 Deci, ori de câte ori încercăm să ne conectăm, avem un &quot;cerut&quot;, apoi un parametru de &quot;răspuns&quot; pe care îl putem folosi și lăsăm 03:02.510 -&gt; 03:07.240 un pic mai mic doar așa putem vedea. 03:07.430 -&gt; 03:16.700 Și aici putem face ceva de genul &quot;answer.setHeader ()&quot; ... 03:19.760 -&gt; 03:26.010 &quot;Content-Type&quot; din conținutul pe care urma să-l trimitem și va fi 03:26.580 -&gt; 03:37.950 &quot;text / html&quot; - și acesta este doar modul standard de declarare a tipului de conținut și vom spune &quot;answer.end () cu 03:39.470 -&gt; 03:42.200 și &quot; <h1> &quot;care spune&quot; Helloooooo &quot;. 03:46.740 -&gt; 03:50.730 Dacă salvez asta și re-alerg 03:54.350 -&gt; 03:57.530 bine, din nou, trebuie să repornăm serverul nostru. 03:57.620 -&gt; 04:02.840 Hai să luăm aici nodemonul, pentru a asculta schimbările de fișiere. 04:02.880 -&gt; 04:05.000 Merg la &quot;pachet.json&quot; Voi salva asta. 04:05.000 -&gt; 04:10.340 Și acum voi alerga &#39;npm start&#39; vezi că totul se execută. 04:10.340 -&gt; 04:12.150 Să revenim la fișierul &quot;server.js&quot;. 04:12.410 -&gt; 04:19.560 Dacă m-am întors și am reîmprospătat, am primit &quot;helloooooo&quot;; dacă mă duc la fila Rețea 04:20.350 -&gt; 04:28.670 văd că localhost primesc un răspuns de 200; dacă fac clic pe aceasta, văd că răspunsul a fost &quot; <h1> helloooooo </h1> 04:28.900 -&gt; 04:39.970 Dacă mă duc la anteturi, văd că era un cod de stare de 200, iar tipul de conținut era &quot;text / html&quot;. 04:40.150 -&gt; 04:41.230 Foarte misto. 04:41.260 -&gt; 04:43.940 Pot, de asemenea, să ascult cererile. 04:43.990 -&gt; 04:51.720 De exemplu, aici aș fi putut spune &quot;console.log (request.headers)&quot; 04:54.700 -&gt; 05:05.880 aș fi putut spune, de asemenea, a spus &quot;metoda&quot; și în final ceva de genul &quot;url&quot; 05:05.880 -&gt; 05:10.430 &quot;cererea&quot; ne oferă multe informații despre cererile pe care le primim. 05:10.530 -&gt; 05:13.700 Și tocmai așa suntem clar despre ceea ce fiecare dintre acestea sunt. 05:13.710 -&gt; 05:25.680 Pot să spun &quot;anteturi&quot;, &quot;metodă&quot; și &quot;url&quot;. Dacă salvez asta 05:28.820 -&gt; 05:29.540 și repet 05:32.440 -&gt; 05:36.680 văd că primesc header-urile sunt &#39;localhost:3000&#39;. 05:36.850 -&gt; 05:42.310 Vedem că &quot;user-agent&quot; a fost Mozilla, Macintosh. Așa am folosit. 05:42.610 -&gt; 05:44.180 Am folosit un Apple pentru a face această cerere. 05:44.180 -&gt; 05:44.930 În regulă. 05:46.050 -&gt; 05:51.830 Și metoda a fost o metodă &quot;GET&quot;, iar urlul a fost doar coloana vertebrală [\]. 05:51.900 -&gt; 05:55.890 Hai să comentăm acum titlurile și să vă arătăm cum se schimbă lucrurile. 05:55.890 -&gt; 06:01.020 Dacă am introdus acum &quot;localhost:3000 / profile / 123&quot; 06:04.450 -&gt; 06:07.930, 07.990 -&gt; 06:12.530 Deci, primim informații despre cererea făcută de front-end, care este foarte cool. 06:13.560 -&gt; 06:22.240 Acum, cu răspunsul nostru am răspuns cu &quot;text / html&quot;, dar îți amintești de JSON, nu? Am vorbit despre cât de utilă este JSON 06:22.240 -&gt; 06:26.260 când faci cereri AJAX. 06:26.370 -&gt; 06:27.630 Putem face asta aici? 06:27.690 -&gt; 06:35.870 Bineînțeles, dacă mă duc și schimb &quot;Content-Type&quot; în &quot;application / json&quot;, atunci trebuie să te obișnuiești cu 06:35.870 -&gt; 06:39.980 modul în care spui că tipul de conținut este JSON. 06:40.040 -&gt; 06:50.270 Acum putem trimite un obiect JavaScript, cum ar fi &quot;user&quot;, și vom spune &quot;nume:&quot; John &quot;&quot; hobby:Skating &quot;. 06:57.320 -&gt; 07:05.360 Acum, acest utilizator, pot trece aici, dar amintiți-vă pentru a transfera între firele de care trebuie să folosim 07:05.510 -&gt; 07:12.980 &quot;JSON.stringify&quot; afară din videoclipul JSON dacă este confuz pentru dvs. 07:13.040 -&gt; 07:22.090 Dar, din nou, schimbăm acest obiect într-un șir JSON, astfel încât să îl putem trimite peste fire. 07:22.230 -&gt; 07:33.390 Dacă salvez și să mă întorc și să reîmprospătez - mă uit la asta! - un răspuns JSON din nou &quot;nume:&quot; John &quot;, hobby:&quot; patinaj &quot;07:33.960 -&gt; 07:40.560 și dacă dau clic pe fila Network aici vezi&quot; Content-Type &quot; &#39;și răspunsul 07:40.620 -&gt; 07:43.610 este în format JSON. 07:43.640 -&gt; 07:47.740 Deci, pe partea frontului vom rula &#39;json.parse ()&#39; 07:47.750 -&gt; 07:52.520 Și apoi &quot;:&quot;Skating&quot;}] pentru a-l converti la un obiect JavaScript 07:52.580 -&gt; 07:53.340 Foarte cool 07:54.340 -&gt; 08:03.670 Tocmai am creat primul nostru server, destul de goale, așa cum vă puteți imagina, construirea serverelor 08:03.670 -&gt; 08:11.670 este ceva pe care toată lumea o are care are un site web și există multe instrumente pe care le putem folosi acum 08:11.790 -&gt; 08:12.780 sunt mai elegantă 08:12.840 -&gt; 08:19.500 decât rulează HTTP, iar cea mai populară și cea mai bună cu Node.js este ceva numit 08:19.500 -&gt; 08:23.510 Express, pe care o vom vorbi în următoarea înregistrare video. 08:23.620 -&gt; 08:25.360 Ne vedem în acel.