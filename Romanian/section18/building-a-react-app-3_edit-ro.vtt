WEBVTT

00:00.570 --> 00:05.760
În regulă, ne apropiem și mai aproape de a avea aplicația noastră să arate așa, dar vedem clar că noi

00:05.760 --> 00:07.820
aveți o casetă de căutare aici.

00:07.980 --> 00:14.450
Deci, în acest videoclip vom lucra la realizarea acestui program interactiv. Privind înapoi la aplicația noastră,

00:14.460 --> 00:15.170
noi vedem asta

00:15.180 --> 00:21.280
bine, avem cu siguranta nevoie de un titlu si caseta de cautare, asa ca sa creem asta.

00:21.360 --> 00:22.830
Dacă mă duc la index.js

00:23.030 --> 00:29.730
Cred că acum construim o aplicație, în loc să avem componenta "Cardlist" aici

00:29.730 --> 00:39.390
au o componentă mare numită "App", iar acest "App" va fi tatăl tuturor copiilor noștri, toate componentele noastre

00:39.900 --> 00:42.890
Hai să facem asta. Să construim mai întâi componenta "App"

00:47.270 --> 00:53.060
Și această componentă "App" din nou va "importa React de la" reacționa ";"

00:57.620 --> 01:00.470
și "App" vor fi egale

01:06.800 --> 01:13.130
componenta "CardList" pe care o putem copia și plasa aici

01:15.560 --> 01:20.840
Și din nou, schimbând acest lucru la "Babel", vrem să importăm

01:23.850 --> 01:25.740
componenta "CardList"

01:30.450 --> 01:37.500
și dorim, de asemenea, ca "robotii" noștri să fie importați aici

01:37.540 --> 01:40.040
așa că avem acces la ea

01:40.150 --> 01:46.120
Și apoi, în cele din urmă, dorim doar să redați componenta aplicației, astfel încât să putem aduce acest lucru înapoi

01:46.120 --> 01:48.490
a fost

01:48.720 --> 01:54.030
Salvăm. Trebuie să exportim în mod evident aplicația noastră

01:54.050 --> 02:02.960
Deci, vom spune "App default export"; salvați acest lucru

02:03.170 --> 02:04.190
Să ne întoarcem

02:04.430 --> 02:04.700
Da

02:04.760 --> 02:06.460
Totul funcționează încă

02:07.060 --> 02:11.400
Acum, în "CardList" avem și un antet

02:11.470 --> 02:14.700
Deci vom face "h1", care va spune "RoboFriends"

02:17.990 --> 02:22.850
și amintiți-vă din nou că trebuie să revenim doar la un singur părinte

02:22.850 --> 02:27.110
Avem nevoie să facem ceva de genul "div" pentru ao înfășura

02:31.560 --> 02:33.860
și trebuie să închid această etichetă "h1"

02:37.250 --> 02:37.680
In regula

02:37.690 --> 02:46.060
Am titlul de "prieteni robot" și avem nevoie și de o casetă de căutare. Și deși "h1" a fost ușor și acum trebuie să

02:46.060 --> 02:48.160
construi o componentă pentru el,

02:48.160 --> 02:56.700
Se pare că probabil că vrem să creăm o componentă a căsuței de căutare pentru această aplicație, deci hai să facem asta

02:56.700 --> 03:08.840
Voi spune "import SearchBox" dintr-un fișier pe care îl vom crea numit "SearchBox". Vom crea un nou

03:08.840 --> 03:09.200
fişier

03:19.810 --> 03:25.840
și acest fișier va avea "import Reacționează de la" reacționa ";"

03:29.030 --> 03:30.370
și caseta de căutare

03:32.570 --> 03:36.120
va avea o funcție care revine -

03:36.140 --> 03:38.130
Să ne gândim la ce se întoarce

03:39.400 --> 03:43.830
Ei bine, cu siguranta returneaza o intrare, nu?

03:43.870 --> 03:47.930
Acesta este tipul de "căutare"

03:48.210 --> 03:51.490
Și să avem de asemenea un substituent -

03:51.620 --> 04:02.740
haideți să închidem acest lucru - și placeholderul care spune "roboți de căutare"

04:02.880 --> 04:15.080
Închideți acest lucru și salvați și trebuie să exportați:"Căutarea standard pentru export"; salvați "Compilați cu succes!"

04:15.080 --> 04:16.850
In regula! Avem caseta noastră de căutare

04:16.850 --> 04:19.220
Dar, nu căutăm nimic acum

04:22.690 --> 04:29.130
Să adăugăm acest lucru pe o linie nouă, așa că arată mai bine. Și este întotdeauna o idee bună, doar în cazul în care doriți

04:29.130 --> 04:35.620
pentru a adăuga mai multe lucruri în caseta de căutare, pentru a împacheta totul într-o "div"

04:35.670 --> 04:37.250
Așa că am să fac asta acum.

04:39.660 --> 04:44.070
Și acest "div" va avea doar un "className" de "padding2"

04:44.100 --> 04:50.180
din nou folosind [tag-ons], iar cu "input" putem face un "className"

04:51.450 --> 04:52.920
și știu că acestea arată bine

04:52.920 --> 04:55.440
așa că am să copiez și să lipesc aici

04:55.460 --> 04:56.860
doar umplutura

04:56.970 --> 05:00.240
cu fundal "albastru-albastru"

05:00.240 --> 05:02.930
Dacă fac asta și ... să ne întoarcem

05:02.940 --> 05:03.600
In regula

05:03.600 --> 05:04.800
Acest lucru arată mai bine -

05:04.830 --> 05:06.390
Vrem să centrăm totul

05:06.540 --> 05:10.190
Deci, poate în aplicație putem adăuga un "className"

05:11.220 --> 05:14.570
este egal cu "centrul de text"

05:14.580 --> 05:15.750
vedeți dacă funcționează

05:17.010 --> 05:17.660
Acolo te duci

05:17.730 --> 05:19.370
Asta-i mult mai bine

05:19.380 --> 05:21.380
Îmi place deja asta

05:21.550 --> 05:25.610
Acum, cum putem face acest lucru interactiv?

05:25.660 --> 05:33.600
Până acum am avut doar aceste site-uri web statice, dar site-urile reale sunt interactive, nu?

05:33.660 --> 05:36.430
Să ne gândim la asta logic

05:36.570 --> 05:39.360
Avem o aplicație

05:39.600 --> 05:41.920
Avem un "Căsuță de căutare"

05:42.910 --> 05:53.220
Și avem un "CardList", dar componenta casetă de căutare trebuie să comunice cu lista de carduri, și același lucru

05:53.220 --> 05:54.930
cu lista de carduri. "CardList"

05:54.960 --> 06:02.410
trebuie să știe ce este în caseta de căutare, astfel încât să poată filtra roboții în consecință

06:03.880 --> 06:10.030
Să ne întoarcem la imaginea noastră pe care o avem despre un flux de date într-o singură direcție. Privind la asta

06:10.030 --> 06:20.430
avem componenta aplicației, apoi componenta listei de carduri care are carduri și apoi componenta casetă de căutare

06:20.910 --> 06:22.790
că, acum, nu mai are copii

06:22.920 --> 06:30.030
Dar pentru ca aceste două să comunice, avem un flux de date într-o singură direcție, adică trebuie să le trimită

06:30.030 --> 06:36.170
informarea părintelui și părintele le spune ce trebuie să facă

06:37.230 --> 06:39.010
Acum, cum putem face asta?

06:40.300 --> 06:46.870
Până acum am avut doar câteva date pe care tocmai le-am strecurat, dar nu am avut-o niciodată acolo unde unul dintre copii

06:47.020 --> 06:51.910
a trebuit să modifice datele sau să comunice cu un vecin.

06:54.650 --> 06:56.740
Ei bine, pentru a face asta

06:56.740 --> 07:06.730
React are o idee despre ceva numit "stat". Până acum am aflat despre recuzită, cum ar fi proprietățile

07:06.730 --> 07:09.080
că noi continuăm să trecem

07:09.860 --> 07:15.150
dar nu le-am schimbat niciodată, deoarece React doar citește recuzita.

07:15.170 --> 07:24.130
Dacă mă duc la "CardList", doar citește recuzele pe care le primește și doar redă ceva. Si acesta-

07:24.130 --> 07:33.340
fluxul de date este foarte frumos deoarece acest "CardList" este o funcție pură. Primeste o intrare si apoi

07:33.400 --> 07:37.370
întoarce întotdeauna aceeași ieșire

07:37.660 --> 07:42.760
Deci, dacă roboții sunt întotdeauna la fel, întotdeauna se va întoarce același lucru

07:42.820 --> 07:48.430
Sunt funcții deterministe, pure și este ceva despre care am vorbit înainte. Și asta este într-adevăr

07:48.430 --> 07:49.720
lucru foarte bun.

07:49.810 --> 07:56.200
Aceste componente sunt ceea ce se numește "componente pure", iar unele chiar numesc "componente nemaipomenite"

07:56.200 --> 08:01.480
Înseamnă doar că nu au nevoie să știe nimic altceva decât faptul că sunt curați

08:01.480 --> 08:04.680
funcții care primesc ceva și returnează ceva.

08:05.200 --> 08:11.480
Și acest lucru este foarte frumos, pentru că întotdeauna știm cum va arăta acest lucru și tot ce aveam

08:11.540 --> 08:12.870
până în acest moment

08:13.250 --> 08:18.640
Dar acum trebuie să ne facem griji cu privire la altceva decât la recuzită

08:18.740 --> 08:22.840
Propsul nu se schimbă niciodată. Recuzătorii sunt întotdeauna doar intrări pe care le primim

08:22.850 --> 08:24.370
și nu le-am modificat niciodată

08:25.180 --> 08:29.490
Dar în acest caz avem nevoie de o memorie în aplicația noastră

08:29.680 --> 08:36.150
Avem nevoie de acest lucru pentru a comunica cu acest lucru, și, de asemenea, schimba și actualiza în consecință

08:36.340 --> 08:44.380
Și asta este "statul" în React. "State" - și veți auzi acest lucru în programarea pe calculator foarte mult - pur și simplu înseamnă

08:45.340 --> 08:54.060
descrierea aplicației dvs. O "stare" este pur și simplu un obiect - un obiect care descrie aplicația dvs.

08:54.430 --> 09:02.650
Iar această "stare" care descrie cererea noastră este robotul și orice a fost introdus în caseta de căutare

09:04.110 --> 09:07.020
și "statul" este capabil să se schimbe

09:07.110 --> 09:13.020
Putem modifica valoarea casetei de căutare, valoarea intrării și putem schimba valoarea

09:13.060 --> 09:15.190
robotul înseamnă mijloace

09:15.210 --> 09:17.190
Ce se afișează

09:17.290 --> 09:19.390
Aceasta este o regulă pe care tocmai trebuie să o ții minte

09:19.570 --> 09:26.330
Propsurile sunt pur și simplu lucruri care ies din "stat"

09:26.440 --> 09:34.570
Deci, un părinte alimentează "statul" într-o componentă a copilului și de îndată ce o componentă copil (componente) primește o

09:34.580 --> 09:42.460
"stat" este o proprietate. Acest copil nu poate niciodată să schimbe acea proprietate. Părintele îi spune doar ce înseamnă "statul"

09:42.460 --> 09:47.630
este și copilul îl primește ca "roboți"

09:47.650 --> 09:58.090
Deci, primul lucru pe care trebuie să-l facem este să începem să folosim "statul" în aplicația noastră, descrierea a ceea ce

09:58.600 --> 10:00.650
statul nostru ar trebui să fie

10:00.670 --> 10:07.960
Deci, hai să facem o "stare" constantă pentru moment și să vă arătăm că "statul" nostru trebuie să aibă o matrice "robot"

10:08.410 --> 10:14.360
și trebuie să aibă, să o numim "câmp de căutare"

10:14.610 --> 10:18.530
Și asta este exact ceea ce are nevoie domeniul nostru de căutare

10:18.840 --> 10:25.500
Dar pentru a folosi "statul" trebuie să ne întoarcem la modul nostru original în care am creat componentele React. Dacă

10:25.500 --> 10:37.990
vă amintiți acest lucru, când am creat pentru prima dată "crearea aplicației React", vom crea o clasă și vom face asta spunând "export

10:38.380 --> 10:40.420
implicit "sau" export "

10:46.710 --> 10:51.540
extinde React.Component "

10:51.670 --> 11:02.640
Se extinde clasa "Component", iar din nou putem folosi stenograma aici si doar sa spunem ... Deci, acum putem sa eliminam

11:02.640 --> 11:03.630
Reactați de aici

11:04.510 --> 11:14.830
Și aceasta are întotdeauna o funcție de randare care trebuie să returneze ceva, ceea ce este acesta

11:18.990 --> 11:28.750
Din nou, este doar sintaxa pe care trebuie să o obișnuiți. Deci, dacă salvez acest lucru - oh, și am făcut o greșeală aici

11:28.750 --> 11:30.580
de "export" ar trebui să spună "clasa"

11:30.790 --> 11:36.720
Deci, da, "clasa App extinde Component" și apoi facem "App default export";

11:36.730 --> 11:43.750
Din nou, noi declarăm doar o clasă. Salvez și avem doar ceva care spune că "statul este atribuit

11:43.750 --> 11:46.590
o valoare, dar niciodată folosită "

11:46.740 --> 11:48.270
Asta pentru că este destul de adevărat

11:48.270 --> 11:49.150
noi nu o folosim

11:49.200 --> 11:53.000
Cum putem adăuga "stat"? Ei bine, în React

11:53.010 --> 11:56.030
pur și simplu facem un constructor

11:56.040 --> 11:58.600
S-ar putea să vă amintiți acest lucru de când am vorbit despre obiecte

11:59.630 --> 12:05.130
Și constructorul, aici putem declara statul

12:05.330 --> 12:21.400
Spunem pur și simplu "thisstatestate", și aici am pus tot ce vrem să aibă statul nostru

12:21.400 --> 12:24.630
Deci, dacă salvez acest lucru, o să-l găsesc

12:24.700 --> 12:27.610
"" acest lucru nu este permis înainte de super () "

12:27.610 --> 12:34.010
Din nou, ceva ce ați putea să vă amintiți din videoclipurile cu obiecte avansate pentru a utiliza "acest"

12:34.300 --> 12:42.890
trebuie să facem acest lucru ciudat unde numim "super ()" care cheamă constructorul componentei

12:43.090 --> 12:49.890
Dacă fac asta și salvez, totul funcționează bine

12:49.960 --> 13:00.810
Și acum avem "statul" nostru, care este roboți și câmp de căutare, iar acest "stat" așa cum am spus mai devreme este ceea ce

13:00.810 --> 13:02.220
descrie aplicația noastră

13:02.220 --> 13:07.590
Acestea sunt lucrurile care se pot schimba, și asta este acea "stare" - ceva care se poate schimba și afecta

13:07.860 --> 13:08.720
aplicația noastră

13:10.320 --> 13:17.160
De obicei, aceștia trăiesc în componenta părinte, componenta care este părintele care trece doar

13:17.180 --> 13:19.550
"stat" la diferite componente

13:19.550 --> 13:29.210
Și acum pot accesa "roboții", nu de aici, ci de la "acest stat. Robots"

13:29.310 --> 13:34.100
Și din nou, doar sintaxa React pe care va trebui să o obișnuiți

13:34.270 --> 13:34.540
In regula

13:34.550 --> 13:37.180
Deci totul funcționează așa cum era de așteptat

13:37.490 --> 13:47.210
Și vedeți că statul nostru, care este "roboți", este acum transferat ca "recuzită", astfel încât "CardList" acceptă "roboți"

13:47.330 --> 13:50.550
ca "recuzită" chiar dacă în app.js

13:50.690 --> 13:59.090
este un "stat". Și așa cum am spus, deoarece "App" deține acum "stat" care include "roboți"

13:59.180 --> 14:02.540
este permis să-l schimbe. O.K

14:02.630 --> 14:11.530
Acum, modul în care le putem comunica, avem aceste două văi și, în mod ideal, în căsuța de căutare am ceva

14:11.530 --> 14:19.930
numit "onSearchChange ()", care din nou este o funcție pe care o voi face

14:20.500 --> 14:23.170
Acesta este doar un nume aleator pe care l-am creat

14:23.650 --> 14:30.250
Și "onSearchChange ()" Vreau să spun că de fiecare dată când se schimbă intrarea, la fel ca în cazul manipulării DOM,

14:30.670 --> 14:37.580
avem un eveniment și în cadrul acestui eveniment o să "console.log" acest eveniment

14:41.430 --> 14:44.590
Am creat o funcție și vreau

14:44.590 --> 14:48.740
de fiecare dată când această intrare se modifică pentru a declanșa "console.log"

14:49.170 --> 14:58.890
Așa că putem trece acum de fapt. Pot spune "searchChange = [onSearchChange]", dar din nou pentru asta

14:58.890 --> 15:09.090
este un obiect pe care trebuie să-l spunem "acest lucru". astfel încât se spune "acest" (care este "App") ".onSearchChange" este "searchChange"

15:10.110 --> 15:17.760
Dacă salvez acest lucru și merg acum la caseta de căutare, acum am "searchChange"

15:21.590 --> 15:25.910
ca o funcție, așa că pot să spun doar, la fel ca în HTML -

15:25.930 --> 15:32.110
Amintiți-vă în HTML pot face "onchange html", este un eveniment,

15:32.170 --> 15:36.040
suntem doar ascultați "oricând modificările de intrare"

15:36.260 --> 15:39.720
Deci pot spune "onChange ="

15:42.420 --> 15:43.980
"[SearchChange]"

15:43.980 --> 15:45.600
Să vedem dacă funcționează

15:45.690 --> 15:46.730
Nu primesc nici o eroare

15:46.740 --> 15:53.290
Dacă mă întorc la aplicația mea, deschid consola și introduc ceva și uita-te la asta!

15:53.340 --> 16:01.120
Înțeleg evenimentul. Și acesta este doar ceva ce trebuie să vă amintiți este că cu un eveniment ne întotdeauna

16:01.120 --> 16:09.170
au "event.target.value" care ar trebui să ne dea valoarea termenului de căutare

16:09.190 --> 16:13.580
Să salvăm asta și să tastăm ceva aici

16:15.160 --> 16:19.960
Uită-te la asta! Observăm acum diferența pe măsură ce tastăm

16:20.000 --> 16:22.760
Deci, hai să trecem încă o dată ce sa întâmplat

16:23.650 --> 16:25.640
Și din nou știu că e greu

16:25.660 --> 16:31.170
Acest lucru mi-a luat un timp pentru a obține atunci când am început, dar această diagramă explică într-adevăr bine

16:32.080 --> 16:34.180
Am componenta aplicației mele

16:34.180 --> 16:43.940
Caseta mea de căutare și lista mea de cărți. Ori de câte ori se va schimba caseta de căutare, la schimbare voi face această funcție

16:43.940 --> 16:48.620
pentru a numi această funcție

16:48.630 --> 16:51.020
Și așa cum o numim noi, adăugăm asta

16:51.100 --> 16:58.240
Rețineți că atunci când am făcut evenimente DOM, am definit funcția și apoi de fiecare dată când evenimentul se întâmplă

16:58.240 --> 16:59.490
ar suna.

16:59.920 --> 17:08.720
Așa că spunem de fiecare dată când evenimentul onchange este declanșat, sunați la funcția de modificare a căutării

17:08.950 --> 17:16.330
Și dacă vă aduceți aminte că funcția de schimbare a căutării, care este o propunere, este funcția "onSearchChange"

17:16.330 --> 17:17.460
este definită în aplicație

17:17.470 --> 17:19.470
Așa comunicăm cu părintele

17:19.510 --> 17:24.880
Aceasta declanșează evenimentul, părintele spune "Oh, rulați această funcție"

17:25.060 --> 17:29.810
Și acum această funcție se execută

17:29.940 --> 17:39.150
Dar acum că am valoarea intrărilor de căutare, acum pot comunica în mod direct acea intrare de căutare

17:39.330 --> 17:41.110
lista "roboți"

17:41.130 --> 17:42.660
Să vedem cum funcționează

17:42.720 --> 17:55.950
Putem crea o variabilă, să spunem "filteredRobots", și aceasta va fi egală cu "this.state.robots"

17:57.980 --> 18:00.190
și acest "roboți", care este matricea

18:00.230 --> 18:08.240
- din nou modul în care accesăm "statul" - se va folosi "filtrul", filtrarea matricei noastre

18:08.410 --> 18:17.290
Îi oferim "roboți", iar acum matricea noastră va trebui să restituie o condiție, iar condiția va fi

18:18.820 --> 18:19.530
„roboți“

18:19.560 --> 18:28.400
".name" și vom face ceva pe care nu l-am văzut înainte, care este "to.LowerCase"

18:28.720 --> 18:33.850
Și aceasta este o metodă care vine cu toate șirurile, și face totul cu litere mici

18:33.880 --> 18:39.840
Și acest lucru este bun pentru comparații, așa că nu trebuie să comparăm capitalizarea sau literele mici

18:39.990 --> 18:51.640
Și dacă "numele" "roboților", care este acum inferior, "include" - este o altă metodă și din nou este pre-construită

18:51.700 --> 18:58.450
în javascript - dacă include "câmpul de căutare"

18:58.610 --> 19:02.940
Și din nou vrem să facem "toLowerCase" în caz

19:03.140 --> 19:08.140
Ei bine, în cazul în care folosim capitale sau litere mici, funcționează în ambele sensuri

19:08.510 --> 19:09.260
Și acolo este

19:09.470 --> 19:16.370
Dacă numele roboților cu litere mici include - și acest lucru face comparația -

19:16.530 --> 19:26.400
dacă ceva din șirul include "toLowerCase", atunci returnați doar roboții care revin la adevărat

19:26.400 --> 19:29.220
la acest. Să salvăm -

19:29.270 --> 19:33.240
- Oh, și tu vezi cum ai obținut "câmpul de căutare" pentru că, bine, e parte a statului

19:33.260 --> 19:38.190
Trebuie să fac "acest câmp de căutare.

19:38.400 --> 19:42.150
Dacă salvez asta, înțeleg

19:42.150 --> 19:44.720
"" filtratRobot "este atribuită o valoare, dar nu a folosit niciodată"

19:44.850 --> 19:49.240
Dar nu-ți face griji, acum putem consola să înregistrăm și să vedem ce obținem

19:51.320 --> 19:59.970
dacă salvez și să ne întoarcem la aplicația noastră și dacă caut ceva aici, o eroare

20:00.110 --> 20:03.510
Și aceasta este o eroare foarte confuză

20:03.530 --> 20:05.010
Este dificilă prima dată

20:05.120 --> 20:06.490
Dar purtați-mă cu mine aici

20:06.620 --> 20:11.700
Problema acum este că valoarea "acestui"

20:12.260 --> 20:23.090
bine nu se referă la "App", deoarece evenimentul sa întâmplat în "intrare", valoarea "this" este, bine,

20:23.090 --> 20:28.040
intrarea și "intrarea" nu are "state.robots"

20:28.490 --> 20:35.050
Și acesta este un truc pe care îl uitați mereu, dar țineți minte acest lucru ca o regulă

20:36.060 --> 20:43.740
Cu tot ce vine de la React, constructorul și renderul sunt pre-construite în React, oricând

20:43.740 --> 20:54.100
faceți propriile metode pe o componentă, utilizați această sintaxă, astfel încât săgețile funcționează și acest lucru vă asigură că "acest"

20:54.100 --> 20:58.020
valoarea este în funcție de locul în care a fost creat, care este "App"

20:58.210 --> 20:59.320
Știu că este confuz

20:59.320 --> 21:00.610
Puteți citi mai multe despre el

21:00.610 --> 21:02.280
O să las o resursă pentru asta

21:02.290 --> 21:06.280
Este un subiect dur pentru a obține, dar din nou, regula degetului mare -

21:06.280 --> 21:07.260
utilizați săgețile

21:07.300 --> 21:16.550
Dacă fac acest lucru acum și fac clic, acolo te duci - acum primesc "roboți"

21:16.600 --> 21:18.250
Dar iată ce e

21:18.250 --> 21:24.610
Searchfield chiar acum - vedeți că mai am încă 10 roboți, nu filtrează nimic

21:24.880 --> 21:31.570
Și asta pentru că "câmpul meu de căutare" este întotdeauna un șir gol. Pentru actualizarea stării

21:31.660 --> 21:40.890
din nou, o altă regulă a Reactului este de a face "this.setState", și este din nou o metodă care vine cu React

21:40.900 --> 21:47.680
Și oricând doriți să schimbați statul, faceți întotdeauna acest lucru, nu faceți "this.state.searchfield ="

21:47.770 --> 21:49.290
- Niciodată nu faci asta

21:49.300 --> 22:00.280
Trebuie să faceți "this.setState", iar aici trebuie să spunem că "câmpul de căutare este ..." - și din nou folosim

22:00.280 --> 22:06.460
un obiect, așa că "câmpul de căutare va fi acum" event.target.value "

22:08.480 --> 22:20.870
Dacă salvez acest lucru și mă întorc, vezi că acum totul este filtrat

22:20.930 --> 22:26.130
Așa că schimba statul astfel încât "câmpul de căutare" să fie întotdeauna actualizat

22:26.150 --> 22:30.770
iar acum filtrează roboții în funcție de "câmpul de căutare" modificat

22:33.330 --> 22:33.620
O.K

22:33.640 --> 22:37.320
Deci, un ultim lucru. Privind la asta

22:37.570 --> 22:42.250
Avem faptul că roboții de filtrare nu sunt încă atribuite și ai dreptate

22:42.400 --> 22:48.400
Dacă ne uităm la acest lucru, am comunicat acum caseta de căutare cu aplicația și avem câmpul de căutare în mod constant

22:48.400 --> 22:48.940
schimbare

22:48.940 --> 22:56.740
Deci, acum trebuie să-i comunicăm "filtrele roboților". Ce putem face este că "filtrele roboți" pot acum

22:56.740 --> 23:02.350
să fie folosite ca elemente de recuzită în loc de "thisstatestate.robots"

23:02.350 --> 23:03.100
Deci, să facem asta

23:03.160 --> 23:06.910
Hai să mutăm aici jos

23:10.430 --> 23:17.060
Și acum avem acces la "filtrele roboților" și, în loc să trecem prin "this.state.robots", pur și simplu trecem

23:17.690 --> 23:19.970
"filteredRobots"

23:20.120 --> 23:23.670
Dacă salvez acest lucru, asigurați-vă că și partea de căutare a fost salvată

23:23.930 --> 23:29.940
Și acum mă întorc. Voi închide fila și să verificăm

23:33.200 --> 23:34.280
Uită-te la asta

23:34.430 --> 23:37.420
Aplicația noastră funcționează

23:37.610 --> 23:38.610
Cat de tare e asta

23:39.960 --> 23:43.230
Să mergem încă o dată pentru a vă arăta exact ceea ce face

23:45.150 --> 23:52.110
Avem componenta "App" care are două stări - "roboți" și "câmp de căutare"

23:52.300 --> 24:01.120
Și deoarece "App" deține statul, orice componentă care are "stat" folosește sintaxa "clasă" pentru a putea folosi

24:01.150 --> 24:08.930
"constructor" funcția de a crea "this.state", și această "stare" este ceea ce modificări într-o aplicație

24:08.950 --> 24:11.380
Este ceea ce descrie aplicația

24:11.380 --> 24:16.840
Amintiți-vă când am spus că DOM-ul virtual este doar un obiect javascript? DOM virtual este doar un obiect care

24:16.840 --> 24:27.190
colectează întreaga stare și React folosește această stare pentru a le face și a le îndepărta ca elemente de recuzită la acestea

24:27.190 --> 24:32.740
astfel încât aceste componente care sunt doar funcții pure pot face doar

24:32.940 --> 24:38.010
Și întotdeauna știm că aplicația va arăta la fel pentru că, ei bine, sunt doar simple funcții pure

24:39.350 --> 24:44.500
Noi gestionăm această stare aici, aplicația este singurul lucru care poate schimba această stare

24:44.630 --> 24:52.880
Dar poate trece lucruri precum recuzita, asa ca am trecut "onSearchChange" la "SearchBox", iar

24:52.880 --> 24:56.720
"SearchBox", de fiecare dată când există o "onChange" pe intrare,

24:56.720 --> 24:59.760
permite aplicației să știe "Hei, a existat o schimbare"

24:59.840 --> 25:00.840
"Porniți această funcție"

25:01.040 --> 25:07.570
Funcționează cu evenimentul și actualizează starea câmpului de căutare la ceea ce introducem

25:09.600 --> 25:15.720
Acum, cu informațiile pe care le avem din caseta de căutare, putem comunica acum lista de carduri și

25:15.720 --> 25:26.100
spune-i "Hei, vreau să filtrează starea" roboților "pentru a avea acum doar ceea ce include în" câmpul de căutare "

25:27.030 --> 25:34.970
și în loc să treacă acel "stat." către "robotii" noștri, am trecut doar pe "filtrele roboților"

25:35.130 --> 25:39.000
S-ar putea să te întrebi "Ei bine," roboții "nu se schimbă niciodată, nu-i așa?

25:39.000 --> 25:43.620
"Noi întotdeauna creăm doar o nouă matrice numită" filterRobots "și noi întotdeauna trecem asta"

25:43.680 --> 25:46.540
"Trebuie să fie o parte a statului"

25:47.020 --> 25:53.550
Și nu chiar acum, pentru că avem doar un "roboți" codificați greu, dar când vom ajunge mai târziu în

25:53.550 --> 25:56.080
Desigur, veți vedea că nu este cazul

25:56.220 --> 26:02.550
De cele mai multe ori primești utilizatorii sau roboții dintr-un alt loc prin intermediul internetului în care se află

26:02.550 --> 26:08.610
vom avea nevoie de "roboți" pentru a trece de la o matrice goală la o matrice

26:08.610 --> 26:14.480
după ce mergem și luăm toți utilizatorii noștri

26:14.750 --> 26:15.410
Whoo! In regula

26:15.530 --> 26:16.850
A fost foarte mult

26:16.880 --> 26:23.000
Știu că sunt o mulțime de informații, o mulțime de sintaxă nouă, dar după cum puteți vedea, cu câteva linii de

26:23.000 --> 26:30.320
codul am construit o aplicație destul de minunată. În următorul videoclip vom termina acest lucru și vom finaliza

26:30.320 --> 26:30.660
aplicaţia

26:30.680 --> 26:33.490
așa că pare atât de drăguță ca asta

26:33.560 --> 26:35.130
Ne vedem în acel. Pa!
