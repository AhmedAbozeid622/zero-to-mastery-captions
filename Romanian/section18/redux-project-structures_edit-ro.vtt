WEBVTT

00:01.120 --> 00:01.800
In regula.

00:01.810 --> 00:06.000
Așa că am lucrat redux, bine cu aplicația noastră.

00:06.100 --> 00:09.160
Tocmai am învățat o minunată bibliotecă.

00:09.580 --> 00:12.510
Sper că toată lumea se simte bine. Acum,

00:13.030 --> 00:15.890
Vreau să adaug câteva lucruri.

00:15.940 --> 00:23.530
Evident, acesta este un exemplu simplu. Dar fundamentele sunt acolo. Folosind aceste principii, puteți

00:23.530 --> 00:27.560
plecați și construiți, aplicații mai mari și mai mari.

00:27.970 --> 00:32.090
Dar după cum am scris acest lucru, ați fi observat câteva lucruri.

00:32.230 --> 00:32.850
Unu,

00:33.100 --> 00:42.170
bine, să ne uităm aici la structura dosarului nostru. Ne putem imagina pe masura ce creste aplicatia pe care o vom obtine

00:42.410 --> 00:44.540
mai mare și mai mare și mai mare.

00:44.690 --> 00:49.460
Și, de fapt, o să-ți demonstrez mai târziu în curs, când lucrăm la asta

00:49.460 --> 00:57.920
smart brain app. În cazul în care începem să încărcăm aplicația noastră js, cu o mulțime de funcții.

00:57.920 --> 01:00.100
Și nu folosim redux pentru asta.

01:00.200 --> 01:06.660
Deci, acest fișier devine mai lung și mai lung cu noi metode și noi metode și metode noi.

01:06.690 --> 01:16.350
Acum, având o componentă de container, care are o componentă conectată. O componentă care știe asta

01:16.410 --> 01:22.790
magazinul redux există și ascultă recuzită și trimite acțiuni din el.

01:22.830 --> 01:26.100
Păi, având doar una nu este realistă.

01:26.130 --> 01:33.570
Cel mai probabil veți avea mai multe containere. Dar din cauza felului în care works redux, asta e corect

01:33.570 --> 01:34.570
usor de facut.

01:34.620 --> 01:42.300
Putem folosi doar conecta și alege și alege ce componente, dorim să ne conectăm la magazinul redux.

01:42.660 --> 01:46.960
Și dacă vrem, două containere să ne vorbim unii cu alții,

01:47.280 --> 01:50.670
bine, foarte simplu, le conectăm.

01:50.850 --> 01:58.030
Și pentru că magazinul se află deasupra tuturor celorlalte, suntem capabili să obținem acele informații de stat.

01:58.950 --> 02:01.420
Astfel, comunicarea este foarte ușoară.

02:01.770 --> 02:08.790
Deci, evident, dorim să avem containere de genul acesta. Și simple componente de prezentare care sunt bune

02:08.790 --> 02:13.940
pur funcții, care primesc doar elemente de recuzită și render.

02:14.050 --> 02:20.650
Cu toate acestea, pe măsură ce creștem tot mai multe componente și mai multe containere, începe să aibă sens

02:20.650 --> 02:26.710
nu au un singur fișier "constante", un fișier de acțiuni și un fișier de "reduceri".

02:27.010 --> 02:33.670
Vă puteți imagina că acestea devin tot mai mari și mai mari și mai mari. Și veți vedea proiecte care au o "acțiune"

02:33.670 --> 02:37.470
folder, un dosar "constante" și un folder "reducers".

02:37.630 --> 02:41.820
Dar eu personal îmi place modul component de a face lucrurile.

02:42.160 --> 02:46.260
Adică grupați totul în funcție de componentă.

02:46.420 --> 02:53.630
De exemplu, creați un punct de aplicație js sau să spunem că există o componentă de câmp de căutare inteligentă.

02:54.010 --> 02:59.920
Vom crea un dosar numit "câmp de căutare" și că dosarul "câmp de căutare" va avea toate

02:59.920 --> 03:03.670
componentele de prezentare DOM pe care le are nevoie.

03:03.670 --> 03:06.730
Va avea toate "acțiunile" de care are nevoie în acțiunea dot

03:06.790 --> 03:10.060
js. Va avea tot "reductorul" de care are nevoie.

03:10.180 --> 03:12.780
Și va avea tot atâtea constante

03:13.000 --> 03:19.810
are nevoie. Deci fiecare dosar reprezintă o componentă, o bucată din site-ul nostru și este cuplată împreună

03:20.080 --> 03:21.760
într-un dosar mic.

03:21.760 --> 03:26.400
Deci, dacă vreodată vrem să împărtășim codul, va fi destul de ușor de făcut.

03:26.410 --> 03:32.850
De asemenea, este foarte frumos să te gândești așa. În loc de a avea aceste nume masive de dosare generale.

03:33.020 --> 03:35.840
Și asta veți vedea cu cele mai multe proiecte mari.

03:35.840 --> 03:43.190
Această idee a componentelor, care au dosare proprii, aceste containere care au din nou dosarele lor proprii,

03:43.190 --> 03:45.950
precum și reductoare și acțiuni.

03:46.100 --> 03:52.130
În acest fel, puteți citi structura folderului și puteți decide unde doriți să faceți o rezolvare a unei erori

03:52.130 --> 03:53.670
sau creați o funcție nouă.

03:55.690 --> 03:59.010
De asemenea, doriți să evitați repetarea codului la fel de mult.

03:59.170 --> 04:03.940
De exemplu, în majoritatea aplicațiilor, vom avea o mulțime de apeluri.

04:04.210 --> 04:11.800
Deci, nu ar fi grozav, dacă am avea un dosar API aici, care face apelul de preluare, poate îl vom numi API,

04:11.920 --> 04:20.740
'get API' și tot ceea ce trebuie să facem este să treci o funcție, și această funcție va trece acea url

04:20.740 --> 04:24.130
funcția de preluare și va face și asta

04:24.160 --> 04:27.120
pentru noi. Deci, doar va reveni la date.

04:27.130 --> 04:36.170
Așadar, repetăm, deci nu mai repetăm ​​toate aceste fetch punct, apoi punct și apoi punct de captură. Deci, gândirea în termeni de

04:36.230 --> 04:40.550
organizarea dosarelor, la ceva care are sens, ceva care poate fi scalabil.

04:40.760 --> 04:47.270
Și dacă cineva vine la proiect, îi ușurează să le urmărească și să le citească, este o metodă bună

04:47.270 --> 04:50.030
facand lucruri.

04:50.050 --> 04:52.390
Bine, asta e de ajuns pentru acum.

04:52.390 --> 04:53.900
Ne vedem în următorul videoclip.

04:53.910 --> 04:54.380
Pa! Pa