WEBVTT

00:01.060 --> 00:09.590
Bine ați revenit în videoclipurile anterioare despre HTTP și JSON. Am aflat că putem trimite cereri

00:09.650 --> 00:14.830
și primește răspunsuri. Dar există o problemă. Până în prezent

00:14.920 --> 00:23.720
de fiecare data cand avem nevoie sa comunicam cu serverul pe care il facem atunci cererea atunci cand acesta primeste

00:23.870 --> 00:29.930
răspunsul face o reîmprospătare a paginii. Iniţial

00:30.810 --> 00:35.710
încărcarea paginilor pe web a fost simplă, ați trimite o solicitare pentru un site web către un server.

00:35.940 --> 00:43.350
Și atâta timp cât nu sa întâmplat nimic, activele vor fi descărcate de pagina web și afișate pe pagina ta

00:43.350 --> 00:44.150
calculator.

00:45.280 --> 00:51.820
Problema cu acest model este că ori de câte ori doriți să actualizați toate părțile paginii, de exemplu, afișați

00:51.820 --> 00:59.390
un nou set de produse ca pe Amazon. Ei bine, va trebui să încărcați din nou întregul program,

00:59.510 --> 01:09.050
chiar și conturul, chiar și bara de navigare din partea de sus. Totul a trebuit să fie reîncărcat - o reîmprospătare completă a paginii.

01:09.080 --> 01:16.070
Acest lucru este extrem de risipitor și duce la o experiență slabă a utilizatorului, mai ales când paginile devin mai mari și mai mult

01:16.070 --> 01:17.770
complex.

01:17.930 --> 01:20.220
Puteți să vă gândiți la acest lucru pe site-ul Udemy.

01:20.810 --> 01:34.640
Dacă mergem la Udemy, dacă fac clic pe să spun marketing, bara de sus va rămâne. Ai văzut asta?

01:34.640 --> 01:37.230
Este o experiență plăcută pentru utilizatori.

01:37.520 --> 01:41.500
Pot să fac clic pe file și nu voi primi o actualizare completă a paginii.

01:41.510 --> 01:48.630
Este-chiar se încarcă automat datele pe pagină.

01:48.640 --> 01:55.450
Acum, această problemă pe care am avut-o aici a condus la crearea de tehnologii care permit paginilor web să solicite mici

01:55.450 --> 02:04.520
bucăți de date, cum ar fi HTML, XML, text simplu, JSON și le afișați numai atunci când este necesar.

02:05.740 --> 02:07.990
Ajutând rezolvarea acestei probleme de reîmprospătare.

02:09.340 --> 02:14.010
Și tehnologia era numită AJAX.

02:14.040 --> 02:22.470
Vă permite să citiți de pe un server web după încărcarea paginii și să actualizați o pagină web fără a reîncărca

02:22.470 --> 02:31.610
pagina. Și în final trimiteți date în fundal în timp ce utilizatorul interacționează cu site-ul Web.

02:31.660 --> 02:40.000
A fost de fapt pionierat de Google în 2006 și acum este ceea ce ne așteptăm de la site-urile web și orice aplicație web pe care o faceți

02:40.000 --> 02:42.790
vezi online foloseste Ajax acum.

02:42.800 --> 02:50.920
Vedeți că Google avea această problemă mare atunci când căutăm ceva, bine, ați tasta inițial

02:50.920 --> 02:56.430
în "Apple" și ar face o reîmprospătare completă a paginii.

02:56.430 --> 03:03.270
Dar acum, cu asta pot să mențin bara de sus și să fiu încărcat.

03:03.410 --> 03:05.050
Am chiar sugestii

03:07.980 --> 03:09.190
A venit de pe server.

03:09.300 --> 03:17.070
Și acesta este tot un răspuns de la server spunând că acestea sunt câteva dintre sugestiile bazate pe

03:17.080 --> 03:18.200
Magazin Apple.

03:18.650 --> 03:24.410
Deci a fost o mare problemă pentru Google și au reușit să o rezolve cu Ajax, dar acum toți avem acest lucru

03:24.410 --> 03:25.650
abilitate.

03:25.670 --> 03:27.530
Deci, cum putem face acest lucru.

03:27.530 --> 03:37.430
"Ce este Ajax?" AJAX este doar o tehnologie - o metodă de combinare a pieselor împreună pentru a realiza acest lucru.

03:37.590 --> 03:46.280
Și a fost realizat utilizând un instrument creat de browsere și a fost numit cerere XML HTTP.

03:46.620 --> 03:49.670
Părea cam așa.

03:50.130 --> 03:58.110
Ați creat un nou obiect cerere XML HTTP. După cum vedeți, pare cam greu.

03:58.980 --> 04:08.810
Faceți o solicitare - faceți o solicitare de solicitare la această adresă URL pe care o declarați încărcată atunci când se încarcă. În cazul în care

04:08.810 --> 04:15.200
starea răspunsului este mai mare de 200 sau mai mică de 400.

04:15.200 --> 04:16.300
Este un succes.

04:16.310 --> 04:25.880
Vom analiza textul de răspuns, pentru că primim un șir de pe server. Daca este

04:25.880 --> 04:36.640
nu este un succes, putem returna o eroare și apoi trimitem cererea noastră și ascultați și pentru orice eroare.

04:37.320 --> 04:44.440
Arată destul de greu, dar lucrurile pe care le-am trecut. Dar nu vă faceți griji că nu facem asta

04:44.440 --> 04:44.770
mai.

04:44.770 --> 04:49.560
Acesta a fost modul vechi de a face acest lucru atunci când Ajax a fost introdus pentru prima dată.

04:49.570 --> 04:52.980
jQuery a venit și a spus bine că este destul de greu de făcut

04:52.980 --> 04:58.320
de fiecare data. Vom face mai ușor pentru dvs. doar făcând asta.

04:58.550 --> 05:01.820
Și aceasta a fost o altă parte a motivului pentru care jQuery a fost popular.

05:01.820 --> 05:05.700
Putem face doar cereri Ajax făcând această metodă.

05:06.050 --> 05:11.690
Dar acum există de fapt o cale mai nouă și mai frumoasă pe care am folosit-o de fapt atunci când ne construim reacția noastră

05:11.690 --> 05:17.220
app și este susținută de browsere și se numește preluare.

05:17.510 --> 05:26.930
După cum vă amintiți, a fost preluat de la adresa URL și apoi am făcut acest "răspuns (răspuns)" și am primit un răspuns.

05:26.930 --> 05:31.790
Acum este un lucru foarte bun deoarece actualizările paginilor sunt mult mai rapide și nu trebuie să așteptați

05:31.790 --> 05:33.140
pagina pentru reîmprospătare.

05:33.140 --> 05:36.660
Înseamnă că site-ul se simte mai rapid și mai receptiv.

05:38.390 --> 05:44.250
De asemenea, mai puțin date sunt descărcate pe fiecare actualizare, adică mai puțină lățime de bandă pierdută.

05:44.750 --> 05:50.840
Și aceasta este o problemă majoră, mai ales pe dispozitivele mobile, în care conexiunea la internet ar putea să nu fie

05:50.840 --> 05:52.460
la fel de bun.

05:52.580 --> 06:03.370
Ajax permite paginilor web și, prin extensie, aplicațiilor web să modifice dinamic conținutul și este peste tot.

06:04.080 --> 06:06.510
Este ceva foarte frumos.

06:06.510 --> 06:14.140
Se pare intimidant, dar este doar o chestiune de a face această preluare care face HTTP pentru tine și pentru tine

06:14.140 --> 06:21.090
nu se spune daca vrei sa faci un GET, un POST si sa adaugi cateva date JSON la acea cerere.

06:21.220 --> 06:29.460
Deci, să revizuim din nou ce se întâmplă cu Ajax. Un eveniment apare pe o pagină web, cum ar fi conectarea și eu

06:29.460 --> 06:34.200
faceți clic pe conectați. XML cerere HTTP object-

06:34.290 --> 06:41.280
Din nou, ceva ce au implementat browserele web este creat și este creat folosind javascript.

06:41.560 --> 06:49.800
Obiectul cererii HTTP XML trimite o cerere serverului web serverul procesează cererea și apoi

06:49.920 --> 06:54.500
serverul trimite un răspuns înapoi la pagina web.

06:54.590 --> 07:03.650
Răspunsul este citit de javascript și utilizatorul se poate conecta. În același timp, numai actualizarea unui mic

07:03.650 --> 07:06.490
porțiune a ferestrei.

07:06.530 --> 07:12.380
Aceasta este ceea ce este o aplicație pentru o singură pagină și un cuvânt pe care probabil l-ați auzit înainte și este o tendință

07:12.410 --> 07:21.770
în modul de a face aplicații web. În cazul în care încărcați o bază aproape o pagină goală și construiți conținutul în zbor

07:21.770 --> 07:25.010
pe baza datelor extrase de pe server.

07:25.010 --> 07:27.790
Să ne întoarcem la tine Udemy.

07:27.900 --> 07:36.270
Când fac clic pe un curs, să facem "relații publice", vedeți că se încarcă una câte una. am avut

07:36.810 --> 07:38.040
bara de sus încărcată.

07:38.160 --> 07:41.350
Apoi am făcut o pauză și apoi restul încărcat.

07:41.400 --> 07:45.900
Dacă dau clic pe "Explorează curs" vei vedea din nou că bara de sus încărcată.

07:45.930 --> 07:50.540
Alte părți ale sitei se încarcă încet dinamic.

07:50.620 --> 07:59.820
Și din nou, dacă mă întorc la "fotografie", de exemplu, din nou părți ale paginii web se încarcă dinamic și asta e

07:59.820 --> 08:06.890
frumusetea. Aceste aplicații nu fac niciodată o reîncărcare completă, distrugând conținutul anterior sau toate

08:06.890 --> 08:12.270
o parte din acesta și o construim pe baza unor date noi - pagină nouă.

08:12.470 --> 08:14.760
Și s-ar putea să ți se pară familiar.

08:15.720 --> 08:19.350
Vă amintiți cum am construit aplicația noastră "prietenii".

08:19.740 --> 08:24.950
Am preluat această adresă URL care ne-a oferit utilizatorilor.

08:25.330 --> 08:30.260
Deci, acum că înțelegem aceste concepte, hai să mergem în linie și să vedem ce se întâmplă.

08:30.280 --> 08:34.790
Am folosit fetch - bazat pe ceea ce am spus, Fetch ar trebui să facă parte din obiectul ferestrei, nu?

08:34.990 --> 08:41.500
Sa verificam. Dacă deschid consola și eu o fac

08:41.730 --> 08:43.870
"windows.fetch" da

08:43.940 --> 08:53.520
fetch este o funcție pe care o putem folosi și această adresă URL dacă vă aduceți aminte că revine pentru noi -

08:53.620 --> 08:54.200
Ce este asta?

08:54.220 --> 08:56.540
Da, un obiect JSON.

08:56.800 --> 09:05.500
Și acest obiect JSON, preluare ne permite să facem ceva numit răspuns - 'response.json ()'.

09:05.840 --> 09:08.800
Ei bine, hai să facem asta pentru moment și să vedem ce se întâmplă.

09:08.810 --> 09:14.750
Am să copiez și să lipesc asta. Voi deschide consola și vei ști că o să mă deschid

09:14.750 --> 09:17.180
o nouă filă pentru a vă arăta că puteți face acest lucru de oriunde.

09:18.170 --> 09:25.770
Dacă copiez și îl lipesc, primesc ceva numit promisiune și asta e ceva în javascript

09:26.040 --> 09:27.630
la care vă veți obișnui.

09:27.750 --> 09:34.050
Promisiunea spune "hei fac o cerere undeva prin Internet și îți promit să te anunț

09:34.050 --> 09:37.160
când am returnat această valoare. "

09:37.650 --> 09:42.310
Deci, modul în care accesați promisiunea este - deci aveți acest lucru:"odată ce acest lucru este returnat

09:42.360 --> 09:43.540
dă-mi valoarea ".

09:43.620 --> 09:45.540
Tu faci "

09:45.660 --> 09:51.600
și vă oferă răspunsul. Dacă adaug la cererea mea anterioară

09:51.920 --> 10:05.520
Și eu fac "răspunsul console.log (răspuns)".

10:05.690 --> 10:11.510
Uită-te la asta, am un răspuns. Starea 200 ne vom aminti de asta.

10:11.720 --> 10:12.520
OK, este bine.

10:12.530 --> 10:19.690
Si noi primim si acest corp, insa se spune ca se poate respira. Și adu-

10:19.850 --> 10:25.930
Adică am aflat despre JSON.parse pentru a analiza JSON.

10:26.340 --> 10:32.300
Dar aducerea vine de fapt cu metoda sa numită bine "json".

10:32.450 --> 10:39.770
Deci, pe acest răspuns, dacă facem "json", o va transforma de fapt pentru noi.

10:39.770 --> 10:49.310
Sa vedem. Dacă mă întorc la această solicitare din nou, primesc un răspuns. Dacă în loc de consolă logging, spun

10:49.380 --> 10:51.320
'Response.json ()'

10:51.530 --> 10:55.800
În acest caz, am o promisiune din nou.

10:55.800 --> 11:03.300
Asta inseamna ca trebuie sa facem atunci sa primim ori de cate ori aceasta returneaza promisiunea care este valoarea.

11:03.680 --> 11:07.440
Deci, din nou mă urc și fac

11:07.600 --> 11:13.780
Și în acest caz, să vedem ce date primim primim date și vom consola.log date.

11:17.680 --> 11:31.800
Dacă apăs pe Enter. Priviți că primim utilizatorii noștri - aceiași utilizatori care au fost aici.

11:31.880 --> 11:40.160
Deci, acum vedeți că pur și simplu folosim API-ul de preluare care ne permite să efectuăm un apel AJAX după componenta

11:40.160 --> 11:40.740
montat.

11:40.880 --> 11:48.830
Deci, odată ce aplicația noastră de prieteni robo a fost încărcată, am făcut o solicitare Ajax utilizând API-ul de tip fetch.

11:49.100 --> 11:53.350
Am primit un răspuns care a fost o promisiune.

11:53.360 --> 12:01.190
Așa că a trebuit să facem acest lucru și răspunsul acesta și acesta este doar standard, că oricând îl veți lua

12:01.190 --> 12:03.420
amintiți-vă doar să faceți .json

12:03.710 --> 12:11.270
Am transformat acest lucru într-un lucru pe care îl putem folosi în javascript și pentru că aceasta a returnat o promisiune

12:11.270 --> 12:21.440
am făcut-o. Atunci am primit utilizatorii și acum avem obiectul utilizatorilor și nu am fost nevoiți să reîmprospătăm pagina.

12:21.510 --> 12:29.870
Apropo, dacă doriți acest JSON ori de câte ori îl accesați pentru a arăta mai frumos și a fi puțin

12:29.870 --> 12:36.560
bit mai ușor de citit Folosesc o extensie Chrome numită "JSONView".

12:36.590 --> 12:37.130
Este gratis.

12:37.130 --> 12:39.580
Pur și simplu, adăugați-l Chrome o face automat pentru dvs.

12:39.590 --> 12:43.000
Îmi recomand foarte mult. bine

12:43.460 --> 12:46.030
Hai să ne întoarcem la asta

12:46.040 --> 12:47.450
- asta ar trebui să aibă sens acum.

12:47.810 --> 12:56.670
Acum avem abilitatea de a încărca dinamic paginile web făcând aplicații cu o singură pagină folosind AJAX și

12:56.750 --> 13:07.640
Ajax este o combinație de instrumente de utilizare a API-ului de preluare, folosind HTTP, folosind JSON pentru a comunica cu

13:07.640 --> 13:08.630
servere.

13:09.080 --> 13:20.000
Și acum avem o imagine completă a frontului nostru. Partea din față poate avea cod HTML, CSS, javascript, reacționează.

13:20.000 --> 13:31.670
Putem folosi AJAX pentru a comunica cu serverele și folosim datele JSON pentru a trimite date prin fir. Într-adevăr

13:31.670 --> 13:33.660
excitat pentru următoarele două videoclipuri.

13:34.500 --> 13:35.470
Așa că o să văd în asta. Pa! Pa.
