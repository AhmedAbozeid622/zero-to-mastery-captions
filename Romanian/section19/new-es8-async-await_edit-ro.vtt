WEBVTT

00:01.210 --> 00:08.290
Ah, noua caracteristică în javascript că toată lumea vorbește despre Async Await. în acest videoclip

00:08.290 --> 00:12.830
vom afla ce este vorba despre toată hype-ul. Pentru a incepe

00:12.890 --> 00:19.880
Trebuie să știți mai întâi că Async Await face parte din ES8 și este construit pe baza promisiunilor.

00:20.000 --> 00:22.280
Dacă nu sunteți sigur ce promisiuni sunt.

00:22.280 --> 00:25.840
Asigurați-vă că ați verificat mai întâi videoclipul respectiv.

00:25.960 --> 00:34.420
Acum, sub capotă, o funcție de asociere este o funcție care readuce o promisiune. Dar beneficiul Async

00:34.430 --> 00:37.710
Așteptați este faptul că face codul mai ușor de citit.

00:38.110 --> 00:39.430
Lasă-mă să-ți arăt ce vreau să spun.

00:39.760 --> 00:44.750
Aceasta este o promisiune pe care tocmai am făcut-o.

00:44.770 --> 00:47.340
Este o funcție de mutare a jucătorului.

00:47.350 --> 00:53.470
Imaginați-vă că proiectăm un joc și că acesta are distanța plus direcția în care se mișcă jucătorul și

00:53.470 --> 00:59.560
dacă vrem să le schimbăm avem "muta jucătorul". apoi "," mutați jucătorul "din nou," mutați jucătorul "din nou.

00:59.650 --> 01:00.810
"mutați jucătorul" din nou.

01:01.150 --> 01:03.670
Acum este cod asincron.

01:03.730 --> 01:06.200
Știm că acel jucător de mișcare se va întâmpla atunci

01:06.280 --> 01:08.390
Asta se va întâmpla, apoi asta, atunci asta.

01:08.500 --> 01:16.780
Dacă vrem să avem orice fel de acțiune aici, o putem împacheta în paranteze și consola de logare a extragerii.

01:16.780 --> 01:21.370
Toate lucrurile pe care le poți face cu promisiunile. cu asincia asteapta

01:21.410 --> 01:24.240
Ar arăta așa.

01:27.300 --> 01:28.420
Ce se petrece aici.

01:29.770 --> 01:37.660
Marele beneficiu al asinciei așteaptă este că face codul mai ușor de citit și știu că probabil nu te gândești

01:37.660 --> 01:41.230
asta chiar acum pentru că aceasta este o sintaxă nouă, ci doar o șansă.

01:41.240 --> 01:48.850
Scopul cu așteptarea asincronului este de a face ca codul să pară sincron - un cod care este asincron în sincron.

01:48.850 --> 01:54.890
Acum, dacă vă aduceți aminte că o promisiune în javascript este un fel de "vă datorez".

01:55.020 --> 01:58.180
Promit să vă întorc ceva în viitor.

01:58.990 --> 02:05.140
Ceva ca un apel AJAX redimensionând o imagine obținând unele informații dintr-o bază de date.

02:05.140 --> 02:07.040
Acestea sunt toate lucrurile care necesită timp.

02:07.180 --> 02:11.910
În loc să așteptăm în jurul lor, vrem să continuăm cu viața noastră și să o avem

02:11.920 --> 02:13.510
Spuneți-ne când sa terminat.

02:13.780 --> 02:18.220
Dar vom continua să lucrăm la propriile lucruri pe care le facem în fundal.

02:18.700 --> 02:22.290
Noi facem acest lucru pentru că așa funcționează javascriptul.

02:22.330 --> 02:30.010
Dacă vă aduceți aminte în videoclipul nostru "Cum funcționează Javascript", am vorbit despre javascript fiind singur filetat. Pentru

02:30.010 --> 02:34.270
programele noastre de a fi eficiente putem folosi programarea asincronă pentru a face aceste lucruri.

02:34.450 --> 02:38.670
Deci, promisiunile ne ajută să rezolvăm acest lucru și arăta așa.

02:39.560 --> 02:45.660
Acum, amintiți-vă ce am spus la început async așteaptă cod sunt doar promisiuni.

02:45.770 --> 02:53.960
Sub capotă numim acest zahăr sintactic ceva care încă face același lucru, dar este drept

02:54.170 --> 02:56.930
Sintaxa diferită pentru a face să pară mai frumoasă.

02:56.960 --> 03:06.940
Zahăr sintactic. Și promisiunile au acest lucru, atunci că trebuie să continuați să lănțișați async pe de altă parte

03:06.940 --> 03:12.420
are acest cuvânt asincron în fața lui și unii așteaptă cuvinte cheie.

03:12.700 --> 03:15.180
Să trecem prin ce înseamnă asta.

03:15.980 --> 03:20.560
Deși aceste două lucruri fac același lucru cu funcția playerStart.

03:20.560 --> 03:25.650
Mai întâi declarăm o funcție ca asinc. Noi conducem javascript know-

03:25.660 --> 03:32.220
"Hei, aceasta este o funcție asincronă". Și o declarăm cu funcția de cuvânt și apoi cu un nume de funcție.

03:32.270 --> 03:39.800
Acum putem face orice dorim în interiorul acestei funcții, dar avem acces la un cuvânt nou pentru că am folosit-o

03:39.890 --> 03:42.460
cuvântul asincron pentru a defini această funcție.

03:42.620 --> 03:50.350
Avem cuvântul cheie "așteptați" și acest cuvânt cheie spune - și putem elimina acest lucru deocamdată.

03:51.330 --> 03:57.890
Acest cuvânt cheie "așteaptă" spune "hei întrerupe această funcție până când am ceva pentru tine".

03:58.920 --> 04:01.580
Deci așteptăm răspunsul.

04:02.360 --> 04:08.900
Și puteți folosi acest cuvânt cheie "așteptați" în fața oricărei funcții care întoarce o promisiune pe care o cunoaștem

04:08.910 --> 04:10.050
mutați jucătorul nu.

04:10.220 --> 04:16.760
Iar odată ce promisiunea este rezolvată, atunci funcția se îndreaptă spre linia următoare și așteaptă următoarea mișcare

04:17.030 --> 04:20.770
și așteaptă următoarea mișcare și așteaptă următoarea mișcare.

04:20.840 --> 04:27.200
Acum, lucrurile interesante despre asta sunt că, în loc de a le lega în felul acesta, pot acum aloca doar asincron

04:27.410 --> 04:34.380
programare, variabilă în primul rând să aștepte acest lucru și pot aloca al doilea

04:37.770 --> 04:46.070
pentru a aștepta acest lucru și primul și al doilea vor avea rezultatul fiecărei funcții, dar într-o variabilă.

04:46.150 --> 04:48.220
Deci, pare foarte sincron.

04:48.250 --> 04:50.980
Nu utilizați ". Atunci" nu sunteți înlănțuit.

04:50.980 --> 04:54.920
Pur și simplu aveți programare sincronă simplă așteptați ca acest lucru să se întâmple.

04:54.930 --> 04:56.590
Apoi, așteptând ca acest lucru să se întâmple.

04:57.130 --> 05:02.720
Dar să folosim un exemplu mai realist, astfel încât să înțelegem cu adevărat acest lucru.

05:02.920 --> 05:07.860
Dacă folosim funcția noastră de preluare și din nou dacă vă amintiți funcția de preluare.

05:08.050 --> 05:10.010
Asta-i o promisiune.

05:11.190 --> 05:15.270
Vedeți că avem o promisiune.

05:15.430 --> 05:26.070
Deci, cu funcția de preluare dacă folosim resursa preferată API, placeholder json. Să le luăm pe utilizatori

05:26.080 --> 05:34.490
aici, astfel încât acest utilizator sfârșitul punct. Dacă vrem să aducem ceva, am întors o promisiune, așa că am face-o

05:34.490 --> 05:34.800
.apoi

05:34.810 --> 05:40.450
răspunsul pe care ar trebui să-l conducem.

05:40.660 --> 05:41.540
JSON

05:42.780 --> 05:51.990
Și apoi în cele din urmă. Console.log răspunsul sau datele pe care le primim.

05:51.990 --> 06:01.280
Deci, din nou, dacă copiați și lipiți acest lucru în consola noastră, primim o promisiune pe care o așteaptă inițial, atunci devine

06:01.280 --> 06:06.050
a rezolvat și am primit utilizatorii mei.

06:06.080 --> 06:09.010
Acum, cum putem transforma această funcție într-o funcție asincronă.

06:09.080 --> 06:16.060
Din nou, aceeași caracteristică va funcționa la fel, dar va arăta puțin mai curată.

06:16.210 --> 06:18.340
Va fi zahăr sintactic.

06:18.620 --> 06:27.950
Ei bine, dacă vă amintiți că trebuie să declare o funcție cu cuvântul cheie async și această funcție va spune

06:28.400 --> 06:32.150
fetchUsers și a prelua utilizatorii

06:32.430 --> 06:38.740
Va avea acest interior.

06:38.980 --> 06:43.580
Dar acum putem folosi în fața a tot ceea ce întoarce o promisiune.

06:43.640 --> 06:46.290
Cuvântul "așteaptă".

06:46.770 --> 06:52.050
Deci, acum această funcție se va întrerupe până când vom primi un răspuns de la preluare.

06:52.100 --> 06:57.150
Așa că pot spune const "răspuns"

06:59.060 --> 07:13.750
este egal cu așteptarea apelului de preluare. Și acum, în loc de a folosi .Then pot spune const 'data' egal 'așteaptă'

07:14.710 --> 07:21.790
'answer.json ()' pentru că din nou 'response.json' returnează o promisiune pentru a putea pune cuvântul cheie 'await'. Și

07:21.790 --> 07:27.140
apoi în cele din urmă pot doar "console.log (data)"

07:29.120 --> 07:31.570
Bine, să copiem și să lipim acest lucru și să vedem dacă funcționează.

07:35.610 --> 07:36.100
In regula.

07:36.150 --> 07:42.980
Acum numesc funcția fetchUsers care este funcția de asincronizare.

07:43.160 --> 07:45.320
Și am făcut o mică eroare aici.

07:45.350 --> 07:51.050
Nu există nici un răspuns este răspunsul "resp" scurt. Acolo mergeți să încercăm din nou.

07:51.620 --> 07:53.460
Deci, să refacem asta.

07:54.510 --> 08:01.990
Copiați și lipiți, executați funcția fetchUsers și căutați.

08:02.130 --> 08:05.940
Avem promisiunea noastră că sa rezolvat.

08:06.240 --> 08:18.200
Și nu avem utilizatorii noștri nimic diferit de promisiune, dar acum avem un pas frumos pas cu pas

08:18.210 --> 08:21.210
care arată că aduc asta.

08:21.210 --> 08:29.450
Obțineți un răspuns, apoi executați-l prin metoda json și apoi consolă log data. Și s-ar putea să te gândești

08:29.450 --> 08:34.070
pentru tine este de fapt mai frumos decât ceea ce am avut înainte.

08:34.370 --> 08:36.470
Să ne amintim ce am avut înainte.

08:43.920 --> 08:45.590
Așa am avut înainte.

08:45.780 --> 08:47.750
Asta este ceea ce avem acum.

08:48.630 --> 08:52.760
Și unii dintre voi ar putea argumenta că prima promisiune arată mai bine.

08:53.130 --> 08:53.810
Și știi ce.

08:53.850 --> 08:57.030
Este o preferință personală și acesta este un exemplu simplu.

08:57.040 --> 09:00.100
Deci, există momente în care acest lucru arată de fapt mult mai curat.

09:00.360 --> 09:07.340
Dar sunt un mare credincios în a face ceea ce este mai ușor să citești și să înțelegi pentru tine și colegii tăi de echipă.

09:07.560 --> 09:12.850
Să facem un ultim exemplu. Să facem ceva și mai realist.

09:12.960 --> 09:20.130
Să spunem că avem o listă de adrese URL și de această dată avem utilizatorii, postările și albumele din

09:20.130 --> 09:22.390
json placeholder API.

09:23.660 --> 09:25.810
Și vrem să fugim prin toate.

09:25.850 --> 09:30.270
Dacă vă amintiți în videoclipul promisiunilor noastre, am avut ceva de genul asta.

09:30.500 --> 09:32.550
Să eliminăm acest lucru pentru a putea vedea mai bine.

09:32.870 --> 09:34.010
Așa că am avut ceva de genul asta.

09:34.010 --> 09:43.900
Am făcut promisiunea. Toate - am trecut prin adresele URL. Am preluat adresele URL și am răspuns cu JSON

09:45.400 --> 09:54.020
și apoi am returnat matricea și matricea a avut utilizatori, postări, albume și am făcut și un .catch.

09:54.030 --> 10:03.440
Deci, din nou doar pentru a vă asigura că acest lucru merge să copiați acest lucru a pus-o în consola noastră și vedem asta

10:03.440 --> 10:06.860
primim datele utilizatorilor, postărilor și albumelor.

10:06.860 --> 10:07.990
Așa că funcționează.

10:08.270 --> 10:10.830
Să convertim această funcție într-o funcție de asincronizare.

10:11.300 --> 10:21.970
Ei bine, haideți să începem prin a face "const getData" și aceasta va fi (egală) o funcție de asincronizare.

10:23.610 --> 10:28.470
Și vreau doar să subliniez că am făcut-o de data asta cu expresia funcției în loc de modul în care

10:28.470 --> 10:31.900
am făcut-o ultima dată, care a fost funcția async și apoi numele funcției.

10:32.040 --> 10:33.570
Dar vreau doar să vă arăt în ambele sensuri.

10:35.350 --> 10:44.030
În regulă, cum putem face o promisiune? Ei bine, dacă vă aduceți aminte, acum puteți pune cuvântul cheie "așteptați"

10:44.060 --> 10:50.400
în fața oricărei promisiuni. Așa că putem pune cuvântul cheie în așteptare

10:50.570 --> 11:02.760
Așa că pot spune că const - și aceasta este o mică ES6 magie a distrugerii - pot spune utilizatori, postări și albume

11:03.800 --> 11:12.700
pe care o vom primi va fi egal "așteaptă" și apoi promisiunea. tot ce avem deja.

11:13.070 --> 11:14.450
Deci, să copiem asta.

11:14.460 --> 11:19.170
Vom copia promisiunea și o vom pune aici.

11:20.080 --> 11:20.680
In regula.

11:20.800 --> 11:32.750
Și acum putem consola doar log ce avem. Putem copia și lipi imediat după ce "așteptăm" toate promisiunile

11:33.270 --> 11:42.590
vom avea "utilizatori", "postări" - dacă pot scrie. și apoi "albume". și în loc de Array, pentru că am făcut-o cu distrugerea

11:42.830 --> 11:46.730
putem spune "utilizatori"

11:49.790 --> 11:50.480
„posturi“

11:53.260 --> 11:55.250
și "albume".

11:55.510 --> 12:05.510
În regulă, să vedem dacă funcționează. Copiați și lipiți acest lucru și rulați GetData

12:08.220 --> 12:09.030
și uită-te la asta.

12:09.090 --> 12:12.920
Avem exact aceleași rezultate.

12:13.890 --> 12:14.670
Foarte tare.

12:15.070 --> 12:23.420
Dar ar putea fi un lucru pe care l-ați observat aici, care este în modul promis că avem captura.

12:23.490 --> 12:31.590
Dacă oricare dintre acestea eșuează, vrem să prindem aceste erori cum putem să facem asta cu așteptarea asinciei.

12:31.590 --> 12:33.740
În momentul de față nu prindem nici una din aceste erori.

12:35.490 --> 12:38.840
Aceasta este partea pe care nu o multime de oameni sunt fani mari.

12:39.060 --> 12:47.520
Dar este ceva ce odată ce ne-am obișnuit să nu fie prea rău. JavaScript are ceva numit "încercați blocuri de captură".

12:47.790 --> 12:55.770
și atunci când vede cuvântul "încercați", va merge automat să ruleze automat ceea ce se află în interiorul acestuia.

12:55.770 --> 13:08.130
În cazul nostru, tot acest bloc dorim ca acesta să ruleze într-un bloc de încercare și apoi "încercați" vine cu un bloc de captură

13:08.160 --> 13:09.200
de asemenea.

13:09.540 --> 13:15.450
Deci, încercați un blocaj de captură și în interiorul capcană dacă ceva nu reușește aici.

13:15.690 --> 13:19.460
Ei bine, o putem prinde aici, ca să putem console.log

13:19.550 --> 13:20.190
'Oops'

13:21.890 --> 13:29.760
Deci, să spunem acum că am scris greșit unul dintre adresele URL și să copiați acest lucru. Să încercăm.

13:30.020 --> 13:31.720
Vom avea noile adrese URL.

13:31.820 --> 13:37.880
Lasă-mă să clar asta. Adrese URL noi cu adresa URL greșită pentru unul dintre ele.

13:37.880 --> 13:44.270
Vom copia și lipi getData și veți vedea aici că vom obține o eroare de sintaxă.

13:44.560 --> 13:53.570
Și asta pentru că un lucru pe care trebuie să-l amintiți cu captura este că captura primește o eroare și

13:53.570 --> 13:55.390
această eroare vă puteți consola conectați-o

13:55.430 --> 14:00.310
daca vrei. Deci, hai să consolăm doar jurnalul și apoi să încercăm din nou.

14:01.530 --> 14:07.230
De data aceasta vom numi doar un astfel de getData1 -perfect.

14:07.240 --> 14:14.770
Acum, dacă am curat acest lucru un pic și face getData1 cu încercați bloc de captură am

14:15.100 --> 14:15.910
'Oops'

14:15.920 --> 14:17.420
Eroare de tip nu a reușit să fie preluată.

14:17.510 --> 14:26.860
Așa că am blocul de captură cu eroarea la fel cum am făcut cu promisiunea.

14:27.400 --> 14:28.400
Și acolo aveți.

14:28.420 --> 14:29.250
Asta e.

14:29.330 --> 14:37.090
Async așteaptă deși intimidând la început pentru că există un pic de sintaxă nouă, de fapt, face lucrurile destul

14:37.090 --> 14:40.130
frumos și sincron.

14:40.210 --> 14:48.370
Pur și simplu avem o variabilă pe care o atribuim promisiunii așteaptă și apoi funcția se oprește acolo

14:48.370 --> 14:53.710
până când promisiunea se întoarce și apoi continuă cu logarea consolei.

14:53.860 --> 14:59.690
Și trebuie doar să vă amintiți încercați blocurile de captură aici pentru a vă prinde erorile și asta-i tot.

14:59.710 --> 15:02.280
Acum sunteți un asinc care așteaptă pe Maestru.

15:02.350 --> 15:05.170
Puteți utiliza oricare preferați.

15:05.170 --> 15:12.370
După cum am spus la sfârșitul zilei, folosiți promisiuni sau async așteptați funcții bazate pe oricare dintre ele este mai simplă

15:12.370 --> 15:19.510
pentru dvs. și echipa dvs., dar sperăm că atunci când vă întâlniți pe amândouă, sunteți acum mult mai confortabil.

15:19.660 --> 15:21.570
Ne vedem în următorul. Pa! Pa.
