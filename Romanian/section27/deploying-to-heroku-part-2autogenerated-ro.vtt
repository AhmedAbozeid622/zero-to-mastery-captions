WEBVTT

00:01.460 --> 00:02.480
Bine ai revenit.

00:02.480 --> 00:09.380
Am rămas cu Todd incapabil să se înregistreze în aplicația noastră, deoarece serverul nostru de backend nu este conectat la niciunul

00:09.380 --> 00:10.420
Bază de date.

00:10.910 --> 00:15.200
Din fericire pentru noi Heroku are și postgreSQL ..

00:15.230 --> 00:27.120
Dacă mă duc la tabloul de bord aici și să mergem la personal și în acest colț avem date. Facem clic pe date

00:29.420 --> 00:36.470
si se spune ca hei arata ca nu aveti inca nici un magazin de date si avem Heroku postgres Redis

00:36.500 --> 00:40.010
și Kafka, dar postgresul este ceea ce avem nevoie.

00:40.980 --> 00:51.820
Deci, să creăm una și putem să conectăm cu aceleași acreditări același lucru pentru care avem

00:51.820 --> 01:02.480
serverul nostru și putem pur și simplu instala Herok postgres și uita-te la asta.

01:02.520 --> 01:13.580
Știe deja ce aplicație vrem să o instalăm. Deci, să faceți clic pe acel clic continuați.

01:13.690 --> 01:17.420
Și acum alegem hobby dev, care este gratuit.

01:17.590 --> 01:19.430
Facem clic pe provizion.

01:19.450 --> 01:19.840
Acolo te duci.

01:19.840 --> 01:24.840
Se spune că addon Herody postgres a fost instalat cu succes.

01:24.870 --> 01:29.560
Consultați documentația pentru a începe.

01:29.610 --> 01:31.090
E minunat să aud.

01:31.230 --> 01:42.650
Să o deschidem și încă o dată să aibă o documentație uimitoare despre modul în care putem să pregătim totul.

01:42.700 --> 01:47.440
Așadar, priviți aici primul lucru pe care vrem să-l conducem este addons-ul Heroku pentru a ne asigura că avem de fapt

01:47.440 --> 01:47.820
aceasta.

01:48.220 --> 01:49.780
Să ne întoarcem la serverul nostru.

01:49.810 --> 01:57.420
Am de gând să clar acest lucru și a alerga addons Heroku și face acest lucru un pic mai mare.

01:58.530 --> 02:01.060
În regulă avem Heroku postgres.

02:01.200 --> 02:01.950
Grozav.

02:05.030 --> 02:15.800
Dacă, de fapt, defilam în jos, vedem că putem rula CLI cu informații despre Heroku PG.

02:15.850 --> 02:16.520
Deci, să facem asta.

02:16.540 --> 02:30.910
Vreau să spun informații despre Heroku PG și voi arăta că acesta este postgresul nostru și ne putem conecta

02:30.910 --> 02:38.970
aceasta rulează PG psql la fel ca în laptop-ul nostru.

02:39.190 --> 02:39.980
Hai să facem asta.

02:40.300 --> 02:45.170
O să spun Heroku PG PSQL

02:48.900 --> 02:51.840
și arătați că - suntem în baza noastră de date.

02:52.710 --> 02:56.120
Deci, să recreăm baza de date pe care am avut-o inițial.

02:56.310 --> 03:06.680
Putem pur și simplu să ne întoarcem la PSQL, deoarece PSQL este suficient de inteligent pentru a ne aminti comenzile noastre.

03:06.930 --> 03:14.330
Și dacă mergem la Query. Acolo mergeți, avem pregătite comenzile noastre pentru tabele.

03:14.510 --> 03:18.330
Deci, să creăm un tabel de autentificare.

03:22.840 --> 03:35.800
Perfect și să creăm un tabel de utilizator bine sau un tabel de utilizatori voi copia acest du-te înapoi la Heroku și

03:35.800 --> 03:41.470
creați tabelul să facem întoarcere d pentru a vă asigura că tabelele sunt acolo.

03:41.470 --> 03:41.890
In regula.

03:41.950 --> 03:47.980
Avem mesele noastre și vedeți că proprietarul este ceva cu totul diferit de laptopul meu.

03:47.980 --> 03:49.960
Dar mai este un lucru cheie pe care trebuie să-l rezolvăm.

03:49.960 --> 03:51.210
Acum avem mesele noastre

03:54.060 --> 04:01.130
dar conexiunea mea pe serverul meu se referă încă la gazda mea locală.

04:01.380 --> 04:02.860
Cum pot schimba asta?

04:04.350 --> 04:12.490
Dacă ieșim din asta făcând întoarcere Q Și facem din nou informații despre Heroku PG

04:17.760 --> 04:23.520
avem adăugarea pe care ar putea fi adresa URL, dar o modalitate mai bună pentru noi de a face acest lucru este de fapt

04:23.520 --> 04:27.160
alerga Heroku adaugă ons.

04:27.160 --> 04:28.800
Da, este exact aceeași.

04:28.860 --> 04:34.260
Acesta este URL-ul pe care ni l-au furnizat.

04:34.260 --> 04:35.090
Așa că hai să încercăm asta.

04:35.100 --> 04:42.960
Dacă fac acest postgres în această adresă URL URL aici.

04:42.960 --> 04:46.080
Va funcționa? Să aflăm.

04:46.410 --> 04:49.310
Mă duc încă o dată să adaug Git.

04:49.350 --> 04:51.370
Așa că trebuie să facem schimbările.

04:53.690 --> 04:58.490
Și voi spune actualizarea bazei de date

05:01.400 --> 05:08.080
git împinge masterul Hiroko.

05:08.110 --> 05:08.480
In regula.

05:08.560 --> 05:09.770
Este desfășurat.

05:10.090 --> 05:12.970
Să ne întoarcem la aplicația noastră și să vedem dacă funcționează acum.

05:12.970 --> 05:15.990
Avem Todd la gmail dot com.

05:16.030 --> 05:19.950
Clic pe înregistrare.

05:20.240 --> 05:27.300
Mai avem o eroare aici dacă mergem la o consolă aici și de fapt rețeaua și faceți clic pe înregistrați din nou pe care o avem

05:27.300 --> 05:30.570
400 solicitare greșită nu se poate înregistra.

05:30.570 --> 05:32.110
Deci, să aruncăm o privire la bușteni.

05:33.490 --> 05:39.970
Dacă facem jurnal de la Heroku, bordură bordură

05:42.630 --> 05:45.490
uitați-vă la eroarea de eroare de avertizare de eroare KNEX.

05:45.600 --> 05:50.140
Deci nu găsim gazda pe care o dorim.

05:50.250 --> 06:01.240
Deci, hai să mergem la documentația noastră pentru conectarea la nodul punct js și vedem aici că cu clientul postgres

06:01.250 --> 06:03.970
de fapt ne dă o adresă URL de bază de date aici.

06:03.980 --> 06:11.600
Și trebuie să avem și SSL adevărat aici și putem citi mai mult despre el, dar putem doar să îl copiem

06:11.600 --> 06:11.990
acest

06:15.100 --> 06:33.000
eliminați toate informațiile din baza de date și în cadrul gazdei putem spune procesul dot env dot DATABASE_URL

06:33.140 --> 06:35.440
Să salvăm.

06:35.640 --> 06:38.630
Va trebui să adăugăm din nou acest lucru.

06:39.360 --> 06:44.710
Git comite adăugarea bazei de date

06:47.290 --> 06:53.250
conexiune și noi toți vom Git împinge Heroku la Maestru

06:53.490 --> 06:57.930
Și în timp ce se încarcă asta, chiar vreau să trec prin faptul că acesta este unul din acele lucruri

06:57.930 --> 07:04.530
trebuie doar să citiți și este atât de specific pentru platformă, că doar pentru că învățați o astfel de cale pe Heroku

07:04.530 --> 07:09.690
nu inseamna ca functioneaza pe ceilalti, insa totul este doar de a citi si de a fi confortabil

07:09.690 --> 07:10.160
cu ce.

07:11.030 --> 07:16.670
Hai să facem jurnalele lui Heroku aici pentru a ne asigura că totul funcționează.

07:16.670 --> 07:20.590
În regulă, avem un port, așa că să ne întoarcem la aplicația noastră.

07:20.610 --> 07:22.910
Voi închide consola de acum.

07:22.950 --> 07:28.180
Faceți clic pe înregistrare și se pare că încă nu funcționează.

07:28.190 --> 07:32.980
Dacă deschidem registrul de acces în rețea, avem o cerere greșită.

07:33.090 --> 07:38.630
Dacă ne întoarcem la jurnale avem o eroare de conexiune de avertizare KNEX din nou.

07:38.630 --> 07:42.980
Este un moment bun pentru a folosi o altă comandă care este Herook config

07:45.930 --> 07:53.270
iar configurarea Heroku ne oferă baza de date reală și adresa URL a acestei baze de date.

07:53.270 --> 08:00.670
Ei bine, vedeți că folosesc Amazon AWS. Dar vedeți aici în avertismentul KNEX că suntem de fapt

08:00.670 --> 08:08.530
obtinerea acestui link arata ca trebuie sa folosim efectiv stringul de conexiune exact asa cum au

08:08.530 --> 08:09.480
ne-a spus.

08:09.820 --> 08:12.370
Așa că am uitat să facem asta, să facem un șir de conexiuni aici.

08:12.370 --> 08:13.100
Hopa.

08:13.150 --> 08:16.330
Să copiem acest șir de conexiuni.

08:17.160 --> 08:20.660
Și acum se repetează.

08:20.680 --> 08:25.890
Dar așa funcționează de obicei o sesiune de depanare.

08:25.890 --> 08:28.830
O să mă angajez rapid aici.

08:29.000 --> 08:30.700
Git împinge maestrul Heroku.

08:30.720 --> 08:31.100
In regula.

08:31.110 --> 08:32.320
Și să lăsăm altul să plece.

08:32.320 --> 08:35.170
Să încercăm să vă înregistram acum.

08:35.260 --> 08:36.070
Așa o facem pe Jenny

08:40.820 --> 08:49.580
Jenny la gmail dot com vom face una două trei registru și Jenny este logat.

08:49.760 --> 08:50.290
Minunat.

08:50.310 --> 08:51.000
Functioneaza.

08:51.030 --> 08:57.660
Dacă mergem la jurnalele de aici, vedem că ceea ce facem facem să ne înscriem la înregistrare și putem verifica

08:57.660 --> 09:17.170
jurnalele și putem merge chiar la postgresul nostru Heroku PG PSQL face o stea selectată de la utilizatori și noi

09:17.170 --> 09:20.570
l-au înregistrat pe Jenny și pe Todd.

09:20.830 --> 09:21.530
Minunat.

09:21.730 --> 09:24.980
Doar pentru a verifica funcționarea tabelului de conectare.

09:26.110 --> 09:27.910
Am un jurnal în tabel.

09:27.910 --> 09:28.700
Frumos.

09:28.720 --> 09:33.270
Și apoi, în cele din urmă, pentru a obține o față

09:35.850 --> 09:41.240
vom lua o altă față. Vom vedea imaginea.

09:41.410 --> 09:42.710
E unul mare.

09:42.710 --> 09:45.010
Vom vedea dacă funcționează bine.

09:45.020 --> 09:50.830
Apăs, detectez și arată că funcționează.

09:50.870 --> 09:57.090
Însă înregistrările Jennies nu se actualizează.

09:57.140 --> 10:02.640
Să ne întoarcem la profilul lui Jenny și să ne asigurăm că informațiile ei sunt corecte.

10:02.660 --> 10:07.200
Dacă mă duc la utilizatori arata că intrarea nu este actualizată.

10:10.120 --> 10:19.160
Dacă privim în jurnalele de consolă, obținem resurse eșuate în punctul final al imaginii

10:22.190 --> 10:31.570
și dacă mergem la rețea și trimitem din nou acest lucru, vedem că punctul final al imaginii nu reușește și asta

10:31.570 --> 10:37.680
este ceva care din nou vom aborda în următorul videoclip.

10:37.760 --> 10:38.440
Ne vedem în acel. Pa! Pa
