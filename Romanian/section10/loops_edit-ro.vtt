WEBVTT

00:01.210 --> 00:07.830
Bine ai revenit. Până în acest moment am aflat despre codul care se execută de sus în jos.

00:07.830 --> 00:14.020
Doar într-o linie dreaptă. Am aflat despre condiționalități, unde putem adăuga o "declarație if" și o avem

00:14.020 --> 00:17.380
mergeți într-un fel sau "altceva", mergeți invers.

00:17.710 --> 00:24.220
Apoi am aflat și despre "dacă altceva" și "altceva dacă".

00:24.310 --> 00:35.680
Deci "dacă", "altceva dacă", "altceva", "altceva". Și apoi dacă am vrea să facem ceva de genul asta. Ceva pe care îl păstrăm

00:35.680 --> 00:42.280
a face din nou și din nou. Și asta se numește "looping", și acolo vom afla despre acest videoclip.

00:42.640 --> 00:49.750
Și după cum puteți vedea în conturul nostru, JavaScript looping, vom trece prin toate acestea în acest videoclip.

00:49.910 --> 00:50.720
Să începem.

00:52.480 --> 01:02.160
Am o etichetă "script" goală aici. Asta este din nou atașat la HTML-ul nostru și să începem cu o "listă de sarcini".

01:02.160 --> 01:12.760
Și o listă de sarcini are ... sau ar trebui să fie o matrice. Și vrem să avem o "cameră curată".

01:12.880 --> 01:25.730
Vrem să avem "dinți perii". Poate "exercițiu", ar trebui să "studieze" cu siguranță "javascript".

01:25.790 --> 01:28.910
Și, în sfârșit, bine, ar trebui să "mâncăm sănătos".

01:29.090 --> 01:32.330
In regula. Avem o listă de sarcini.

01:33.200 --> 01:39.950
Să spunem că am vrut să adăugăm un semn de exclamare la sfârșitul acestor elemente "de listă de sarcini".

01:39.950 --> 01:43.140
Vreau să spun, toate acestea sunt cu adevărat importante și vrem să subliniem acest lucru.

01:43.170 --> 01:49.190
Dar, asta e cam plictisitor, nu? Trebuie să merg unul câte unul și să adaug un semn de exclamare, adăugați un

01:49.220 --> 01:50.130
Semnul exclamarii.

01:50.130 --> 01:54.310
Și imaginați-vă dacă lista "todo" a fost sute de linii.

01:55.470 --> 01:58.410
Și ca programatori vrem să facem lucrurile în mod eficient.

01:58.410 --> 02:00.310
Pentru asta avem mașini.

02:00.720 --> 02:06.930
Deci, hai să adăugăm ceva la acest lucru. Pentru a face o buclă în JavaScript

02:06.930 --> 02:12.530
una dintre principalele căi pe care le puteți face, este denumită "pentru buclă". Și veți afla o nouă sintaxă aici.

02:12.540 --> 02:19.410
Și fii avertizat! La început, pare confuză, dar este din nou una din acele lucruri, trebuie să o faceți câteva

02:19.410 --> 02:21.890
ori - și veți avea parte de el.

02:21.900 --> 02:27.370
Deci, prima este variabila "i" egală cu "0" pe care o vom face.

02:27.390 --> 02:33.240
Când "i" este mai mic decât "todos.length".

02:33.480 --> 02:37.780
Și apoi vom face "i ++".

02:37.780 --> 02:40.220
Nu vă faceți griji, voi explica ce înseamnă asta.

02:40.270 --> 02:47.310
Avem parantezele ascuțite și apoi înăuntru aici pentru moment, să așteptăm și să explicăm ce se întâmplă.

02:47.320 --> 02:53.410
Deci, eu spun "pentru", care este un cuvânt JavaScript care spune:vom face o bucla.

02:53.890 --> 02:59.200
Acum, în această buclă, primul lucru pe care îl vom face este că vom spune:"i" este egal cu "0".

02:59.200 --> 03:01.220
Deci, doar o variabilă aleatorie "i" este:03:01.300 --> 03:04.840
este comun să fie folosit într-o buclă "pentru" - reprezintă un "index".

03:04.840 --> 03:07.080
Deci "i" începe cu "0".

03:07.090 --> 03:13.670
Avem punct și virgulă, ceea ce înseamnă că este sfârșitul expresiei, tocmai am atribuit variabila "i" cu "0"

03:14.330 --> 03:18.840
și apoi în linia următoare se spune:"i", care este în acest moment "0".

03:19.160 --> 03:27.150
Dacă aceasta este mai mică decât lungimea "todos" și "todos.length" - nu am mai văzut acest lucru înainte.

03:29.360 --> 03:32.050
Dar spune:cât timp este lista?

03:32.060 --> 03:40.350
În acest caz '1, 2, 3, 4, 5'. Deci, "0" este mai mare decât (* mai puțin decât) '5'.

03:40.530 --> 03:44.040
În acest caz, rulați această buclă.

03:44.280 --> 03:51.800
Apoi, când ați terminat, faceți "i ++", ceea ce înseamnă "i" plus "1".

03:51.820 --> 03:53.620
Să trecem prin asta.

03:53.620 --> 04:06.760
În primul rând, "todos.lenth". dacă mă duc, dacă copiez acest lucru, fac "todos.length" - primesc "5", cinci articole.

04:06.870 --> 04:07.940
Pot să fac și eu

04:08.070 --> 04:14.060
'' helllooo ''. 'și eu' 8 '.

04:14.070 --> 04:22.730
Deci, 1, 2, 3, 4, 5, 6, 7, 8. Așa că "lungimea" ne spune câte articole din listă.

04:22.720 --> 04:26.390
Și dacă fac variabila "i" este egală cu "0".

04:27.620 --> 04:28.700
Ei bine, "eu" este "0".

04:28.710 --> 04:39.700
Dar dacă fac "i ++" și mă uit din nou la "i", văd că este "1". Dacă fac din nou "i ++", bine am "2".

04:39.740 --> 04:43.010
Deci, acest lucru crește cu "i".

04:43.100 --> 04:48.850
Deci, ceea ce facem este să spui:începe cu "0", și atâta timp cât "i"

04:48.890 --> 04:54.120
este mai mică decât '5', apoi executați totul în acest bloc.

04:54.140 --> 04:57.880
Iar odată ce ați terminat cu aceasta, adăugați "1" la "i".

04:57.950 --> 05:01.980
Așadar, să vedem ce se întâmplă dacă fac "console.log".

05:02.390 --> 05:10.130
'eu aici. Să salvăm și să reîmprospătăm. '0', '1', '2', '3', '4'.

05:10.320 --> 05:13.570
Deci, facem o buclă, unde începe cu '0'.

05:13.740 --> 05:15.370
Apoi adăugăm "1".

05:15.450 --> 05:21.990
Acum este '1'. Apoi adăugăm un alt "1" în "2", altul "1" la "3" și altul "1" la "4"

05:21.990 --> 05:31.890
nu avem aici 5 pentru că, de îndată ce "i" este egal cu "5", se va potrivi cu "todos.length" iar bucla se oprește.

05:31.920 --> 05:36.780
Deci așa spunem să se oprească bucla. O.K.

05:36.990 --> 05:44.290
Deci, cum putem face acest lucru:dacă vrem să adăugăm un semn de exclamare la sfârșitul acestora?

05:44.310 --> 05:47.250
Putem accesa "todos"

05:50.430 --> 05:58.840
prin - pentru că este o matrice, prin "i". Deoarece primul merge în jurul valorii de, "i" va fi "0", care ar trebui să fie "cameră curată".

05:58.920 --> 06:05.550
Apoi "1" care este "dinți perie", apoi "2" care este "exercițiu", "3" care este "javascript de studiu" și 4 care

06:05.550 --> 06:07.420
este "mananca sanatos".

06:07.540 --> 06:14.620
Deci, hai să verificăm asta. Dacă fac "todos [i]" și salvez. Reîmprospătați și ar trebui să modificați acest lucru înapoi la "i".

06:14.670 --> 06:16.220
Acolo te duci.

06:16.310 --> 06:25.220
În caz contrar, dacă aș face acest lucru, de fapt, acest lucru nu va fugi, urmăriți acest lucru. Pentru că, bine, acest lucru este "5" egal cu "5", deci este

06:25.220 --> 06:27.570
nu va merge niciodată, nu va trece niciodată prin asta.

06:27.770 --> 06:29.090
Deci, haideți să-l schimbăm înapoi la "i".

06:29.210 --> 06:34.290
Și reîmprospătați:"cameră curată", "dinți perii", "exercițiu", "javascript de studiu", "mâncați sănătoși".

06:34.310 --> 06:35.050
Perfect.

06:35.060 --> 06:41.840
Deci, acum pot să fac "[i] +"! "'

06:42.220 --> 06:45.850
Să ne reîmprospătăm. Uită-te la asta!

06:46.090 --> 06:47.630
Asta este importanța acestor elemente.

06:47.740 --> 06:59.740
Dar dacă fac "todo" - sau "todos". Ei bine, "todos" -ul meu nu are de fapt acest semn de exclamare pe care tocmai l-am consolat logat

06:59.740 --> 07:02.990
dar nu am schimbat de fapt "todo", nu?

07:03.190 --> 07:06.800
Deci, să facem asta.

07:06.970 --> 07:22.090
Putem spune acum că "todos [i] = todos [i] +"! "'.

07:22.110 --> 07:23.020
Deci, să vedem.

07:23.020 --> 07:24.570
Reîmprospătez.

07:24.570 --> 07:25.330
Nimic nu se intampla.

07:25.330 --> 07:26.760
Dar acum, dacă verific "todos" ...

07:29.490 --> 07:33.540
Uită-te la asta! Am semne de exclamare în fiecare dintre "todos" mele.

07:34.140 --> 07:45.620
Și din nou, pentru a sparge acest lucru, spunem că "camera curată" este acum "cameră curată" plus semnul exclamării.

07:45.620 --> 07:46.620
Foarte tare.

07:47.060 --> 07:47.580
O.K.

07:47.720 --> 07:51.060
Să învățăm câteva altele - de fapt, înainte de a face,

07:51.290 --> 07:57.620
dacă vrem să le depășim pe listă. Poate că vrem să le tragem, pentru că le-am făcut. Bine,

07:58.130 --> 08:01.460
putem face ceva de genul "todos [i] .pop".

08:01.490 --> 08:06.140
Dacă vă aduceți aminte, aceasta este o metodă de tip "pop" care elimină ultimul element.

08:06.350 --> 08:14.870
Deci, dacă mă duc, salvez și reîmprospătează, am "todos [i] .pop nu este o funcție".

08:14.870 --> 08:15.540
De ce este asta?

08:15.560 --> 08:20.070
Ei bine, pentru că spunem "cameră curată" - "pop".

08:20.100 --> 08:21.820
Și asta e un șir.

08:22.290 --> 08:27.990
Ceea ce vrem să facem este "todos.pop", pentru că asta e "matricea".

08:28.350 --> 08:34.230
Deci, dacă salvez și reîmprospătează asta, să vedem ce avem în "todos":08:35.880 --> 08:38.920
"cameră curată" și "dinți perii".

08:38.930 --> 08:39.510
Hmm.

08:39.630 --> 08:40.740
De ce este asta?

08:41.160 --> 08:46.820
Ei bine, pentru că inițial a fost "0".

08:47.060 --> 08:50.290
Lungimea listei "todos" a fost "5".

08:50.600 --> 08:59.770
Dar apoi, pentru că am apucat-o, acest lucru sa schimbat la "4" și acesta la "unul", apoi la "3" și la "2".

09:00.050 --> 09:05.910
Deci, după cum puteți vedea, am eliminat "mâncați sănătoși", "studiați javascript" și "exercițiu".

09:05.930 --> 09:12.270
Dar pentru că "todos" lenth sa schimbat, ei bine, sa oprit la jumătatea drumului.

09:12.310 --> 09:16.080
Deci, care este o modalitate prin care putem rezolva această problemă?

09:17.630 --> 09:29.360
Putem face variabila 'todos.length' egal 'todos.length'.

09:29.650 --> 09:32.020
Deci acum această variabilă este '5'.

09:32.140 --> 09:42.680
Deci, dacă fac doar variabila "todos.lenth" - aceasta îți va aminti, pentru că va merge doar să fugă

09:42.680 --> 09:43.580
o dată, merge ...

09:43.730 --> 09:48.370
Aceasta va funcționa, apoi vom aloca "5" la "todos.length".

09:48.560 --> 09:51.370
Și apoi va trece peste asta.

09:51.400 --> 09:59.940
Deci, dacă salvez acest lucru și reîmprospătează, să ne uităm la "todos". Uită-te la asta! Am terminat toate "todos" noastre!

10:00.070 --> 10:00.790
Foarte tare.

10:01.430 --> 10:11.230
Ei bine, permiteți-mi să vă arăt o altă opțiune, care este bucla "în timp". Bucla "în timp" este ceva de genul asta.

10:15.250 --> 10:18.810
'în timp', - hai să creăm o variabilă aici. Variabila "contra"

10:21.390 --> 10:22.910
'CounterOne'

10:23.090 --> 10:36.160
Vom spune asta, că este "0". Și vom spune:"în timp ce contraOne este mai mică de 10".

10:36.300 --> 10:39.810
În acest caz, vreau să "console.log"

10:43.000 --> 10:50.590
'CounterOne'. Și apoi vreau să "contraOne" plus, plus.

10:50.640 --> 10:53.010
Amintiți-vă că facem, adăugăm.

10:53.430 --> 10:58.800
Deci, de fiecare dată când mărim "contra" cu "1". Să vedem ce se întâmplă aici.

10:58.800 --> 11:09.330
Dacă salvez acest lucru și reîmprospătesc:"0, 1, 2, 3, 4, 5, 6, 7, 8, 9" și apoi se oprește, pentru că,

11:10.330 --> 11:11.500
acest lucru nu mai este potrivit.

11:11.500 --> 11:14.530
Deci această parte a blocului nu rulează.

11:17.820 --> 11:18.260
O.K.

11:18.420 --> 11:29.200
Pot să fac ceva ... poate ... invers? Unde spunem că "contra" este "10" și de data asta ne dorim

11:29.200 --> 11:30.180
să numărăm.

11:30.520 --> 11:38.940
Deci, în timp ce contorul este "10" - continuați să mergeți și altfel - opriți. Iar modul în care facem acest lucru, în mod evident, dorim

11:39.210 --> 11:39.780
scădea.

11:39.780 --> 11:43.900
Nu vrem să continuăm "11" sau "12", pentru că în caz contrar va continua să meargă pentru totdeauna.

11:44.070 --> 11:47.570
Modul în care facem acest lucru este - minus, minus, care este exact opusul.

11:47.580 --> 11:49.190
Deci, scade "1".

11:49.620 --> 11:50.810
Să vedem ce se întâmplă.

11:52.610 --> 11:56.410
'10, 9, 8, 7, 6, 5, 4, 3, 2, 1'.

11:56.420 --> 11:57.830
Acolo te duci.

11:57.890 --> 12:05.300
Acum, din curiozitate, ce se va întâmpla dacă mă duc așa, de unde numărul crește din ce în ce mai mult

12:05.330 --> 12:08.560
"10" la "11", spre, bine, infinit.

12:08.590 --> 12:08.890
Dreapta?

12:08.900 --> 12:16.800
Va continua să meargă și - puteți face acest lucru în Google Chrome, dacă doriți.

12:16.880 --> 12:19.950
De fapt, destul de distractiv.

12:19.970 --> 12:27.170
Ce se întâmplă este - continuă să meargă mereu și mereu. Veți primi o listă cu toate aceste lucruri și

12:27.260 --> 12:34.460
se spune că într-o "buclă infinită". O "buclă infinită" înseamnă că merge aproape infinit. În afară de asta

12:34.460 --> 12:38.910
nu prea, pentru că în cele din urmă Google Chrome se va prăbuși.

12:38.990 --> 12:42.440
Va spune:"Hei, nu pot să mă ocup de toate aceste informații.

12:42.440 --> 12:45.630
Mă înnebuniți "și va înceta să lucreze.

12:46.640 --> 12:47.040
O.K.

12:47.120 --> 12:49.930
Așa că am învățat "pentru buclă".

12:50.060 --> 12:52.700
Am învățat "în timp". Ce altceva mai avem?

12:52.700 --> 12:55.630
Avem "facem".

12:55.790 --> 13:07.470
Deci, aceasta se numește buclă "face în timp" și este puțin diferită "în timp". Începem cu "face".

13:07.750 --> 13:19.070
Apoi paranteze curbate, și spunem "contra" ... să numim un "contraTwo" de data asta. Voi face variabila 'counterTwo'

13:19.910 --> 13:25.860
este egal cu "10". Și faceți "contraTwo", plus, plus.

13:25.930 --> 13:27.180
Adăugați "counterTwo".

13:27.640 --> 13:32.850
Și, de asemenea, "console.log (counter Two)".

13:33.130 --> 13:41.440
Și dorim să mutăm "console.log" în partea superioară, pentru că așa voi începe cu '10', apoi o să-mi sporească ...

13:41.490 --> 13:43.450
Acest lucru trebuie scos.

13:43.530 --> 13:45.700
Așa că facem "10".

13:45.790 --> 13:49.710
Este un fel de "10", atunci va scădea. Așa că data viitoare va veni aici, va merge

13:49.710 --> 13:50.980
fi "9".

13:51.480 --> 13:55.650
Și apoi facem "în timp", și ne dăm o condiție aici.

13:55.650 --> 14:04.890
Deci, condițiile vor fi "contraTwo", va fi mai mare decât "0".

14:05.240 --> 14:05.520
O.K.

14:05.530 --> 14:08.910
Să vedem ce se întâmplă aici.

14:08.990 --> 14:13.960
Reîmprospătesc:'10, 9, 8, 7, 6, 5, 4, 3, 2, 1'.

14:14.310 --> 14:21.580
Hmmm, se pare că am făcut exact același lucru cu "bucla în timp", nu-i așa?

14:21.580 --> 14:24.060
Asa ca lasa-ma sa testez asta.

14:24.070 --> 14:27.240
Să reîmprospăteazăm aici.

14:27.470 --> 14:35.120
Și vedem că avem "10" prin "1" pentru bucla în timp ce și "10" prin "1" prin bucla "face în timp".

14:35.120 --> 14:37.490
Deci, care este diferența aici?

14:37.760 --> 14:44.930
Diferența constă în faptul că, printr-o buclă "în timp", verificăm mai întâi starea, deci spunem:"Este mai mare decât cea mai mare

14:44.930 --> 14:45.500
decât "0"?

14:45.550 --> 14:53.960
O.K. Apoi faceți aceste lucruri. "Versus buclă" face în timp ", care spune:" Faceți mai întâi lucrurile și apoi faceți "counterTwo". "

14:54.110 --> 14:57.500
Permiteți-mi să demonstrez acest lucru.

14:57.570 --> 15:07.530
Dacă facem ... "10" aici. Și "10". Să ne reîmprospătăm.

15:07.750 --> 15:09.200
Am doar "1".

15:09.210 --> 15:11.430
Hmm ... Să verificăm ceva aici.

15:11.510 --> 15:24.330
Am de gând să spun că aceasta este buclă "în timp" și aceasta este bucla "în timp ce". Salvați și actualizați. Asa arata

15:24.330 --> 15:26.530
procesul "face în timp" a fugit.

15:26.910 --> 15:32.520
Dar bucla "în timp" nu a făcut niciodată, pentru că. Ei bine, "10" este egal cu "10".

15:32.700 --> 15:40.770
Aceasta nu reușește și bucla nu se execută. Versus bucla "face în timp", aceasta face primul și apoi verifică

15:40.770 --> 15:42.670
condiție, în cazul în care ar trebui să se bucure.

15:42.810 --> 15:51.180
Deci asta este diferența dintre cele două. Dar pentru a fi sincer cu tine, de cele mai multe ori te duci

15:51.180 --> 16:00.530
utilizați o buclă "pentru". Și bucla "pentru" este ceea ce vă veți obișnui. Dar, de fapt, este mai bine

16:00.530 --> 16:02.530
mod de a face acest lucru.

16:02.720 --> 16:08.990
Dacă te uiți la 'SectionOutline', vedem că am un ultimul, care este 'forEach' și spune "nou în

16:08.990 --> 16:10.590
ECMAScript 5 ".

16:10.880 --> 16:19.070
Așa cum vă amintiți JavaScript este în continuă evoluție și ECMAScript 5 a fost un nou standard, care a adăugat

16:19.230 --> 16:25.170
metoda "forEach". Deci, ce este metoda "forEach"?

16:25.180 --> 16:29.190
Ei bine, am să vă arăt diferența dintre o "for" și o "forEach".

16:29.190 --> 16:30.920
Amândoi fac același lucru.

16:31.110 --> 16:34.620
Dar spune-mi ce arată mai bine.

16:34.710 --> 16:42.490
Deci, aici vom spune "console.log (i) '

16:43.640 --> 16:54.010
Deci, doar logam "i". Și cu o buclă "forEach" pot face funcția "todos.forEach"

16:55.110 --> 16:58.260
'i', 'console.log (i)'.

16:58.560 --> 17:04.270
Este aspectul meu puțin confuz, dar să-l încercăm să vedem ce se întâmplă.

17:04.880 --> 17:16.160
Deci, se pare că o linie '10' este imprimată la '0, 1, 2, 3, 4', iar linia '14' tipărește "cameră curată, perie

17:16.170 --> 17:17.950
dinți, exerciții, javascript de studiu,

17:17.950 --> 17:19.090
mânca sănătos".

17:19.090 --> 17:20.480
Ce facem aici?

17:20.480 --> 17:22.220
Ei bine, "pentru orice"

17:22.430 --> 17:24.190
Este nevoie de o matrice.

17:24.190 --> 17:31.530
În acest caz "todos", și cere un argument, care este "spune-mi ce să fac cu ea".

17:33.030 --> 17:41.820
Deci, acțiunea pe care vrem să o realizăm pe "todos" poate fi reprezentată într-o funcție.

17:41.870 --> 17:52.330
Așa că eu spun "funcția", iar această funcție primește argumentul "i", adică fiecare element individual din

17:52.330 --> 17:53.170
"todos".

17:53.530 --> 18:02.750
Deci, aș putea să spun "todo" aici și "todo". Și reîmprospătați și va fi exact același lucru.

18:02.770 --> 18:12.030
Deci, vedeți aici că nu accesăm neapărat indexul ca și noi, pentru că aici

18:12.030 --> 18:21.600
în scopul de a obține "todos" am avut de făcut, "todos [i]". Dacă am reîmprospătare. O.K.

18:21.710 --> 18:24.440
În acest caz, acum este același lucru.

18:24.910 --> 18:29.190
OK, dar cum pot accesa indexul în cadrul "forEach"?

18:29.570 --> 18:38.860
Al doilea parametru. Iar al doilea argument pe care îl primește este "i", indicele.

18:38.870 --> 18:52.260
Deci, acum dacă fac și "reîmprospătează:" 0, 1, 2, 3, 4 ". Deci este același lucru care face asta în bucla "pentru". Și eu reîmprospătesc

18:52.980 --> 19:03.710
și uită-te la asta. Acum, uitandu-te la aceste 2 care unul va spune mai multe despre ce face?

19:04.850 --> 19:06.670
Aceasta sau aceasta?

19:06.710 --> 19:17.490
Să citim în engleză:"todos.forEach" executați o funcție, că "consola logs" că "todo" și "index"

19:18.520 --> 19:19.720
Impotriva

19:20.130 --> 19:22.520
Ei bine, sincer, asta pare confuz.

19:23.460 --> 19:28.860
Deci, "pentru fiecare" este o metodă cu adevărat foarte bună pe care au adăugat-o la limbă, ceea ce simplifică cu adevărat

19:28.860 --> 19:29.700
lucruri.

19:29.700 --> 19:31.930
Majoritatea oamenilor s-ar putea confunda cu această parte

19:31.920 --> 19:37.610
functia. Dar vreau doar să vă arăt cât de puternic este "pentru orice" putem face acest lucru.

19:37.650 --> 19:45.760
Voi scoate funcția și o voi numi "logTodos".

19:46.010 --> 19:59.390
Și acum tot ce trebuie să fac este să aibă o funcție și să o numesc logTodos.

19:59.570 --> 20:02.340
Și acum voi comenta acest lucru.

20:02.630 --> 20:09.330
Va face exact același lucru, dar acum pot folosi "logTodos" în alte locuri.

20:10.260 --> 20:23.300
Deci, acum pot să fac - să spunem, am o altă listă, care poate avea semne de exclamație, așa cum am făcut-o în prima.

20:26.340 --> 20:28.760
'TodosImportant'.

20:30.780 --> 20:44.810
Deci, acum pot să fac 'todosImportant.forEach' și să folosesc aceeași funcție 'logTodos'. Eu salvez și reîmprospătează. Și uite

20:44.810 --> 20:47.700
la care! Și noi trebuie să le folosim.

20:47.740 --> 20:51.280
Deci puteți vedea că este foarte extensibil.

20:51.300 --> 20:56.830
Acum, ceea ce vreau să vă arăt cu "forEach" este că este un nou standard.

20:56.910 --> 21:01.590
Așa cum facem cu toate noile standarde, ar trebui să verificăm dacă funcționează în toate browserele.

21:01.590 --> 21:08.070
Deci, dacă vă amintiți, am avut "caniuse.com", pe care o folosim pentru asta. Și o folosim la CSS pentru a ne asigura

21:08.100 --> 21:15.390
că funcțiile noastre CSS3, cum ar fi "boxshadow" și "tranziții", funcționează pe toate browserele.

21:15.420 --> 21:23.410
Deci, să facem asta. Să facem "foreach" și vedeți aici "ECMAScript5" - "foreach".

21:23.600 --> 21:27.500
Se pare că, bine, sprijin complet!

21:27.770 --> 21:29.160
Totul arată bine.

21:29.420 --> 21:33.840
Avem doar Opera Mini, care are suport parțial.

21:33.980 --> 21:41.460
Deci, arata destul de bine. Doar dacă nu ne îngrijorăm de Opera Mini. Putem folosi "foreach" în browser.

21:41.530 --> 21:54.460
Și doar pentru a testa dacă deschidem consola noastră, putem vedea cu siguranță că o matrice are "forEach".

21:54.540 --> 21:56.920
Deci, tu o ai.

21:57.060 --> 22:07.630
Am avut bucla "pentru", bucla "în timp", bucla "face în timp" și apoi în cele din urmă "pentru fiecare". Și următorul videoclip

22:07.630 --> 22:14.320
se va extinde pe exemplul nostru de pe Facebook și vom avea mai mulți utilizatori. Așa că putem trece prin baza de date

22:14.410 --> 22:19.830
de mai mulți utilizatori și a vedea dacă "numele de utilizator" și "parola" se potrivesc cu oricare dintre acestea.

22:20.080 --> 22:21.640
Ne vedem în următorul. Pa! Pa
