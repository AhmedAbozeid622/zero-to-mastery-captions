WEBVTT

00:01.000 --> 00:06.710
Bine ai revenit! Funcțiile sunt cea mai grea parte din JavaScript.

00:07.140 --> 00:11.380
Și va dura ceva timp pentru ao obține. In orice caz,

00:11.480 --> 00:13.810
în acest videoclip vom încerca să facem asta.

00:13.880 --> 00:18.020
Vom învăța funcțiile JavaScript.

00:18.030 --> 00:21.710
Deci, haideți să începem cu "Care sunt funcțiile?"

00:22.640 --> 00:28.040
Ei bine, ei sunt o bucată de cod, care efectuează acțiuni. Fără funcții

00:28.040 --> 00:30.730
JavaScript nu ar face nimic.

00:30.740 --> 00:40.340
Frumusețea este că funcțiile pot efectua o acțiune sau mai multe acțiuni. Dar ne vom întoarce la asta. Primul,

00:40.390 --> 00:45.560
hai să vorbim despre modul în care deja cunoașteți câteva funcții JavaScript fără să o realizați.

00:45.640 --> 00:47.250
Le-ai mai văzut înainte.

00:47.300 --> 00:53.160
"alertă" - aceasta este o funcție. "prompt" -

00:56.130 --> 00:57.970
aceasta este o funcție.

00:58.150 --> 00:59.350
Ai mai văzut asta înainte.

01:00.240 --> 01:07.500
Deci, JavaScript ne oferă câteva funcții, care sunt cu adevărat utile, astfel încât toți cei care scriu

01:07.500 --> 01:12.380
JavaScript, le poate folosi fără a fi nevoie să le scrieți din nou și din nou.

01:12.430 --> 01:15.700
Deci, cu funcții avem 2 opțiuni.

01:15.830 --> 01:20.990
One - utilizează funcțiile JavaScript existente, cum ar fi "alertă" și "prompt".

01:21.980 --> 01:25.880
Și două - putem crea propriile noastre.

01:25.880 --> 01:32.900
Așadar, înainte de a intra în modul în care ne creăm propriile noastre funcții și ceea ce este atât de util pentru ele, este posibil să aveți

01:32.900 --> 01:37.920
observat - a observat un singur lucru:aceste paranteze, care sunt alături de altele cu funcții.

01:37.940 --> 01:45.800
Ce vor sa zica? Ei bine, asta în JavaScript înseamnă a executa funcția.

01:46.840 --> 01:52.750
Deci, hai să vedem dacă se întâmplă ceea ce se întâmplă atunci când introduc "alertă" și apasă "Enter".

01:52.810 --> 02:01.540
Am "f alert ()" și unele lucruri ciudate. Hmmm, "f" aici este funcția și poate vedea când staționez

02:01.540 --> 02:01.990
peste ea.

02:01.990 --> 02:04.450
Se afișează "alert funcția ()".

02:04.450 --> 02:08.060
Aceasta este ceea ce funcționează o funcție înseamnă:pentru a rula

02:08.080 --> 02:08.960
'alerta()'

02:09.010 --> 02:13.090
Îl execut prin apelarea lui ca aceasta ['alert ()']

02:15.010 --> 02:23.330
Deci, aceste paranteze înseamnă "apelarea unei funcții", așa că pot numi o funcție.

02:23.490 --> 02:28.580
Și ați observat, de asemenea, că în "alertă" pot adăuga lucruri de genul

02:29.050 --> 02:33.800
"bună!"

02:33.910 --> 02:42.190
Acestea sunt toate numite "argumente" și știu, eu arunc o grămadă de jargon, o grămadă de cuvinte pe tine, dar acestea

02:42.190 --> 02:44.670
sunt doar lucruri pe care le veți auzi mereu,

02:44.710 --> 02:51.490
când ești dezvoltator și se vor lipi de tine - nu va fi prima dată, dar, așa cum am spus, încercați și

02:51.700 --> 02:53.990
ajungeți acolo câte un pas la un moment dat.

02:54.010 --> 02:58.630
Deci "argumente" sunt ceea ce este dat funcțiilor.

02:58.840 --> 03:03.880
De exemplu, când am făcut-o, în exemplul nostru aici.

03:03.970 --> 03:13.190
"Hellooooo" și "console.log" au fost un "argument". Și lucru interesant este că puteți avea mai multe argumente:03:13.200 --> 03:19.820
de exemplu, dacă am eliminat acest lucru și doar am, hai să avem doar "console.log" pentru moment.

03:20.190 --> 03:24.690
Pot sa fac "Cum esti".

03:24.700 --> 03:27.950
Eu salvez și reîmprospătează și am.

03:27.950 --> 03:29.150
"Hellooooo Cum esti".

03:29.210 --> 03:37.800
Vedeți, pot avea mai multe argumente, dar doar adăugarea unei virgule. Dar din nou, asta depinde de funcție.

03:37.810 --> 03:47.870
Acum, din nou, înainte de a începe să ne creăm propria noastră, să revizuim. "alertă" este o funcție, "alertă" cu parantezele,

03:47.960 --> 03:56.220
Eu numesc funcția "alertă" și numesc funcția "alertă" cu argumentul

03:56.400 --> 03:59.910
'Bună'. "alertă" trebuie să fie numită,

04:00.090 --> 04:02.460
altfel doar sta acolo.

04:03.900 --> 04:08.880
Acum, motivul principal de a utiliza funcția este că le puteți numi de câte ori doriți.

04:08.970 --> 04:19.080
Gândiți-vă la "alertă", imaginați-vă să spuneți de fiecare dată "Hei, computer, creați această fereastră pop-up și tipăriți

04:19.080 --> 04:21.090
argumentul pe care l-am pus "de fiecare dată.

04:21.270 --> 04:27.540
Vreau să spun că ar fi cu adevărat suge. Nu este frumos, putem numi doar "alertă" și fereastra pop-up pentru care apare

04:27.540 --> 04:29.770
noi și totul sa făcut pentru tine?

04:29.780 --> 04:32.010
Ei bine, cam asta fac funcțiile.

04:32.010 --> 04:39.810
Ele fac viața mai ușoară prin acțiuni, îmbinate, astfel încât să le scrieți o singură dată și apoi puteți doar

04:39.810 --> 04:41.450
sună-l.

04:41.480 --> 04:43.480
O.K. Deci, să ajungem la partea distractivă.

04:43.490 --> 04:54.970
Să ne creăm propriile noastre funcții. Deci, dacă ne întoarcem la documentul nostru aici, să vedem chiar aici. Avem 2

04:54.970 --> 05:00.180
moduri de a crea funcții și vă voi arăta prima cale.

05:00.340 --> 05:01.980
De fapt, o să-ți arăt mai întâi asta.

05:02.200 --> 05:08.970
Deci, hai să ne creăm funcția proprie, folosind prima metodă, care este "declarația funcției".

05:09.310 --> 05:17.780
Și vom folosi aici "script.js", care este legat de codul nostru HTML, pe care l-am făcut la videoclipul anterior.

05:17.930 --> 05:23.840
Deci, aici pot spune "funcția spuneHello ()"

05:27.960 --> 05:30.510
este "console.log (" Hello ") '.

05:35.380 --> 05:38.700
Din nou, sintaxa este puțin diferită, dar trebuie doar să o ții minte.

05:38.800 --> 05:41.850
Spun "funcția" - se va numi "spune Hello".

05:42.070 --> 05:49.150
Avem acele paranteze, care sunt foarte familiare pentru noi. Apoi "console.log (" Hello "); '. Să vedem ce se întâmplă

05:49.150 --> 05:53.480
când salvez. Reîmprospătez.

05:53.830 --> 05:54.860
Hmmm, nimic nu se întâmplă.

05:55.980 --> 05:56.920
De ce este asta?

05:57.240 --> 06:00.530
Am spus această funcție.

06:00.540 --> 06:09.430
Dar amintiți-vă, ce am făcut cu "alerta"? Ei bine, există, dar nu am reușit.

06:09.480 --> 06:16.170
Trebuie să sunăm funcția, așa că trebuie să spunem "spune Hello", așa cum este. Acum când mă reîmprospătesc.

06:16.740 --> 06:19.430
Am "Bună ziua".

06:19.570 --> 06:25.610
Așa că gândiți-vă la acest lucru cu variabila. Când spun "var a este egal cu 5",

06:25.720 --> 06:29.260
asta nu va face nimic, până nu ajungem la "a".

06:29.560 --> 06:34.120
Și atunci se imprimă "5".

06:34.130 --> 06:36.500
O.K. Deci, într-un fel.

06:36.510 --> 06:39.060
Care este al doilea mod de a crea o funcție?

06:39.270 --> 06:45.150
Cea de-a doua cale se numește expresia funcției.

06:45.340 --> 06:47.900
Și asta merge așa.

06:48.130 --> 07:01.430
Pot spune "var sayBye = function () '' console.log (" Bye ");

07:02.300 --> 07:05.620
Din nou, o să salvez și să reîmprospătesc.

07:05.810 --> 07:11.660
Și din nou, avem doar "Bună", pentru că, bine, din nou trebuie să numim această funcție.

07:11.720 --> 07:20.560
Deci, eu spun "spuneBye", rulați-l și reîmprospătați. "Buna pa". Acum

07:20.640 --> 07:30.040
un lucru pe care l-ați observat aici este că atribuim această funcție variabilei sayBye, dar

07:30.940 --> 07:33.240
care este numele funcției?

07:33.250 --> 07:40.520
Vreau să spun că aici numele funcției este "sayHello", dar aici suntem, doar atribuim variabilei.

07:40.520 --> 07:48.230
Adică, din punct de vedere tehnic, funcția nu are un nume și se numește o funcție anonimă.

07:48.360 --> 07:54.480
Am atribuit această funcție lui "sayBye", așa că putem să îl referim prin "sayBye", dar altfel nu putem

07:54.480 --> 07:56.350
accesați cu adevărat această funcție.

07:56.640 --> 07:59.880
Vei vedea de ce e important

07:59.940 --> 08:01.500
în videoclipurile ulterioare.

08:01.500 --> 08:06.770
Dar puteți face acest lucru din punct de vedere tehnic:și numiți această funcție "byebye".

08:13.110 --> 08:13.760
O.K.

08:14.050 --> 08:20.560
Deci, acum că știm, cum să creăm funcții, de ce avem nevoie de aceste argumente?

08:20.830 --> 08:23.740
Amintiți-vă, de ce avem nevoie de lucruri în interiorul brațelor?

08:23.740 --> 08:26.660
Vreau să spun ... acestea arată destul de util, nu?

08:27.630 --> 08:40.090
Să încercăm ceva. "cântă", hai să facem o funcție "cântă" și acest "cântă" va avea, va avea "console.log"

08:40.120 --> 08:46.220
și voi spune "AHHHHHHHHHHHH". Asta e eu, cântând.

08:46.230 --> 08:51.550
Și are și console.log ("TEEEEEEEEE").

08:52.030 --> 09:00.390
Așa cânt. Acum, dacă salvez acest lucru și reîmprospătează, asigurați-vă că încă cântă. Trebuie să o spun!

09:03.440 --> 09:04.920
Să ne reîmprospătăm.

09:05.040 --> 09:07.410
Cântec frumos:AHHHHHHHHHHHH, TEEEEEEEEE.

09:07.680 --> 09:18.530
Dar acum, de fiecare dată când vreau să schimb o melodie diferită, poate că am vrut să spun "laaa deeee daaa".

09:18.660 --> 09:31.840
Ei bine, trebuie fie să șterg acest lucru și să schimb acest lucru la "laaa deeee daaa" sau trebuie să creez unul nou, sunând

09:32.260 --> 09:33.640
'Sing2'

09:36.310 --> 09:50.750
"console.log" și puteți vedea aici, cât de enervant este faptul că scriu același lucru peste și peste

09:51.020 --> 09:52.710
și doar schimbarea acestor lucruri.

09:52.910 --> 10:00.090
Și acum trebuie să rulez "sing2". Și eu reîmprospătez, și puf, a fost obositor! O.K.

10:00.460 --> 10:07.600
Am făcut toate astea și acum imaginați-vă, dacă am avea mii de cântece, pe care vrem să le cântăm; noi suntem "Spotify" și

10:07.600 --> 10:10.330
Vrem să afișăm toate versurile cântecului.

10:10.330 --> 10:13.210
Vreau să spun că e destul de obositor, nu?

10:13.210 --> 10:18.680
Și una dintre regulile cu dezvoltatorii este această idee de "DRY:Nu te repeta".

10:18.730 --> 10:21.790
În mod ideal, doriți să faceți lucrurile cât mai eficiente posibil.

10:22.000 --> 10:34.820
Și un lucru pe care îl puteți face este adăugarea de argumente. Așa că pot adăuga ceva de genul "cântec" și acum - permiteți-mi doar

10:34.820 --> 10:35.970
ștergeți acest lucru pentru moment.

10:37.720 --> 10:46.670
În "console.log" pot spune doar "cântec".

10:46.820 --> 11:01.190
Deci, acum când vreau să schimb piesa, pot spune "Laaa deee daaa". „Cântă ( "helllloooooo")

11:02.140 --> 11:02.990
Apoi "cântă

11:05.330 --> 11:08.990
("backstreets spate bine")

11:11.770 --> 11:14.470
Acum salvez și reîmprospătează.

11:14.500 --> 11:23.060
Și uită-te la asta! Vedeți câte linii de cod am salvat și cum pot acum să folosesc "cânt" oricând vreau,

11:23.330 --> 11:26.600
și o pot personaliza la ceea ce vreau.

11:26.600 --> 11:28.050
Un fel de "alertă".

11:28.130 --> 11:30.570
Așa fac argumentele.

11:30.830 --> 11:37.790
Argumentele ne permit să nu ne repetăm ​​și să ne facem funcțiile pe care noi le numim mai extensibile.

11:37.790 --> 11:40.530
Ele pot fi personalizate.

11:40.590 --> 11:44.860
Să facem un alt lucru pentru a învăța un lucru distractiv despre funcții.

11:44.970 --> 11:57.450
Vom șterge acest lucru și vom încerca funcția "multiplicare ()". Și îi vom da "a" și "b", așa că va accepta două

11:57.450 --> 12:01.330
argumente și vom face 'a * b'.

12:01.710 --> 12:15.320
Și acum, în 'a * b' vom spune "multiplica" și vom numi "multiplica (5, 10)". Salvați și actualizați.

12:15.460 --> 12:18.890
Și acum ar trebui să ne "multiplicăm" la dispoziție.

12:18.910 --> 12:24.570
Puteți vedea aici "multiplica (a, b)" care este "b" exact ceea ce am scris.

12:24.600 --> 12:27.370
OK, deci ce se întâmplă dacă "multiplic"

12:29.630 --> 12:32.020
(5, 10)

12:32.480 --> 12:33.410
Ce crezi că o să am?

12:33.560 --> 12:33.910
Sa vedem!

12:37.980 --> 12:39.770
Hmmm, asta e cu adevărat ciudat.

12:39.780 --> 12:42.340
Să încercăm din nou cu un număr diferit.

12:42.370 --> 12:44.180
Încă "nedefinită".

12:44.380 --> 12:47.530
De ce este asta? Ei bine, aceasta se numește depanare.

12:47.530 --> 12:50.680
Să vedem dacă ne putem da seama ce se întâmplă aici.

12:50.680 --> 12:53.580
Voi face un "console.log" aici.

12:54.490 --> 12:59.050
Și voi deconecta "a" și "b" pentru a vă asigura că această funcție funcționează.

12:59.210 --> 13:11.600
Așa că am de gând să salvez și să reîmprospătez. O.K. 'console.log', 'a' și 'b' și am rulat din nou funcția.

13:11.660 --> 13:17.610
'Console.log'. O.K. Așa că se pare că se întâmplă, dar eu sunt aici undefined.

13:17.770 --> 13:23.440
Păi, vă pot arăta asta într-o diagramă.

13:23.440 --> 13:27.270
Deci, o funcție este o "intrare".

13:27.330 --> 13:32.270
Îi dăm un fel de "intrare", poate uneori este goală, așa că e tot ce e în bracket.

13:32.460 --> 13:34.900
În cazul nostru, este 'a' și 'b'.

13:35.010 --> 13:42.790
Deci, acestea sunt numere, deci "5" și "10". Și apoi funcția face tot ceea ce îi spunem să facă.

13:42.790 --> 13:51.550
În cazul nostru, a fost de a "multiplica 5 și 10". Și apoi obținem o "ieșire", dar nu obținem acea "ieșire".

13:51.550 --> 13:52.280
De ce este asta?

13:52.350 --> 13:56.270
Ei bine, pentru că o funcție funcționează așa.

13:56.650 --> 14:01.450
Și nu vă faceți griji, tocmai am adăugat o grămadă de săgeți, dar voi trece prin toate și vă voi explica.

14:01.450 --> 14:03.400
"Intrarea" primește "5" și "10".

14:03.400 --> 14:11.950
Funcția are câteva lucruri și până acum am făcut doar "console.log", iar modul "console.log"

14:11.950 --> 14:18.870
este funcția spune:"Înregistrează-te doar la consola din browser".

14:19.100 --> 14:24.400
Dar nu am făcut-o niciodată acolo unde am returnat o "valoare".

14:24.470 --> 14:25.820
Lasă-mă să-ți arăt ce vreau să spun.

14:26.600 --> 14:29.300
Când nu vom întoarce ceva, ajungem "nedefinit".

14:29.330 --> 14:32.240
Când vom întoarce ceva, obținem "valoarea".

14:32.240 --> 14:37.090
Așadar, să vedem dacă putem explica acest lucru.

14:37.110 --> 14:47.410
Deci, aici, ori de câte ori spun "multiplica (10, 5)" și voi elimina "console.log" doar ca să nu se confunde

14:47.410 --> 14:50.400
noi, salvați și reîmprospătați ...

14:50.770 --> 14:51.820
Am primit "nedefinit".

14:52.000 --> 14:56.710
Asta pentru că, după cum vedeți în această diagramă, nu vom întoarce nimic.

14:56.710 --> 15:04.330
Deci, în JavaScript modul în care vă întoarceți lucrurile este - trebuie să puneți "întoarcerea" în interiorul unei funcții.

15:04.690 --> 15:12.400
Deci, acum se va "întoarce un * b" și veți vedea, că este un - este un cuvânt special în JavaScript - acesta

15:12.400 --> 15:13.740
evidențiată în roșu.

15:14.020 --> 15:20.310
Ei bine, acum spune "Da, vom reveni la valoare".

15:20.370 --> 15:28.320
Deci, chiar dacă am adăugat "console.log". Veți face "console.log" și apoi întrebați "Hei, am o" întoarcere "?".

15:28.470 --> 15:31.160
Dacă o fac, o voi trimite o valoare.

15:32.170 --> 15:33.520
Sperăm că nu este prea confuz.

15:33.520 --> 15:35.170
Să vedem dacă funcționează.

15:35.930 --> 15:37.980
O să salvez și să reîmprospătesc.

15:38.240 --> 15:47.700
Și acum, dacă voi "înmulți (5, 10)", voi obține "50".

15:47.840 --> 15:56.860
Ura! Funcția noastră funcționează și acesta este un concept cheie important, pe care trebuie să-l amintim

15:56.860 --> 16:01.010
este că trebuie să readucem ceva de la o funcție.

16:01.030 --> 16:02.870
Adică nu trebuie.

16:02.980 --> 16:07.990
Dar, în mod ideal, noi facem acest lucru, deci nu primim aceste cazuri, unde pur și simplu avem "nedefinit" și nu știm ce

16:07.990 --> 16:08.680
funcționează.

16:08.680 --> 16:14.830
Este un fel de "cutie neagră", care face ceva și am putea obține un "console.log", sau nu, dar nu facem

16:14.830 --> 16:16.410
știi ce se întâmplă înăuntru.

16:16.410 --> 16:22.620
Este bine să aveți o "întoarcere" pentru a vă asigura că funcția funcționează așa cum ne așteptăm.

16:22.650 --> 16:24.540
Ok, dacă facem așa ceva?

16:24.540 --> 16:33.550
Ce se întâmplă dacă fac "întoarcerea a", și am uitat aici punct și virgulă și "întoarcere b". Ce crezi ca se va intampla? hai

16:33.550 --> 16:37.930
reîmprospătați și executați acest lucru.

16:37.960 --> 16:38.540
O.K.

16:38.830 --> 16:41.870
Ce se întâmplă dacă schimba ordinea și am pus primul?

16:41.960 --> 16:43.080
Să încercăm din nou asta.

16:44.960 --> 16:54.550
Obțineți "5" și "return" este modalitatea finală de a pune capăt unei funcții dacă acest lucru are sens. Deci, de îndată ce spui

16:54.550 --> 16:57.770
"return" într-o funcție, programul iese.

16:57.820 --> 17:04.240
Deci, pentru a trece prin aceasta spun "multiplica (5, 10)". Merge la funcție, spune:"Da, am funcția

17:04.240 --> 17:10.690
'multiplica'. Voi pune "a" ca "5" și "10" ca "b" ".

17:10.840 --> 17:20.540
Și acum intră în funcție și spune:"returnați 5", care este "a". Așa că revine și iese din funcție.

17:20.950 --> 17:23.290
Deci acum aceste două linii nu sunt deloc executate.

17:23.290 --> 17:30.090
Programul citește pur și simplu acest lucru, merge aici, citește prima linie a funcției și apoi iese.

17:30.100 --> 17:37.630
Deci, într-o funcție ar trebui să aveți o declarație de "întoarcere" sau este corect?

17:38.500 --> 17:41.910
Să vedem un caz în care ar putea să nu fie corect.

17:41.920 --> 17:43.750
Să adăugăm o declarație "if" în acest sens.

17:44.080 --> 17:53.330
Să spunem că vrem să "multiplicăm", dar suntem, de asemenea, un fel de leneși și nu vrem să fim prea greu cu

17:53.330 --> 17:54.040
calculatorul.

17:54.140 --> 18:05.420
Deci, să spunem că vrem să spunem că "dacă" - ne amintim de "declarația if". "dacă" a "este mai mare decât" 10 "" sau "dacă" b "este

18:05.420 --> 18:07.430
mai mare decât "10" ".

18:10.170 --> 18:18.430
Putem spune că "întoarcerea" este prea greu ";".

18:18.710 --> 18:19.290
În caz contrar [altceva]

18:25.850 --> 18:33.380
vom reveni 'a * b'. Să vedem ce se întâmplă aici.

18:34.890 --> 18:39.050
O să salvez și să reîmprospătesc. Să facem "multiplicarea (5.4)".

18:43.400 --> 18:46.220
Am 20 de ani.

18:46.270 --> 18:49.680
Și dacă facem "5" și "40"? eu iau

18:49.690 --> 19:01.180
"este prea greu", pentru că acum citește funcția "5" și "10" și spune:"Hmmm," b ", care este" 40 "

19:01.180 --> 19:02.440
decât "10" ".

19:02.470 --> 19:06.560
Deci, conform declarației "dacă" voi merge "prea greu".

19:06.670 --> 19:19.480
Și pentru că o "întoarcere" iese din funcție, nu ajunge niciodată la acest lucru, chiar dacă eu fac "întoarcerea a * b", nu vei

19:19.480 --> 19:24.490
ajungeți acolo, deoarece "întoarcerea" iese din funcție. Doar pentru a verifica dublu,

19:24.490 --> 19:28.960
Să facem asta:să facem "5 * 40".

19:28.970 --> 19:34.750
Și niciodată nu ajunge la niciuna dintre aceste linii, pentru că imediat ce se vede o "întoarcere", ea iese din funcție.

19:35.790 --> 19:37.320
Știu că sunt multe.

19:37.320 --> 19:41.980
Și vom înțelege de ce aceste lucruri sunt importante în următoarele două videoclipuri.

19:42.210 --> 19:50.540
Dar am vrut să vă arăt, de asemenea, că puteți avea funcții interne. Deci, în funcțiile JavaScript sunt "variabile".

19:50.880 --> 19:54.120
Și ceea ce înseamnă asta înseamnă că am reușit să le atribuim

19:56.880 --> 19:59.990
funcționează astfel. Dreapta?

20:00.200 --> 20:02.960
Și dacă am făcut așa ceva,

20:03.080 --> 20:09.640
bine, putem apela "a" în același mod pe care l-am făcut și tocmai am atribuit funcția ca variabilă.

20:09.680 --> 20:15.030
Deci, din punct de vedere tehnic, am putea face ceva de genul asta.

20:15.050 --> 20:22.830
Deci să "multiplicăm" - Să ne întoarcem la modul în care am avut-o. Vom lăsa "multiplica" așa cum este în

20:22.830 --> 20:23.580
formă simplă.

20:27.330 --> 20:29.640
Și putem, de fapt

20:32.140 --> 20:38.190
spune "alertă (multiplicare)".

20:38.650 --> 20:43.900
Și apoi vom face "3" și "4". Și știu că există o mulțime de paranteze.

20:43.900 --> 20:45.620
Nu vă faceți griji că vom trece prin ea.

20:45.760 --> 20:49.490
Dar, hai să salvăm asta și să reîmprospătăm și să vedem ce se întâmplă.

20:49.570 --> 20:58.150
Am 12 ani. Pentru că ceea ce se întâmplă este:începem cu funcția interioară și spunem:"Hei, noi

20:58.150 --> 20:59.330
doriți să avertizați ceva! ".

20:59.470 --> 21:00.630
"Ce vrei să alergi?"

21:00.640 --> 21:03.610
"Ei bine, vrem să" înmulțim ""

21:03.610 --> 21:06.330
"Vrem să numim această funcție și să dăm" a "aceasta" 3 "și" 4 "".

21:06.400 --> 21:14.560
Deci, se merge la multiplicare și se spune:"Da, vom aloca" a "și" b "la" 3 "și" 4 "și vreau să revin" a "și" b ".

21:14.560 --> 21:24.010
Deci acum "multiplica" se schimbă în "12" și apoi "alertăm".

21:24.020 --> 21:33.580
Deci, vedeți că acum, în loc să aveți ceva de genul "total", "multiplicați (4.5)" și apoi puneți "total"

21:33.590 --> 21:37.420
aici, putem numi "multiplica" aici.

21:40.370 --> 21:41.620
Uau! care a fost, a fost mult!

21:41.640 --> 21:44.850
Dar vreau să vă arăt că am ... am abordat,

21:44.880 --> 21:51.000
Cred că cel mai greu subiect din JavaScript, care este funcțiile. Și ați acoperit, de asemenea, "întoarcerea", care

21:51.000 --> 21:53.040
este foarte foarte bun.

21:53.050 --> 21:59.140
Un alt lucru pe care vreau să vă arăt este că mulți oameni se confundă cu terminologia și

21:59.260 --> 22:02.340
Nu cred că este la fel de important, dar vreau doar să clarific.

22:02.390 --> 22:11.370
Există conceptul de "parametri" și "argumente".

22:11.400 --> 22:18.520
Acum, parametrii și argumentele sunt foarte asemănătoare, dar sunt puțin diferite.

22:18.520 --> 22:22.420
Astfel, "argumentele" așa cum am spus, sunt "4" și "5".

22:22.480 --> 22:27.640
Deci, funcțiile pot avea "argumente" și sunt chemate cu "argumente".

22:28.060 --> 22:31.330
Parametrii sunt ceea ce înseamnă "a" și "b".

22:31.330 --> 22:36.290
Astfel, "multiplicarea" are doi "parametri" de "a" și "b".

22:36.420 --> 22:38.210
Știu că este puțin confuz.

22:38.210 --> 22:40.010
Puteți citi mai mult despre el.

22:40.010 --> 22:46.860
Nu cred că este important să știi cu adevărat diferența, dar oricând citești articole

22:46.860 --> 22:52.550
sau învățați, poate prin YouTube, că veți auzi aceste cuvinte aproape interschimbabil.

22:52.590 --> 22:56.710
Ele înseamnă destul de mult același lucru, doar o mică diferență în ele.

22:58.460 --> 23:00.290
In regula!

23:00.910 --> 23:03.690
Știu că știu că am terminat multă terminologie!

23:03.730 --> 23:10.780
Dar după repetarea ei de câteva ori va avea sens, așa că rămâi tare. Dar asta este pentru funcții.

23:11.080 --> 23:13.580
E timpul să încercați câteva exerciții.

23:13.600 --> 23:15.420
Reveniți la acest videoclip dacă este necesar.

23:15.430 --> 23:21.370
Chiar doriți să vă asigurați că înțelegeți funcțiile, deoarece va fi nucleul JavaScript.

23:21.370 --> 23:28.360
Doar amintiți-vă, ce facem cu funcțiile este, noi creăm cuvinte noi în limbaj, în JavaScript

23:28.360 --> 23:34.510
limba. Așadar, putem crea "variabile" sau putem crea "funcții" pentru a adăuga vocabular la limbă și

23:34.750 --> 23:37.370
până în acest moment, asta e tot ce am făcut.

23:37.390 --> 23:44.950
Avem acest JavaScript care a avut câteva cuvinte, pe care le putem folosi, și am adăugat noi, cum ar fi "multiplica" și

23:45.370 --> 23:48.760
"total", pentru a fi mai folositor pentru noi.

23:49.000 --> 23:51.020
Și asta este programarea.

23:51.210 --> 23:53.110
Ne vedem în următorul. Pa! Pa
