WEBVTT

00:00.980 --> 00:02.900
Bună tuturor.

00:02.900 --> 00:04.000
Bine ai revenit.

00:04.280 --> 00:12.170
Și în acest videoclip, vreau să vă arăt ceva care m-a făcut foarte entuziasmat când am început

00:12.170 --> 00:19.040
nod de învățare și, sperăm, veți fi la fel de entuziasmați ca și mine când vom trece prin acest videoclip și apoi vom face

00:19.040 --> 00:20.300
un pic de provocare.

00:20.300 --> 00:21.310
Va sufla mintea ta.

00:21.330 --> 00:25.760
Cel puțin mi-a făcut pentru mine când am început să învăț să cod.

00:25.850 --> 00:34.250
Acum, în videoclipul precedent am vorbit despre ceva numit modulul FS care vine cu un nod, și asta

00:34.250 --> 00:39.590
este ceva care este construit în nod și modul în care îl obținem este că vom face doar const.

00:39.760 --> 00:50.360
Ei bine, avem nevoie de un fișier în primul rând, așa că hai să facem un script.js touch, vom crea un nou script perfect.

00:50.400 --> 00:52.920
Bine, putem închide asta pentru că nu avem nevoie de asta.

00:53.490 --> 01:02.190
Și în script.js pe care le avem în acest dosar sau nod putem avea 'const fs'.

01:02.210 --> 01:14.990
equals 'necesită (' fs ')', deci FS aici reprezintă sistemul de fișiere și dacă aveți un nod descărcat aveți acces

01:14.990 --> 01:15.460
la acest.

01:15.470 --> 01:17.680
Doar făcând asta.

01:17.880 --> 01:21.750
De ce este atât de interesant și atât de util.

01:22.320 --> 01:30.830
Ei bine, deoarece sistemul de fișiere FS vă permite să accesați sistemul nostru de fișiere, care din nou nu sună interesant.

01:30.840 --> 01:38.230
Dar permiteți-mi să vă dau seama ce se întâmplă și de ce este util acest lucru - purtați-mă aici cu mine.

01:38.280 --> 01:42.080
Am de gând să fac un pic de codificare și apoi voi explica exact ce se întâmplă.

01:43.140 --> 01:48.470
Deci, vom folosi "fs.readFile".

01:48.560 --> 01:50.720
E destul de explicativ.

01:51.200 --> 02:01.380
Avem un parametru gol și apoi avem eroare pentru eroare, date.

02:01.760 --> 02:03.710
Și aceasta este o funcție de săgeată.

02:05.450 --> 02:12.270
Deci, al doilea parametru este o funcție și această funcție are erori sau date.

02:12.310 --> 02:24.630
Deci, pentru eroare, am de gând să spun dacă există o eroare vom arunca greșit, sau putem spune doar punct de consolă

02:25.020 --> 02:30.660
log errrroooorrr. Întoarce-i cu adevărat în față.

02:31.550 --> 02:42.680
În regulă! Acum, dacă nu a apărut o eroare, vom spune că vom spune console.log și vom deconecta

02:42.680 --> 02:45.150
indiferent de date.

02:45.370 --> 02:45.990
În regulă.

02:46.150 --> 02:47.720
Permiteți-mi să adaug semicolonii.

02:48.830 --> 02:51.090
Și salvați asta.

02:51.100 --> 02:59.440
Deci, ce fac aici. Tocmai am importat modulul FS care vine cu nodul, iar modulul FS are o metodă

02:59.740 --> 03:01.670
readFile () că

03:01.720 --> 03:05.480
bine, se pare că citește un fel de fișier.

03:05.560 --> 03:13.300
Primul parametru este fișierul real pe care dorim să îl facem, deci calea spre fișier, pe care nu o avem încă.

03:13.300 --> 03:14.650
Deci, să creăm una.

03:14.650 --> 03:25.200
Voi spune un fișier nou și o vom numi "hello.txt", iar cu "hello.txt", vom face clasicul nostru

03:26.300 --> 03:27.850
helllloooooo acolo !!!

03:29.090 --> 03:32.300
Și lucruri incitante, deci semne de exclamare.

03:32.540 --> 03:37.120
Am salvat asta și acum putem spune că vrem să citim dosarul.

03:37.190 --> 03:40.340
"hello.txt" din directorul curent.

03:41.140 --> 03:42.340
Bună ziua

03:42.790 --> 03:45.140
text.

03:45.280 --> 03:50.450
Acum, această metodă readFile va găsi fișierul cu calea,

03:50.500 --> 03:52.700
ok, așa că este aici.

03:52.840 --> 03:59.420
O să citească și apoi, dacă există o eroare, o să apară o eroare.

03:59.590 --> 04:06.670
Dacă există un fel de date și totul este de succes, va scuipa date. Cu

04:06.670 --> 04:08.300
modul în care putem rula acest fișier în nod.

04:08.310 --> 04:13.720
Ei bine, mai întâi trebuie să o salvez. Vom spune nod script.js

04:15.140 --> 04:19.740
Intră și am tampon.

04:20.920 --> 04:22.740
Ce este asta?

04:22.840 --> 04:27.460
Și asta pentru că trebuie să facem un pic de codificare.

04:27.670 --> 04:34.680
Și ceea ce înseamnă asta este dacă fac acest "toString ()", să încercăm doar asta și să vă arătăm ce vreau să spun.

04:37.450 --> 04:38.530
Și eu.

04:38.770 --> 04:41.250
Salutare.

04:41.260 --> 04:49.530
Deci, "readFile" citește fișierul așa cum sugerează și numele, și va scuipa tot ceea ce citește.

04:50.010 --> 04:50.750
Date.

04:51.500 --> 04:55.490
Acum, de ce trebuie să punem "toString ()" aici.

04:56.970 --> 05:04.380
Doar pentru a ști că 'toString ()' are ceva, în mod implicit, dacă nu adăugați nimic, va folosi

05:04.380 --> 05:11.280
codificarea numită UTF 8 și UTF 8 este un tip de codificare.

05:11.420 --> 05:14.640
Hai să vedem asta pentru a ne asigura că totul este același.

05:14.750 --> 05:15.530
Da.

05:15.530 --> 05:20.300
Deci UTF 8 este un tip de codificare pe care o avem.

05:20.300 --> 05:22.980
Asta e destul de standard cu HTML 5.

05:23.000 --> 05:26.900
Și aproape toată lumea o folosește pe web.

05:27.290 --> 05:37.160
Este o modalitate de a avea personaje, indiferent dacă sunt caractere latine, știți ABC sau avem coreeană

05:37.160 --> 05:45.770
Caractere japoneze, chinezești, toate sunt reprezentate de un număr, iar UTF 8 este o metodă de codare a acestora

05:45.770 --> 05:48.870
pentru a vă asigura că le putem citi.

05:48.920 --> 05:55.910
Este de fapt un subiect destul de complex, așa că vă recomandăm pagina Wikipedia care vorbește despre UTF 8.

05:55.970 --> 06:03.420
Deocamdată, știți că UTF 8 este un tip de codificare care este destul de mult standard pe web.

06:03.500 --> 06:09.290
S-ar putea să fi văzut și ASCII și ASCII înainte de a exista UTF 8.

06:09.290 --> 06:19.610
ASCII a fost în principal pentru limbile bazate pe limba latină, deci ABC-urile; și UTF sa extins ca să includă și mai multe

06:19.860 --> 06:22.540
multe alte limbi din diferite părți ale lumii.

06:22.960 --> 06:29.780
Foarte bine un pic de tangență pe care nu trebuia să mergem mai departe, dar după cum puteți vedea aici, noi

06:30.530 --> 06:30.990
avea

06:31.070 --> 06:35.300
"helllloooooo there" și putem citi fișierul.

06:35.300 --> 06:36.320
În regulă.

06:36.330 --> 06:37.030
Foarte tare.

06:38.270 --> 06:42.810
Permiteți-mi să adaug o altă metodă în repertoriul dvs.

06:43.250 --> 06:57.160
Să facem, de asemenea, "fs.readFileSync ()" și "fs.readFileSync ()" funcționează puțin diferit față de precedentul

06:57.160 --> 07:00.210
unul și sincronizare înseamnă sincron.

07:00.580 --> 07:01.540
Așa că vom vedea ce se întâmplă.

07:01.540 --> 07:02.500
O să intru

07:05.340 --> 07:12.230
"hello.txt" încă o dată, și de această dată o voi lăsa așa.

07:14.150 --> 07:26.630
Și să spunem doar că acest lucru va fi egal cu fișierul și vom "console.log (file)".

07:26.650 --> 07:27.020
În regulă.

07:27.050 --> 07:31.710
Lasă-mă să salvez asta și să conduc asta.

07:31.760 --> 07:32.390
În regulă.

07:32.460 --> 07:37.370
Știm încă o dată că avem acest lucru deoarece trebuie să facem 'toString ()'.

07:37.440 --> 07:38.610
Deci, să facem asta.

07:38.640 --> 07:42.660
Voi încerca "toString ()"

07:46.060 --> 07:51.020
O să salvez și să o conduc din nou. Bine, înțeleg

07:51.280 --> 07:52.410
'helllloooooo acolo!'

07:52.510 --> 08:05.020
Dar doar pentru a le distinge, să spunem doar că aceasta este numărul unu și aceasta este numărul doi.

08:05.450 --> 08:07.660
Salvez asta, alergi din nou.

08:08.630 --> 08:12.510
Și ce, ce sa întâmplat.

08:14.050 --> 08:21.140
Avem unul care vine după cele două.

08:21.920 --> 08:30.830
Acum, dacă ați urmărit videoclipul sincron asincron în acest curs, atunci ați putea înțelege ce este

08:30.830 --> 08:32.090
se întâmplă aici.

08:32.090 --> 08:34.210
Dacă nu, o să fac o scurtă prezentare.

08:34.220 --> 08:42.610
Dar vă recomand să verificați videoclipul. Acum, fișierul de citire este asincron și de aceea are ceva

08:42.610 --> 08:45.200
numită funcția de apel invers.

08:45.220 --> 08:53.290
Se spune:hei voi citi acest fișier, și când voi termina cu asta, veți continua să continuați cu dvs.

08:53.290 --> 08:55.120
de afaceri și să țineți lectură.

08:55.120 --> 08:59.010
Linia trei, linia patru, linia cinci, linia șase, până la 11.

08:59.260 --> 09:07.010
Când am terminat, vă voi anunța și vă voi da o eroare sau unele date. 'readFileSync ()' care

09:07.010 --> 09:11.740
este sincronă spune:Voi citi acest fișier.

09:11.780 --> 09:14.750
Nu faceți nimic, așteptați aici când am terminat

09:14.750 --> 09:18.600
O să-i dau "fișierul" și apoi puteți continua.

09:20.210 --> 09:30.080
Deci, după cum puteți vedea aici ce se întâmplă, citim dosarul și pentru că acesta este un asincron, merge

09:30.080 --> 09:41.280
pentru a rula acest lucru și a veni la linia 10 și rulați "fs.readFileSync ()" și "readFileSync ()" pentru că spune

09:41.280 --> 09:45.150
Hei, așteptați până când termin acest lucru, va fi imprimat

09:45.330 --> 09:46.920
'helllloooooo acolo!'

09:47.160 --> 09:52.340
și apoi codul asincron va spune:hei am terminat de citit fișierul,

09:52.380 --> 09:55.770
iată datele și se tipăresc aici.

09:55.770 --> 09:59.860
Din nou, îmi recomand cu adevărat să verificați videoclipul sincron asincron.

10:00.330 --> 10:03.070
Dar, pentru moment, sperăm că are sens.

10:03.240 --> 10:12.240
Privind acum, ce ar trebui să folosiți? Ei bine, pentru un caz simplu ca acesta,

10:12.400 --> 10:19.690
putem folosi oricare dorim. Dar puteți vedea o problemă cu cea de-a doua, mai ales dacă construim

10:19.690 --> 10:21.150
ceva de genul unui server.

10:21.250 --> 10:25.090
Dacă avem un dosar masiv care are ceva mai mult decât "helllloooooo there !!!",

10:25.300 --> 10:34.360
dacă facem "readFileSync ()", ceea ce se întâmplă este că vom opri sau vom întrerupe execuția

10:34.360 --> 10:39.980
fișier și va citi întregul text.

10:40.370 --> 10:47.000
Și programul va aștepta doar ca să termine; versus fișierul de citire care spune:hei tu

10:47.000 --> 10:48.230
poate continua.

10:48.320 --> 10:50.340
Te voi informa când voi termina cu asta.

10:50.360 --> 10:56.210
Atunci când construiți un server și să spunem un server expres cu rute.

10:56.360 --> 11:03.530
Ei bine, în acest caz vrem să folosim readFile () dacă citim orice fel de fișier sau fișier text, indiferent

11:03.530 --> 11:04.160
este.

11:04.310 --> 11:08.680
Pentru că în acest fel nu blocăm execuția și programul poate continua să facă lucrurile.

11:09.700 --> 11:10.050
În regulă.

11:10.150 --> 11:12.750
Deci, ultima dată doar pentru a clarifica lucrurile.

11:12.760 --> 11:17.690
Am de gând să o etichetez ca "Async" și "Sync".

11:17.710 --> 11:22.350
Deci, încă o dată, dacă executăm acest lucru, avem "Sync" și "Async".

11:22.420 --> 11:23.360
'helllloooooo acolo!'

11:23.790 --> 11:32.350
Dar foarte cool suntem capabili să citim un fișier și ambele cazuri care au fost destul de cool.

11:32.350 --> 11:38.800
Permiteți-mi să vă arăt câteva altele și apoi să vă spun exact de ce este așa de interesant și cum putem

11:38.800 --> 11:40.880
utilizați-l pentru a face unele lucruri foarte interesante.

11:44.090 --> 11:50.770
Deci, să spunem "helllloooooo acolo!" textul este un fel de plictisitor și vrem să adăugăm la acesta.

11:51.110 --> 11:54.230
Putem face ceva de genul asta.

11:55.280 --> 12:01.160
"fs.appendFile ()" îi dăm fișierul pe care dorim să îl adăugăm.

12:01.430 --> 12:05.220
Deci, în acest caz este './hello.txt'.

12:05.780 --> 12:10.130
Și dacă nu există acest lucru, va crea doar fișierul pentru noi.

12:10.130 --> 12:13.130
Al doilea parametru va spune ce vrem să adăugăm.

12:13.130 --> 12:28.150
Deci, să spunem că am vrut, de asemenea, să adăugăm poate un spațiu și apoi să spunem "Acest lucru este atât de cool", acum există un semn de exclamare.

12:28.210 --> 12:36.020
Și în final, al treilea parametru are o eroare și această eroare va spune doar că, dacă există o eroare.

12:36.040 --> 12:37.020
Lasă-mă să fac asta mai mic

12:37.040 --> 12:43.540
astfel încât să puteți vedea - să spunem doar dacă există o eroare, vom "console.log"

12:47.320 --> 12:49.790
'Console.log (err)'

12:49.870 --> 12:50.210
În regulă.

12:50.260 --> 12:51.780
Perfect.

12:51.830 --> 12:53.900
Deci haideți să vedem ce se întâmplă.

12:53.900 --> 12:57.520
Voi rula scenariul și voi ajunge

12:57.530 --> 12:58.360
'helllloooooo acolo!'

12:58.370 --> 12:58.970
'helllloooooo acolo!'

12:58.970 --> 13:10.710
Pentru că acestea au fugit în primul rând, dar dacă mă duc la "hello.txt", uita-te la asta, am scris doar la un dosar. Și acum avem "Acest lucru

13:10.710 --> 13:11.690
este atât de cool. "

13:12.000 --> 13:17.440
Deci, dacă o să mai conduc din nou și să-mi las să clar acest lucru, așa că avem mai mult spațiu

13:21.160 --> 13:22.180
Uită-te la asta. eu iau

13:22.270 --> 13:22.930
'helllloooooo acolo!'

13:22.930 --> 13:23.860
"Acest lucru este atât de cool"

13:23.860 --> 13:24.520
'helllloooooo acolo!'

13:24.520 --> 13:25.990
"Acest lucru este atât de cool"

13:26.010 --> 13:30.770
Dacă ne întoarcem la fișierul hello.txt, Oh boy am adăugat și mai mult

13:30.770 --> 13:31.850
"Acest lucru este atât de cool"

13:32.490 --> 13:33.460
text.

13:33.680 --> 13:35.140
Deci este destul de cool.

13:35.140 --> 13:39.740
Tocmai am adăugat câteva linii în dosarul nostru.

13:39.800 --> 13:42.450
Permiteți-mi să elimin acest lucru doar ca să nu devină prea enervant.

13:42.800 --> 13:44.780
Să mă salvez și să mă întorc.

13:46.190 --> 13:48.930
În regulă, am învățat atașamentul.

13:49.090 --> 13:57.880
Permiteți-mi să coment acest lucru astfel încât să nu interfereze cu nici unul dintre celelalte.

13:57.900 --> 14:04.570
Să facem o "scriere" de data asta - acum creați un spațiu aici pentru a putea vedea

14:07.240 --> 14:09.220
Cu scrierea, după cum vă puteți imagina,

14:10.320 --> 14:17.020
'fs.writeFile ()' și vom spune că acest fișier va fi numit 'bye.txt'.

14:17.020 --> 14:19.550
Denumire foarte originală de unul singur.

14:20.400 --> 14:21.540
Și va spune doar.

14:21.540 --> 14:23.750
Trist să te văd.

14:27.200 --> 14:44.280
Și încă o dată va fi o eroare și această eroare va spune "dacă (err)" "console.log (err)"

14:44.340 --> 14:50.640
Bine, deci hai să salvăm asta, rulați fișierul sau rulați scriptul.

14:51.890 --> 14:56.110
Și uitați-vă la asta, "bye.txt" tocmai a fost adăugat.

14:56.240 --> 15:00.580
Dacă faceți clic pe el, avem "Trist să te văd".

15:00.650 --> 15:03.090
Tocmai am creat un nou fișier text.

15:03.940 --> 15:05.870
Foarte foarte rece.

15:05.930 --> 15:17.010
Apropo, doar ca tu sa stii ce se intampla, daca sa zicem ca scriu eronat fisierul citit si acum e 'hell.txt'

15:17.150 --> 15:22.280
Dacă execut asta, am o eroare și poți vedea asta.

15:22.340 --> 15:30.610
Pentru că erorile afară am primit mesajul de eroare, eroare cu o mulțime de R.

15:30.620 --> 15:30.930
În regulă.

15:30.950 --> 15:39.260
Un pic de segue acolo, dar doar în cazul în care oamenii cer sau te-ai gândit la asta.

15:39.340 --> 15:39.990
În regulă.

15:40.160 --> 15:45.190
Woo ~ Mă obișnuiesc să facem una ultima și apoi am să vă spun exact de ce este așa

15:45.190 --> 15:46.670
misto.

15:46.840 --> 15:54.180
Ultimul pe care îl vom face - din nou, să facem spațiu aici - va fi "ștergerea".

15:54.490 --> 15:59.240
Deci, cu "șterge" putem face "fs.unlink ()".

15:59.270 --> 16:08.500
numele este puțin cam aici, dar "fs.unlink ()" și vom spune "bye.txt" și observați că am reușit

16:08.500 --> 16:18.730
face doar "bye.txt", dar doar pentru a păstra coerența, voi spune "./bye.txt" cu "./" înainte

16:18.730 --> 16:18.940
aceasta

16:23.530 --> 16:24.400
și cu aceasta.

16:24.400 --> 16:25.970
Din nou, dacă există erori

16:28.550 --> 16:29.680
doar "console.log (err)"

16:29.790 --> 16:32.720
Oare am uitat să fac "dacă"

16:37.540 --> 16:39.900
perfect, acum

16:40.130 --> 16:42.020
Să vedem ce se întâmplă aici.

16:43.460 --> 16:52.940
Și doar pentru distracție, hai să adăugăm un "console.log ()" aici după ce a făcut ștergerea și vom spune "inception" deoarece

16:52.940 --> 16:58.590
spunem "pa" la "./bye.text". Mind suflat.

16:58.990 --> 17:00.290
Bine, să conducem asta.

17:00.290 --> 17:06.220
Voi spune - și vom comenta fișierul de scriere aici pentru că nu trebuie să-l scrieți,

17:06.220 --> 17:08.320
deja avem "bye.text".

17:08.420 --> 17:09.640
Lasă-mă să salvez.

17:09.810 --> 17:13.280
Acum, dacă vă uitați la 'bye.text', să vedem ce se întâmplă aici când rulez scenariul

17:16.580 --> 17:20.410
Uita-te la asta, "Bye.text" a fost doar eliminat.

17:20.830 --> 17:22.910
Inceputul sa întâmplat.

17:25.290 --> 17:26.430
Minunat.

17:26.490 --> 17:30.840
Așa că a fost foarte interesant pentru mine sperăm că a fost și pentru tine.

17:30.900 --> 17:34.270
Dar de ce este interesant?

17:34.650 --> 17:42.900
Ei bine, deoarece acum suntem capabili să folosim programarea în javascript, în afara doar browserelor web și în afara

17:42.900 --> 17:46.760
de construire a site-urilor web și a serverelor.

17:46.890 --> 17:52.760
Ce putem face acum cu aceste cunoștințe este că ne putem face viața mai ușoară.

17:52.800 --> 18:01.540
Vă puteți gândi la cazuri, poate că doriți să citiți un fișier excel și există lucruri pe care le puteți utiliza, folosind

18:01.540 --> 18:05.690
citiți fișierul și utilizați modulele NPM pe care le puteți citi.

18:05.830 --> 18:06.180
Sa spunem.

18:06.180 --> 18:10.730
Coloane într-un Excel și face unele matematică.

18:11.140 --> 18:18.100
Sau poate aveți o foaie de excelență cu toate aceste e-mailuri și doriți să trimiteți un e-mail să spunem

18:18.190 --> 18:24.160
100 de persoane din această listă, dar, de asemenea, nu doriți să fiți prins spam-uri de către filtrul google spunând

18:24.160 --> 18:32.650
că hey acest cont este spam, deoarece au trimis doar 100 de e-mailuri în două minute. Ei bine, folosind ceva

18:32.650 --> 18:40.150
cum ar fi nodul, puteți crea probabil ceva care în fiecare șase ore trimite cinci e-mailuri.

18:40.150 --> 18:48.520
Un alt lucru pe care îl puteți face dacă ați avea un robot, de exemplu, ceva asemănător unui sistem de fișiere în loc de

18:48.520 --> 18:50.010
având citirea din dosar.

18:50.000 --> 18:58.000
Poți să citești de la robot, poate prin wireless, poate prin cabluri și să primești niște date

18:58.450 --> 19:00.040
că robotul are.

19:00.400 --> 19:03.570
Poate a detectat o pisică.

19:03.910 --> 19:10.120
Ei bine, folosind acea intrare, poți să faci ceva ce te poți răspunde poate să îți trimit un e-mail spunând că

19:10.120 --> 19:16.420
robotul a detectat doar o pisică și a trimis mesajul respectiv sau a trimis o ieșire.

19:16.420 --> 19:24.160
Și aceasta este ceea ce numim ieșire de intrare, de unde primiți o intrare dintr-o altă sursă, o altă mașină

19:24.760 --> 19:32.140
și apoi ieși și ceva pentru consum, care este într-adevăr interesant pentru că

19:32.170 --> 19:35.490
deschide lumea în care poți crea instrumente pentru tine.

19:35.620 --> 19:36.730
Puteți automatiza lucrurile.

19:36.730 --> 19:41.760
Puteți face literalmente orice se poate gândi mintea ta.

19:42.310 --> 19:48.310
Și știu că e încă devreme și că încă mai ești la începutul carierei tale de dezvoltatori, dar asta e

19:48.310 --> 19:54.370
primul pas în înțelegerea modului în care puteți folosi programarea pentru a rezolva problemele și a vă face viața

19:54.610 --> 19:58.580
mai eficientă sau poate doar puțin mai distractivă.

19:58.630 --> 20:02.040
În următorul videoclip, vom face ceva distractiv.

20:02.140 --> 20:07.650
Vom folosi ceea ce tocmai am învățat și vom ajuta Santa să facă o provocare de codificare.

20:08.720 --> 20:10.190
Ne vedem în acel.

20:10.360 --> 20:10.570
Pa! Pa
