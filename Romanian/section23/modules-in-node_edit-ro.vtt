WEBVTT

00:01.050 --> 00:09.260
Acum, mă voi întoarce la exemplul meu aici, să adăugăm un nou fișier, iar noi îl vom numi "script2.js".

00:09.270 --> 00:09.820
-

00:11.820 --> 00:20.110
Acum, "script2.js" poate avea o constantă numită "largeNumber".

00:20.340 --> 00:24.320
Și să spunem doar că e 356.

00:24.780 --> 00:35.410
Și dacă vrem să exportim acest lucru și să spunem "export default largeNumber" și acum în "script.js", o fac

00:35.410 --> 00:44.880
"import largeNumber din" script2.js "".

00:44.940 --> 00:47.000
- să facem acest lucru puțin mai mic -

00:47.220 --> 00:48.810
Și acum am schimbat asta

00:51.920 --> 00:59.120
'bigNumber' vom face doar 'a + b' dacă execut nod script.js '

00:59.160 --> 01:05.660
Am o eroare "Importarea simbolului neașteptat".

01:05.890 --> 01:13.390
Și acest lucru se datorează faptului că Nodul nu a implementat încă noua caracteristică ES6 a declarațiilor de import.

01:15.090 --> 01:19.910
Și există moduri în jurul acestuia și puteți adăuga pachete pentru a vă permite să faceți acest lucru.

01:20.170 --> 01:25.980
Dar vă voi arăta modul CommonJS, deoarece majoritatea serverelor pe care le veți întâlni vor avea

01:25.980 --> 01:26.710
Modul CommonJS.

01:26.790 --> 01:29.730
Și de-a lungul anilor acest [import] și acest [din] va deveni mai răspândit.

01:29.730 --> 01:32.750
Dar deja știți cum să faceți acest lucru din secțiunea front-end.

01:32.820 --> 01:34.260
Deci nimic nu este diferit aici.

01:34.260 --> 01:40.460
Pentru a vă familiariza cu CommonJS, vom folosi formularul "solicită".

01:40.470 --> 01:44.200
Cum putem face acest lucru folosind modul în care funcționează

01:44.280 --> 01:44.950
-

01:45.120 --> 01:47.150
în Nod 8.9, care este versiunea pe care o avem?

01:51.100 --> 02:01.040
Ei bine, va trebui să facem un 'const largeNumber = necesită (' ./ script2.js ')'

02:01.110 --> 02:04.140
- din nou, acest lucru ar putea fi familiar -

02:04.330 --> 02:10.850
Și apoi înăuntru trebuie să-i dăm calea fișierului. Cu "cer"

02:10.910 --> 02:16.040
acum avem "bigNumber" și, de asemenea, dorim să-l exportim acum.

02:16.210 --> 02:25.750
Iar modul în care exporturile funcționează cu CommonJS este că faci "module.export" și asta pentru că - permiteți-mi să clarific

02:25.750 --> 02:36.350
acest lucru și vă arată. Dacă fac "nod" și eu fac "modul", veți vedea că "modulul" este un obiect global la care avem acces

02:36.350 --> 02:42.140
la și utilizând modulul "module.exports"

02:42.190 --> 02:49.880
Pot spune care sunt obiectele pe care vreau să le export în acest fișier.

02:49.880 --> 02:52.760
În cazul nostru, va fi "bigNumber".

02:56.170 --> 03:05.090
Dacă salvez acest lucru și acum rulați "script-ul nostru de nod" - oops a trebuit să iasă mai întâi de la proces.

03:06.880 --> 03:07.800
clar

03:07.880 --> 03:09.750
Dacă execut "nod script.js"

03:09.790 --> 03:16.110
Obtin obiectul obiect 5.

03:16.220 --> 03:17.200
De ce e asta?

03:17.600 --> 03:25.250
Ei bine, pentru că acum am exportat acest obiect și modul în care vrem să îl accesăm aici,

03:26.110 --> 03:29.350
Exportim un obiect global pe care îl putem numi.

03:29.350 --> 03:39.620
În cazul nostru, putem spune "script2" și pentru a obține proprietatea "script2" bine vom spune

03:39.700 --> 03:41.780
'Script2.largeNumber'

03:41.780 --> 03:49.730
Și acum dacă execut acest lucru primesc 361 și acest lucru poate fi numit orice este doar o variabilă pe care o declarați.

03:49.770 --> 03:56.470
Deci putem să-i spunem "c" - "c.largeNumber" și încă funcționează.

03:57.980 --> 04:01.610
E un pic diferit de stilul pe care suntem obișnuiți să-l folosim pe front-end.

04:02.630 --> 04:09.230
Și asta pentru că nu am implementat-o ​​sau Nodul nu a implementat importul și exportul

04:09.350 --> 04:10.770
cu această versiune a acesteia.

04:11.000 --> 04:12.140
Dar va veni în cele din urmă.

04:12.140 --> 04:19.190
Doar nu te speria dacă vezi așa; odată ce te obișnuiești cu sintaxa, e cam la fel.

04:19.210 --> 04:21.540
Bine, te voi vedea în următoarea.

04:21.550 --> 04:22.020
Pa! Pa.
