WEBVTT 00:01.450 -&gt; 00:03.440 Bun venit înapoi. În acest videoclip 00:03.450 -&gt; 00:09.000 Vreau să vorbesc despre un concept important în Express și că este middleware. 00:09.110 -&gt; 00:10.430 Permiteți-mi să vă arăt cum funcționează. 00:10.550 -&gt; 00:20.030 Dacă rularea serverului aici am doar un server simplu care trimite &quot;testest&quot;, Express are un concept de middleware 00:21.180 -&gt; 00:28.720 și dacă fac &quot;app.use () &#39;Acesta este un middleware Express generic pe care pot intra aici. 00:29.040 -&gt; 00:35.730 Și ceea ce face middleware-ul, așa cum sugerează și numele - după cum vine cererea, va trece prin această funcție de &quot;utilizare&quot; și Permalink here (line 161) apoi să ne aruncăm la ceea ce primim:- POST, PUT, DELETE și acest middleware va face ceva la cererea pe care tocmai am avut-o în ordine 00:47.430 -&gt; 00:50.880 face mai ușor să lucrați aici. 00:52.280 -&gt; 01:02.020 Să arătăm acest exemplu:&#39;app.use ()&#39; primește &#39;cerere&#39;, &#39;răspuns&#39; și apoi ceva numit &#39;următor&#39;. 01:04:09:01:02.240 -&gt; 01:04:08.000 și în cadrul acestei funcții vom spune &quot;console.log () 01:<h1> Helllooo </h1> 01:18.750 -&gt; 01:27.600 Dacă salvăm și ne întoarcem aici și vom rula localhost, hmmm e agățat aici. 01:27.700 -&gt; 01:31.170 Chiar dacă deschid Consola nu se întâmplă nimic. 01:31.390 -&gt; 01:38.170 Dacă mă întorc, văd că &quot; <h1> helllooo </h1> &quot;se declanșează pentru că mă consolez, dar nu ajunge aici niciodată aici pentru că pentru ca middleware-ul să păstreze trecerea datelor prin el trebuie să sune&quot; următoarea &quot;. 01:50.340 -&gt; 01:52.720 Al treilea parametru. 01:52.810 -&gt; 01:59.530 Deci, acum sunând &quot;următorul&quot; dacă mă reîmprospătesc primesc &quot;testest&quot;. 01:59.620 -&gt; 02:09.620 Deci, middleware-ul cum functioneaza este folosirea aplicatiei &quot;app.use ()&quot; primeste cererile site-ului; cererea 02:09.620 -&gt; 02:10.510 vine prin. 02:10.520 -&gt; 02:12.190 Putem face tot ce ne dorim. 02:12.200 -&gt; 02:17.010 În cazul nostru nu suntem într-adevăr atingeți că suntem doar consola de logare &quot; <h1> helllooo </h1> &#39;și apoi am apăsat următoarea 02:17.030 -&gt; 02:21.740 și apoi Express continuă să ruleze prin aceste [app.get () și app.listen ()]. 02:21.830 -&gt; 02:26.030 Și, deși s-ar putea să vă gândiți de ce este util acest lucru? 02:26.060 -&gt; 02:31.920 Sunt foarte multe cazuri pe care vi le voi arăta mai târziu, în timp ce middleware-ul este important, iar middlewares 02:31.920 -&gt; 02:40.220 sunt scripturi minunate pe care oamenii au scris în prealabil că poți adăugați la serverul dvs., dar veți vedea că mai multe 02:40.220 -&gt; 02:40.970 în următorul videoclip. 02:40.970 -&gt; 02:47.760 Vroiam doar să vă arăt conceptul de bază de middleware:ceva care primește înainte de 02:47.760 -&gt; 02:55.570 ajungem pe rute, cererea, modificăm și apoi trece urmatoarea functie pentru ao pastra. 02:56.640 -&gt; 02:58.410 Voi vedea în următoarea. Pa! Pa.