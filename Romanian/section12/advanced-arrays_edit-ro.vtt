WEBVTT

00:01.370 --> 00:10.140
Și ne-am întors să vorbim despre măști în prima secțiune când am vorbit despre matricele pe care le-am spus

00:10.190 --> 00:11.980
au arătat așa ceva

00:15.010 --> 00:18.230
paranteze pătrate și putem pune orice vrem.

00:18.220 --> 00:20.920
Am pus doar câteva numere aici.

00:21.100 --> 00:27.340
Deci acestea sunt tablouri și am vorbit despre faptul că putem face patru bucle cu ei.

00:27.340 --> 00:32.590
Putem face pentru fiecare cu ele, care a fost nou în scenariul meu cinci.

00:32.720 --> 00:35.390
Și astăzi vom învăța mai multe.

00:35.540 --> 00:41.990
Dar, înainte de a face asta, să ne amintim cum funcționează For Each.

00:42.030 --> 00:47.200
Să presupunem că vrem să multiplicăm fiecare număr în matrice.

00:47.430 --> 01:01.860
Putem doar să ne amintim acum de Konst că putem folosi doar noua noastră sintaxă E6 și putem spune că noua matrice este egală

01:03.240 --> 01:08.170
array punct pentru fiecare și se citește frumos dreapta pentru fiecare matrice.

01:09.290 --> 01:15.750
Vom folosi un număr și vom folosi din nou funcția.

01:15.980 --> 01:17.690
Nu mai există niciun cuvânt de funcționare.

01:17.690 --> 01:28.290
Totul arata mai frumos in felul acesta cu sageata de grasime si pentru fiecare numar din seria Whalsay numarul de ori

01:29.040 --> 01:34.020
două să înmulțească totul cu două.

01:34.020 --> 01:38.810
Acum vedem ce ne dă un jurnal de consolă.

01:39.830 --> 01:41.160
Ești reținut

01:46.950 --> 01:47.700
nedefinit.

01:47.860 --> 01:50.250
Ei bine, pentru că nu așa.

01:50.260 --> 01:58.510
Pentru fiecare drept de muncă pentru fiecare spune că voi trece peste aceste elemente și voi înmulți

01:58.510 --> 02:02.280
un număr de doi, dar nu schimbăm matricea.

02:02.380 --> 02:08.500
Dacă ne uităm la matrice chiar acum bine este tot același lucru de la 1 la 10 16.

02:08.700 --> 02:14.190
Noi doar multiplicăm întâmplător numerele cu două, dar nu o depozităm nicăieri.

02:14.830 --> 02:24.940
Dacă vrem să facem ceea ce facem, atunci trebuie să spunem dublu Konst și vom spune că dublul este o matrice

02:25.600 --> 02:31.760
și apoi împingeți dublu punct.

02:31.820 --> 02:38.410
Așadar, împingem pe matrice, pe măsură ce o facem de câteva ori.

02:38.480 --> 02:40.210
Acum, să vedem ce ne dă dublu.

02:43.440 --> 02:48.760
Salvez o reîmprospătare și uită-te la asta.

02:48.820 --> 02:52.500
Am două pentru 20 de ani.

02:52.570 --> 02:53.160
O.K.

02:53.380 --> 03:05.910
Acum, despre care vom vorbi astăzi, este filtrul hărții și reducerea aș spune că aceste trei sunt

03:05.910 --> 03:11.810
probabil cele mai importante metode pe care le veți folosi astăzi.

03:11.880 --> 03:17.340
Javascript sunt foarte utile, așa că începeți să vă familiarizați cu ele.

03:17.390 --> 03:25.610
Și de fiecare dată când te gândești să faci un fel de buclă, probabil că vrei să faci una din aceste trei.

03:25.680 --> 03:32.850
Să începem cu hartă calea de mai sus de a dubla fiecare lucru în matrice și de a crea o nouă matrice

03:32.850 --> 03:52.430
bine cu hartă putem face harta hartă paradă array punct hartă numărul este numărul de ori la și modul în care harta funcționează

03:52.490 --> 04:01.720
este că întotdeauna trebuie să întoarceți ceva pentru că ceea ce este diferit pentru mabbe decât pentru fiecare

04:01.930 --> 04:10.690
bine pentru fiecare bucla doar peste ceva și doar face ceea ce spune funcția versus cu

04:10.690 --> 04:11.530
matrice.

04:11.680 --> 04:19.330
Putem face ceea ce nu am putut pentru fiecare, care este o bucla peste fiecare element fiecare numar si a returna un nou

04:19.330 --> 04:21.100
matrice.

04:21.110 --> 04:22.310
Lasă-mă să-ți arăt ce vreau să spun.

04:22.790 --> 04:25.270
De fiecare dată când buclele buclelor.

04:25.310 --> 04:29.110
Deci, să zicem aici că primul este numărul unu.

04:29.310 --> 04:36.340
Ne întoarcem de 1 ori 2 care se pune în matricea de hărți care este acum 2.

04:36.450 --> 04:39.370
Și apoi mergem la următorul număr până la 2 ori 2.

04:39.390 --> 04:46.290
Acum se adaugă la matrice de 10 ori 2 se adaugă la matrice și 16 ori 2 se adaugă la matrice.

04:46.300 --> 04:47.740
De aceea îl întoarcem.

04:47.860 --> 04:53.980
Și făcând asta dacă am consolă câmpul de consolă a câmpului de consolă

04:57.520 --> 05:00.460
și să refacem aici.

05:00.850 --> 05:07.890
Și am o linie de închidere aici, să încercăm din nou.

05:08.010 --> 05:09.900
Vedeți acea matrice de hărți.

05:09.900 --> 05:23.650
Deci, prima linie este dublă, iar cea de-a doua este uneltele care le vor numi doar pentru a cunoaște diferența.

05:23.670 --> 05:26.760
Și să reluăm asta din nou.

05:27.260 --> 05:31.340
Apropo, vă întrebați de ce mă răcoresc în loc să îl copiem și să-l lipiți aici.

05:31.350 --> 05:38.570
Ei bine, asta pentru că pentru că folosim Konst spune că matricea a fost deja declarată așa că am

05:38.580 --> 05:39.960
a reîmprospăta.

05:40.290 --> 05:41.520
Dar tu te duci.

05:41.520 --> 05:47.830
Pentru fiecare hartă care se uită la aceste două, se pare că ambii fac același lucru.

05:48.720 --> 05:54.570
Dar există o diferență critică între hartă și pentru fiecare și sunt aici să vă spun că ori de câte ori

05:54.570 --> 06:00.160
doriți să faceți buclă o bucla simplă și să luați o acțiune pe ceva asemănător unei matrice.

06:00.450 --> 06:06.980
Vrei să folosești hartă pentru fiecare cu fiecare pentru fiecare operațiune nu poate face nimic.

06:07.020 --> 06:15.310
Puteți lăsa acest lucru complet necompletat sau faceți un jurnal Konsole, deoarece toate pentru fiecare îngrijire este de a itera

06:15.350 --> 06:24.550
care merge unul câte unul pentru a repeta o colecție de elemente de la 1 la 10 și 16 și aplica orice

06:24.550 --> 06:27.440
funcționarea pe care o spunem despre fiecare element.

06:27.460 --> 06:31.800
Acum harta, pe de altă parte, are o restricție asupra operației.

06:31.930 --> 06:35.230
Se așteaptă ca operația să returneze un element.

06:35.230 --> 06:42.580
Deci, cu hartă cu pentru fiecare puteți avea mai multe linii de cod făcând toate aceste lucruri nebun versus harta

06:42.970 --> 06:43.740
cu hartă.

06:43.750 --> 06:46.900
Întotdeauna ai un element de returnare.

06:46.930 --> 06:54.280
Harta iterează din nou printr-o colecție de elemente care aplică operația pe fiecare element

06:54.730 --> 07:00.510
și apoi stocarea în final a rezultatului fiecărei invocări a operației.

07:00.520 --> 07:06.970
Aceasta este o altă colecție care este matricea hărților.

07:07.010 --> 07:12.920
Cu alte cuvinte harta transformă matricea.

07:12.920 --> 07:22.490
Creează o matrice nouă, care este matricea hărții versus pentru fiecare, care are doar o mulțime de acțiuni bazate pe

07:22.490 --> 07:27.620
în ceea ce privește matricea și ce acțiuni sunt, nu sunt cu adevărat limitate.

07:27.620 --> 07:34.230
Dacă vrem să întoarcem o nouă matrice, trebuie să ne creăm matrice proprie și apoi să împingem.

07:34.370 --> 07:39.260
Și ați putea observa aici ceva despre care am vorbit în ultima secțiune când am vorbit despre avansați

07:39.260 --> 07:49.990
funcții și care este ideea de efecte secundare dacă ne întoarcem cu foreach putem face o grămadă de

07:49.990 --> 07:52.010
efecte secundare în cadrul funcției.

07:52.210 --> 08:00.650
Puteți să consolideze legea pe care o puteți crea o matrice nouă pe care o puteți împinge la matricea pe care o puteți întoarce undefined.

08:00.650 --> 08:07.960
Ai văzut că atunci când am făcut prima oară pentru fiecare sau chiar acum nu ne întoarcem cu adevărat nimic.

08:08.010 --> 08:12.120
Deci, ne întoarcem nedefinit față de o hartă.

08:12.220 --> 08:15.700
Toate aceste reacții adverse sunt teoretic dispărut.

08:15.840 --> 08:19.190
Și pentru că, cu o hartă, trebuie să ne întoarcem.

08:19.240 --> 08:22.800
Permiteți-mi să vă arăt doar dacă nu mă întorc aici să vedem ce se întâmplă.

08:30.910 --> 08:34.280
Primesc harta undefined undefined undefined undefined.

08:34.540 --> 08:37.660
Chiar știm că facem ceva greșit că trebuie să ne întoarcem.

08:38.140 --> 08:47.230
Și așa cum am menționat în secțiunea anterioară, am creat acum o funcție pură în care nu există nicio îndoială

08:47.230 --> 08:48.790
despre dacă ne întoarcem sau nu.

08:49.660 --> 08:59.130
Avem intrări o funcție fără efecte secundare care returnează pur și simplu o valoare.

08:59.180 --> 09:01.350
Din nou, un concept foarte important.

09:01.370 --> 09:05.990
Vrem să păstrăm lucrurile într-un mod așteptat.

09:06.080 --> 09:13.310
Nu vrem să avem o bucată de cod care să trăiască pe un site web să spunem timp de patru ani și pe cineva

09:13.310 --> 09:21.350
vine de-a lungul timpului, care nu-l cunoaște intim și dintr-o dată toate aceste reacții adverse se întâmplă așa

09:21.500 --> 09:23.950
ei nu știu.

09:24.080 --> 09:31.540
Din nou, vrem să scriem Foxtoni puri simpli și asta este ceea ce ne permite hărțile.

09:31.650 --> 09:34.980
Și celălalt lucru important este că nu schimbăm matricea.

09:34.980 --> 09:40.830
Această matrice rămâne exact aceeași cu matematica, deoarece întotdeauna facem doar o nouă copie a matricei pe care o reprezentăm

09:40.830 --> 09:44.420
niciodată mutarea datelor.

09:44.490 --> 09:44.910
In regula.

09:44.910 --> 09:46.090
Așa a fost hartă.

09:46.200 --> 09:48.100
Să aducem întoarcerea aici.

09:48.420 --> 09:51.940
Și să aducem înapoi consulul.

09:51.960 --> 09:59.160
De asemenea, vreau să vă arăt că, atunci când aveți doar un singur parametru cu o funcție de aer, puteți de fapt

09:59.640 --> 10:04.400
evitați parantezele.

10:04.560 --> 10:11.410
Și din nou pentru că ne întoarcem și ne întoarcem doar o singură linie aici putem face o scurtă descriere

10:11.410 --> 10:12.970
este doar asta

10:16.290 --> 10:19.020
housecleaner are perspective.

10:19.250 --> 10:24.050
Să mai încercăm din nou.

10:24.060 --> 10:24.490
Acolo te duci.

10:24.490 --> 10:26.070
Totul arată bine.

10:26.070 --> 10:35.280
Uită-te la diferența dintre hartă și pentru fiecare urmă pe care o să-ți arăt că e filtrată.

10:35.600 --> 10:39.460
Acum, cu filtru putem spune matricea de filtre.

10:40.310 --> 10:51.230
Și, așa cum sugerează și numele, putem filtra filtrul cu o condiție în cazul nostru, putem spune că Blits se întoarce

10:51.350 --> 11:00.010
toate elementele din matrice care sunt mai sus, astfel încât putem spune numărul este mai mare de 5.

11:00.310 --> 11:11.360
Și ca și în cazul hărții, acest lucru returnează o nouă matrice, astfel încât trebuie să returnez ceva deoarece tabloul de filtrare merge

11:11.360 --> 11:12.890
pentru a conține aceste informații.

11:12.890 --> 11:23.620
Deci modul în care citiți acest lucru este să filtrați acest Saray care este aici, pe măsură ce mergeți unul câte unul, deci un număr

11:24.190 --> 11:31.150
va fi prima o întoarcere este una mai mare de 5.

11:31.190 --> 11:34.100
În acest caz, va spune că este falsă.

11:34.310 --> 11:38.290
Deci nu vom adăuga acest lucru în matricea de filtre.

11:39.090 --> 11:43.350
Apoi se repetă la două este prea mare de cinci.

11:43.350 --> 11:44.580
Nu este falsă.

11:44.580 --> 11:50.940
Deci nu va intra în matricea filtrului este mai mare de 5.

11:51.390 --> 11:52.550
Da este bine.

11:52.560 --> 11:57.520
Zece vor intra în matricea filtrului și vor fi mai mari de 5.

11:57.870 --> 11:58.350
Da.

11:58.500 --> 12:03.100
Apoi, 16 vor intra în matrice.

12:03.300 --> 12:08.070
Și din nou, pentru că este doar o singură linie, putem face o scurtă formă aici.

12:11.410 --> 12:19.450
Și acum, dacă anulam jurnalul și vom spune că matricea filtrului filtru.

12:22.590 --> 12:39.920
Și reîmprospătați obține filtrul care conține 10 și 16, dacă facem egal cu 5, în timp ce în acest caz primim un

12:39.920 --> 12:43.850
matrice goală pentru că nimic nu este egal cu cinci.

12:43.910 --> 12:46.000
Deci poți pune orice condiție pe care o vrei aici.

12:46.010 --> 12:51.480
Dacă ar avea putere și vrei să vezi dacă acesta conține un cuvânt bine Bine, puteți face și asta.

12:51.560 --> 12:56.210
Tot ce trebuie să faceți este să reveniți la adevărat sau la fals dacă se întoarce false.

12:56.210 --> 13:02.050
Nu va intra în matrice dacă se întoarce adevărat în timp ce va intra în matrice.

13:02.050 --> 13:04.210
Foarte cool foarte util.

13:04.500 --> 13:05.430
Ce altceva avem.

13:05.440 --> 13:11.550
Ei bine, ultima pe care vreau să vă arăt este reducerea și acest lucru este într-adevăr foarte puternic cu care puteți face multe

13:11.550 --> 13:12.250
Reduce.

13:12.330 --> 13:16.910
De fapt, puteți face filtrarea și cartografierea cu reducere.

13:17.040 --> 13:19.110
Deci este o metodă foarte puternică.

13:19.410 --> 13:22.470
Dar vă voi arăta o cale simplă de a vă face să începeți.

13:23.910 --> 13:27.810
Ei bine, o să facem este să spunem Konst

13:30.590 --> 13:43.270
reduce matricea pe care o cheamă și din nou aceasta returnează o nouă matrice pe care o economisim reduce și reduce reduce ceva numit

13:43.300 --> 13:50.080
un acumulator și numărul.

13:50.120 --> 13:52.490
Acum, evident, acest lucru poate fi orice nume.

13:52.510 --> 13:58.190
Uneori veți vedea un CC pentru un acumulator pe care îl vom lăsa așa pentru moment, ca să ne putem vedea

13:58.190 --> 13:59.180
știți ce număr este.

13:59.180 --> 14:05.860
Numărul este de la 1 la 10 și 16, dar ceea ce este acumulator.

14:06.230 --> 14:15.140
Ei bine, acumulatorul este un lucru în care putem stoca informațiile care se întâmplă în corpul funcției.

14:15.140 --> 14:25.180
Permiteți-mi să explic acumulatorul plus numărul și din nou pentru că reducem că întoarcem o matrice.

14:25.260 --> 14:27.930
Trebuie să întoarcem o valoare.

14:28.210 --> 14:36.030
Și ceea ce spunem aici este că de fiecare dată când repetați Deci, să spunem că prima rundă.

14:36.060 --> 14:42.220
Aveți acumulatorul numărul unu plus numărul unu egal.

14:42.310 --> 14:49.050
Să presupunem că dacă acumulatorul este zero, atunci toate egal cu 1 acum zero plus unul este egal cu 1.

14:49.270 --> 14:57.160
Când 2 vine în jur, facem 1 plus 2, deoarece acumulatorul își amintește ce a fost acolo înainte și apoi

14:57.160 --> 15:03.260
10 vine în jur și te duci trei plus 10.

15:03.270 --> 15:05.540
Acum ce este acumulatorul?

15:05.540 --> 15:10.800
Nu l-am definit nicăieri în redos după funcție.

15:11.010 --> 15:14.220
Aveți un al doilea parametru.

15:14.340 --> 15:20.460
Și aici putem specifica ceea ce dorim ca acumulatorul nostru să stea cu valoarea implicită.

15:20.910 --> 15:23.740
În cazul nostru, să zicem zero.

15:23.740 --> 15:28.190
Acum, dacă fac dialogul Konsole, reduc

15:31.000 --> 15:32.890
și să reducă.

15:33.220 --> 15:34.370
Să vedem ce se întâmplă.

15:39.150 --> 15:48.940
Avem reduce 29 deoarece 10 plus 16 este 26 plus trei este 29.

15:48.980 --> 16:05.560
Dacă am schimbat acest lucru la 5 și am copiat și încercând asta din nou, obținem 34 deoarece numărul de plecare este acum cinci.

16:05.600 --> 16:06.570
Foarte tare.

16:06.610 --> 16:07.550
Deci asta este.

16:07.660 --> 16:13.820
Vreau să vă amintiți aceste trei metode, deoarece le veți folosi mult în cariera voastră.

16:13.810 --> 16:15.490
Sunt foarte utile.

16:15.550 --> 16:24.290
Sunt pure ceea ce înseamnă de fiecare dată când facem o operațiune indiferent de inputurile pe care le primim în ea întotdeauna întoarce a

16:24.290 --> 16:24.940
valoare.

16:24.980 --> 16:28.610
Și nu există efecte secundare.

16:28.690 --> 16:33.270
Și după cum puteți vedea, ele sunt foarte ușor și ușor de citit.

16:33.400 --> 16:36.830
Deci, obișnuiți-vă cu ei și noroc cu exercițiile

16:36.880 --> 16:40.130
după acest videoclip. Ne vedem în următoarea revedere.
