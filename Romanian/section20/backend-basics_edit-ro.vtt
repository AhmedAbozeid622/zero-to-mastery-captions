WEBVTT

00:00.540 --> 00:05.330
Este timpul să înveți un alt subiect interesant și vom începe să ne bazăm în Backend.

00:05.610 --> 00:10.650
Dar am vrut să vă arăt ceea ce am acoperit până acum pe Front-End.

00:10.840 --> 00:17.950
Am început cu această diagramă de a cere "Cine este google.com?" și trecând prin intermediul ISP cerând

00:17.950 --> 00:20.810
serverul de nume de domeniu pentru adresa IP.

00:20.950 --> 00:29.460
Apoi, adresăm adresa IP pentru a găsi serverele Google și apoi serverele Google ne oferă codul HTML,

00:29.470 --> 00:34.400
CSS și fișierul JavaScript pe care le putem obține prin intermediul HTML

00:34.420 --> 00:43.040
Și apoi tag-urile de link-uri și etichetele de script pentru a obține CSS și Javascript. Browserul citește fișierul pentru

00:43.040 --> 00:51.860
noi, motoarele HTML, CSS și V8 sau motorul JavaScript al browserului îl folosesc pentru a citi JavaScript

00:51.920 --> 00:58.510
și manipulăm DOM folosind JavaScript.

00:58.520 --> 01:05.300
De asemenea, am aflat că locația serverului este importantă, câte excursii facem, câte cereri HTTP

01:05.300 --> 01:06.590
pe care le facem este important.

01:06.590 --> 01:08.560
Dimensiunea fișierelor este importantă.

01:08.810 --> 01:16.660
Și am învățat câteva dintre aceste soluții, cum ar fi rețelele de distribuire a conținutului, având script în doar un fișier bundle.js

01:16.820 --> 01:21.230
și, de asemenea, minimizarea fișierelor noastre.

01:23.740 --> 01:33.040
Și apoi am învățat și despre această tehnologie nouă numită AJAX, unde putem doar să aducem utilizatori, să vorbim

01:33.040 --> 01:40.750
server în timp ce utilizatorul încă mai navighează pe site și primește un răspuns JSON pentru a actualiza

01:40.750 --> 01:43.050
site-ul web în timp real.

01:43.390 --> 01:49.730
Și această imagine pe care am început-o arată mult mai clară decât în ​​primul videoclip, nu-i așa?

01:49.780 --> 01:53.210
Înțelegem ce face un dezvoltator Front-End.

01:53.230 --> 02:00.760
Vedem puterea Reactului și știm, de asemenea, că aceste săgeți înseamnă pur și simplu cereri HTTP; o limbă care

02:01.090 --> 02:08.310
atât Front-End cât și Back-End pot vorbi și folosind AJAX și JSON putem face dinamic.

02:09.570 --> 02:15.930
Acum back-end-ul și rolul unui dezvoltator Back-End. Ei sunt cei care sunt responsabili de lucru

02:15.930 --> 02:24.330
cu servere și baze de date. Și un server este responsabil pentru ceea ce primești în browser.

02:24.650 --> 02:32.140
Pot să întreb ceva de la browser; cum ar fi "Accesați google.com". Dar la sfârșitul zilei serverul web

02:32.170 --> 02:38.890
poate să-mi dea orice vrea. Dacă o să mă trimită doar la twitter.com în loc de google.com,

02:38.920 --> 02:42.500
bine, asta e până la server. Orice am nevoie,

02:42.520 --> 02:47.740
facem doar cererea și sperăm că serverul ne oferă ceea ce am cerut. Și dacă vă aduceți aminte

02:47.980 --> 02:57.740
un server este doar un calculator; un computer care este undeva în lume doar ascultând acest HTTP

02:57.880 --> 03:02.770
conectarea, cerând să vedem dacă avem fișiere.

03:02.830 --> 03:11.800
Serverele cele mai de bază și s-ar putea să fi folosit acest lucru înainte de a folosi probabil Hostgator un site de găzduire

03:11.860 --> 03:19.120
sau chiar site-uri WordPress și punerea lor pe Hostgator. Folosește ceva numit "LAMP STACK".

03:19.120 --> 03:28.330
A fost ceea ce a fost util pentru site-urile cele mai de bază care este, (dacă) doriți doar o informație simplă

03:28.330 --> 03:28.920
website

03:29.050 --> 03:33.460
Poate un simplu site WordPress unde nu se întâmplă nimic complex.

03:33.550 --> 03:41.380
Nimic nu este profesional. Ceea ce au folosit a fost un server Linux care este sistemul de operare.

03:41.740 --> 03:47.280
La fel cum am Mac, Linux va fi sistemul de operare al serverului.

03:47.430 --> 03:48.810
Avem serverul Apache.

03:48.810 --> 03:51.980
Apache este un server, din nou

03:52.080 --> 03:58.500
un program scris de cineva care este într-adevăr foarte bun la doar acceptarea cererilor și trimiterea

03:58.500 --> 04:01.070
răspunsurile la fișiere.

04:01.200 --> 04:03.990
Am avut MySQL care este baza de date.

04:03.990 --> 04:09.230
Poate că ați avut o secțiune de comentarii în blogul dvs. și trebuie să stocați aceste date,

04:09.260 --> 04:16.680
care ar fi baza de date. Apoi am avut PHP care era doar o limbă pe care o poți folosi

04:16.680 --> 04:23.040
un pic de logică în serverele dvs. Și serverul, la fel ca și computerul, avea un sistem de fișiere în care toate

04:23.040 --> 04:29.140
fișierele de pe site-ul dvs. sunt stocate. Și Apache tocmai a făcut asta.

04:29.330 --> 04:31.790
Doar ascultați dacă cineva a intrat

04:31.790 --> 04:37.650
funfunwebsite.com în adresa URL. Dacă a primit această solicitare,

04:37.770 --> 04:42.270
aceasta va fi doar implicit să vă dau index.html.

04:42.720 --> 04:51.260
Dacă cineva a intrat în funfunwebsite.com/about, acesta vă va oferi doar despre.html. A fost foarte

04:51.260 --> 04:53.640
simplu server foarte ușor.

04:53.750 --> 05:00.860
Asta este ceea ce majoritatea site-urilor de găzduire folosesc Hostgator. Și s-ar putea să te întrebi:"Pot să descarc Apache

05:00.860 --> 05:05.150
server și pur și simplu rula propriul server de pe computer? "

05:05.160 --> 05:07.320
Da, puteți absolut.

05:07.490 --> 05:11.630
Dar fără a avea un software de tip server,

05:12.080 --> 05:14.210
bine, computerul nostru este inaccesibil.

05:14.360 --> 05:21.350
Nimeni de pe Internet nu poate accesa calculatorul nostru, deoarece calculatorul nostru nu este un server, (acesta) nu are nici un cod

05:21.350 --> 05:25.570
spune-i "Hei, dacă primesc o cerere, trimite-o afară".

05:25.710 --> 05:33.930
Dar, după cum am văzut în videoclipurile noastre anterioare, putem crea servere false pentru a testa site-urile noastre.

05:33.960 --> 05:36.710
Acum a fost modul vechi de a face lucrurile.

05:36.720 --> 05:39.530
Nu era prea multă logică, nu puteai să-l extinzi.

05:39.720 --> 05:46.190
Nu puteți avea site-uri precum Facebook sau Amazon folosind acest tip de sistem.

05:46.350 --> 05:51.940
Asa cum am spus, aceasta a fost pentru site-urile web de baza.

05:52.000 --> 05:59.310
Acum un stiva nouă pe care o numim server de aplicații arată ceva mai mult.

05:59.380 --> 06:06.580
Acum, un server de aplicații este diferit de exemplul nostru precedent, spre deosebire de utilizarea serverului Apache

06:06.610 --> 06:14.050
care este foarte simplu și doar răspunde la cerere, dă doar fișiere acolo și înapoi. Cu ceva de genul

06:14.050 --> 06:23.750
un server Node unde aveți Node.js rulat, bine puteți scrie un script și spuneți "Dacă primesc o solicitare

06:23.750 --> 06:33.230
pentru a vă autentifica, verificați apoi numele de utilizator al utilizatorului în baza de date. Dacă se potrivește, atunci spune-mi și apoi

06:33.320 --> 06:42.260
trimiteți un răspuns prin JSON la aplicația Front-End. Și putem personaliza ceea ce spun aceste scripturi.

06:42.260 --> 06:50.990
Până acum, am reușit să folosim JavaScript numai pe web. Dar acum, cu Node.js, îl putem folosi pe un server,

06:51.680 --> 06:55.670
pe un computer care nu rulează un browser web. Cu Node.js,

06:55.670 --> 07:02.630
putem scrie JavaScript unde, dacă am postat ceva pe Facebook, postarea pe Facebook, când am făcut clic pe "post",

07:02.630 --> 07:08.060
acesta va fi trimis la Serverul Nod care ascultă pentru cereri.

07:09.000 --> 07:18.060
Se va spune că "Andrei a postat acest mesaj în format JSON". Fișierul Node.js și Express.js

07:18.180 --> 07:27.000
pe server va citi și va spune "Ah, vrem să stocăm acest post în baza noastră de date". și asta

07:27.000 --> 07:32.460
baza de date va stoca acel post, astfel încât atunci când mă voi întoarce data viitoare, este încă acolo.

07:32.460 --> 07:39.360
Iar după ce sa terminat, va răspunde cu succes că "postarea mea este un succes" și acum

07:39.360 --> 07:42.060
afișează în cronologie.

07:42.420 --> 07:49.410
Pot edita poșta, pot șterge postarea și din nou Node Server pot șterge postul din baza de date și

07:49.410 --> 07:52.520
apoi trimiteți un răspuns și eliminați-l din cronologie.

07:52.560 --> 07:59.070
Aveți puterea de a interacționa în mod constant cu Front-End. Peste câteva videoclipuri

07:59.070 --> 08:03.570
vom construi un proiect care să includă toate acestea.

08:03.630 --> 08:07.320
Vom crea un server nod folosind un Express,

08:07.320 --> 08:14.610
Vom crea o bază de date proprie în care stocăm informațiile despre utilizatori. Și vom folosi AJAX

08:14.610 --> 08:20.400
și JSON pentru a crea, conecta, actualiza în mod constant informațiile despre utilizator.

08:20.460 --> 08:26.880
Deci avem o înțelegere a acestui sistem complet. Dacă construiți site-uri web și aplicații web,

08:26.910 --> 08:34.540
bine, nu construiești cu adevărat aceste lucruri. Ca dezvoltator de web, construiești ceva mai asemănător cu acesta:08:34.750 --> 08:38.300
dar s-ar putea să te întrebi:"Asta-i asta?"

08:38.320 --> 08:44.420
"Este capătul ultim al ceea ce poate face o infrastructură de server de back-end?"

08:44.770 --> 08:53.760
Ei bine, nu, dacă ești Facebook, Twitter sau Amazon, ai face ceva de genul ăsta și nu te îngrijora prea mult

08:53.760 --> 08:57.210
aici, putem explica ce se întâmplă.

08:57.280 --> 09:01.740
Faceți doar copii ale computerului.

09:01.750 --> 09:11.660
Așa că gândiți-vă la fiecare dintre aceste dreptunghiuri ca pe un computer. Și pentru că Facebook devine o mulțime de oameni, face asta

09:11.660 --> 09:15.720
o copie a serverului lor și a pus-o poate în Asia,

09:15.860 --> 09:22.640
și unul în Africa, astfel încât toată lumea din Asia să poată avea acces la acest lucru și toată lumea din Africa să poată

09:22.640 --> 09:23.530
accesați aceasta,

09:23.630 --> 09:30.530
în loc să aibă acces la un singur server și să supraîncărcați sistemul. Deoarece au același server

09:30.560 --> 09:35.910
este doar copierea acestor fișiere și punerea pe un server în altă parte.

09:35.970 --> 09:36.570
Asta e.

09:36.650 --> 09:43.900
Și asta am numit scaling. Dar, de asemenea, utilizează în continuare aceeași bază de date, astfel încât, dacă de la acest server

09:43.900 --> 09:51.460
cineva actualizează informațiile, bine, această persoană care folosește acest server, acest utilizator va continua

09:51.460 --> 09:55.920
au acces la informațiile pe care le-a actualizat persoana care utilizează acest server.

09:55.960 --> 10:04.640
Și, în sfârșit, avem ceva numit "Load Balancer". Și acest lucru este similar cu ceea ce Apache sau NginX

10:05.240 --> 10:14.090
ar face. În cazul în care ascultă pentru o cerere HTTP și observă că "Hmm, aceasta aici în America de Nord

10:14.090 --> 10:15.700
este foarte ocupat chiar acum. "

10:15.720 --> 10:22.940
- Voi transfera această persoană la acest server aici. și echilibrează încărcarea serverelor.

10:24.040 --> 10:29.290
și poate continua să crească acest lucru având mai multe servere pe măsură ce aveți mai mulți utilizatori.

10:29.410 --> 10:33.390
Și, în sfârșit, puteți avea mai multe baze de date.

10:33.400 --> 10:40.600
Din nou, aceste pătrate reprezintă fiecare un calculator; un computer care rulează o bază de date, un computer care este

10:40.600 --> 10:48.380
rulează un server, un computer care rulează un balancer de sarcină. Și puteți avea mai multe baze de date, din nou,

10:48.400 --> 10:52.220
astfel încât să nu fie copleșiți de toate aceste cereri.

10:52.420 --> 10:59.250
Și fiecare păstrează o copie a celuilalt. Și acesta este un lucru pe care îl vom vorbi mai mult când ajungem

10:59.250 --> 11:02.030
secțiunea Nod și secțiunea Baze de date.

11:02.100 --> 11:08.160
Dar vreau să vă arăt ideea din spatele serverelor. Pentru a lucra cu Back-End-ul,

11:08.370 --> 11:18.050
scopul principal este să ne asigurăm că atunci când facem o solicitare HTTP de la front-end primim un răspuns

11:18.470 --> 11:22.100
înapoi cât mai repede cu datele corecte.

11:22.370 --> 11:28.680
Și asta este dezvoltarea back-end-ului. Asigurați-vă că vom returna aceste resurse, astfel încât Front-End noastre

11:28.700 --> 11:35.870
echipa poate avea încredere că vom primi exact ceea ce avem nevoie.

11:35.880 --> 11:42.090
Aș vrea să vă bucurați, deoarece în secțiunile următoare ne vom concentra pe Back-End

11:42.090 --> 11:49.920
precum Front-End. Vom construi o aplicație care utilizează toate aceste tehnologii într-un singur loc.

11:49.920 --> 11:57.210
Deci, știți exact cum este conectat totul și aveți o idee despre cum să mergeți de la ceva de genul

11:57.210 --> 12:04.290
aceasta într-o zi are ceva de genul asta.

12:04.400 --> 12:05.210
O să văd în următoarea, la revedere.
