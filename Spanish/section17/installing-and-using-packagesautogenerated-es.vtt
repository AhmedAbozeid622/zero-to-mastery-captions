WEBVTT

00:01.160 --> 00:05.470
Bienvenido, comencemos a usar NPM.

00:05.680 --> 00:10.220
Quería repasar una vez más exactamente lo que sucede debajo de él.

00:10.600 --> 00:20.100
Entonces, ahora que tenemos un archivo package.json, podemos obtener cualquier paquete que deseemos de NPM

00:20.100 --> 00:21.900
y la siguiente sección será agarrar reaccionar

00:21.900 --> 00:28.380
de nuevo una biblioteca de JavaScript que se utilizará. y ese archivo vive en NPM.

00:28.380 --> 00:35.770
entonces usando el archivo package.json y el nuevo comando de NPM,

00:36.010 --> 00:45.190
Podemos reaccionar y tenerlo como parte de nuestro proyecto. Entonces empecemos.

00:45.210 --> 00:51.210
Voy a minimizar esto y porque estamos usando reaccionar en la siguiente sección voy a mostrarles dos

00:51.240 --> 01:01.290
otros paquetes que realmente me gustan en NPM. Uno se llama servidor vivo y el otro es lodash.

01:01.340 --> 01:04.300
Voy a revisar cada uno de ellos para que sepan cuáles son.

01:04.400 --> 01:10.320
Pero elijo estos dos porque son realmente diferentes en la forma en que los instalas.

01:12.880 --> 01:18.890
Por ejemplo, con live-server, tengo 'npm install -g live-server'

01:18.990 --> 01:19.290
DE ACUERDO,

01:19.330 --> 01:20.980
eso parece bastante fácil.

01:21.100 --> 01:28.820
Y luego con lodash, si voy al registro de NPM, veo que es

01:28.810 --> 01:41.440
'npm i --guarde lodash'. Hmm, bueno, NPM te permite instalar las cosas de dos maneras. Uno, globalmente o dos, localmente.

01:41.520 --> 01:42.300
Qué significa eso?

01:43.550 --> 01:52.220
En nuestro proyecto aquí nuestro generador de fondo, si instalamos algo localmente eso significa que NPM instalará

01:53.150 --> 02:00.790
un paquete que solo puede ejecutarse en esta carpeta, en background-generator.

02:00.880 --> 02:06.260
Pero si descargué globalmente y eso es lo que significa '-g'.

02:06.490 --> 02:14.780
Bueno, puedo usar Live-Server fuera de esta carpeta en cualquier lugar de mi computadora. Como el nombre sugiere,

02:14.840 --> 02:20.760
globalmente significa que no puede ejecutarlo en todas partes y generalmente globalmente significa que puede ejecutarlo en su terminal.

02:20.960 --> 02:26.390
Así que recuerde que si lo instala con '-g', eso significa que le dará un comando que usted

02:26.390 --> 02:28.690
puede correr en la terminal.

02:29.000 --> 02:38.060
Si no lo instala con '-g', si es local, entonces le dará poderes tales como nuevas habilidades en

02:38.090 --> 02:42.970
el archivo JavaScript Veamos esto para demostrar este punto.

02:44.450 --> 02:53.560
Voy a instalar Live-Server haciendo y 'npm install -g live-server' y de nuevo cada vez que instales

02:53.560 --> 03:01.580
una npm, es lo mismo. Ejecuta 'npm install' y el nombre del paquete porque quiero esta instalación de forma global.

03:01.580 --> 03:05.280
Haré '-g' y diré 'servidor vivo'

03:07.110 --> 03:09.020
Se ejecutará a través de la instalación aquí.

03:11.320 --> 03:12.890
Ah y ahí tienes.

03:12.940 --> 03:15.320
Tenemos lo que se llama

03:15.550 --> 03:16.390
EACCES:03:16.390 --> 03:18.030
Permiso denegado.

03:18.030 --> 03:19.050
¿Recuerdas lo que dije?

03:19.060 --> 03:25.910
Si no tiene los permisos correctos, es posible que tenga que ejecutar con sudo?

03:25.940 --> 03:30.470
Esto es lo que dice:dice que mi usuario no tiene acceso para instalar.

03:30.680 --> 03:37.160
Debe tener permisos de administrador y eso significa que tendrá que ingresar su nombre de usuario y contraseña.

03:37.480 --> 03:45.860
Puedes arreglar esto en tu computadora después de esto, pero por ahora puedes correr

03:49.620 --> 03:50.210
'sudo npm install -g live-server'

03:53.140 --> 03:59.500
y ves que me pide mi contraseña y listo, se agregó el servidor en vivo.

03:59.710 --> 04:00.550
Vamos a aclarar esto.

04:03.340 --> 04:03.760
DE ACUERDO.

04:03.980 --> 04:09.330
Entonces, si miro mi archivo package.json, bueno, nada ha cambiado.

04:10.840 --> 04:17.640
Y nada debería. Debido a que instalamos el paquete globalmente, ahora vive en nuestra computadora, pero no

04:17.640 --> 04:18.610
dentro de nuestra carpeta.

04:18.610 --> 04:24.870
Como he mencionado. Tenemos una gran habilidad ahora podemos ejecutar un comando con servidor en vivo

04:24.880 --> 04:28.080
Puedes leer la documentación aquí.

04:28.250 --> 04:35.170
Pero lo que nos permite hacer es escribir en live-server mientras estoy en la carpeta background-generator,

04:37.950 --> 04:45.430
¿Lo entendiste? Cargó automáticamente nuestro proyecto generador de fondo.

04:45.430 --> 04:46.760
¿Que está sucediendo aquí?

04:47.230 --> 04:54.760
Bueno, vemos que aquí el servidor en vivo crea un servidor, un servidor falso para usted y luego observa los cambios.

04:55.330 --> 05:03.190
así que si voy ahora a, hagamos CSS y voy a hacer 'text-align:left'

05:03.280 --> 05:14.080
y yo salvé live-server detecta el cambio que dice CSS y cambia automáticamente esto

05:14.170 --> 05:19.850
sin que yo lo refresque. Recuerda lo molesto que era cada vez que cambiaba algo en nuestro proyecto,

05:19.860 --> 05:25.950
tuvimos que presionar actualizar para asegurarnos de que los cambios funcionen? bueno, el servidor en vivo crea un servidor que mantiene

05:25.950 --> 05:33.420
mirando sus archivos y cada vez que se realiza un cambio lo ve y actualiza el proyecto y lo ve por encima

05:33.420 --> 05:37.030
aquí que tenemos 127.0.0.1

05:37.230 --> 05:38.990
Y entonces este es el Puerto 8080.

05:39.240 --> 05:42.520
Y este es el valor predeterminado de lo que llamamos hosts locales.

05:42.540 --> 05:44.980
Eso es algo de lo que hablaré más adelante en el curso.

05:46.300 --> 05:52.680
Pero como puede ver, solo dice que puede abrir este sitio web de prueba en esta dirección.

05:52.870 --> 06:00.760
Si escribo aquí localhost, que es su host local, usted es el servidor,

06:00.760 --> 06:02.780
es exactamente lo mismo.

06:02.790 --> 06:03.910
Cuan genial es eso.

06:03.950 --> 06:10.680
Voy a devolver esto a la forma en que estaba y de nuevo detectar cambios tan pronto como guarde todo

06:10.680 --> 06:12.440
es restaurado

06:12.480 --> 06:16.160
Así que el servidor en vivo es genial en la siguiente sección. Te mostraré algo aún mejor que eso.

06:16.350 --> 06:20.680
Pero, de nuevo, es un gran ejemplo de por qué el NPM es genial.

06:20.700 --> 06:27.720
Pude instalar algo realmente rápido y ahora tengo un servidor que es mi computadora que es

06:27.870 --> 06:33.020
mirando estos archivos y sirviendo mi proyecto aquí en mi computadora.

06:33.030 --> 06:36.160
No necesitamos comprar un servidor, no necesitamos ponerlo en github,

06:36.300 --> 06:38.010
Todo está aquí ya.

06:39.570 --> 06:41.670
Ahora que lo hemos hecho, permítanme cerrar esto.

06:41.670 --> 06:43.670
Voy a aclarar esto.

06:44.520 --> 06:47.080
Entonces ese era un paquete instalado globalmente.

06:47.130 --> 06:50.040
El otro tipo de paquete que puede intalar es local, como dije.

06:50.070 --> 06:56.910
y con un paquete local podemos instalar algo como lodash y en realidad es uno de los

06:56.910 --> 06:59.290
bibliotecas más populares.

06:59.370 --> 07:06.120
Ahora, para aquellos que no saben lodash, pueden pensarlo como una extensión de JavaScript.

07:06.120 --> 07:09.400
Con JavaScript, tenemos todos estos métodos que vienen con eso.

07:09.420 --> 07:11.520
Tenemos-usted sabe, querySelector,

07:11.520 --> 07:13.390
Tenemos getElementById,

07:13.680 --> 07:20.700
Pero sería bueno si tuviéramos más funciones que podamos ejecutar? Bueno, lodash tiene un montón de

07:20.700 --> 07:21.920
ellos pueden usar.

07:22.110 --> 07:29.400
Y si vas al sitio web, si vas a la documentación, verás que tienen todas estas cosas

07:29.470 --> 07:32.790
puedes hacerlo con una matriz y también tienen buenos ejemplos.

07:32.800 --> 07:40.000
Entonces, cada vez que tienes un problema, lodash es realmente muy bueno en lugar de escribir el tuyo.

07:40.100 --> 07:42.800
No quiero que lodash esté en mi computadora.

07:42.800 --> 07:48.520
Solo lo quiero solo para este proyecto. Lo que voy a decir es, voy a decir 'npm install lodash'

07:52.260 --> 07:56.580
y voy a abrir el archivo package.json para ver si cambia mientras hacemos esto.

07:56.730 --> 08:01.240
Voy a presionar entrar

08:01.480 --> 08:10.180
Ahora si voy a mi texto sublime, vemos que package.json acaba de agregar una nueva línea, dice "dependencias",

08:10.730 --> 08:15.660
"lodash" y esta es la versión de lodash que hemos descargado.

08:16.120 --> 08:22.630
Y otra cosa que podrías notar es que tenemos algo llamado carpeta node-modules que se acaba de crear.

08:22.630 --> 08:24.550
¿Qué significa eso?

08:24.760 --> 08:29.230
Si abrimos esto, vemos que lodash está instalado.

08:29.540 --> 08:35.300
Y bueno, eso es un montón de archivos de lodash que acabamos de instalar.

08:36.790 --> 08:45.950
Usted ve tan pronto como hacemos npm instalar, entonces el nombre del paquete, se ajusta localmente y tenemos un archivo package.json

08:46.070 --> 08:47.650
ya que hicimos 'npm init',

08:47.780 --> 08:56.090
Lo agregará a nuestras dependencias, lo que significa paquetes que nuestro sitio web necesita para funcionar. Y la forma en que

08:56.090 --> 09:03.810
encuentra que todos estos paquetes viven bajo la carpeta de módulos de nodos y puedes ver que lodash está aquí

09:03.930 --> 09:08.340
y ahora podemos usar todos sus nuevos métodos.

09:08.390 --> 09:09.140
Démosle una oportunidad.

09:09.140 --> 09:13.380
Veamos si realmente tenemos un trabajo lodash y nuestro JavaScript.

09:13.490 --> 09:14.950
Voy a abrir el script.js,

09:15.030 --> 09:15.990
-

09:16.040 --> 09:21.240
Y la forma en que queremos obtener lodash aquí hay algunas maneras.

09:21.260 --> 09:25.070
Una muestra la forma de hacerlo en Node.js,

09:25.170 --> 09:27.060
pero no estamos usando Node.js,

09:27.110 --> 09:36.840
Entonces, si recuerdas con módulos, podemos hacer 'import without', que es una función lodash,

09:36.920 --> 09:40.360
Creo que podemos verlo aquí sin .js,

09:44.140 --> 09:53.720
y solo diré 'de lodash', cerremos eso y solo para verificar que ya tenemos todo funcionando,

09:53.720 --> 09:55.100
Voy a hacer 'console.log (sin)',

09:56.700 --> 10:03.150
Voy a guardar, y ya sabes, vamos a iniciar el servidor en vivo, porque funcionó bien para nosotros.

10:03.150 --> 10:05.660
Vamos a abrir la consola, hmm

10:06.500 --> 10:07.830
Untaught SyntaxError,

10:07.920 --> 10:09.990
Importación de token inesperada

10:10.100 --> 10:18.350
Y si realmente importo aquí, sí, la consola no reconoce la importación porque como dije antes

10:18.620 --> 10:23.750
es una nueva sintaxis que los navegadores no han implementado realmente.

10:23.900 --> 10:32.440
Parece que tengo que usar la sintaxis 'requerir' y es posible que recuerde esta sintaxis de este video donde

10:32.440 --> 10:39.400
hablamos sobre la modificación en JavaScript y discutimos que ES6 y esto llamado una webpack es

10:39.400 --> 10:40.370
lo que usamos ahora

10:41.660 --> 10:44.270
Pero eso es para la sección de reacción.

10:44.270 --> 10:47.690
Por ahora queremos poder usar require.

10:47.750 --> 10:52.250
Y la forma en que podemos hacer eso es browserify.

10:52.270 --> 11:02.840
Afortunadamente para nosotros tenemos algo llamado NPM que podemos instalar un paquete global, así que puedo instalarlo

11:04.090 --> 11:05.240
global,

11:05.640 --> 11:11.520
Y hay browserify

11:11.640 --> 11:19.480
Y nuevamente tengo el error de acceso, así que tengo que hacer 'sudo npm install -g browserify'

11:23.740 --> 11:27.390
déjame aclarar que todo está instalado de nuevo.

11:28.160 --> 11:36.260
La sintaxis de importación que proviene de ES6 fue capaz de usar eso con Webpack, pero porque eso es para la próxima sección

11:36.260 --> 11:38.750
Quiero mostrarte lo que hicimos antes de esto.

11:38.750 --> 11:44.920
Usamos algo llamado browserify que nos permitió usar esto requiere sintaxis.

11:45.030 --> 11:54.620
Copiemos esto como lo tienen en NPM y ahora voy a decir 'console.log'

11:56.720 --> 11:59.940
subrayado (_) pero esto en realidad no hará nada.

11:59.960 --> 12:08.660
Si recuerda que esto es un paquete de módulos, y es un paquete global que instalamos.

12:08.700 --> 12:16.730
Le damos un archivo de script y genera otro archivo de script que podemos usar en el navegador.

12:16.970 --> 12:22.890
El comando para eso, porque lo instalamos globalmente, podemos usar browserify ahora y puedo decir que

12:23.130 --> 12:33.150
mi archivo script.js debe ser bundle.js

12:33.240 --> 12:34.210
¿Viste eso?

12:34.210 --> 12:37.050
Ahora tenemos un archivo bundle.js.

12:37.230 --> 12:45.070
Y si hago clic en esto, bueno, tengo un montón de cosas que parecen un archivo grande y eso es porque

12:45.070 --> 12:47.910
incluimos lodash.

12:48.020 --> 12:56.770
Nos ha creado un archivo de paquete que agrega lo que queríamos para que el navegador lo entienda.

12:57.630 --> 13:07.210
Simplemente vamos al archivo index.html y en lugar del archivo script.js, haremos bundle.js, voy a guardar

13:08.210 --> 13:14.700
e intentemos esto una vez más. Voy a hacer live-server, abrir la consola,

13:14.710 --> 13:15.840
Ahí tienes.

13:16.000 --> 13:18.300
Parece que está funcionando.

13:18.380 --> 13:26.810
Si vuelvo a mi archivo de script con lodash ahora en mi proyecto, si tuviera una matriz llamémosla variable (var)

13:27.380 --> 13:40.350
array que tiene 1 2 3 4 5 6 7 8. Y puedo usar un método lodash sin él.

13:40.500 --> 13:49.210
Y puedo hacer console.log, responder:dentro de aquí dirá lodash, que es el guión bajo que le hemos asignado

13:49.210 --> 13:58.780
la variable de subrayado a lodash como lo sugiere la biblioteca y la daremos sin lo cual nuevamente

13:58.780 --> 14:00.890
un método que viene con lodash que

14:00.910 --> 14:03.280
usted puede verificar en su sitio web. Dentro de aquí,

14:03.280 --> 14:06.400
Voy a poner mi matriz,

14:06.400 --> 14:12.180
Y el segundo parámetro será lo que quiero que sea sin él.

14:12.220 --> 14:17.290
Entonces digamos que quería estar sin el número 3.

14:17.420 --> 14:23.860
En ese caso, guardo esto, el cambio ha sido detectado.

14:23.920 --> 14:34.130
Abro la consola y renuevo, Ah- pero ya ves, no vemos nada aquí porque nuevamente necesitamos

14:34.130 --> 14:36.500
ponerlo en 'bundle.js',

14:36.540 --> 14:43.760
Sé que es molesto, pero esta es una buena práctica para que comprendamos cómo funciona todo esto.

14:43.760 --> 14:51.770
Así que de nuevo el paquete se ha actualizado y ahora puedo ejecutar mi servidor en vivo, abrir la consola y mirar eso-

14:51.770 --> 14:56.620
Tengo una matriz con 1, 2, No 3, 4, 5, 6, 7, 8.

14:56.960 --> 15:01.110
Entonces puedo usar lodash.

15:01.150 --> 15:09.160
Así que al ver esto, puede que se den cuenta por qué NPM se llama Administrador de paquetes de nodo. Porque fue inicialmente

15:09.160 --> 15:17.770
creado para el nodo que aceptó esto requiere sintaxis pero no para el navegador. browserify nos permitió

15:18.160 --> 15:22.410
use la sintaxis que requeriría la sintaxis que se usó en

15:22.490 --> 15:23.550
node.js,

15:23.950 --> 15:24.940
en el navegador.

15:25.000 --> 15:33.480
Todo lo que teníamos que hacer era ingresar nuestros archivos de script en browserify y luego generar el paquete para nosotros.

15:33.520 --> 15:34.450
Muy genial.

15:34.450 --> 15:34.840
Todo bien.

15:34.870 --> 15:40.090
Hay muchos obstáculos por delante para mostrarte algunas cosas, pero tienes algunas muy buenas

15:40.090 --> 15:42.700
contactos de lo que estamos tratando de hacer aquí.

15:42.760 --> 15:50.620
Hemos creado un sistema ahora donde podemos importar todas estas cosas diferentes que otras personas tienen

15:50.620 --> 15:52.400
escrito para mejorar nuestro código

15:52.480 --> 15:55.660
Pero es posible que notes dos problemas con la configuración actual.

15:56.560 --> 16:01.940
Una es el hecho de que solo estoy usando esto sin el método que viene con lodash.

16:02.170 --> 16:09.070
Pero si miro en el archivo bundle.js, bueno, es masivo porque está incluida toda esta biblioteca

16:10.920 --> 16:16.120
y eso es algo con lo que debes tener cuidado. Cuando trabajas con NPM,

16:16.120 --> 16:22.870
Muchos principiantes simplemente comienzan a instalar una tonelada de paquetes sin pensar cuánto peso tienen

16:22.870 --> 16:24.390
agregar a un proyecto

16:24.430 --> 16:31.480
Es una buena idea evaluar realmente si necesita ese paquete como equipo y agregarlo al proyecto.

16:31.480 --> 16:36.760
Si le ahorra tiempo, si está bien escrito, tiene una gran comunidad a su alrededor.

16:36.760 --> 16:40.500
Es algo que siempre quieres considerar.

16:40.510 --> 16:48.220
Lo segundo es que ahora tenemos algo llamado "dependencias", de lo que depende nuestro proyecto

16:48.220 --> 16:48.720
estas cosas.

16:48.850 --> 16:57.670
Necesitamos asegurarnos de que nuestro sitio web o nuestra aplicación siempre tenga lodash en una cierta versión para que

16:57.670 --> 16:59.040
funciona con nuestro sitio web

16:59.350 --> 17:06.730
También agrega esa capa adicional de complejidad que debes considerar. Pero el archivo package.json también

17:06.730 --> 17:09.610
te ofrece muchas cosas buenas

17:09.700 --> 17:15.660
Tal vez no son evidentes en este momento porque nuestro proyecto es bastante pequeño, pero cuando trabajas en

17:15.660 --> 17:22.170
grandes proyectos grandes que sirve como una gran documentación para qué paquetes depende su proyecto.

17:23.230 --> 17:31.750
Verás que la mayoría de los grandes proyectos pueden tener cerca de 100 dependencias y tener solo una ubicación

17:31.750 --> 17:38.350
El archivo package.json para ver todos estos paquetes para ver de qué depende el proyecto es realmente muy bueno para todos

17:38.350 --> 17:45.090
todos los que se unen al equipo y también le permite especificar la versión aquí de sus dependencias.

17:45.100 --> 17:46.000
Para lodash actualizaciones,

17:46.000 --> 17:52.720
También puedo actualizar mi versión solo desde esta línea sin tener que ir al sitio web de lodash, descargar

17:52.720 --> 17:56.460
el archivo y agréguelo a

17:56.470 --> 17:57.750
mi archivo de script index.html.

17:58.240 --> 18:02.190
Una vez más, otra cosa es que no estamos agregando los archivos de script una y otra vez.

18:02.260 --> 18:04.220
Como hemos hablado antes.

18:04.590 --> 18:10.030
Ahora estos números que has visto antes se llaman y cada uno tiene un significado.

18:10.270 --> 18:13.920
El número correcto es el lanzamiento del parche.

18:13.990 --> 18:16.520
Entonces eso es si hay correcciones de errores.

18:16.780 --> 18:20.330
Lo actualizarán aquí si encuentran un error y necesitan solucionarlo.

18:20.350 --> 18:22.110
Esto se convertirá en cinco.

18:22.300 --> 18:24.550
Esta es la versión menor.

18:24.550 --> 18:30.610
Eso significa que hay algunas características nuevas que se agregaron a lodash pero no habrá ningún cambio

18:30.610 --> 18:31.560
que son importantes.

18:31.600 --> 18:37.390
Y finalmente, este es un lanzamiento importante que significa que esta es una cuarta versión de la quinta versión de

18:37.390 --> 18:38.710
lodash fue lanzado.

18:38.740 --> 18:40.870
Bueno, ese es un lanzamiento importante.

18:40.900 --> 18:48.280
Eso podría ser bastante diferente de la versión 4 y podría romper algunos de los sitios web que dependen de

18:48.460 --> 18:54.880
lodash 4. package.json le permite decidir realmente qué versiones necesita para cada uno de estos

18:55.300 --> 18:56.430
paquetes.

18:56.530 --> 19:02.890
Pero probablemente el mayor beneficio que obtienes con NPM, este proyecto es mucho más fácil de compartir con otros

19:02.890 --> 19:03.790
desarrolladores.

19:03.790 --> 19:10.360
No necesito agregar etiquetas de script en html para estos ahora, y para un desarrollador,

19:10.360 --> 19:17.020
para que descarguen todos los paquetes o las dependencias que requiere un proyecto,

19:17.180 --> 19:25.480
Bueno, nunca pondré los módulos de nodos en mi repositorio github. porque todo lo que necesitas es el

19:25.480 --> 19:26.330
archivo package.json.

19:26.440 --> 19:27.760
Déjame mostrarte lo que quiero decir.

19:27.910 --> 19:29.800
Si elimino mis paquetes de nodo aquí

19:34.810 --> 19:40.090
y digamos que alguien nuevo comenzó en la empresa y queremos asegurarnos de que tengan la última

19:40.090 --> 19:42.380
versión del proyecto para que puedan comenzar a trabajar en él.

19:43.060 --> 19:50.110
Bueno, aunque no hay módulos de nodo porque tenemos el archivo package.json, NPM se genera lo suficiente

19:50.740 --> 19:59.590
para decir "déjeme aclarar esto, o déjeme detener este servidor, y lo borraré, mientras la nueva persona lo haga"

19:59.600 --> 20:01.140
'npm install'

20:01.580 --> 20:06.620
Y hay un archivo package.json.

20:06.680 --> 20:11.340
Bueno, en ese caso todas las dependencias se descargan.

20:11.810 --> 20:16.640
Así que de inmediato pueden comenzar el proyecto con la misma versión exacta de todos los archivos que todo el mundo

20:16.640 --> 20:17.860
else tiene.

20:18.050 --> 20:24.440
Y es por eso que no verás ninguna carpeta de módulos conocida que pueda ser realmente grande en github

20:24.530 --> 20:25.260
porque no lo necesitamos

20:25.310 --> 20:32.020
Lo tenemos todo descrito aquí en package.json.

20:32.050 --> 20:33.750
Ahora otra cosa.

20:34.210 --> 20:41.000
En realidad, hay otro tipo de dependencias que puede tener, estas dependencias son lo que

20:41.080 --> 20:42.940
generador de fondo depende de.

20:42.940 --> 20:50.140
Pero hay otro tipo de dependencia llamada 'dependencia dev' y una dependencia dev son paquetes que

20:50.140 --> 20:53.520
solo son necesarios para el desarrollo y las pruebas.

20:53.740 --> 21:00.850
Por lo tanto, nunca se enviará a un sitio web para que el usuario final no pueda ver y usted pueda hacer muchas cosas

21:00.850 --> 21:06.700
una vez más, entraremos en la sección de reacción pero tendremos una sección separada llamada 'dependencias de desarrollo'

21:06.700 --> 21:14.980
aquí que tendrá diferentes cosas que solo se usan para los desarrolladores pero que se sacan automáticamente

21:15.220 --> 21:21.730
cuando lanzamos el producto para que no agregue demasiado peso a nuestro proyecto.

21:21.730 --> 21:22.420
Bien bien.

21:22.570 --> 21:24.160
Prometo que esto es lo último.

21:24.160 --> 21:30.870
Déjame aclarar esto. Si ahora corro prueba de ejecución npm

21:30.870 --> 21:32.870
Entonces la sintaxis es 'npm run'

21:32.940 --> 21:35.450
entonces lo que sea que diga el guion-

21:35.460 --> 21:40.470
en este caso 'prueba', obtengo el error 'eco':no ​​hay prueba

21:40.480 --> 21:42.720
especificado."

21:42.790 --> 21:45.960
Ahora eso es realmente lo que se define aquí.

21:46.190 --> 21:51.390
Los scripts de NPM le permiten hacer comentarios desde el archivo package.json.

21:51.430 --> 22:00.200
Deja que te enseñe. ¿Recuerdas lo molesto que fue que tuvimos que hacer un navegador para hacer el paquete? bien, aquí

22:00.210 --> 22:06.530
Puedo decir "construir" y dentro de esta sección

22:09.370 --> 22:11.570
-Déjame hacer esto más grande- dentro de esta sección,

22:11.570 --> 22:19.850
Puedo decir "browserify script.js" a "bundle.js"

22:22.620 --> 22:29.520
y puedo ejecutar las secuencias de comandos de una secuencia de comandos de construcción que ejecuta automáticamente esto en mi terminal.

22:29.520 --> 22:32.100
Déjame mostrarte, si guardo aquí.

22:35.140 --> 22:45.910
necesito aclarar- y voy a decir 'npm run' y luego cualquiera que sea el nombre del script es 'compilar'

22:45.930 --> 22:50.260
Mira eso. Acabo de actualizar browserify y ejecuta el script.

22:50.430 --> 22:51.000
Muy genial.

22:51.090 --> 23:02.760
Bueno, ¿y si también agregamos el servidor en vivo también, le ordenamos? '&& live-server' Guardo y

23:02.760 --> 23:07.710
ejecuta el mismo comando nuevamente.

23:07.760 --> 23:17.410
Mira eso. Tengo mi matriz visualizada, mi sitio web se está ejecutando y hace todos los comandos directamente desde mi terminal.

23:17.410 --> 23:18.340
¿Cuan genial es eso?

23:20.010 --> 23:20.500
Todo bien.

23:20.820 --> 23:23.880
Creo que eso es suficiente para NPM.

23:24.000 --> 23:25.990
Es una herramienta muy útil.

23:26.020 --> 23:31.530
Vamos a usarlo mucho y lo usarás mucho en tu día a día y te sentirás más cómodo

23:31.530 --> 23:31.980
con eso.

23:31.980 --> 23:39.840
Cuanto más lo use En la siguiente sección finalmente vamos a llegar a la construcción de una aplicación de la vida real con reaccionar.

23:39.840 --> 23:43.400
Vamos a utilizar algunos de los conocimientos que hemos reunido hasta este punto.

23:43.440 --> 23:48.010
Ahora tenemos una vista completa de Front-End.

23:48.240 --> 23:53.760
Aunque no se sienta muy seguro, verá que hemos llegado al punto en que podemos

23:53.760 --> 23:57.350
construir aplicaciones y sitios web realmente muy bonitos.

23:57.510 --> 24:02.880
Tenemos todas las herramientas en nuestro arsenal ahora para crear cosas increíbles.

24:02.880 --> 24:05.980
Así que realmente espero la próxima sesión contigo.

24:06.090 --> 24:07.510
Te veré en eso.

