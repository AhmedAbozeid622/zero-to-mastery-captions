WEBVTT

00:01.590 --> 00:04.800
¿Cómo funciona javascript?

00:04.800 --> 00:08.320
Imagina que recibes esta pregunta durante una entrevista o qué tal esto,

00:08.340 --> 00:13.110
explica la diferencia entre asíncrono y sincrónico en Javascript,

00:13.200 --> 00:15.890
o tal vez le piden que explique esta afirmación.

00:15.990 --> 00:19.560
Javascript como un único lenguaje de hebras que puede ser no bloqueante.

00:20.560 --> 00:24.940
¡Oh chico! En este video, te ayudaremos a responder esas preguntas.

00:24.940 --> 00:28.490
Este es un video que puede necesitar visitar varias veces a medida que avanza.

00:28.510 --> 00:29.590
Para realmente obtenerlo.

00:29.620 --> 00:32.890
Así que no se sienta desanimado, si no se siente cien por ciento seguro.

00:32.890 --> 00:35.500
Solo sigue mirándolo y lo conseguirás.

00:35.500 --> 00:40.560
Ahora, no necesitamos saber cómo funciona JavaScript internamente para escribir un programa.

00:40.900 --> 00:42.580
Pero es importante aprender

00:42.880 --> 00:47.260
Veo a muchas personas que han sido desarrolladores durante años y ninguno lo sabe.

00:47.260 --> 00:51.100
Es como ser piloto y no saber cómo un avión puede volar.

00:51.490 --> 00:55.180
OK, eso es un poco dramático pero entiendes mi punto.

00:55.180 --> 01:00.180
Entonces comencemos. Primero, ¿qué es un programa?

01:00.460 --> 01:03.470
Bueno, un programa tiene que hacer algunas cosas simples.

01:03.520 --> 01:05.530
Tiene que asignar memoria.

01:05.560 --> 01:11.100
De lo contrario, no podríamos tener variables o incluso tener un archivo en nuestra computadora.

01:11.110 --> 01:16.840
También tiene que analizar y ejecutar scripts, lo que significa que lee y ejecuta comandos.

01:17.130 --> 01:17.760
DE ACUERDO.

01:17.920 --> 01:26.200
Ahora, también sabemos que de nuestra discusión anterior, existe el motor de JavaScript que cada navegador implementa.

01:26.260 --> 01:33.700
Y en Chrome, es el V8 y el motor V8 lee el javascript que escribimos. Se transforma en máquina

01:33.700 --> 01:36.880
instrucciones ejecutables para el navegador.

01:37.420 --> 01:43.330
Ahora el motor, consta de dos partes, un montón de memoria y una pila de llamadas.

01:43.390 --> 01:45.040
Ahora, el montón de memoria,

01:45.250 --> 01:48.660
aquí es donde ocurre la asignación de memoria.

01:48.790 --> 01:50.640
Y no te preocupes, vamos a hablar de esto.

01:50.950 --> 01:52.200
Y luego la pila de llamadas,

01:52.240 --> 01:54.870
aquí es donde tu código es leído y ejecutado.

01:54.940 --> 01:57.750
Te dice dónde estás en el programa.

01:59.050 --> 02:06.250
Así que simplifiquemos esto y le mostraremos a qué me refería. Tengo Sublimetext aquí,

02:06.690 --> 02:10.620
y para nosotros asignar memoria en el montón de memoria,

02:10.890 --> 02:18.950
bueno, es tan simple como hacer 'const a iguales a uno'. Acabamos de asignar una memoria.

02:18.990 --> 02:28.040
Ahora, cuando asignamos esto, el motor de JavaScript va a recordar eso ¡oh! sí, 'a' tiene un valor de 1.

02:28.170 --> 02:30.970
Acabamos de usar el montón de memoria.

02:30.990 --> 02:34.530
Y, puedo seguir y seguir y seguir así, ¿verdad?

02:34.600 --> 02:41.400
Puedo seguir copiando y pegando y cambiando estas variables a 'b' y 'c' y puedo cambiar los valores

02:41.400 --> 02:44.460
a 100 y tal vez aquí será 10.

02:45.530 --> 02:46.110
Guay.

02:46.150 --> 02:49.910
Ahora, ¿cuál es un problema que vemos con esto?

02:50.020 --> 02:55.730
Esto es algo llamado pérdida de memoria que vas a escuchar a medida que te conviertes en un desarrollador.

02:56.090 --> 03:01.880
Y lo que hemos hecho aquí es que hemos creado todas estas variables. Estas variables globales que están en el

03:01.880 --> 03:03.070
montón de memoria

03:03.230 --> 03:05.350
Pero ves esta caja ¿verdad?

03:05.510 --> 03:10.910
Y con toda la memoria tenemos una cantidad limitada, que en realidad podemos tener.

03:11.060 --> 03:17.930
Entonces, al aumentar el número de variables que tenemos, imagina si tuviera solo esta página llena de variables

03:17.930 --> 03:21.650
y en lugar de solo números, son como arreglos muy grandes.

03:21.980 --> 03:28.430
Bueno, las pérdidas de memoria ocurren cuando tienes memoria no utilizada,

03:28.430 --> 03:28.630
como digamos, ahora estamos usando la variable 'a',

03:28.640 --> 03:33.990
pero todavía está allí, bueno, al tener memoria sin usar solo por ahí,

03:34.220 --> 03:40.030
llena este montón de memoria. Y es por eso que puedes escuchar, por qué las variables globales son malas.

03:40.130 --> 03:44.430
Las variables globales son malas porque no nos olvidamos de limpiar después de nosotros mismos,

03:44.540 --> 03:51.230
llenamos este montón de memoria y, finalmente, el navegador no podrá funcionar.

03:51.270 --> 03:54.050
De acuerdo, entonces eso es memoria.

03:54.060 --> 03:56.060
Hablemos de la pila de llamadas.

03:56.190 --> 03:57.000
¿Que es eso?

03:58.190 --> 04:17.630
Bueno, de nuevo, con una pila de llamadas podemos tener algo como esto, 'registro de la consola' iremos a '1', 'registro de consola 2', y luego

04:17.660 --> 04:28.330
finalmente 'console log 3', si ejecuto este código, en mi terminal de navegador,

04:28.570 --> 04:39.810
bueno, entiendo, '1, 2, 3'. Entonces, la pila de llamadas, si lo recuerda, eso es lo que lee y ejecuta nuestros scripts.

04:40.230 --> 04:45.890
Entonces, ¿qué pila de llamadas lee la primera línea, registro de puntos de la consola,

04:46.110 --> 04:48.580
se pone, en la pila de llamadas.

04:48.870 --> 04:52.500
Entonces, el motor de javascript dice:oop !, se ha agregado el registro de puntos de la consola.

04:52.650 --> 05:03.150
Vamos a abrirlo en esta pila de llamadas. Y luego lo ejecuta y crea uno, luego dice:OK, estoy quitando el

05:03.150 --> 05:09.900
primer registro de la consola, ya que acabo de ejecutarlo, voy a colocar el segundo registro de la consola

05:09.900 --> 05:20.310
en mi pila de llamadas, lo agrega aquí y dice, ¡yah! ejecuta 2 y luego lo elimina, lo saca y

05:20.310 --> 05:23.370
luego obtiene el registro de consola 3 y registra el registro de consola 3,

05:23.400 --> 05:26.110
y luego finalmente lo elimina.

05:26.970 --> 05:31.920
Pero vamos a tener un ejemplo más complejo aquí para demostrar este punto.

05:32.130 --> 05:34.740
Imagina, tengo algo como esto.

05:37.430 --> 05:39.680
Tengo una función 'const one'

05:44.410 --> 05:52.420
y dentro de esta función, tenemos otra función 'const dos' y por ahora no va a hacer mucho.

05:52.420 --> 06:04.360
Va a consolar el registro de puntos '4' y luego aquí solo diremos, ejecutamos la función 'dos'.

06:04.390 --> 06:14.790
Entonces, si copio y pego esto, y lo coloco en nuestra consola y ejecuto 'uno', obtengo 4 e ignoro este error.

06:14.820 --> 06:17.420
aquí, solo está relacionado con mi aplicación en el navegador.

06:17.500 --> 06:19.000
Pero ves que obtenemos 4.

06:19.000 --> 06:21.780
Entonces, ¿qué pasó aquí de acuerdo con la Pila de llamadas?

06:22.270 --> 06:30.040
Bueno, si tenemos la pila de llamadas aquí, primero ejecutamos la función 'uno'.

06:30.040 --> 06:34.490
Entonces, en la parte superior de la pila de llamadas, se ejecuta la función 'uno'.

06:34.750 --> 06:40.000
Y a medida que entramos en esta pila de llamadas, vemos que ejecutamos otra función 'dos'.

06:40.180 --> 06:50.500
Así que 'dos' se coloca encima de la pila de llamadas, y ahora ejecutamos la función 'dos' que es el registro de puntos de la consola.

06:50.560 --> 07:00.090
Entonces, tenemos el registro de punto de consola '4' que se ejecuta dentro de la función '2'.

07:00.110 --> 07:03.980
Entonces, ahora que leemos esto, la pila de llamadas va a decir, OK,

07:04.010 --> 07:06.190
no hay nada más dentro de esto.

07:06.260 --> 07:08.400
Voy a ejecutar la consola locg 4.

07:08.450 --> 07:11.390
Así que va a imprimir el número 4 aquí.

07:11.390 --> 07:22.250
Va a eliminar eso de la pila de llamadas, y luego eliminar los 'dos' y luego eliminar el 'uno', porque

07:22.310 --> 07:23.370
simplemente ha sido llamado.

07:26.040 --> 07:28.860
Y la pila de llamadas ahora está vacía.

07:29.250 --> 07:30.000
Todo bien.

07:30.030 --> 07:30.580
Increíble.

07:30.690 --> 07:34.590
Ahora revisemos la declaración desde el comienzo del video.

07:34.890 --> 07:42.360
Javascript es un lenguaje de un único subproceso que puede ser no bloqueante. Single threaded significa que solo tiene

07:42.480 --> 07:43.780
una pila de llamadas.

07:44.570 --> 07:48.310
Y solo una pila de llamadas, solo puedes hacer una cosa a la vez.

07:48.350 --> 07:53.050
Y como viste, una pila de llamadas es la primera en salir.

07:53.090 --> 07:59.390
Así que, sea lo que sea que esté en la parte superior, la pila de llamadas se ejecuta primero y luego debajo, debajo de eso, debajo de eso hasta que el

07:59.390 --> 08:02.400
la pila de llamadas está vacía.

08:02.530 --> 08:08.840
Ahora, otros lenguajes pueden tener múltiples pilas de llamadas y estos se llaman multithread.

08:08.870 --> 08:14.030
También puede ver cómo podría ser beneficioso tener múltiples pilas de llamadas, para que no sigamos esperando

08:14.030 --> 08:15.310
alrededor para cosas.

08:15.380 --> 08:21.940
¿Por qué javascript fue diseñado para ser de un solo hilo? Bueno, ejecutar código en un solo hilo puede ser bastante

08:21.940 --> 08:27.910
fácil, ya que no tiene que lidiar con escenarios complicados que surgen en entornos multiproceso.

08:27.910 --> 08:29.700
Solo tienes una cosa por la que preocuparte.

08:29.920 --> 08:39.720
Y, cuando digo problemas con entornos multiproceso, puede tener bloqueos. Ahora, adivina qué,

08:40.200 --> 08:48.270
Acabas de aprender lo que significa la programación sincrónica, la programación sincrónica simplemente significa línea uno

08:48.330 --> 08:53.720
se ejecuta luego se ejecuta la línea dos y luego se ejecuta la línea tres.

08:55.090 --> 09:02.890
El último, puede comenzar antes de los primeros, por lo que este registro de consola '2' no se inicia hasta que la consola inicie sesión

09:03.100 --> 09:10.490
termina Y el registro de la consola '3' no comienza hasta que estos dos arriba terminen. Porque bueno, hemos visto la llamada

09:10.490 --> 09:12.410
pila debido a la pila de llamadas.

09:12.410 --> 09:16.590
Ahora, es posible que haya oído hablar del desbordamiento de la pila del sitio.

09:16.690 --> 09:19.700
Si eres un desarrollador lo usas a diario.

09:20.000 --> 09:24.710
¿Alguna vez te has preguntado qué significa desbordamiento de pila?

09:25.970 --> 09:28.310
Bien desbordamiento de la pila

09:28.480 --> 09:32.410
es esto, cuando una pila se está desbordando.

09:32.410 --> 09:39.220
Algo así como lo que hablamos sobre fugas de memoria y cómo puede desbordarse el montón de memoria de un motor de JavaScript.

09:40.060 --> 09:43.270
Bueno, con desbordamiento de pila,

09:43.270 --> 09:47.980
esto sucede, cuando la pila de llamadas se hace más y más grande y más grande hasta que simplemente no tiene suficiente

09:47.980 --> 09:49.070
espacio nunca más

09:49.360 --> 09:52.180
¿Cómo podemos hacer eso?

09:52.180 --> 09:54.560
¿Podemos recrear un desbordamiento de pila?

09:54.910 --> 09:58.990
¡Yah! Puedo mostrarte rápidamente que para crear un desbordamiento de pila,

09:58.990 --> 10:06.180
todo lo que tienes que hacer es funcionar 'foo' como lo tenemos aquí.

10:07.740 --> 10:13.490
Y esta función solo tendrá 'foo'.

10:13.490 --> 10:17.940
Y simplemente vamos a ejecutar nuestra función 'foo', de acuerdo.

10:17.950 --> 10:19.090
Eso parece confuso.

10:19.180 --> 10:21.760
¿Que está sucediendo aquí?

10:22.090 --> 10:24.600
Esto se llama recursividad.

10:27.270 --> 10:30.350
Y recursividad significa una función que se llama a sí misma.

10:30.660 --> 10:38.670
Entonces, si nos fijamos en lo que hace esta función, ejecutamos 'foo' y 'foo' se ejecuta, lo que 'foo' hace es bien, nosotros

10:38.730 --> 10:39.650
corre 'foo' de nuevo.

10:39.660 --> 10:46.990
Así que sigue repitiéndose una y otra vez, teniendo recurrencia, pero no hay un final a la vista.

10:47.070 --> 10:50.520
Seguimos agregando 'foo' a la pila de llamadas.

10:50.640 --> 10:56.930
Seguimos añadiéndolo, una y otra vez, una y otra vez, una y otra vez.

10:57.210 --> 10:59.700
Y, tenemos un desbordamiento de pila.

11:00.060 --> 11:07.260
Entonces, si quieres divertirte, ve a tu navegador, ve a tu consola y ejecuta algo como esto y

11:07.260 --> 11:07.960
mira qué pasa.

11:07.980 --> 11:10.150
Vas a tener un desbordamiento de pila.

11:11.120 --> 11:11.850
Todo bien.

11:11.900 --> 11:14.280
Así que con suerte, esto ahora tiene sentido.

11:14.300 --> 11:20.920
El motor javascript que es el motor V-8 y Chrome tiene un montón de memoria y una pila de llamadas.

11:23.120 --> 11:31.390
Ahora, Javascript tiene un solo hilo, solo se ejecuta una declaración a la vez,

11:31.390 --> 11:32.190
pero ahora hay un problema, ¿no?

11:32.200 --> 11:41.260
¿Qué pasa si la segunda línea es una gran tarea que tenemos que hacer? tal vez recorrer un conjunto que tenía millones de

11:41.340 --> 11:44.390
artículos, ¿qué pasaría allí?

11:44.430 --> 11:51.790
Bueno, tendríamos que ejecutar el registro de la consola y luego la segunda línea, entonces es un trabajo masivo masivo,

11:51.840 --> 11:54.920
bueno, solo trabaje allí y log de consola '3'

11:54.930 --> 11:57.240
tomará un tiempo realmente largo para que te conecten.

11:57.360 --> 12:04.230
Y en nuestro pequeño ejemplo, eso no significa mucho, pero si lo tuviera bien en un sitio web, el usuario no

12:04.260 --> 12:05.530
ser capaz de hacer cualquier cosa.

12:05.580 --> 12:11.260
El sitio web se congelaría hasta que se termine esa tarea y el usuario simplemente espere allí.

12:11.340 --> 12:13.320
Eso no es muy bueno, ¿verdad?

12:13.470 --> 12:19.650
Bueno, con la tarea sincrónica, si tenemos una función que ocupa mucho tiempo, va a aguantar

12:19.650 --> 12:20.670
la línea.

12:20.760 --> 12:23.170
Imagine un restaurante buffet, ¿verdad?

12:23.170 --> 12:29.130
si toda la gente quiere comer, pero Bobby dice que esperen chicos,

12:29.130 --> 12:29.590
Tengo que seguir comiendo y poner un tocino en mi plato.

12:29.640 --> 12:31.860
Bueno, todos deben esperar en línea.

12:32.280 --> 12:38.490
Entonces parece que necesitamos algo que no se bloquee. Recuerde nuestra primera declaración que hicimos en este video.

12:38.790 --> 12:43.390
Javascript como un único lenguaje de hebras que puede ser no bloqueante.

12:43.710 --> 12:47.150
Idealmente, no esperamos las cosas que toman tiempo.

12:47.610 --> 12:49.050
Entonces como hacemos esto.

12:49.980 --> 12:52.970
Bueno, asíncrono al rescate.

12:52.980 --> 13:00.060
Piense en asincrónico como un comportamiento. La ejecución sincrónica es excelente porque es predecible.

13:00.060 --> 13:02.490
Sabemos lo que sucede primero, luego lo que sucede a continuación.

13:02.490 --> 13:03.740
Qué pasa en tercer lugar

13:04.050 --> 13:05.510
Pero puede ser lento.

13:05.700 --> 13:12.000
Entonces, cuando tenemos que hacer cosas como procesamiento de imágenes o realizar solicitudes a través de la red, como las llamadas API,

13:12.360 --> 13:15.210
y no te preocupes, vamos a hablar de esto en futuros videos.

13:15.210 --> 13:18.990
Necesitamos algo más que solo tareas sincrónicas, correcto.

13:19.080 --> 13:23.660
Entonces piensas para ti, Andre. ¿Cómo hacemos programación asincrónica entonces?

13:24.090 --> 13:27.820
Bueno, déjame eliminar algo de este desorden.

13:28.050 --> 13:35.220
Podemos hacer una programación asincrónica haciendo algo como esto 'setTimeout', que vamos a hablar

13:35.220 --> 13:44.780
about, es una función que viene dentro de nuestros navegadores, y nos permite crear un tiempo de espera. Y podemos simplemente

13:44.780 --> 13:47.740
darle el primer parámetro es la función que queremos ejecutar.

13:47.840 --> 13:51.010
Y luego el segundo parámetro es cuántos segundos queremos esperar.

13:51.020 --> 13:53.280
Entonces digamos que quiero esperar dos segundos.

13:53.300 --> 13:55.730
Entonces 200, 2000 milisegundos.

13:56.240 --> 14:00.730
Si hago esto ahora, vamos a ejecutarlo en la consola y ver qué pasa.

14:07.750 --> 14:19.330
Bueno, ¿qué acaba de pasar? tenemos el registro de la consola '1', luego el registro de la consola '3' y luego el registro de la consola '2',

14:19.340 --> 14:20.450
dos segundos después.

14:20.990 --> 14:28.410
Parece que nos saltamos todo este paso y luego lo ponemos al final.

14:29.720 --> 14:36.750
Bueno, acabas de presenciar la programación asincrónica. Para entender esto y lo que acaba de pasar.

14:36.950 --> 14:45.930
Necesito llevarlo a la siguiente parte y es decir, para que el javascript como lo conocemos, se ejecute para el

14:45.930 --> 14:49.520
motor de JavaScript con montón de memoria y pila de llamadas para ejecutar,

14:49.680 --> 14:57.880
necesitamos algo más que el motor de JavaScript, necesitamos lo que llamamos un entorno de tiempo de ejecución de JavaScript. Y

14:58.150 --> 15:03.570
El entorno de ejecución de Javascript es una vez más parte del navegador, está incluido en los navegadores.

15:03.670 --> 15:06.630
Tienen cosas extra, encima del motor,

15:06.640 --> 15:12.950
tienen algo llamado API web, cola de devolución de llamada y un bucle de evento.

15:13.100 --> 15:19.000
Y como puede ver aquí, 'setTimeout' es parte de la API web.

15:19.100 --> 15:22.780
No es técnicamente parte de javascript, ¿verdad?

15:23.000 --> 15:28.410
Es lo que los navegadores nos dan para usar, así que podemos hacer un programa asíncrono.

15:28.680 --> 15:29.130
DE ACUERDO.

15:29.210 --> 15:31.240
Entonces mirando este diagrama,

15:31.280 --> 15:34.970
veamos si podemos descubrir lo que nuestro código estaba haciendo.

15:36.590 --> 15:53.180
Podemos crear aquí nuestra propia pila de llamadas, tendremos API web y luego tendremos una cola de devolución de llamada y luego

15:53.260 --> 15:59.290
un bucle de eventos, tal como lo tenemos en nuestro entorno de tiempo de ejecución de JavaScript.

15:59.330 --> 16:00.550
Entonces, ¿qué está pasando aquí?

16:00.600 --> 16:07.440
Bueno, primero tenemos el registro de la consola que entra en la pila de llamadas.

16:08.350 --> 16:10.690
Y eso se ejecuta.

16:10.930 --> 16:14.690
Así que registramos el registro de la consola '2' en el navegador.

16:15.070 --> 16:17.670
Entonces obtenemos 'setTimeout'

16:18.800 --> 16:24.080
en nuestra pila de llamadas porque terminamos esta primera tarea, vamos a la segunda. Y con

16:24.250 --> 16:30.380
'setTimeout', lo que va a pasar es, bueno, la pila de llamadas va a decir, OK, tengo 'setTimeout'.

16:30.860 --> 16:37.610
Y debido a que setTimeout no es parte de javascript sino parte de la API web, tiene esta característica especial

16:37.910 --> 16:42.620
Lo que sucederá es que desencadena la API web.

16:43.820 --> 16:55.010
Y dice, hey! 'setTimeout' acaba de ser llamado. Y debido a que notificamos API web, podemos sacarlo

16:55.160 --> 16:56.400
de la pila de llamadas.

16:56.420 --> 17:02.250
Ahora, la API web comienza con un temporizador aquí, un temporizador de dos segundos.

17:02.330 --> 17:10.350
Sabrá que en dos segundos, tienes que hacer algo. Y debido a que la pila de llamadas está vacía,

17:11.010 --> 17:18.970
el motor de JavaScript ahora va al registro de la consola '3' y lo ejecuta.

17:19.110 --> 17:20.600
Entonces eso tiene sentido, ¿verdad?

17:20.700 --> 17:24.470
Ahora hemos hecho '1' y '3', pero todavía tenemos 'setTimeout'

17:24.660 --> 17:27.680
2 segundos en la API web.

17:27.960 --> 17:36.600
Ahora, después de dos segundos cuando nuestro límite de tiempo está activo, la API web va a decir:17:36.600 --> 17:37.220
está bien, debería ejecutarse 'setTimeout'.

17:37.260 --> 17:38.550
Veamos qué hay dentro de eso.

17:38.670 --> 17:40.740
Bueno, tenemos un registro de consola 2.

17:40.980 --> 17:45.220
Entonces, ¿qué va a pasar es, va a decir, hey! establecer el tiempo está hecho.

17:46.630 --> 17:56.210
Tenemos una devolución de llamada, y esta devolución de llamada de 'setTimeout', agregamos a la devolución de llamada que, diciendo que, ¡oye! nosotros

17:56.210 --> 18:00.630
tenemos que ejecutar algo, estamos listos para ejecutarlo.

18:00.750 --> 18:09.060
Ahora, la última parte, eventloop, eventloop aquí revisa y dice, ¡oye! es la pila de llamadas vacía,

18:09.180 --> 18:10.710
y sigue comprobando todo el tiempo.

18:10.710 --> 18:16.200
Si la pila está vacía y si la pila de llamadas está vacía y no hay nada en ejecución ahora, el javascript

18:16.200 --> 18:20.010
motor, va a decir, ¡oye! ¿tenemos alguna devolución de llamada?

18:20.040 --> 18:25.250
Comprobará la devolución de llamada y dirá ¡mmm! ¿Hay algo allí ?, porque la pila de llamadas está vacía,

18:25.250 --> 18:28.320
podemos arrojar algo allí y hacerlo funcionar.

18:28.530 --> 18:31.380
En nuestro caso decimos, ¡oh sí! Hago.

18:31.380 --> 18:34.420
Déjame poner esto en la pila de llamadas.

18:34.470 --> 18:43.170
Así que ahora movemos la devolución de llamada a la pila de llamadas y luego la devolución de llamada la ejecutamos y al ejecutar vemos

18:43.170 --> 18:45.560
que tenemos el registro de la consola 2.

18:45.810 --> 18:55.240
Así que va a decir console dot log 2, va a ejecutar esta función y una vez que termine va a

18:55.270 --> 18:56.850
sacarlo de la pila de llamadas.

18:56.890 --> 19:02.890
Y de nuevo hemos terminado con la devolución de llamada, por lo que la eliminamos, y listo.

19:02.920 --> 19:03.580
Hemos terminado.

19:03.580 --> 19:09.170
Todo está vacío y acabamos de ejecutar este '1', '3'.

19:09.250 --> 19:13.470
Pasará por todo el ciclo de evento de devolución de llamada de la API web.

19:13.570 --> 19:17.590
Y luego ejecutará el registro de la consola '2'. Hoo !.

19:17.680 --> 19:19.350
Esa fue mucha información.

19:19.450 --> 19:25.300
Por lo tanto, es posible que tenga que mirar eso algunas veces, pero espero que tenga sentido para usted el motivo por el que notamos

19:25.300 --> 19:26.870
este comportamiento.

19:27.460 --> 19:31.150
Y quiero desafiar tu comprensión aquí.

19:31.420 --> 19:37.160
¿Sabes lo que sabes y lo que acabo de enseñarte qué sucede si cambio esto a cero?

19:37.360 --> 19:39.420
Eso significa cero segundo (s).

19:40.250 --> 19:43.380
Voy a darte un segundo para pensar en lo que sucederá.

19:43.580 --> 19:45.430
Y luego vamos a probar esto.

19:45.850 --> 19:54.380
Cuando borre la consola, copie y pegue esto y ejecútelo. Bueno, uno, tres y dos.

19:54.400 --> 19:55.540
¿Lo adivinaste bien?

19:56.420 --> 19:59.150
Ahora piensa en por qué sucedió eso?

19:59.330 --> 20:04.570
Aunque esto es cero segundo (s), todavía pasó por el proceso.

20:04.640 --> 20:09.190
Todavía ingresó a las API web,

20:09.350 --> 20:11.950
y luego la cola de devolución de llamada y luego el bucle de evento.

20:12.050 --> 20:19.850
Y para cuando eso sucedía, la pila de llamadas ya se había movido al registro de la consola '3' y

20:19.850 --> 20:27.380
solo después de que el registro de la consola '3' estaba hecho y la pila de llamadas estaba vacía, el ciclo del evento decía:¡oh, sí! podemos llamar al registro de la consola '2'.

20:27.680 --> 20:31.430
Espero que tenga sentido para ti.

20:31.430 --> 20:36.560
Y si eres capaz de entender que en realidad tendrás muchas personas que contratan para javascript

20:36.560 --> 20:41.800
los roles hacen preguntas como esta en una entrevista y debes explicar por qué.

20:41.810 --> 20:47.870
Así que espero que tenga sentido para usted y puede usar eso para su ventaja del próximo siglo.

20:47.900 --> 20:49.810
Así que vamos a recapitular.

20:53.950 --> 21:00.340
Si desea cargar sus últimos tweets en una página web y lo hace de forma sincrónica, entonces los visitantes

21:00.340 --> 21:04.600
a su sitio no podrá hacer nada hasta que esos tweets estén cargados.

21:04.600 --> 21:08.600
Esto podría causar un gran retraso antes de que lleguen a ver el contenido de su sitio.

21:08.680 --> 21:12.620
Es posible que no puedan hacer clic en ningún lugar y la página se sentirá congelada.

21:12.760 --> 21:14.590
No es una muy buena experiencia de usuario, ¿verdad?

21:15.420 --> 21:19.100
Otra forma de pensar sobre esto es llamar a tu maestra con una pregunta.

21:20.260 --> 21:23.140
De manera síncrona se llama el maestro,

21:23.140 --> 21:30.430
usted espera por teléfono hasta que el maestro conteste el teléfono y le haga la pregunta y esperemos que consiga

21:30.430 --> 21:31.080
una respuesta.

21:31.210 --> 21:33.930
Así que dejas que suene el teléfono hasta que contesta.

21:34.090 --> 21:37.330
Pero no estás haciendo nada más mientras tanto.

21:37.690 --> 21:41.870
Asíncrono significa que envía un mensaje de texto a un profesor con una pregunta.

21:42.010 --> 21:47.820
Y luego, cuando el maestro, él o ella tenga tiempo, le responderá y lo llamará con la respuesta.

21:48.310 --> 21:55.030
Entonces puedes hacer otras cosas en el medio. El javascript es asíncrono cuando puedes dejar un mensaje

21:55.570 --> 22:00.390
y una devolución de llamada te dice, ¡eh! El Sr. profesor tiene un mensaje para usted cuando no está demasiado ocupado.

22:02.040 --> 22:05.470
Y es por eso que lo llamamos una función de devolución de llamada

22:05.520 --> 22:10.760
y una devolución de llamada que. Le devolvemos la llamada para hacerle saber que oye, que hay algunas cosas esperándote.

22:11.010 --> 22:17.250
Ahora, vemos aquí que tenemos DOM, Ajax y Timeout. Y hay algunas otras cosas, pero también ves en

22:17.250 --> 22:20.410
la llamada de devolución de llamada, tenemos al hacer clic en cargar en hecho.

22:20.670 --> 22:23.310
¿Te acuerdas de los oyentes del evento?

22:23.580 --> 22:33.090
Bueno, con un oyente de eventos, tuvimos algo así como un elemento, y agregamos el oyente de eventos.

22:33.260 --> 22:40.340
Y en este eventlistener, podríamos decir escuchar un clic y tendrá una función que tal vez solo

22:40.590 --> 22:42.260
consola dot log 'clic'

22:42.740 --> 22:50.770
Bueno, de forma similar a una forma de programación asincrónica, hemos creado esta función 'clic' y ahora estamos

22:50.770 --> 22:52.070
solo escuchándolo.

22:52.150 --> 22:55.360
Y cada vez que ocurre un clic en la página web.

22:55.390 --> 22:57.180
Entonces en el DOM,

22:57.340 --> 23:04.970
Bueno, ejecutamos la función de devolución de llamada, que la consola registra 'clic'.

23:05.460 --> 23:06.190
Todo bien.

23:06.480 --> 23:14.020
Entonces, para finalizar, ¿cuándo está sucediendo la asincronía? sucede mucho, cuando intentas hablar entre

23:14.020 --> 23:18.280
máquinas, como hablar con una base de datos que hace solicitudes de red,

23:18.340 --> 23:23.530
procesamiento de imágenes, lectura de archivos y no te preocupes, veremos esto en futuros videos.

23:23.680 --> 23:31.690
Pero para recapitular lo que acabamos de aprender, Javascript es un lenguaje de subprocesos único que puede ser no bloqueante.

23:31.690 --> 23:39.340
Tiene una pila de llamadas y hace una cosa a la vez. Para no bloquear el único hilo,

23:39.370 --> 23:48.730
puede ser asincrónico con las funciones de devolución de llamada y estas funciones de devolución de llamada se ejecutan en segundo plano, a través de

23:48.730 --> 23:53.670
la cola de devolución de llamada y luego el bucle de evento, para llevarlo a la pila de llamadas.

23:53.740 --> 24:00.610
Entonces, la próxima vez que te pregunten, ¿cuál es la diferencia entre un programa sincrónico o asincrónico?

24:00.910 --> 24:02.790
¿O cómo funciona javascript?

24:02.830 --> 24:06.260
Deberías tener un poco más de confianza para responder esa pregunta.

24:06.660 --> 24:08.340
Y espero que esto haya sido útil.

24:09.070 --> 24:11.070
Te veré en el próximo video. A-Dios.