WEBVTT

00:01.990 --> 00:10.800
ES8 tiene algunas características nuevas más que se introdujeron en 2017, en comparación con ES7. En este video,

00:10.810 --> 00:13.360
Repasaremos los más importantes.

00:13.660 --> 00:17.750
Entonces, el primero es 'relleno de cuerdas'.

00:18.010 --> 00:28.110
Tenemos nuevas funciones que podemos agregar a cadenas que son '.padStart' y '.padEnd'. Ahora para demostrar

00:28.110 --> 00:43.810
esto, entremos a la consola. Y solo haga una 'Tortuga' y haremos un '.padStart' de 10, si hago esto,

00:43.810 --> 00:48.230
Me sale 'Tortuga' con 10 espacios en frente de ella.

00:49.810 --> 01:01.170
Si hago '.padEnd', obtengo 'Turtle' con 10 espacios después de esto, y esto es útil solo para alinear caracteres, de

01:01.170 --> 01:09.310
cadenas, si quieres relleno específico para ellos. Otra vez, muy, muy simple, fácil de recoger, solo otra cuerda

01:09.310 --> 01:11.980
método que recibimos

01:11.980 --> 01:13.510
Bien, vayamos al segundo.

01:13.510 --> 01:20.830
El segundo que obtuvimos es algo llamado comas finales en las listas de parámetros y llamadas de la función.

01:21.040 --> 01:21.840
¡Hmm !, ¿qué significa eso?

01:21.970 --> 01:33.200
Bueno, ahora puedo hacer algo como 'const fun', 'a, b, c, d' y agregar una coma al final.

01:34.370 --> 01:38.610
Y, si hago una función, digamos 'console.log' (s)

01:38.930 --> 01:41.670
'a', solo una simple función tonta.

01:41.690 --> 01:48.920
Ahora puedo ejecutar esta función, como uno, dos, tres, cuatro y luego una coma al final.

01:49.220 --> 01:54.120
Y esto sigue siendo javascript válido. Si ejecuto esto,

01:54.200 --> 01:55.550
Ya ves eso, funciona.

01:55.550 --> 01:56.680
Registro de consola 'a'.

01:56.690 --> 01:59.030
Que es uno, se registra.

01:59.030 --> 02:03.850
Ahora, ¿por qué sería esto útil?

02:03.860 --> 02:09.320
La razón principal es que cuando comienzas a obtener listas de parámetros realmente grandes, verás a mucha gente

02:09.320 --> 02:12.420
haciendo cosas similares a esto.

02:15.910 --> 02:18.140
Solo para hacer las cosas un poco más limpias.

02:18.310 --> 02:27.080
Y cuando empiezas a hacer esto, cada vez que agregas un nuevo parámetro, es mucho más fácil.

02:27.100 --> 02:32.710
Pero también en github, cuando haces cambios, realmente hace la diferencia.

02:32.710 --> 02:35.860
Las diferencias verde y roja son mucho más limpias.

02:35.860 --> 02:41.750
Entonces es solo sintáctico y solo hace que las cosas se vean un poco más agradables.

02:41.760 --> 02:47.530
De nuevo, normalmente no querría hacer algo como esto, pero tal vez cuando tenga una larga lista de parámetros

02:47.770 --> 02:54.520
así, la coma final ahora es válida y no dará un error. Todo bien.

02:54.630 --> 02:56.130
Veamos el siguiente.

02:56.400 --> 03:00.720
El siguiente es, tenemos 'object.values'

03:03.310 --> 03:12.410
y 'object.entries' y estos son muy útiles porque antes de esto, teníamos algo llamado

03:12.420 --> 03:21.680
'object.keys' y 'object.keys' nos permitieron hacer algo similar a las matrices pero a los objetos.

03:22.030 --> 03:32.700
Entonces, por ejemplo, si tuviéramos un objeto (obj) que, digamos, tendría un objeto y este objeto

03:32.790 --> 03:42.820
tendrá 'userName0', 'Santa', tenemos 'userName1', 'Rudolph'.

03:43.000 --> 03:51.920
Y también tenemos, 'userName2', 'Mr. Grinch '.

03:52.000 --> 03:57.550
Ahora mirando este objeto, porque no es una matriz

03:57.550 --> 04:05.790
no podemos hacer el 'mapa' o 'filtrar' o 'reducir' sino este tipo de objeto feo.

04:05.830 --> 04:10.810
Y esto ilustra un buen punto, a veces, cuando trabajas con servidores, obtienes objetos que

04:10.930 --> 04:17.110
realmente no te gusta o no quieres trabajar pero aún quieres repetir eso.

04:17.230 --> 04:22.360
Y antes de que pudiéramos hacer algo como esto con 'object.keys', dejaremos un poco más de espacio aquí,

04:22.360 --> 04:31.450
para que podamos ver, podría hacer 'object.keys' y aquí, arrojaremos el objeto.

04:31.450 --> 04:36.140
Y ahora, puedo usarlo como una matriz o ir uno por uno.

04:37.190 --> 04:38.240
Como una matriz.

04:39.490 --> 04:42.120
Entonces es como si fuera una matriz.

04:42.120 --> 04:45.310
Pero excepto que tiene propiedades y valores.

04:45.490 --> 04:53.180
Entonces, digamos, queríamos hacer un ciclo 'para cada uno' y para cada tecla, es decir, para cada tecla en el conjunto.

04:53.500 --> 05:05.840
Entonces, para cada 'nombre de usuario', también tenemos el índice que es 0, 1, 2, simplemente rapea esto entre paréntesis.

05:05.980 --> 05:15.710
Y ahora, dentro de escuchar, podemos decir 'console.log (key)' y luego 'object [key]'.

05:15.970 --> 05:20.500
Así que ahora, estamos agarrando el objeto con la clave 'nombre de usuario'.

05:20.500 --> 05:29.470
Entonces, si 'console.log' esto, copiemos y peguemos esto, limpia esto un poco y veo que tengo,

05:29.480 --> 05:34.970
'nombre de usuario' 'Santa', 'username1' 'Rudolph', 'username2' 'Mr. Grinch '.

05:35.190 --> 05:44.580
Y esa es una forma de iterar o recorrer los objetos, pero con 'object.entries',

05:44.760 --> 05:45.860
las cosas se vuelven un poco más fáciles.

05:46.730 --> 05:58.610
Por ejemplo, podemos hacer 'objeto', debemos hacer más espacio, podemos hacer 'object.values' y 'object.values',

05:58.970 --> 06:06.020
si hago un 'por cada uno' aquí, simplemente tomo el 'valor' del valor.

06:06.140 --> 06:11.670
Puedo simplemente 'console.log (value)'.

06:13.080 --> 06:19.530
Y ahora, obtengo el valor de cada objeto.

06:19.560 --> 06:28.830
Eso es que pasa por 'Santa', 'Rudolf' y 'Mr. Grinch '.

06:29.060 --> 06:31.390
Con las entradas, si hago 'object.entries'.

06:31.630 --> 06:33.250
Bien, veamos qué pasa.

06:34.360 --> 06:42.990
Vamos a aclarar esto, obtengo una serie de 'nombre de usuario' 'Santa', 'username1' 'Rudolph' y 'username2' 'Mr. Grinch '.

06:43.030 --> 06:49.600
Así que esto le da mucho control y obtiene propiedad y valor o clave y valor, y puede hacer lo que sea

06:49.600 --> 06:55.910
lo desea y usa 'foreach', 'map', 'reduce', 'filtrar' todas esas funciones de matriz.

06:55.930 --> 06:58.130
Entonces usemos un escenario de vida real aquí.

06:58.390 --> 07:04.330
Digamos, queríamos, acabamos de recibir esto desde el backend, el backend solo nos envía un montón de

07:04.330 --> 07:09.940
usuarios que tenían en la base de datos y queremos generar 'nombres de usuario' para eso porque no nos gusta

07:09.940 --> 07:16.540
'username0', 'username1', 'username2', quiere que se muestre el nombre que muestra el 'Santa' con

07:16.690 --> 07:21.540
el número de ID, que es 0, para 'Rudolf' será 1, para 'Mr. Grinch 'será 2.

07:21.610 --> 07:25.160
¿Cómo podemos hacer eso? usando nuestros poderes recién descubiertos.

07:25.570 --> 07:30.040
Bueno, simplemente puedo hacer algo con 'object.entries',

07:31.340 --> 07:40.290
y 'object.entries' tendrá un 'objeto' que yo pueda mapear y esto nos dará un 'valor',

07:40.860 --> 07:44.370
nuevamente, recuerde que esto devolverá las matrices.

07:44.640 --> 07:55.700
Y aquí solo queremos volver a un valor de 1 porque queremos tomar 'Santa', 'Rudolph' y 'Mr. Grinch '.

07:55.740 --> 07:58.690
Entonces ese es el segundo elemento en la matriz.

07:59.130 --> 08:06.710
Y luego queremos agregar a eso, como una cadena 'valor 0' que es el primer elemento.

08:06.750 --> 08:09.540
Entonces 'username0', 'username1', 'username2'.

08:10.080 --> 08:13.330
Y aquí queremos 'reemplazar',

08:13.440 --> 08:21.480
esta es solo una función que podemos usar en cadenas y queremos que reemplace 'nombre de usuario' con una cadena vacía ('').

08:22.710 --> 08:29.520
Entonces, lo que estamos haciendo aquí es crear una nueva cadena con 'Santa', 0

08:29.940 --> 08:30.490
porque no necesitamos el nombre de usuario aquí.

08:30.510 --> 08:38.280
Entonces, aunque tenemos un objeto, podemos recorrerlo como una matriz, y así tenemos nuevos

08:38.280 --> 08:42.430
nombres de usuario, 'Santa0', 'Rudolph1' y 'Mr. Grinch2 '.

08:42.780 --> 08:43.880
¿Cuan genial es eso?

08:44.880 --> 08:50.790
Por lo tanto, estas son realmente muy útiles adiciones al lenguaje, especialmente 'object.values' y

08:50.790 --> 08:57.970
'objects.entries', puedes hacer mucho con él, pero hay una gran característica de ES8 que ha llegado y

08:57.980 --> 09:03.870
todos están emocionados, y se llaman 'Async', ¡Oh, espera!

09:04.100 --> 09:07.670
Ahora es completamente nuevo y todos en la comunidad están realmente entusiasmados con eso.

09:07.670 --> 09:14.710
Sin embargo, para comprender completamente el beneficio y entenderlo, necesitamos un video completo por sí mismo.

09:14.960 --> 09:17.220
Así que te veré en eso.

09:17.530 --> 09:17.790
A-Dios.