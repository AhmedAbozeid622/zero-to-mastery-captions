WEBVTT

00:01.370 --> 00:10.140
Y volvemos a hablar sobre las matrices de nuevo en la primera sección cuando hablamos de matrices que dijimos que

00:10.190 --> 00:11.980
se veían algo como esto

00:15.010 --> 00:18.230
corchetes y podemos poner lo que queramos.

00:18.220 --> 00:20.920
Acabamos de poner unos pocos números aquí.

00:21.100 --> 00:27.340
Entonces estos son arreglos y hablamos sobre el hecho de que podemos hacer cuatro bucles con ellos.

00:27.340 --> 00:32.590
Podemos hacer para cada uno con ellos, que era nuevo en mi secuencia de comandos de cinco.

00:32.720 --> 00:35.390
Y hoy vamos a aprender algunos más.

00:35.540 --> 00:41.990
Pero antes de hacerlo, recordemos cómo funciona For For.

00:42.030 --> 00:47.200
Digamos que queremos multiplicar cada número en la matriz.

00:47.430 --> 01:01.860
Podemos recordar a Konst que ahora solo podemos usar nuestra nueva sintaxis E6 y podemos decir que la nueva matriz es igual

01:03.240 --> 01:08.170
punto de matriz para cada uno y se lee muy bien para cada matriz.

01:09.290 --> 01:15.750
Vamos a usar un número y lo vamos a usar como una función nuevamente.

01:15.980 --> 01:17.690
No más palabra de función.

01:17.690 --> 01:28.290
Todo se ve mejor de esta manera con la flecha de grasa y para cada número en la matriz Números de Whalsay veces

01:29.040 --> 01:34.020
dos así que multiplica todo por dos.

01:34.020 --> 01:38.810
Ahora veremos qué nos da el registro de la consola.

01:39.830 --> 01:41.160
Eres re

01:46.950 --> 01:47.700
indefinido

01:47.860 --> 01:50.250
Bueno, porque no es así.

01:50.260 --> 01:58.510
Por cada trabajo correcto para cada uno, solo digo que voy a moverme sobre estos elementos y voy a multiplicar

01:58.510 --> 02:02.280
un número por dos, pero no estamos cambiando el conjunto.

02:02.380 --> 02:08.500
Si miramos la matriz ahora mismo, sigue siendo lo mismo 1 a 10 16.

02:08.700 --> 02:14.190
Estamos multiplicando aleatoriamente los números por dos, pero en realidad no los estamos almacenando en ninguna parte.

02:14.830 --> 02:24.940
Si queremos hacer lo que estamos haciendo, entonces tenemos que decir Konst doble y diremos que el doble es una matriz

02:25.600 --> 02:31.760
y luego presionar doble punto.

02:31.820 --> 02:38.410
Así que estamos presionando en la matriz a medida que la recorremos un número de veces.

02:38.480 --> 02:40.210
Ahora veamos qué nos da el doble.

02:43.440 --> 02:48.760
Guardo una actualización y miro eso.

02:48.820 --> 02:52.500
Obtengo dos por 20 32.

02:52.570 --> 02:53.160
DE ACUERDO.

02:53.380 --> 03:05.910
Ahora, de lo que vamos a hablar hoy es de filtro de mapa y reducirlo, diría que estos tres son

03:05.910 --> 03:11.810
probablemente los métodos más importantes que utilizará en su día de hoy.

03:11.880 --> 03:17.340
Javascript son súper útiles, así que realmente comienza a familiarizarse con ellos.

03:17.390 --> 03:25.610
Y cada vez que piensas en hacer algún tipo de ciclo, lo más probable es que quieras hacer uno de estos tres.

03:25.680 --> 03:32.850
Comencemos con el mapa de la forma anterior de duplicar cada cosa en la matriz y crear una nueva matriz

03:32.850 --> 03:52.430
bien con el mapa que podemos hacer costo mapa desfile matriz punto número de mapa es el número de veces y la forma en que funciona el mapa

03:52.490 --> 04:01.720
es que siempre debes devolver algo porque lo que es diferente para mabbe es para cada uno

04:01.930 --> 04:10.690
bien para cada ciclo justo sobre algo y simplemente hace lo que dice la función frente a la

04:10.690 --> 04:11.530
formación.

04:11.680 --> 04:19.330
Podemos hacer lo que no podemos con cada uno de los cuales es un ciclo sobre cada elemento de cada número y devolver un nuevo

04:19.330 --> 04:21.100
formación.

04:21.110 --> 04:22.310
Déjame mostrarte lo que quiero decir.

04:22.790 --> 04:25.270
Cada vez que la matriz se repite.

04:25.310 --> 04:29.110
Entonces, digamos que aquí el primero es el número uno.

04:29.310 --> 04:36.340
Devolvemos 1 por 2 que se coloca en el conjunto de mapas, que ahora es 2.

04:36.450 --> 04:39.370
Y luego vamos al siguiente número a 2 veces 2.

04:39.390 --> 04:46.290
Ahora se agrega a la matriz 10 veces 2 se agrega a la matriz y 16 veces 2 se agrega a la matriz.

04:46.300 --> 04:47.740
Entonces es por eso que lo devolvemos.

04:47.860 --> 04:53.980
Y al hacer esto si Konsole dog log map array

04:57.520 --> 05:00.460
y refresquemos aquí.

05:00.850 --> 05:07.890
Y obtuve un corchete de cierre aquí, intentémoslo de nuevo.

05:08.010 --> 05:09.900
Ves esa matriz de mapas.

05:09.900 --> 05:23.650
Entonces, la primera línea es doble y la segunda es knackery, las nombrará solo para que sepamos la diferencia.

05:23.670 --> 05:26.760
Y volvamos a hacerlo todo de nuevo.

05:27.260 --> 05:31.340
Por cierto, te preguntas por qué me estoy refrescando en lugar de simplemente copiar y pegar aquí.

05:31.350 --> 05:38.570
Bueno, eso es porque, debido a que estamos usando Konst, está diciendo que array ya ha sido declarado, así que tengo

05:38.580 --> 05:39.960
refrescar.

05:40.290 --> 05:41.520
Pero ahí tienes.

05:41.520 --> 05:47.830
Para cada mapa que mira estos dos, parece que ambos están haciendo lo mismo.

05:48.720 --> 05:54.570
Pero hay una diferencia crítica entre el mapa y para cada uno y estoy aquí para decirte que cada vez que

05:54.570 --> 06:00.160
desea hacer un bucle simple y tomar alguna acción en algo así como una matriz.

06:00.450 --> 06:06.980
Si desea utilizar el mapa de cada uno para cada operación, puede que no haga nada.

06:07.020 --> 06:15.310
Puede dejar esto completamente en blanco o hacer el registro de Konsole porque todo lo que le interesa a cada uno es iterar

06:15.350 --> 06:24.550
que va uno por uno para iterar sobre una colección de elementos como 1 a 10 y 16 y aplicar lo que sea

06:24.550 --> 06:27.440
operación que le decimos en cada elemento.

06:27.460 --> 06:31.800
Ahora el mapa por otro lado tiene una restricción en la operación.

06:31.930 --> 06:35.230
Espera que la operación devuelva un elemento.

06:35.230 --> 06:42.580
Entonces, con el mapa para cada uno, puede tener varias líneas de código haciendo todas estas cosas locas frente al mapa

06:42.970 --> 06:43.740
con mapa

06:43.750 --> 06:46.900
Siempre tienes un elemento de retorno.

06:46.930 --> 06:54.280
El mapa vuelve a iterar a través de una colección de elementos que aplican la operación en cada elemento

06:54.730 --> 07:00.510
y finalmente almacenando el resultado de cada invocación de la operación.

07:00.520 --> 07:06.970
Eso es esto en otra colección que es matriz de mapas.

07:07.010 --> 07:12.920
En otras palabras, el mapa transforma la matriz.

07:12.920 --> 07:22.490
Crea una nueva matriz que es una matriz de mapas en comparación con cada una de las cuales solo hace un montón de acciones basadas

07:22.490 --> 07:27.620
en la matriz y cuáles son esas acciones no son realmente tan limitadas.

07:27.620 --> 07:34.230
Si queremos devolver una nueva matriz, tenemos que crear nuestra propia matriz y luego presionar.

07:34.370 --> 07:39.260
Y es posible que note algo de lo que hablamos en la última sección cuando hablamos sobre avances

07:39.260 --> 07:49.990
funciones y esa es la idea de los efectos secundarios si volvemos con Foreach podemos hacer un montón de

07:49.990 --> 07:52.010
efectos secundarios dentro de la función.

07:52.210 --> 08:00.650
Puede usar la ley Konsole para crear una nueva matriz que pueda enviar a esa matriz que puede devolver indefinida.

08:00.650 --> 08:07.960
Viste que cuando hicimos el primero para cada uno o incluso ahora, en realidad no estamos devolviendo nada.

08:08.010 --> 08:12.120
Así que estamos volviendo indefinido versus con un mapa.

08:12.220 --> 08:15.700
Todos estos efectos secundarios teóricamente desaparecieron.

08:15.840 --> 08:19.190
Y porque con un mapa tenemos que regresar.

08:19.240 --> 08:22.800
Déjame mostrarte si no regreso aquí, veamos qué pasa.

08:30.910 --> 08:34.280
Obtengo el mapa undefined undefined undefined undefined.

08:34.540 --> 08:37.660
De inmediato, sabemos que estamos haciendo algo mal que tenemos que regresar.

08:38.140 --> 08:47.230
Y como mencionamos en la sección anterior, ahora hemos creado una función pura donde no hay duda

08:47.230 --> 08:48.790
sobre si regresamos o no.

08:49.660 --> 08:59.130
Tenemos entradas una función sin efectos secundarios que simplemente devuelve un valor.

08:59.180 --> 09:01.350
De nuevo, un concepto muy importante.

09:01.370 --> 09:05.990
Queremos que las cosas sigan actuando de la manera esperada.

09:06.080 --> 09:13.310
No queremos tener un código que viva en un sitio web digamos por cuatro años y alguien

09:13.310 --> 09:21.350
viene que no lo conoce íntimamente y de repente tienen todos estos efectos secundarios que suceden

09:21.500 --> 09:23.950
ellos no saben.

09:24.080 --> 09:31.540
De nuevo, queremos escribir Foxtons simples puros y eso es lo que el mapa nos permite hacer.

09:31.650 --> 09:34.980
Y la otra cosa importante es que no estamos cambiando la matriz.

09:34.980 --> 09:40.830
Esta matriz se mantiene exactamente igual con las matemáticas porque siempre estamos haciendo una nueva copia de la matriz que estamos

09:40.830 --> 09:44.420
nunca mutando los datos.

09:44.490 --> 09:44.910
Todo bien.

09:44.910 --> 09:46.090
Entonces ese era el mapa.

09:46.200 --> 09:48.100
Vamos a traer el regreso aquí.

09:48.420 --> 09:51.940
Y volvamos al cónsul.

09:51.960 --> 09:59.160
También quiero mostrarte que cuando solo tienes un solo parámetro con una función de aire, en realidad puedes

09:59.640 --> 10:04.400
evitar los corchetes.

10:04.560 --> 10:11.410
Y de nuevo porque volvemos y solo estamos devolviendo una sola línea aquí podemos hacer taquigrafía

10:11.410 --> 10:12.970
es solo esto

10:16.290 --> 10:19.020
housecleaner hace outlook.

10:19.250 --> 10:24.050
Volvamos a probar eso.

10:24.060 --> 10:24.490
Ahí tienes.

10:24.490 --> 10:26.070
Todo se ve bien.

10:26.070 --> 10:35.280
Mira la diferencia entre el mapa y el para cada uno, el próximo que voy a mostrarte es el filtro.

10:35.600 --> 10:39.460
Ahora con filtro podemos decir array de filtros.

10:40.310 --> 10:51.230
Y como su nombre sugiere que podemos filtrar nuestra matriz con una condición en nuestro caso, podemos decir que Blits devuelve

10:51.350 --> 11:00.010
todos los elementos en la matriz que están arriba, así que podemos decir que el número es mayor que 5.

11:00.310 --> 11:11.360
Y al igual que con el mapa, esto devuelve una nueva matriz, así que tenemos que devolver algo porque la matriz de filtros va

11:11.360 --> 11:12.890
para contener esa información.

11:12.890 --> 11:23.620
Así que la forma de leer esto es filtrar este Saray que está aquí, ya que vas uno por uno, por lo que un número

11:24.190 --> 11:31.150
será el primero un retorno es uno mayor que 5.

11:31.190 --> 11:34.100
En este caso, va a decir que es falso.

11:34.310 --> 11:38.290
Así que no vamos a agregar esto en la matriz de filtros.

11:39.090 --> 11:43.350
Luego itera a dos es demasiado mayor que cinco.

11:43.350 --> 11:44.580
No, eso es falso

11:44.580 --> 11:50.940
Por lo tanto, no va a entrar en la matriz de filtros es 10 mayor que 5.

11:51.390 --> 11:52.550
Si, es bueno.

11:52.560 --> 11:57.520
Diez va a entrar en la matriz de filtros y es 16 mayor que 5.

11:57.870 --> 11:58.350
Sí.

11:58.500 --> 12:03.100
Entonces 16 va a entrar en la matriz.

12:03.300 --> 12:08.070
Y de nuevo porque es solo una línea que podemos hacer aquí.

12:11.410 --> 12:19.450
Y ahora si cancelamos log y diremos filter filter array.

12:22.590 --> 12:39.920
Y refrescamos, obtenemos el filtro que contiene 10 y 16 si lo hacemos igual a 5 mientras que en ese caso obtenemos un

12:39.920 --> 12:43.850
matriz vacía porque nada es igual a cinco.

12:43.910 --> 12:46.000
Entonces puedes poner cualquier condición que quieras aquí.

12:46.010 --> 12:51.480
Si él tenía fuerza y ​​quieres ver si contiene una palabra hola, también puedes hacer eso.

12:51.560 --> 12:56.210
Todo lo que tiene que hacer es devolver verdadero o falso si devuelve falso.

12:56.210 --> 13:02.050
No entrará en la matriz si devuelve verdadero mientras entra en la matriz.

13:02.050 --> 13:04.210
Muy bueno muy útil.

13:04.500 --> 13:05.430
Qué más tenemos.

13:05.440 --> 13:11.550
Bueno, el último que quiero mostrarte es reducir y esto es realmente muy poderoso, puedes hacer mucho con

13:11.550 --> 13:12.250
Reducir.

13:12.330 --> 13:16.910
En realidad, puedes filtrar y mapear con reducir.

13:17.040 --> 13:19.110
Entonces es un método realmente muy poderoso.

13:19.410 --> 13:22.470
Pero te mostraré una manera fácil de comenzar.

13:23.910 --> 13:27.810
Bueno, vamos a hacer es que vamos a decir Konst

13:30.590 --> 13:43.270
reducir la matriz que él llama y de nuevo esto devuelve una nueva matriz que ahorramos reducir y reducir toma algo llamado

13:43.300 --> 13:50.080
un acumulador y el número.

13:50.120 --> 13:52.490
Ahora, obviamente, este puede ser cualquier nombre.

13:52.510 --> 13:58.190
A veces verás un CC para un acumulador. Lo dejaremos así por ahora para que puedas ver

13:58.190 --> 13:59.180
saber qué número es

13:59.180 --> 14:05.860
El número es 1 a 10 y 16, pero ¿qué es el acumulador?

14:06.230 --> 14:15.140
El acumulador de pozo es algo donde podemos almacenar la información que ocurre en el cuerpo de la función.

14:15.140 --> 14:25.180
Permítanme explicar el acumulador más el número y de nuevo porque reducimos estamos devolviendo una matriz.

14:25.260 --> 14:27.930
Tenemos que devolver un valor.

14:28.210 --> 14:36.030
Y lo que estamos diciendo aquí es que cada vez que iteras Así que digamos que la primera gira.

14:36.060 --> 14:42.220
Tienes el acumulador número uno más el número uno es igual.

14:42.310 --> 14:49.050
Digamos que si el acumulador es cero, todos los iguales 1 ahora cero más uno es igual a 1.

14:49.270 --> 14:57.160
Cuando aparece el 2, hacemos 1 más 2 porque el acumulador recuerda lo que había antes y luego

14:57.160 --> 15:03.260
Llega el 10 y vas tres más 10.

15:03.270 --> 15:05.540
Ahora que es el acumulador

15:05.540 --> 15:10.800
No lo hemos definido en ningún lugar en redos después de la función.

15:11.010 --> 15:14.220
Tienes un segundo parámetro.

15:14.340 --> 15:20.460
Y aquí podemos especificar qué queremos que nuestro acumulador muestre con el valor predeterminado.

15:20.910 --> 15:23.740
En nuestro caso digamos cero.

15:23.740 --> 15:28.190
Ahora si lo hago Konsole diálogo reducir

15:31.000 --> 15:32.890
y reducir

15:33.220 --> 15:34.370
Veamos qué pasa.

15:39.150 --> 15:48.940
Obtenemos reducir 29 porque 10 más 16 es 26 más tres es 29.

15:48.980 --> 16:05.560
Si cambié esto a 5 y lo copio e intento esto de nuevo, obtenemos 34 porque el número inicial es ahora cinco.

16:05.600 --> 16:06.570
Muy genial.

16:06.610 --> 16:07.550
Eso es todo.

16:07.660 --> 16:13.820
Quiero que recuerdes estos tres métodos porque los vas a usar mucho en tu carrera.

16:13.810 --> 16:15.490
Son muy muy útiles.

16:15.550 --> 16:24.290
Son puros, lo que significa que cada vez que hacemos una operación, cualquiera que sea la información que obtenemos siempre devuelve una

16:24.290 --> 16:24.940
valor.

16:24.980 --> 16:28.610
Y no hay efectos secundarios

16:28.690 --> 16:33.270
Y como puede ver, son muy fáciles y simples de leer.

16:33.400 --> 16:36.830
Así que acostúmbrate a ellos y buena suerte con los ejercicios

16:36.880 --> 16:40.130
después de este video Te veré en el próximo adiós.
