WEBVTT

00:00.570 --> 00:09.900
Bienvenido nuevamente en el video anterior creamos una tabla de inicio de sesión ahora que tenemos estas dos tablas juntas.

00:09.930 --> 00:12.900
Quiero mostrarte el verdadero poder de las bases de datos relacionales.

00:15.440 --> 00:22.200
Volviendo a nuestro dibujo, la parte más importante de las bases de datos relacionales es esta idea de esquemas, de

00:22.200 --> 00:29.520
tener tablas que simplemente les preocupa almacenar información específica para ellos, como usuarios, tweets

00:29.580 --> 00:38.030
y seguirlos y conectarlos a través de una clave principal y una clave externa. Voy a mostrarte cómo

00:38.030 --> 00:39.250
Para hacer eso.

00:39.680 --> 00:41.170
Bueno, ya lo hemos hecho.

00:41.180 --> 00:46.940
Pero, ¿cómo tomamos la información de aquí? Si volvemos a nuestra mesa

00:47.080 --> 00:49.470
recordamos que ejecutamos nuestra consulta,

00:54.920 --> 01:04.070
creamos la tabla Crear inicio de sesión aquí y creamos una variable de nombre que cuando planeamos esto era

01:04.070 --> 01:10.680
va a coincidir con lo que sea que tenga la tabla de usuarios y podemos usar algo llamado JOINs.

01:10.720 --> 01:18.510
ahora con nuestras consultas Y esta es una palabra nueva en SQL y probablemente una de las más poderosas, porque

01:18.510 --> 01:24.890
no necesariamente quiere tener una tabla masiva con cientos de columnas, cientos de filas.

01:24.900 --> 01:31.350
Las bases de datos no están diseñadas para tener solo, como una hoja de Excel toneladas de filas y columnas y tienen todo

01:31.350 --> 01:34.740
esa información en un solo lugar porque no es eficiente.

01:34.770 --> 01:36.110
Será mucho más lento,

01:36.160 --> 01:37.670
será muy, muy difícil de manejar.

01:37.680 --> 01:41.960
Y cuanto más grande y más grande crezca su empresa, va a ser realmente, muy difícil.

01:42.000 --> 01:48.150
Una buena forma de diseñar una base de datos es tener estas pequeñas tablas pequeñas que solo se preocupan, al igual que

01:48.150 --> 01:53.500
separación de preocupaciones, preocupado con su información mínima necesaria.

01:53.550 --> 02:00.180
Y si se necesita algo más, podemos unir las tablas para obtener información.

02:00.180 --> 02:01.270
Déjame mostrarte lo que quiero decir.

02:02.850 --> 02:09.830
Tenemos aquí nuestra base de datos de prueba y hagámoslo para ver.

02:09.840 --> 02:12.230
De acuerdo, tenemos tres archivos aquí.

02:12.420 --> 02:16.140
Tenemos el nombre de usuario y los usuarios que creamos.

02:16.140 --> 02:20.130
Pero, ¿cuál es la secuencia de identificación de inicio de sesión?

02:20.160 --> 02:26.480
Recuerda cómo creamos una clave principal. La forma en que funcionan las bases de datos relacionales es cuando se crea una primaria

02:26.480 --> 02:35.320
clave crea otro archivo que contiene esta clave principal. Y puedes ver que el tipo es secuencia.

02:36.570 --> 02:44.280
Ahora bien, este es un archivo que muy probablemente no tendremos acceso pero internamente Postgres se asegurará porque

02:44.280 --> 02:50.330
establecemos esta clave primaria va a ser muy, muy rápido para tomar datos de la tabla de inicio de sesión cuando

02:50.330 --> 02:50.890
solicitarlo.

02:51.100 --> 02:58.890
Pero digamos que quería obtener información del inicio de sesión y de los usuarios. Tal vez quiero obtener la información de Sally

02:59.640 --> 03:08.320
pero necesito su cumpleaños, puntuación, edad y su secreto. Al usar JOINs podemos hacer esto.

03:09.110 --> 03:11.850
Puedo decir estrella SELECT,

03:11.990 --> 03:15.370
Entonces todo desde los usuarios.

03:15.690 --> 03:20.900
Y ahora, si lo hago, puedo decir otro nombre de tabla al que quiero unirme con los usuarios.

03:20.900 --> 03:27.580
En nuestro caso, inicie sesión y tenemos que decir ¿A qué vamos a unirnos o no?

03:27.590 --> 03:33.370
¿Cómo va a saber qué coincide con el inicio de sesión?

03:33.470 --> 03:41.400
Porque si vuelvo aquí, ¿cómo va a saber la base de datos que quiero hacer coincidir la primera línea con

03:41.400 --> 03:41.760
Andrei,

03:41.760 --> 03:48.690
la segunda línea con Sally, una tercera línea con John. La palabra clave ON nos permite asegurarnos de que coincidamos

03:48.690 --> 03:49.280
sobre algo.

03:49.320 --> 03:56.360
En nuestro caso, es el nombre de su clave principal aquí y la clave externa aquí.

03:56.470 --> 03:59.730
Así que hagámoslo en usuarios ON

03:59.920 --> 04:07.820
.name es igual a login.name

04:10.500 --> 04:11.290
punto y coma.

04:11.340 --> 04:12.080
Vamos a hacer eso.

04:13.230 --> 04:14.080
Y mira eso.

04:14.280 --> 04:21.810
Tenemos nombre, edad, cumpleaños, puntaje, pero también ID, secreto, nombre completo.

04:21.980 --> 04:29.750
Acabamos de unir estos valores y todos coinciden porque hemos hecho login.name y users.name, y

04:29.750 --> 04:30.810
con JOINs

04:31.010 --> 04:40.170
ahora viene un gran poder, podemos tener pequeñas tablas pequeñas basadas en lo que realmente necesitamos y en cualquier momento algo

04:40.170 --> 04:46.710
Es necesario especificar solo unimos las tablas y podemos hacer varias tablas, múltiples JOINs para seleccionar

04:46.710 --> 04:48.720
la información que necesitamos

04:48.720 --> 04:54.030
Está bien, creo que hemos hecho un muy buen trabajo entendiendo SQL y el poder de las relaciones

04:54.030 --> 04:54.940
bases de datos.

04:56.890 --> 04:57.890
Te veré en el próximo.

04:57.940 --> 04:59.980
Y es un buen trabajo llegar hasta aquí, adiós.
