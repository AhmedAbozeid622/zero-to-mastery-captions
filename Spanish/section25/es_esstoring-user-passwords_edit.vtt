WEBVTT

00:03.080 --> 00:06.920
Dar una buena acogida. La seguridad es una cosa muy muy importante en la web.

00:07.280 --> 00:14.360
Y como desarrolladores tenemos la responsabilidad de asegurarnos de que cualquier información que obtengamos del usuario la

00:14.360 --> 00:17.160
manejemos con cuidado de manera segura.

00:18.770 --> 00:27.160
Y hasta ahora te he mostrado cómo hacer una configuración de inicio de sesión simple pero realmente no te he mostrado una

00:27.160 --> 00:28.820
forma segura de hacerlo.

00:30.190 --> 00:32.810
Y en este video voy a hablar sobre bcrypt-nodejs.

00:32.890 --> 00:39.560
Y bcrypt es una biblioteca que es muy, muy poderosa.

00:40.660 --> 00:45.500
Nos permite crear un inicio de sesión muy seguro.

00:45.500 --> 00:46.650
¿Qué significa eso?

00:46.970 --> 00:49.000
Deja que te enseñe.

00:49.120 --> 00:58.160
Hasta ahora teníamos 'contraseña' solo en texto plano. En la vida real, nunca almacenamos

00:58.250 --> 01:06.800
contraseñas como textos simples como este, como una cadena en nuestra base de datos.

01:08.530 --> 01:16.300
Así es exactamente como las empresas son pirateadas y las contraseñas se liberan de los usuarios cuando lo almacenan así.

01:16.300 --> 01:24.040
Queremos almacenar contraseñas en algo llamado hashes y llegaré a lo que es en un segundo, pero quiero

01:24.040 --> 01:31.540
cambiar la base de datos para mostrarle una apariencia más realista de cómo se almacenarán las cosas.

01:31.540 --> 01:35.680
Puede ver que en nuestra base de datos

01:39.730 --> 01:46.910
podemos tener algo como 'inicio de sesión:' y este inicio de sesión contendrá una

01:50.590 --> 01:51.760
matriz

01:51.880 --> 02:05.320
de objetos que tiene un 'id:' digamos '987' con el hash que estará vacío de vez en cuando. y este correo electrónico solo hará referencia a

02:05.590 --> 02:08.150
john @ gmail. com.

02:08.230 --> 02:12.480
Esto es algo en lo que profundizaremos más cuando hablemos de bases de datos.

02:12.680 --> 02:18.230
Pero quiero mostrarte, quiero demostrarte este punto.

02:18.380 --> 02:27.920
Para que podamos manejar la información confidencial, es decir, si John, por ejemplo, ingresa a nuestro sitio y quiere hacer un inicio

02:27.920 --> 02:40.010
de sesión, nos dará su correo electrónico más su contraseña, que son 'cookies'. Ahora, nos está confiando esta

02:40.010 --> 02:41.490
información.

02:41.690 --> 02:47.360
Y lo primero que queremos hacer es, bueno, definitivamente no lo agregaremos como una cadena de

02:47.720 --> 02:52.020
consulta en una solicitud GET, lo agregaremos a una solicitud POST.

02:52.040 --> 02:55.530
Entonces está en el cuerpo de la solicitud.

02:55.940 --> 02:59.220
También queríamos enviarlo a través de HTTPS.

02:59.420 --> 03:01.750
Eso es algo que requiere un certificado.

03:02.180 --> 03:08.690
Y no vamos a entrar en eso, pero definitivamente queremos incluirlo a través de una solicitud HTTPS

03:08.690 --> 03:12.110
para que esté encriptado. Cuando envía 'cookies', se

03:12.260 --> 03:20.510
va a enredar y nadie en el medio puede ver esto o podrán verlo, pero no entenderán

03:20.510 --> 03:22.210
lo que significa.

03:22.520 --> 03:30.750
Y solo el servidor una vez que recibe esta contraseña puede comprender que esto significa 'cookies'.

03:32.100 --> 03:34.110
Muy bien, entonces uno es HTTPS.

03:34.150 --> 03:38.010
La segunda cosa es, ¿cómo almacenamos esa contraseña?

03:39.230 --> 03:47.430
Bueno, lo almacenamos en un hash, y bcrypt, el paquete del que acabo de hablar, nos permite hacer esto.

03:47.480 --> 03:52.230
Permítanme descargar este paquete y mostrarles cómo funciona.

03:58.680 --> 03:59.250
Ahí tienes.

03:59.430 --> 04:07.300
Ahora con el bcrypt instalado, puede ver aquí que tiene algunas cosas que podemos usar

04:07.300 --> 04:14.770
y voy a copiar y pegar esto y mover algunas de estas cosas.

04:14.770 --> 04:16.440
De hecho, voy a poner esto en la parte inferior.

04:20.490 --> 04:25.030
bcrypt nos ofrece una forma de cifrar una contraseña y

04:27.940 --> 04:29.650
una forma de

04:32.210 --> 04:35.970
comparar contraseñas o hashes. Pero ¿qué significa eso?

04:36.070 --> 04:40.850
Vamos uno por uno.

04:41.030 --> 04:43.880
Si tomo esta función y en nuestro '/ inicio de

04:46.770 --> 04:55.530
sesión' o lo siento, supongo que en nuestro '/ registro' porque es cuando damos nuestra contraseña. En nuestro '/ registro' cuando

04:57.620 --> 05:01.410
ejecutamos 'bcrypt. hash 'y en lugar de'

05:01.420 --> 05:04.450
tocino ', esto es lo que pasamos como

05:04.660 --> 05:11.640
contraseña del usuario; si pasamos la contraseña aquí, tenemos algunos parámetros que nos dan y estas son opciones

05:11.640 --> 05:13.240
que podemos ingresar.

05:13.260 --> 05:15.200
Por ahora lo dejaremos como está.

05:18.840 --> 05:28.050
Si yo 'consola. registre 'el hash que recibimos en esta función, por lo que bcrypt

05:28.410 --> 05:33.780
va a cambiar la contraseña y luego devolver este hash, solo vamos a decir' hash '.

05:33.840 --> 05:35.550
Muy bien, veamos qué sucede aquí.

05:35.580 --> 05:37.980
Me voy a guardar. Luego

05:37.980 --> 05:44.000
ejecutaré 'npm start' volviendo a nuestro cartero.

05:44.160 --> 05:48.830
Si hago '/ me registro' con Ann, voy a hacer clic en Enviar y

05:51.940 --> 05:56.070
aparece 'bcrypt no está definido' porque no lo he incluido aquí.

05:56.080 --> 06:02.090
Hagamos eso, hagamos 'const bcrypt = require ('

06:05.360 --> 06:08.750
bcrypt-nodejs ')': guardemos

06:08.740 --> 06:12.730
eso e intentemos de nuevo.

06:12.840 --> 06:13.870
Voy a hacer clic en enviar.

06:15.900 --> 06:28.030
Volvemos a la consola, ¿lo ves? Acabamos de obtener un hash y eso es lo que hace una función hash. Una función hash Una función hash toma

06:32.820 --> 06:44.030
una cadena y la mezcla de una manera que no voy a ser capaz de darme cuenta de que esto

06:44.030 --> 06:50.650
[el hash] representa la contraseña 'cookies' y las funciones hash son unidireccionales.

06:50.970 --> 06:57.140
Es decir, puede ingresar 'cookies' y obtendrá esto, pero nunca podrá volver.

06:57.620 --> 07:03.930
Y la otra cualidad de las funciones hash es que si ahora vuelvo a hacer esto con

07:03.930 --> 07:05.870
contraseña, supongo que la contraseña

07:05.880 --> 07:14.460
de Ann era 'manzanas'. Si hago clic en enviar, vuelvo y veo que el hash la primera y la segunda vez son diferente.

07:14.460 --> 07:19.920
Y aunque las funciones hash en realidad siempre devuelven lo mismo por el mismo valor, bcrypt es

07:19.920 --> 07:25.800
un poco más seguro que eso y agrega un poco de otra magia para asegurarse de que sea imposible

07:25.950 --> 07:27.940
descubrir cuál es la contraseña.

07:27.960 --> 07:37.270
Pero ahora podemos almacenar este hash, este valor desordenado, en nuestra base de datos aquí para el inicio de sesión y en

07:37.320 --> 07:43.560
cualquier momento que iniciemos sesión y queramos verificar si las contraseñas del usuario coinciden.

07:43.890 --> 07:47.800
Bueno, ahora, déjenme eliminar esto, lo tenemos. Vayamos a

07:47.940 --> 07:48.600
'/

07:52.130 --> 07:53.940
signin' y en

07:57.130 --> 08:05.090
la parte superior podemos comparar los hash para obtener el hash que teníamos antes, usemos este o usemos

08:05.390 --> 08:07.230
el último que obtuvimos.

08:08.160 --> 08:09.330
Reemplazaré esto.

08:09.330 --> 08:18.450
Se verá bastante feo, pero voy a reemplazar este hash con esta larga cadena y voy a

08:18.450 --> 08:19.230
comparar

08:21.650 --> 08:26.170
'manzanas' porque esa es la contraseña de Ann.

08:26.240 --> 08:31.480
Si comparo 'manzanas' con este hash, consuelemos. Iniciar sesión.

08:32.680 --> 08:34.480
'primera aproximación'

08:38.230 --> 08:42.730
tendremos la respuesta nuevamente, eso es lo que

08:42.860 --> 08:46.970
recibimos después de que bcrypt hace esto.

08:47.140 --> 08:52.380
Y la segunda vez también haremos un 'registro de

08:57.560 --> 09:04.480
consola' con la contraseña incorrecta, que es 'vegetales' y esta será la 'segunda suposición'.

09:04.510 --> 09:06.640
Vamos a hacer un inicio de sesión.

09:06.640 --> 09:11.990
Realmente no importa lo que sea porque no estamos realmente preocupados por una respuesta.

09:13.330 --> 09:21.180
Y recibo un error que dice que el hash no está definido porque no he actualizado este hash a lo que acabamos

09:21.180 --> 09:21.930
de copiar.

09:21.930 --> 09:23.230
Entonces déjame hacer eso.

09:26.480 --> 09:27.080
Ahí tienes.

09:28.860 --> 09:30.980
Déjame volver, haz clic en Enviar.

09:32.320 --> 09:34.110
Si miro hacia atrás

09:34.120 --> 09:36.160
aquí obtengo "la primera suposición

09:36.370 --> 09:39.920
es cierta", es decir, "manzanas" es igual a este hash

09:39.940 --> 09:45.310
que nos dieron pero "verduras" no es igual al hash que nos dieron allí.

09:48.400 --> 09:53.830
Déjame cerrar eso un poco. Y bcrypt es realmente muy poderoso.

09:53.840 --> 09:59.780
Vamos a usar esto cuando realmente implementemos una base de datos para nuestro registro. Usando bcrypt, que es un paquete de hashing

09:59.780 --> 10:07.730
probado y probado, podemos almacenar de forma segura la información de los usuarios, las contraseñas de los usuarios en nuestra base de

10:07.730 --> 10:14.840
datos y nadie, incluso si ellos, incluso si los hackers acceden a nuestra base de datos, tendrán dificultades para

10:14.840 --> 10:16.500
conseguir al usuario contraseñas

10:17.300 --> 10:22.370
Es posible que puedan obtener sus direcciones de correo electrónico, pero nunca nuestras contraseñas, y

10:22.370 --> 10:25.770
las implementaremos en nuestra base de datos utilizando bcrypt.

10:25.830 --> 10:29.940
Pero realmente quiero enfatizar este punto porque la seguridad es realmente importante.

10:30.930 --> 10:37.570
Siempre envíe cualquier información confidencial desde el front-end al back-end usando HTTPS en un cuerpo POST y

10:38.550 --> 10:48.960
si obtiene algo como una contraseña, la forma en que la almacena en la base de datos está usando algo como bcrypt para generar un hash,

10:48.960 --> 10:51.820
y siempre un usuario inicia sesión,

10:52.140 --> 11:00.220
verifique ese hash con lo que haya ingresado el usuario. En la siguiente parte, les dejo un artículo de seguridad que

11:00.250 --> 11:01.210
escribí que

11:01.330 --> 11:08.830
puede ser un poco avanzado, pero creo que cubre la mejor manera para que almacenen las contraseñas de los

11:08.830 --> 11:14.710
usuarios, algo que se pasa por alto con bastante frecuencia pero que de nuevo es

11:14.710 --> 11:18.100
muy importante si quiero ser ese desarrollador principal.

11:18.180 --> 11:19.770
Ya veré en la próxima. Adiós
