WEBVTT

00:00.540 --> 00:05.330
Es hora de aprender otro tema emocionante y vamos a entrar en los conceptos básicos del backend.

00:05.610 --> 00:10.650
Pero quería mostrarte lo que hemos cubierto hasta ahora en el Front-End.

00:10.840 --> 00:17.950
Comenzamos con este diagrama de preguntar "Quién es google". com? "y pasando por el ISP pidiendo

00:17.950 --> 00:20.810
al servidor de nombres de dominio la dirección IP.

00:20.950 --> 00:29.460
Luego le pedimos a la dirección IP que busque los servidores de Google y luego los servidores de Google nos dan nuestro archivo HTML, CSS

00:29.470 --> 00:34.400
y JavaScript, que podemos obtener a través de HTML. Y luego las etiquetas de enlace

00:34.420 --> 00:43.040
y las etiquetas de script para obtener el CSS y Javascript . El navegador lee el archivo por

00:43.040 --> 00:51.860
nosotros, el motor HTML, CSS y V8 o el motor JavaScript del navegador lo

00:51.920 --> 00:58.510
usa para leer el JavaScript y manipulamos el DOM usando JavaScript.

00:58.520 --> 01:05.300
También aprendimos que la ubicación del servidor es importante, cuántos viajes hacemos, cuántas solicitudes HTTP hacemos

01:05.300 --> 01:06.590
es importante.

01:06.590 --> 01:08.560
El tamaño de los archivos es importante.

01:08.810 --> 01:16.660
Y aprendimos algunas de esas soluciones, como las redes de entrega de contenido, que tienen script en solo un paquete. js y

01:16.820 --> 01:21.230
también minimizando nuestros archivos.

01:23.740 --> 01:33.040
Y luego también aprendimos sobre esta nueva tecnología llamada AJAX, donde podemos buscar usuarios, hablar con el servidor mientras el

01:33.040 --> 01:40.750
usuario todavía está navegando por el sitio web y recibir una respuesta JSON para actualizar el sitio

01:40.750 --> 01:43.050
web en tiempo real.

01:43.390 --> 01:49.730
Y esta imagen con la que comenzamos se ve mucho más clara que en el primer video, ¿no?

01:49.780 --> 01:53.210
Entendemos lo que hace un desarrollador front-end.

01:53.230 --> 02:00.760
Vemos el poder de React y también sabemos que estas flechas simplemente significan solicitudes HTTP; un lenguaje

02:01.090 --> 02:08.310
que tanto Front-End como Back-End pueden hablar y usando AJAX y JSON podemos hacerlo dinámicamente.

02:09.570 --> 02:15.930
Ahora el Back-End y el rol de un desarrollador Back-End. Ellos son los encargados de

02:15.930 --> 02:24.330
trabajar con servidores y bases de datos. Y un servidor es responsable de lo que obtenga en el navegador.

02:24.650 --> 02:32.140
Puedo pedirle al navegador cualquier cosa; como "Ir a google. com ". Pero al final del día, el servidor web

02:32.170 --> 02:38.890
puede darme lo que quiera. Si solo me va a enviar a Twitter. com en lugar de google. com, bueno,

02:38.920 --> 02:42.500
eso depende del servidor. Cualquier cosa que necesitemos, solo hacemos la

02:42.520 --> 02:47.740
solicitud y esperamos que el servidor nos dé lo que pedimos. Y si recuerdas,

02:47.980 --> 02:57.740
un servidor es solo una computadora; una computadora que está en algún lugar del mundo escuchando

02:57.880 --> 03:02.770
esta conexión HTTP y preguntando si tenemos archivos.

03:02.830 --> 03:11.800
El más básico de los servidores y es posible que haya usado esto antes, tal vez usando Hostgator, un sitio de alojamiento o

03:11.860 --> 03:19.120
incluso sitios de WordPress y poniéndolos en Hostgator. Utiliza algo llamado 'LAMP STACK'.

03:19.120 --> 03:28.330
Esto fue lo que fue útil para los sitios web más básicos, es decir, (si) solo desea un sitio web de información simple Tal

03:28.330 --> 03:28.920
vez

03:29.050 --> 03:33.460
un sitio web simple de WordPress donde no esté sucediendo nada complejo.

03:33.550 --> 03:41.380
Nada profesional realmente. Lo que usaron fue un servidor Linux que es el sistema operativo.

03:41.740 --> 03:47.280
Al igual que tengo Mac, Linux será el sistema operativo del servidor.

03:47.430 --> 03:48.810
Tenemos el servidor Apache.

03:48.810 --> 03:51.980
Apache es un servidor, de nuevo un

03:52.080 --> 03:58.500
programa escrito por alguien que es realmente muy bueno para aceptar solicitudes y

03:58.500 --> 04:01.070
enviar respuestas de archivos.

04:01.200 --> 04:03.990
Teníamos MySQL que es la base de datos.

04:03.990 --> 04:09.230
Tal vez tenías una sección de comentarios en tu blog y necesitas almacenar

04:09.260 --> 04:16.680
esos datos, esa sería la base de datos. Y luego tuvimos el PHP, que era solo un lenguaje que puedes

04:16.680 --> 04:23.040
usar para tener un poco de lógica en tus servidores. Y el servidor, al igual que su computadora, tenía un sistema de

04:23.040 --> 04:29.140
archivos donde se almacenan todos los archivos de su sitio web. Y Apache acaba de hacer eso.

04:29.330 --> 04:31.790
Solo escuche para ver si alguien ingresó

04:31.790 --> 04:37.650
al sitio web funfun. com en la URL. Si recibió esa solicitud, solo

04:37.770 --> 04:42.270
le dará el índice por defecto. html

04:42.720 --> 04:51.260
Si alguien ingresó al sitio web funfun. com / about, solo te dará sobre. html Fue un servidor

04:51.260 --> 04:53.640
muy simple muy fácil.

04:53.750 --> 05:00.860
Eso es lo que usan la mayoría de los sitios web de alojamiento como Hostgator. Y quizás se pregunte "¿Podría simplemente descargar el servidor Apache y ejecutar

05:00.860 --> 05:05.150
mi propio servidor desde su computadora? "Sí,

05:05.160 --> 05:07.320
absolutamente puedes.

05:07.490 --> 05:11.630
Pero sin tener un software de servidor, bueno,

05:12.080 --> 05:14.210
nuestra computadora es inalcanzable.

05:14.360 --> 05:21.350
Nadie a través de Internet puede acceder a nuestra computadora porque nuestra computadora no es un servidor, (no) no tiene un código que le

05:21.350 --> 05:25.570
diga "Oye, si recibo una solicitud, envíala. "Pero como vimos

05:25.710 --> 05:33.930
en nuestros videos anteriores, podemos crear servidores falsos para probar nuestros sitios web.

05:33.960 --> 05:36.710
Ahora esta era la vieja forma de hacer las cosas.

05:36.720 --> 05:39.530
No había mucha lógica, no podías expandirte realmente.

05:39.720 --> 05:46.190
No puede tener sitios web como Facebook o Amazon que utilicen este tipo de sistema.

05:46.350 --> 05:51.940
Como dije, esto era para sitios web muy básicos.

05:52.000 --> 05:59.310
Ahora, una nueva pila que llamamos servidor de aplicaciones se parece más a esto.

05:59.380 --> 06:06.580
Ahora, un servidor de aplicaciones es diferente a nuestro ejemplo anterior porque, a diferencia del uso del servidor Apache, que es muy simple y

06:06.610 --> 06:14.050
solo solicita respuesta, solo entrega los archivos allí y de regreso. Con algo así como

06:14.050 --> 06:23.750
un servidor Node donde tienes Node. js corriendo, bueno, puede escribir un script y decir "Si recibo una solicitud de inicio

06:23.750 --> 06:33.230
de sesión, compruebe el nombre de usuario del usuario en la base de datos. Si coincide, avíseme y luego envíe una respuesta a

06:33.320 --> 06:42.260
través de JSON a la aplicación Front-End. Y podemos personalizar lo que dicen estos scripts.

06:42.260 --> 06:50.990
Hasta ahora solo hemos podido usar JavaScript en la web. Pero ahora, con Node. js, podemos usarlo en un servidor, en una computadora que no

06:51.680 --> 06:55.670
ejecuta un navegador web. Con Nodo js, podemos

06:55.670 --> 07:02.630
escribir JavaScript donde, si publiqué algo en Facebook, esa publicación en Facebook, cuando hice clic en

07:02.630 --> 07:08.060
'publicar', se enviará al servidor de nodos que está escuchando las solicitudes.

07:09.000 --> 07:18.060
Dirá que "Andrei acaba de publicar este mensaje en formato JSON. "El Nodo. js y Express. El archivo js en el servidor

07:18.180 --> 07:27.000
lo leerá y dirá "Ah, queremos almacenar esta publicación en nuestra base de datos. "y esta base de datos va a almacenar esa

07:27.000 --> 07:32.460
publicación, de modo que cuando vuelva la próxima vez todavía esté allí.

07:32.460 --> 07:39.360
Y luego, una vez hecho, responderá con éxito diciendo que "Mi publicación es un éxito" y ahora se

07:39.360 --> 07:42.060
muestra en mi línea de tiempo.

07:42.420 --> 07:49.410
Puedo editar la publicación, puedo eliminar la publicación, y nuevamente Node Server puede eliminar esa publicación de la base de datos y luego

07:49.410 --> 07:52.520
enviar una respuesta y eliminarla de la línea de tiempo.

07:52.560 --> 07:59.070
Simplemente tiene el poder de interactuar constantemente con el Front-End. En los próximos videos, vamos

07:59.070 --> 08:03.570
a construir un proyecto que incorpore todo esto.

08:03.630 --> 08:07.320
Vamos a crear un servidor de nodos utilizando un Express, vamos a crear

08:07.320 --> 08:14.610
nuestra propia base de datos donde almacenaremos la información del usuario. Y vamos a utilizar AJAX y

08:14.610 --> 08:20.400
JSON para crear, iniciar sesión y actualizar constantemente la información del usuario.

08:20.460 --> 08:26.880
Entonces tenemos una comprensión de este sistema completo. Si está creando sitios web y

08:26.910 --> 08:34.540
aplicaciones web, bueno, en realidad no lo está haciendo. Como desarrollador web, está creando algo más similar a esto: pero

08:34.750 --> 08:38.300
podría preguntarse: "¿Es esto? "" ¿Es este el final

08:38.320 --> 08:44.420
definitivo de lo que puede hacer una infraestructura de servidor back-end? "Bueno, no, si eres

08:44.770 --> 08:53.760
Facebook, Twitter o Amazon, harías algo como esto y no te preocupes demasiado aquí,

08:53.760 --> 08:57.210
podemos explicar lo que está sucediendo".

08:57.280 --> 09:01.740
Solo está haciendo copias de su computadora.

09:01.750 --> 09:11.660
Así que piensa en cada uno de estos rectángulos como una computadora. Y debido a que Facebook recibe a mucha gente, hace una copia de su

09:11.660 --> 09:15.720
servidor y la pone quizás en Asia, y en África, para que

09:15.860 --> 09:22.640
todos los de Asia puedan acceder a este y todos los de África puedan acceder a este, en lugar de

09:22.640 --> 09:23.530
tener a

09:23.630 --> 09:30.530
todos acceder a un servidor y sobrecargar el sistema. Debido a que tienen el mismo servidor,

09:30.560 --> 09:35.910
solo está copiando estos archivos y poniéndolos en un servidor en otro lugar.

09:35.970 --> 09:36.570
Eso es.

09:36.650 --> 09:43.900
Y eso es lo que llamamos escalamiento. Pero también siguen usando la misma base de datos,

09:43.900 --> 09:51.460
de modo que si desde este servidor alguien actualiza la información, bueno, esta persona que usa este servidor, este usuario aún

09:51.460 --> 09:55.920
tendrá acceso a la información que la persona que usa este servidor actualizó.

09:55.960 --> 10:04.640
Y finalmente, tenemos algo llamado 'Load Balancer'. Y esto es similar a

10:05.240 --> 10:14.090
lo que harían Apache o NginX. Donde escucha una solicitud HTTP y se da cuenta de que "Hmm, este de América del Norte está realmente muy ocupado

10:14.090 --> 10:15.700
en este momento. "" Voy

10:15.720 --> 10:22.940
a transferir a esta persona a este servidor por aquí. "y simplemente equilibra la carga de los servidores.

10:24.040 --> 10:29.290
y puede seguir creciendo esto teniendo más y más servidores a medida que tenga más y más usuarios.

10:29.410 --> 10:33.390
Y finalmente, incluso puede tener múltiples bases de datos.

10:33.400 --> 10:40.600
De nuevo, estos cuadrados representan cada uno una computadora; una computadora que ejecuta una base de datos, una computadora que ejecuta

10:40.600 --> 10:48.380
un servidor, una computadora que ejecuta un equilibrador de carga. Y puede tener varias bases de datos, de nuevo, para

10:48.400 --> 10:52.220
que no se abrumen con todas estas solicitudes.

10:52.420 --> 10:59.250
Y cada uno mantiene una copia del otro. Y esto es algo de lo que hablaremos (sobre) más cuando lleguemos a

10:59.250 --> 11:02.030
la sección Nodo y a la sección Base de datos.

11:02.100 --> 11:08.160
Pero quiero mostrarte la idea detrás de los servidores. Para trabajar con el Back-End,

11:08.370 --> 11:18.050
el objetivo principal es asegurarse de que cuando hacemos una solicitud HTTP desde el Front-End recibamos una respuesta lo

11:18.470 --> 11:22.100
más rápida posible con los datos correctos.

11:22.370 --> 11:28.680
Y eso es lo que es el desarrollo Back-End. Asegurándonos de que devolvemos esos recursos para

11:28.700 --> 11:35.870
que nuestro equipo de Front-End pueda estar seguro de que vamos a recibir exactamente lo que necesitamos.

11:35.880 --> 11:42.090
Así que quiero que se emocionen porque en las próximas secciones nos

11:42.090 --> 11:49.920
centraremos en el Back-End y el Front-End. Vamos a crear una aplicación que use todas estas tecnologías en un solo lugar.

11:49.920 --> 11:57.210
Entonces sabes exactamente cómo está conectado todo y tienes una idea de

11:57.210 --> 12:04.290
cómo pasar de algo así a tener un día algo así.

12:04.400 --> 12:05.210
Ya veré en el siguiente, adiós.
