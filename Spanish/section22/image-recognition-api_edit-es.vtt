WEBVTT

00:01.480 --> 00:05.110
Dar una buena acogida. Tenemos nuestro hermoso sitio web configurado.

00:05.110 --> 00:14.440
Es hora de crear alguna funcionalidad, donde ingresamos una url, presionamos 'Detectar' y aparece una imagen con

00:14.920 --> 00:16.440
una caja de detección de rostros,

00:16.540 --> 00:21.980
si una cara existe en la imagen. Entonces, ¿cómo vamos a hacer eso?

00:24.100 --> 00:28.900
Bueno, lo primero que queremos hacer, queremos asegurarnos de que haya alguna funcionalidad aquí donde

00:29.260 --> 00:36.730
podemos detectar lo que el usuario ingresa Y es algo que hemos hecho antes con reaccionar, cuando teníamos

00:36.730 --> 00:37.710
nuestra aplicación robo amigos.

00:37.720 --> 00:41.440
Tuvimos nuestra entrada que se filtró a través de los robots.

00:41.520 --> 00:50.930
Entonces, de nuevo, usando la técnica similar, usando 'ImageLinkForm', podemos crear esta funcionalidad.

00:50.950 --> 00:56.620
Entonces, lo primero que te puedes dar cuenta es eso, ¡sí! definitivamente necesitamos 'estado', necesitamos crear un 'estado'

00:56.650 --> 01:05.020
de modo que, nuestra aplicación sabe, cuál es el valor que el usuario ingresa, lo recuerda y actualiza en cualquier momento

01:05.020 --> 01:06.340
se cambia

01:06.340 --> 01:10.360
Como recordarás, para hacer eso, definiremos un 'constructor'

01:13.770 --> 01:19.800
y dentro de este 'constructor', tenemos que llamar 'super' para poder usar esto.

01:19.850 --> 01:21.500
Y aquí, podemos hacer 'esto'

01:21.500 --> 01:25.310
'estado' es igual y lo llamaremos,

01:25.310 --> 01:28.890
'entrada', eso es lo que el usuario ingresará.

01:30.940 --> 01:43.630
Y esta entrada tendrá un 'onChange' o 'onInputChange', que usaremos con las funciones de flecha,

01:44.430 --> 01:49.230
para que no obtengamos el error que vimos anteriormente.

01:49.230 --> 01:56.710
Y como saben cada vez que hay algún tipo de oyente de eventos en una página web, recibimos un evento y

01:56.710 --> 01:57.760
Queremos hacer algo aquí.

01:57.760 --> 02:07.130
Así que haremos un 'registro de punto de consola', 'evento' para asegurarnos de que podamos detectarlo y en 'cambio de entrada' en el

02:07.130 --> 02:11.020
'imageLinkForm' podemos pasarlo como un apoyo.

02:15.310 --> 02:17.860
Y obtendremos el error 'onInputChange' no definido.

02:17.860 --> 02:25.930
Recuerde que como es parte de esta clase para acceder, debe guardar 'this dot onInputChange'

02:25.960 --> 02:32.150
porque 'onInputChange' es una propiedad de la 'Aplicación'.

02:32.150 --> 02:34.510
Ahorremos eso, en este momento,

02:34.520 --> 02:37.910
bueno, no está haciendo nada porque tenemos que desencadenar esto.

02:38.090 --> 02:42.440
Volvemos a 'imageLinkForm' que es el css 'imageLinkForm.js'.

02:42.470 --> 02:47.990
Podemos destruir el 'onInputChange' que estamos obteniendo.

02:48.020 --> 02:58.080
Entonces en lugar de hacer 'props' dot 'onInputChange' aquí, simplemente lo desestructuramos de los 'props' y

02:58.080 --> 03:01.500
puede decir en 'entrada' aquí 'en Cambio',

03:05.090 --> 03:13.220
así que 'onChange' es técnicamente un evento sintético de reacción que imita lo que el html hace con cada entrada

03:13.220 --> 03:14.480
cambios.

03:14.480 --> 03:22.750
Y aquí el 'onChange', bueno, ¿qué va a hacer, si acabamos de hacer 'onInputChange' aquí,

03:22.800 --> 03:23.910
¿Veamos qué pasa?

03:26.860 --> 03:37.640
Voy a abrir la consola, hacer clic o presionar algo, ¡oop! ve a la entrada y presiona algo.

03:37.660 --> 03:37.940
Todo bien.

03:37.950 --> 03:42.790
Y parece que estoy obteniendo algo, un evento proxy.

03:42.810 --> 03:43.050
Todo bien.

03:43.050 --> 03:45.170
¿Qué pasa si regreso a mi

03:45.190 --> 03:51.660
app dot js? y si recuerdas la forma en que obtenemos nuestro valor de la entrada es punto 'objetivo' punto 'valor'.

03:51.840 --> 03:59.710
Si guardo eso y vuelvo, allí tienes, obtenemos nuestra opinión.

03:59.790 --> 04:03.390
Agradable y fácil, como lo hicimos antes con nuestra aplicación de reacción inicial.

04:05.560 --> 04:12.730
Bien, estamos obteniendo el 'onInputChange' y también queremos que cuando hagamos clic en 'Detect' eso mientras

04:12.970 --> 04:16.100
detectar una imagen, ¿cómo vamos a hacer eso?

04:17.030 --> 04:23.660
Por ahora, solo porque me gusta mantener las cosas simples, construyendo cosas paso a paso, solo podemos 'consolar'

04:23.660 --> 04:28.320
log 'y diremos' onSubmit 'y no tendrá ningún parámetro por ahora.

04:29.420 --> 04:40.880
Simplemente diremos 'console dot log', haga clic en, y ahora 'onSubmit', podemos pasar de nuevo a 'imageLinkForm'.

04:46.250 --> 04:51.000
Vamos a titularlo 'onButtonSubmit' aquí, solo para dejarlo en claro.

04:52.680 --> 04:57.520
Y nuevamente, lo pasaremos con 'this' dot 'onButtonSubmit'.

04:59.660 --> 05:02.810
Ahorramos eso, voy a poner esto en una nueva línea para que puedan ver,

05:08.200 --> 05:13.480
ahora el 'imageLinkForm' recibirá 'onButton

05:13.780 --> 05:32.150
Enviar 'y podemos decir, aquí que, aparte de' className ', serán un evento' onClick 'que escuchará el' on

05:33.700 --> 05:34.530
ButtonSubmit '.

05:35.240 --> 05:39.750
Ahorremos, regresemos a nuestro ejemplo,

05:39.750 --> 05:42.730
haga clic, mire eso, eso está funcionando.

05:44.280 --> 05:44.620
Todo bien.

05:44.650 --> 05:48.850
Entonces, hay un poco de funcionalidad, pero la parte más difícil es comenzar.

05:48.880 --> 05:54.850
¿Cómo mostramos una imagen aquí y hacemos que detecte la cara? Bien,

05:54.870 --> 06:03.200
afortunadamente para nosotros, podemos usar una API, y esta API creo que es una de las más geniales que hay.

06:03.200 --> 06:11.320
Se llama 'clarifai' y, como puede ver en su eslogan 'comprender su imagen y datos de video'. Usted puede

06:11.320 --> 06:15.400
usa esta herramienta de manera gratuita, hasta cierto punto.

06:15.490 --> 06:24.520
Si observa los precios aquí para los desarrolladores, tiene 5000 operaciones gratuitas por mes.

06:24.720 --> 06:28.620
Para que pueda enviar 5000 imágenes y lo adivinará por usted.

06:28.710 --> 06:31.160
Una vez que su aplicación sea popular, puede comenzar a pagarla.

06:31.170 --> 06:39.600
Pero vamos a utilizar una API gratuita. Y quiero que te registres para esto, si quieres usarlo porque

06:39.900 --> 06:43.840
la clave de API que usaré en este ejemplo, la eliminaré luego para que,

06:43.870 --> 06:47.190
bien, para que otras personas no, ¡ah! no lo uses

06:47.190 --> 06:50.570
y luego llego a mi límite y ya no podré usarlo.

06:51.250 --> 06:52.830
Pero es muy simple inscribirse.

06:52.900 --> 06:54.190
Usted acaba de iniciar sesión.

06:54.190 --> 07:00.400
Y una vez que haya creado su cuenta aquí, será llevado a su perfil.

07:02.630 --> 07:05.860
Y es posible que ya tengan mi primera aplicación para ti.

07:05.990 --> 07:10.880
Si no hay nada aquí, simplemente haga clic en 'CREAR NUEVA APLICACIÓN' y aquí,

07:13.620 --> 07:17.890
y su aplicación, puede titularla como quiera, pero no necesita tocar nada.

07:18.150 --> 07:28.890
Si vas a las teclas API, esta tecla es tu forma de acceder a la API 'clarifai'.

07:30.500 --> 07:40.680
Entonces, si aquí ingreso una URL, presiono Detectar, puedo enviar esa URL con mi clave de API que proporcionan para usted

07:42.280 --> 07:51.280
a su servicio y usando la clave API, dirán, ¡oh! ese es Andre, está bajo el plan libre.

07:51.490 --> 07:54.120
Todavía no ha llegado a su límite de 5000 durante el mes.

07:54.340 --> 07:54.680
Sí.

07:54.700 --> 07:55.710
Respondamos.

07:57.260 --> 08:04.330
Y en caso de que se pregunten qué pueden hacer en realidad, si van a sus modelos, ven aquí

08:04.780 --> 08:09.370
usan el aprendizaje automático para entrenar algo llamado 'Modelos'.

08:09.610 --> 08:19.090
Es decir, entrenan una computadora dándole muchas fotos, toneladas de imágenes para memorizar celebridades

08:19.090 --> 08:30.240
caras, detectar 'Ropa' como aquí, y sabe que estas son gafas de sol con un 100 por ciento de probabilidad porque

08:30.270 --> 08:37.470
se ha entrenado probablemente millones de fotos de gafas de sol para saber cómo son las gafas de sol. Vos tambien

08:37.470 --> 08:39.960
puede jugar con muchas de las cosas que tienen aquí.

08:39.960 --> 08:42.780
Es realmente muy bueno lo que tienen.

08:42.780 --> 08:48.540
Vamos a usar su API de detección de rostros. Y su API de detección de rostros

08:48.540 --> 08:49.560
nosotros simplemente,

08:52.280 --> 09:04.350
si vamos a la js (javascript), simplemente ejecutamos esta función, a los servidores 'clarifai' usando nuestra propia API y nos da

09:04.350 --> 09:07.490
nosotros una respuesta o un error.

09:07.550 --> 09:16.610
Ahora esto es mucho más fácil de demostrar que hablar, así que vamos a implementarlo.

09:16.640 --> 09:19.600
Estoy usando su reconocimiento facial.

09:19.740 --> 09:25.770
Así que solo voy a copiar y pegar esto. Volver a mi aplicación y en el punto de la aplicación

09:25.910 --> 09:30.320
js (app.js), diré que 'onButtonSubmit',

09:30.420 --> 09:41.170
Quiero correr, la función que 'clarifai' me acaba de decir que use. Pero como pueden ver aquí, tiene 'aplicación

09:41.460 --> 09:45.100
los modelos dot dot predicen '.

09:45.480 --> 09:52.330
Bueno, ¿cómo va mi programa a saber qué es lo que predicen los puntos de la aplicación?

09:52.520 --> 09:59.790
Bueno, si vas a su guía de API, te mostrarán exactamente cómo empezar y cómo usar su API.

09:59.960 --> 10:05.720
Pero pueden ver aquí y están 'Comenzando', 'clientes API' si vamos a JavaScript, dirán

10:05.920 --> 10:08.140
instalar el cliente desde npm.

10:08.180 --> 10:16.640
Así que sigamos e instalemos 'clarifai' y este es un paquete que han creado para que puedan

10:17.000 --> 10:25.340
Trabajar con Javascript, mientras se está cargando, podemos ver que podemos importar 'clarificar'.

10:25.460 --> 10:30.010
Podemos ver aquí que están usando el JS común, la forma 'requerida' de importación,

10:30.020 --> 10:36.160
pero como usamos 'crear aplicación de reacción', podemos usar 'importar' aquí, y luego simplemente inicializamos su API

10:36.160 --> 10:44.630
clave con esto Para que ahora podamos tener el objeto de la aplicación. Como puedes ver aquí, estamos usando la aplicación

10:44.630 --> 10:45.220
.models '.

10:45.230 --> 10:53.980
Pero si ejecuto esto, no tendré idea de qué es 'aplicación'. Solo para demostrarlo, si vuelvo a la consola

10:53.980 --> 10:54.320
aquí,

10:57.940 --> 11:05.050
'ejecutar npm start', obtengo 'la aplicación no está definida', está bien.

11:05.050 --> 11:15.350
Entonces, copia de nuevo, lo que vemos aquí copiará esto, colócalo en nuestra configuración en la parte superior del archivo.

11:17.910 --> 11:20.650
Solicita nuestra clave API.

11:20.730 --> 11:24.070
En mi caso, usaré el que me dieron.

11:27.670 --> 11:29.670
Déjame abrir ese enlace en un nuevo archivo.

11:30.620 --> 11:34.220
Voy a 'mi primera aplicación', 'claves API'.

11:34.560 --> 11:38.920
Copiaré y pegaré mi clave API. Pegarlo aquí.

11:40.640 --> 11:46.730
Como mencionamos en la sección API, las API más útiles requieren una configuración como esta, donde usted tiene

11:46.730 --> 11:55.190
para agregar una clave API. Entonces, aunque estos documentos son específicamente para 'clarifai', la mayoría de las API que usa son

11:55.190 --> 11:58.560
va a ser muy muy similar a esto.

11:58.570 --> 12:01.060
De acuerdo, entonces tenemos eso, también tenemos que importar,

12:01.090 --> 12:07.140
si lo recuerdas, así que volviendo aquí, puedo simplemente

12:10.090 --> 12:18.460
importamos 'clarifai' y porque podemos usar la nueva forma javascript de importar.

12:18.750 --> 12:22.430
Lo haremos porque se ve mucho mejor.

12:23.280 --> 12:25.140
Bien, ahorremos y veamos qué pasa.

12:26.100 --> 12:26.560
Todo bien.

12:26.760 --> 12:29.420
Parece que está funcionando.

12:29.440 --> 12:35.250
Vemos que solo estamos obteniendo un, esta es solo una imagen de muestra que estamos obteniendo.

12:36.940 --> 12:45.550
Entonces, estamos usando nuestra clave API y luego enviamos una imagen url y luego aparece este punto, vamos a

12:45.550 --> 12:50.220
console dot registra la respuesta, y mira lo que obtenemos.

12:53.580 --> 12:59.590
Voy a hacer clic en enviar (Detectar), y obtengo el estado,

12:59.590 --> 12:59.950
todo bien.

12:59.950 --> 13:03.420
Parece que está respondiendo con algo, eso está bien.

13:04.810 --> 13:09.960
Muy bien.

13:09.960 --> 13:14.520
Muy bien, así que por ahora, parece que esto está funcionando.

13:14.520 --> 13:20.370
Tenemos una imagen, que estamos recibiendo, cuando coloco esto en una nueva línea para que pueda ver.

13:28.540 --> 13:28.920
Derecha.

13:28.960 --> 13:35.950
Entonces, por ahora, vamos a tenerlo, para que podamos mostrar la imagen que nos dieron en nuestro ejemplo. Copiemos

13:35.950 --> 13:42.420
y ver de qué es esta imagen.

13:42.440 --> 13:47.030
Entonces queremos que esto se muestre en la parte inferior.

13:47.100 --> 13:48.700
Entonces, ¿cómo podemos hacer eso?

13:49.470 --> 14:03.640
Bueno, podemos comenzar a crear nuestro último componente 'FaceRecognition'. Entonces podemos mover los corchetes o los comentarios.

14:03.800 --> 14:13.790
Y ahora aquí, vamos a importar este nuevo componente, que aún no tenemos y que se llamaría The 'Face

14:13.790 --> 14:16.730
Componente de reconocimiento.

14:21.900 --> 14:27.540
Y de nuevo crearemos una nueva carpeta, que dirá 'FaceRecognition'.

14:28.560 --> 14:33.650
Y dentro de esta nueva carpeta, (allí) habrá un nuevo archivo 'FaceRecognition dot

14:33.860 --> 14:40.380
js ', usando nuestra muy buena herramienta,

14:40.380 --> 14:45.240
copiar y pegar, ir a copiar y pegar el componente 'Navegación'

14:48.160 --> 14:53.410
y ahora cambie el nombre de esto a 'FaceRecognition'

14:54.390 --> 14:56.870
componente y ¿qué debería mostrar esto?

14:57.090 --> 15:00.930
Bueno, por ahora solo queremos mostrar una imagen estática para asegurarnos de que funciona.

15:02.230 --> 15:03.580
Así que voy a crear

15:07.730 --> 15:14.620
un 'div' con 'className' del pozo, 'center' que ya hemos definido antes,

15:14.660 --> 15:23.760
si lo recuerdas en nuestra app.css. Y tendrá una imagen, con una fuente (src) de,

15:28.930 --> 15:32.010
cierra la etiqueta y podríamos guardar eso.

15:32.380 --> 15:33.380
Veamos si eso funciona.

15:35.500 --> 15:36.280
Todo bien.

15:36.280 --> 15:37.620
Eso se ve bastante bien en realidad.

15:37.630 --> 15:40.040
Tenemos nuestra imagen justo en la parte inferior.

15:41.430 --> 15:44.190
Me aparece un error que dice que necesitamos una etiqueta 'alt'.

15:44.250 --> 15:45.920
Así que solo diremos 'alt'

15:49.290 --> 15:50.770
y lo dejaremos en blanco por ahora.

15:50.880 --> 15:53.100
Solo para que tengamos algo.

15:53.220 --> 15:53.600
Todo bien.

15:53.640 --> 16:03.240
Así que tenemos el aspecto básico de la imagen y funciona, pero eso no está realmente conectado a la API.

16:03.250 --> 16:08.820
Cuando hago clic en Detectar, bueno, está codificado.

16:08.970 --> 16:16.050
Primero, veamos la API y veamos cómo podemos enviar urls de imagen, si vuelves a su

16:16.050 --> 16:17.350
documentos.

16:17.650 --> 16:20.870
Nuevamente son muy buenos con esto.

16:20.940 --> 16:22.020
Si te desplazas hacia abajo,

16:25.960 --> 16:29.660
bajo 'Predicción', verá que tienen imágenes y videos.

16:29.830 --> 16:37.720
Entonces podemos usar las 'Imágenes', 'a través de URL' y vemos que tenemos el javascript y se parece al 'Predecir'

16:38.500 --> 16:43.690
función toma el 'clarifai' un modelo que tienen.

16:43.690 --> 16:50.830
Entonces, en este caso, están enviando el modelo general y la URL. Correcto, así que es muy similar a lo que

16:50.830 --> 16:51.740
vimos antes

16:52.640 --> 16:59.070
Entonces, por lo que parece, porque ya hemos definido nuestra clave API, ya no la necesitamos.

16:59.450 --> 17:05.020
Todo lo que necesitamos es contarlo, qué modelo queremos usar.

17:05.040 --> 17:11.040
Pero si recuerdas, tienen toneladas de modelos. Y en realidad quiero mostrarte una forma inteligente de mirar

17:11.040 --> 17:11.310
esta.

17:11.310 --> 17:17.910
Tienen esta información en los documentos, pero otra buena manera de hacerlo es si recuerdas que había

17:17.910 --> 17:30.740
un paquete npm 'clarifai' y este paquete npm tiene un enlace github y todos los paquetes npm usualmente lo hacen. Aquí,

17:31.020 --> 17:40.620
si va a visitar su base de código, si va a la fuente, como puede recordar, e index.js, esto

17:40.620 --> 17:50.360
es a lo que nos están dando acceso, y ven aquí tienen 'exportaciones global punto clarifai' y aquí

17:50.380 --> 17:55.360
todos sus modelos que podemos usar. Entonces nos están dando el 'GENERAL_MODEL'.

17:55.690 --> 17:58.910
Pero puedes ver, si podemos obtener el 'FOOD_MODEL', el 'COLOR_MODEL'.

17:59.050 --> 18:04.570
Así que usemos el 'COLOR_MODEL' por ahora, y aquí, diremos

18:08.850 --> 18:13.050
'COLOR_MODEL'.

18:13.240 --> 18:21.270
Y para tener acceso a eso, tenemos que hacer 'clarifai' dot 'COLOR_MODEL'.

18:21.580 --> 18:30.490
Así que ahorremos eso, y vamos a probar esto abriendo la consola haciendo clic en Detectar,

18:30.730 --> 18:44.570
Recibo una respuesta y, en su respuesta, si voy a 'outputs', 'zero (0)', 'data', obtengo 'colors' y estos

18:44.570 --> 18:51.090
son todas las predicciones de colores hexadecimales y ves la que tiene la probabilidad más alta, veamos qué

18:51.090 --> 18:52.090
color que es.

18:55.660 --> 19:02.480
Es bastante negro y si miras esta imagen, sí, es bastante negro.

19:02.480 --> 19:05.680
Está bien así que eso está funcionando.

19:05.740 --> 19:11.150
Y la razón por la que pude encontrar esto está de nuevo en su documentación API que te dice si es un

19:11.200 --> 19:15.190
una salidas y una salida devuelve una matriz con datos dentro de ella.

19:15.220 --> 19:23.130
Y debido a que seleccionamos el modelo de colores obtenemos colores. Está bien, entonces por ahora usando el modelo de colores,

19:23.280 --> 19:26.760
vamos a construirlo.

19:27.130 --> 19:39.660
Queremos tener un estado 'imageUrl' y estará vacío por el momento y este 'imageUrl' debería

19:39.810 --> 19:51.500
aparece cuando hacemos clic en enviar, entonces podemos decir que 'onButtonSubmit', queremos 'este' punto 'setState' para

19:51.530 --> 19:58.920
igual, tener la URL de la imagen actualizada con lo que sea la 'entrada'.

19:58.920 --> 20:06.100
De esta forma, podemos pasar el 'imageUrl' a 'FaceRecognition'.

20:06.120 --> 20:15.960
Así que si hago 'imageUrl' igual a 'este' punto 'estado' dot 'imageUrl', ahora puedo usar 'imageUrl' en

20:15.960 --> 20:25.670
mi componente 'FaceRecognition' como fuente (src).

20:25.670 --> 20:32.180
Ahora obviamente necesitamos recibir esto, así que lo desestructuraré y lo usaré como parámetros.

20:32.180 --> 20:33.800
Y entiendo 'la entrada no está definida',

20:33.800 --> 20:47.850
Eso es porque aquí, utilicé input y bueno, tiene que ser 'this' dot 'state' dot 'input'. Regresemos ¡Ah, vamos!

20:47.870 --> 20:49.500
encontrar una nueva cara en realidad. Hagamos,

20:49.520 --> 20:50.150
vamos a hacer un color

20:50.160 --> 20:58.110
Hagamos un paisaje, hagamos uno con un color definido.

20:58.110 --> 21:08.070
Esa es una buena, vamos a ver la imagen, copiar esto, si hacemos esto y no obtenemos nada porque bueno, si

21:08.070 --> 21:13.080
recuerdas 'onInputChange', nunca hemos actualizado el componente 'input'.

21:13.080 --> 21:15.510
Solo consolamos registramos todo.

21:15.530 --> 21:19.950
Ahora que sabemos que podemos decir, 'este' punto '

21:19.960 --> 21:20.510
Estado'

21:23.440 --> 21:23.950
'entrada'

21:26.740 --> 21:30.060
es el 'evento' 'objetivo' punto 'valor'.

21:30.200 --> 21:31.460
Veamos si eso funciona.

21:32.340 --> 21:36.370
Y vuelvo, lo pruebo y,

21:36.430 --> 21:39.420
¡Oh muchacho !, esa es una gran imagen que necesitaremos para arreglar eso,

21:39.430 --> 21:45.620
pero tenemos nuestra imagen mostrando. Ahora usando esta información,

21:45.620 --> 21:51.390
significa que podemos dar nuestra url como entrada aquí.

21:51.620 --> 21:54.960
Podemos simplemente poner 'este' punto 'estado' punto 'entrada'

22:03.150 --> 22:08.530
y abre la consola

22:08.550 --> 22:08.760
Todo bien,

22:08.760 --> 22:10.730
parece que estamos recibiendo una respuesta.

22:10.770 --> 22:13.540
Estamos obteniendo 'datos' 'colores'.

22:13.790 --> 22:17.930
Tenemos esto con un 40 por ciento de posibilidades de que este sea el color.

22:17.930 --> 22:19.400
Veamos de qué color es eso.

22:22.040 --> 22:23.150
De acuerdo, eso es verde.

22:23.210 --> 22:24.650
Eso es muy bonito.

22:24.650 --> 22:26.870
Entonces claramente está funcionando.

22:26.870 --> 22:28.970
Estamos recibiendo, voy a cerrar algunos de estos.

22:36.160 --> 22:40.210
Está bien, las cosas están funcionando claramente ahora, lo cual es genial.

22:40.210 --> 22:45.950
Ahora el único truco que quiero mostrarte, por la forma en que reacciona,

22:46.240 --> 22:55.320
si hubiera hecho aquí, 'imageUrl', realmente obtendría un error,

22:55.540 --> 22:59.980
Si copio y pego, hagamos una imagen 'Apple'

23:12.590 --> 23:32.790
Recibo una 'Mala solicitud' y eso se debe a la forma en que funciona 'establecer estado'.

23:32.870 --> 23:33.170
Todo bien.

23:33.200 --> 23:44.700
Entonces, si bien queremos usarlo es 'FACE_DETECT_MODEL', así que usando lo que tenemos ahora,

23:46.050 --> 23:52.960
Veamos si podemos obtener una respuesta, y si vamos a nuestra API, podemos ver los modelos,

23:58.830 --> 24:06.100
y en realidad si vamos a la parte superior, ve a 'Modelos', y vamos a 'Detección de rostros',

24:09.320 --> 24:15.280
vemos que tendremos una respuesta que se parece a esto.

24:15.310 --> 24:22.600
Lo que nos interesa es desde los resultados, para obtener datos y luego las regiones que nos dan las regiones o

24:22.600 --> 24:28.200
el cuadro delimitador de la cara. Veremos si podemos hacer que funcione.

24:28.670 --> 24:33.470
He puesto el 'FACE_DETECTION_MODEL' y todavía no sabemos cuál será la respuesta, así que solo estoy

24:33.470 --> 24:34.820
voy a dejarlo así.

24:35.800 --> 24:39.390
Voy a encontrar una imagen de la cara,

24:44.050 --> 24:47.060
hagamos esta imagen,

24:47.060 --> 24:47.980
copiar y pegar, detectar,

24:53.400 --> 24:55.450
¡Oh chico! necesitamos arreglar esa cara

24:55.550 --> 25:00.510
Pero, vemos que estamos generando resultados.

25:02.700 --> 25:06.240
En la primera matriz, obtenemos 'datos', 'regiones'

25:10.500 --> 25:12.340
y tenemos un 'bounding_box'.

25:12.340 --> 25:14.290
Así que está un poco anidado aquí.

25:14.320 --> 25:21.190
Entonces, usando esta información, limpiemos un poco y luego obtengamos lo que necesitamos de aquí.

25:25.030 --> 25:29.670
En nuestro caso, parece que tendremos que obtener la 'respuesta'

25:29.930 --> 25:33.150
dot 'outputs'.

25:36.110 --> 25:46.190
Y luego el 'cero (0)' la primera matriz, luego fue 'datos', 'regiones', 'cero (0)', 'información de región', luego 'cuadro delimitador'.

25:46.400 --> 25:47.700
De acuerdo, hagamos eso.

25:47.720 --> 25:56.550
Entonces 'regiones de datos' acceden a la primera matriz,

25:57.530 --> 26:01.020
'region_info' y creo que el último fue 'cuadro delimitador'.

26:01.100 --> 26:01.860
Probemos eso.

26:05.370 --> 26:05.630
Todo bien.

26:05.640 --> 26:07.050
Démosle una oportunidad.

26:07.930 --> 26:09.260
Y mira si eso funciona

26:11.190 --> 26:11.760
Detectar

26:14.710 --> 26:20.230
Mira eso. Tenemos nuestra 'fila inferior', 'columna izquierda', 'columna derecha', 'fila superior'.

26:20.500 --> 26:22.760
Todavía no sabemos realmente qué significan estos números.

26:22.810 --> 26:27.370
Tendremos que resolverlo porque, como puede ver, no agrega nada a la cara.

26:27.370 --> 26:29.030
Eso es algo que tendremos que hacer.

26:29.830 --> 26:33.270
Pero está funcionando y tenemos nuestra conexión API.

26:33.370 --> 26:36.050
De hecho, estamos haciendo algo, estamos mostrando la imagen.

26:36.070 --> 26:41.860
Antes de entrar al siguiente video, arreglemos este problema de imagen para asegurarnos de que todo se vea, bueno,

26:42.340 --> 26:44.470
se ve mejor que esto.

26:44.470 --> 26:50.310
Entonces, si vamos a 'Reconocimiento facial' aquí, hay un par de cosas que tendremos que arreglar.

26:50.350 --> 26:52.740
Voy a eliminar esta 'consola'.

26:52.880 --> 27:02.650
Haremos 'ma', que es una clase 'tachion' y luego también envolveremos esto en 'div' y hay muchas maneras

27:02.650 --> 27:03.220
para hacer esto.

27:03.220 --> 27:07.990
Como dije antes con estilo, le mostraré la forma principal de hacerlo.

27:08.140 --> 27:17.640
Voy a decir "margen superior absoluto dos" solo para que haya un poco de espacio entre la entrada y la imagen.

27:17.770 --> 27:25.330
Y ahora dentro de la imagen, queremos asegurarnos de que el 'ancho' sea siempre el mismo sin importar el tamaño de

27:25.330 --> 27:27.770
la imagen.

27:27.960 --> 27:34.890
Haremos '500 píxeles', pero tampoco queremos que quede aplastado o que tenga proporciones extrañas.

27:34.890 --> 27:42.490
Entonces la forma de arreglar eso es hacer 'auto'. Entonces, la altura se ajustará automáticamente en función del ancho.

27:42.530 --> 27:44.060
Entonces, ahorremos y veamos qué pasa

27:44.070 --> 27:44.470
ahora.

27:47.570 --> 27:48.140
Todo bien.

27:48.140 --> 27:50.740
Eso es, eso es mucho mejor.

27:50.760 --> 27:51.840
Entonces eso fue bastante rápido.

27:51.840 --> 27:55.300
Esto fue lo principal que realmente lo solucionó.

27:56.630 --> 27:57.320
Todo bien.

27:57.350 --> 27:57.850
Increíble.

27:57.860 --> 28:03.830
Así que nos conseguimos una aplicación que funciona y que arroja resultados reales.

28:04.040 --> 28:12.400
Y ahora podemos trabajar para que se muestre una caja alrededor de la cara, si se detecta algo. Solo fuera de

28:12.400 --> 28:13.200
curiosidad.

28:13.210 --> 28:25.230
Si vuelvo a hacer paisaje

28:25.280 --> 28:25.760
Todo bien.

28:25.760 --> 28:26.450
Todo funciona bien

28:26.460 --> 28:30.980
Huh! eso fue largo, pero las cosas están empezando a funcionar.

28:30.980 --> 28:32.370
Te veré en el próximo video.

28:32.830 --> 28:33.130
A-Dios