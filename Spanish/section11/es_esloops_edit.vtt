WEBVTT

00:01.210 --> 00:07.830
Dar una buena acogida. Hasta este punto, hemos aprendido sobre el código que se ejecuta de arriba a abajo.

00:07.830 --> 00:14.020
Solo en línea recta. Hemos aprendido sobre condicionales, donde podemos agregar un 'enunciado if' y

00:14.020 --> 00:17.380
hacer que vaya de una manera u 'otra cosa', de otra manera.

00:17.710 --> 00:24.220
Luego también aprendimos sobre 'if else' y 'else if'.

00:24.310 --> 00:35.680
Entonces 'if', 'else if', 'else if', 'else'. Y luego, si quisiéramos hacer algo como esto. Algo donde seguimos haciéndolo una

00:35.680 --> 00:42.280
y otra vez. Y eso se llama 'looping', y ahí es donde vamos a aprender en este video.

00:42.640 --> 00:49.750
Y como puede ver en nuestro esquema, el bucle de JavaScript, vamos a ver todo esto en este video.

00:49.910 --> 00:50.720
Empecemos.

00:52.480 --> 01:02.160
Tengo una etiqueta vacía 'script' aquí. De nuevo, esto está adjunto a nuestro HTML y comencemos con quizás una 'lista de tareas'.

01:02.160 --> 01:12.760
Y una lista de tareas pendientes tiene ... o debería ser una matriz. Y queremos tener tal vez "sala limpia".

01:12.880 --> 01:25.730
Queremos tener "cepillarnos los dientes". Tal vez "ejercicio", definitivamente debería "estudiar" algunos "javascript".

01:25.790 --> 01:28.910
Y finalmente, bueno, deberíamos "comer sano".

01:29.090 --> 01:32.330
Todo bien. Entonces tenemos una 'lista de tareas'.

01:33.200 --> 01:39.950
Digamos que queríamos agregar un signo de exclamación al final de estos elementos de la "lista de tareas".

01:39.950 --> 01:43.140
Quiero decir, todos estos son realmente importantes y queremos enfatizar eso.

01:43.170 --> 01:49.190
Pero, quiero decir, eso es algo tedioso, ¿verdad? Tengo que ir uno por uno y agregar un signo de exclamación, agregar un

01:49.220 --> 01:50.130
signo de exclamación.

01:50.130 --> 01:54.310
E imagine si 'lista de tareas' fuera cientos de líneas.

01:55.470 --> 01:58.410
Y como programadores queremos hacer las cosas de manera eficiente.

01:58.410 --> 02:00.310
Para eso tenemos máquinas.

02:00.720 --> 02:06.930
Entonces, agreguemos algunos bucles a esto. Hacer un bucle en JavaScript, una de las principales formas

02:06.930 --> 02:12.530
en que puede hacerlo, se llama 'for loop'. Y vas a aprender una nueva sintaxis aquí.

02:12.540 --> 02:19.410
Y ten cuidado! Al principio parece confuso, pero es una de esas cosas otra vez,

02:19.410 --> 02:21.890
tienes que hacerlo varias veces y te acostumbrarás.

02:21.900 --> 02:27.370
Entonces, el primero es la variable 'i' igual a '0' que haremos.

02:27.390 --> 02:33.240
Cuando 'i' es menor que 'todos. longitud'.

02:33.480 --> 02:37.780
Y luego haremos 'i ++'.

02:37.780 --> 02:40.220
No te preocupes, explicaré lo que esto significa.

02:40.270 --> 02:47.310
Tenemos los corchetes y luego dentro de aquí por ahora, esperemos y expliquemos qué está sucediendo.

02:47.320 --> 02:53.410
Entonces, estoy diciendo 'para', que es una palabra de JavaScript que dice: vamos a hacer un bucle.

02:53.890 --> 02:59.200
Ahora, en este ciclo, lo primero que haremos es decir: 'i' es igual a '0'.

02:59.200 --> 03:01.220
Entonces, solo una variable aleatoria 'i'

03:01.300 --> 03:04.840
es: es común usarla en un ciclo 'for' - significa un 'índice'.

03:04.840 --> 03:07.080
Entonces 'i' comienza con '0'.

03:07.090 --> 03:13.670
Tenemos un punto y coma, lo que significa que es el final de la expresión, simplemente asignamos la variable 'i' al '0'

03:14.330 --> 03:18.840
y luego en la siguiente línea dice: 'i', que en este momento es '0'.

03:19.160 --> 03:27.150
Si eso es menor que la longitud 'todos' y 'todos'. longitud '- nunca hemos visto esto antes.

03:29.360 --> 03:32.050
Pero dice: ¿cuánto dura la lista?

03:32.060 --> 03:40.350
En este caso '1, 2, 3, 4, 5'. Entonces '0' es mayor que (* menor que) '5'.

03:40.530 --> 03:44.040
Si ese es el caso, ejecute este ciclo.

03:44.280 --> 03:51.800
Y luego, cuando haya terminado, haga 'i ++', que significa 'i' más '1'.

03:51.820 --> 03:53.620
Así que veamos eso.

03:53.620 --> 04:06.760
Primero de todos. lenth '. si voy, si copio esto, hago todos. longitud ': obtengo' 5 ', cinco elementos.

04:06.870 --> 04:07.940
También

04:08.070 --> 04:14.060
puedo hacer "helllooo". longitud 'y obtengo' 8 '.

04:14.070 --> 04:22.730
Entonces 1, 2, 3, 4, 5, 6, 7, 8. Entonces 'longitud' solo nos dice cuántos elementos hay en la lista.

04:22.720 --> 04:26.390
Y si hago variable 'i' es igual a '0'.

04:27.620 --> 04:28.700
Bueno, 'i' es '0'.

04:28.710 --> 04:39.700
Pero si hago 'i ++', y miro 'i' nuevamente, veo que es '1'. Si hago 'i ++' nuevamente, obtengo '2'.

04:39.740 --> 04:43.010
Entonces esto está incrementando 'i'.

04:43.100 --> 04:48.850
Entonces, lo que estamos haciendo es decir: comience con '0', y siempre que 'i'

04:48.890 --> 04:54.120
sea menor que '5', luego ejecute lo que sea en este bloque.

04:54.140 --> 04:57.880
Y una vez que haya terminado, agregue '1' a 'i'.

04:57.950 --> 05:01.980
Entonces, veamos qué sucede si lo hago 'consola. Iniciar sesión'.

05:02.390 --> 05:10.130
'Yo aqui. Vamos a guardar y actualizar. '0', '1', '2', '3', '4'.

05:10.320 --> 05:13.570
Entonces, estamos haciendo un bucle, donde comienza con '0'.

05:13.740 --> 05:15.370
Luego agregamos '1'.

05:15.450 --> 05:21.990
Ahora es '1'. Luego agregamos otro '1' a '2', otro '1' a '3' y otro '1'

05:21.990 --> 05:31.890
a '4', y cómo es que no tenemos '5' aquí porque, tan pronto como 'i 'igual' a 5 'que coincidirá con' todos. longitud 'y el bucle se detiene.

05:31.920 --> 05:36.780
Así es como le decimos al ciclo que se detenga. OKAY.

05:36.990 --> 05:44.290
Entonces, ¿cómo podemos hacer esto: si quisiéramos agregar un signo de exclamación al final de estos?

05:44.310 --> 05:47.250
Bueno, podemos acceder a 'todos'

05:50.430 --> 05:58.840
por - porque es una matriz, por 'i'. Como la primera vuelta, 'i' será '0', que debería ser "sala limpia".

05:58.920 --> 06:05.550
Luego '1' que es "cepillarse los dientes", luego '2' que es "ejercicio", '3' que es "estudie javascript" y

06:05.550 --> 06:07.420
4 que es "coma sano".

06:07.540 --> 06:14.620
Entonces, verifiquemos eso dos veces. Si hago 'todos [i]' y guardo. Actualizar y debería volver a cambiar esto a 'i'.

06:14.670 --> 06:16.220
Ahí tienes.

06:16.310 --> 06:25.220
De lo contrario, si hago esto, esto en realidad no se ejecutará, mira esto. Porque, bueno, esto es '5' es igual a '5', así que nunca va

06:25.220 --> 06:27.570
a pasar, nunca pasará por esto.

06:27.770 --> 06:29.090
Entonces cambiemos eso de nuevo a 'i'.

06:29.210 --> 06:34.290
Y actualice: 'sala limpia', 'cepillarse los dientes', 'ejercicio', 'estudiar javascript', 'comer sano'.

06:34.310 --> 06:35.050
Perfecto.

06:35.060 --> 06:41.840
¡Entonces, ahora puedo hacer '[i] + "! "'Vamos a

06:42.220 --> 06:45.850
refrescarnos. ¡Mira eso!

06:46.090 --> 06:47.630
Así de importantes son estos artículos.

06:47.740 --> 06:59.740
Pero si hago 'todo' o 'todos'. Bueno, mis 'todos' en realidad no tienen este signo de exclamación, solo los hemos registrado en la consola,

06:59.740 --> 07:02.990
pero en realidad no hemos cambiado ese 'todo', ¿verdad?

07:03.190 --> 07:06.800
Entonces hagamos eso.

07:06.970 --> 07:22.090
¡Ahora podemos decir que 'todos [i] = todos [i] + "! "'.

07:22.110 --> 07:23.020
Entonces veamos.

07:23.020 --> 07:24.570
Yo refresco

07:24.570 --> 07:25.330
No pasa nada.

07:25.330 --> 07:26.760
Pero ahora si marco 'todos' ...

07:29.490 --> 07:33.540
¡Mira eso! Tengo signos de exclamación en cada uno de mis 'todos'.

07:34.140 --> 07:45.620
Y nuevamente, para desglosar eso, estamos diciendo que "habitación limpia" ahora equivale a "habitación limpia" más un signo de exclamación.

07:45.620 --> 07:46.620
Muy genial.

07:47.060 --> 07:47.580
OKAY.

07:47.720 --> 07:51.060
Aprendamos algunos otros, en realidad antes de hacerlo, ¿qué pasa

07:51.290 --> 07:57.620
si queremos tacharlos de la lista? Tal vez queremos tacharlos, porque los hemos hecho. Bueno, podemos hacer algo

07:58.130 --> 08:01.460
como 'todos [i]. popular'.

08:01.490 --> 08:06.140
Si recuerdas, ese es un método de matriz 'pop' que elimina el último elemento.

08:06.350 --> 08:14.870
Entonces, si voy, guardo y actualizo, obtengo 'todos [i]. pop no es una función '.

08:14.870 --> 08:15.540
¿Porqué es eso?

08:15.560 --> 08:20.070
Bueno, porque estamos diciendo "sala limpia" - 'pop'.

08:20.100 --> 08:21.820
Y eso es una 'cadena'.

08:22.290 --> 08:27.990
Lo que queremos hacer es 'todos. pop ', porque esa es la' matriz '.

08:28.350 --> 08:34.230
Entonces, si guardo y actualizo eso, veamos qué tenemos en nuestro 'todos':

08:35.880 --> 08:38.920
"sala limpia" y "cepillarse los dientes".

08:38.930 --> 08:39.510
Hmm

08:39.630 --> 08:40.740
¿Porqué es eso?

08:41.160 --> 08:46.820
Bueno, porque inicialmente era '0'.

08:47.060 --> 08:50.290
Y la longitud de la lista 'todos' fue '5'.

08:50.600 --> 08:59.770
Pero luego, porque lo hicimos explotar, esto cambió a '4' y esto a 'uno', y luego '3' y '2'.

09:00.050 --> 09:05.910
Entonces, como puede ver, eliminamos "comer sano", "estudiar javascript" y "hacer ejercicio".

09:05.930 --> 09:12.270
Pero debido a que nuestro 'todos' lenth cambió, bueno, se detuvo a la mitad.

09:12.310 --> 09:16.080
Entonces, ¿de qué manera podemos solucionar ese problema?

09:17.630 --> 09:29.360
Bueno, podemos hacer variables 'todos. longitud 'es igual a' todos. longitud'.

09:29.650 --> 09:32.020
Entonces ahora esta variable es '5'.

09:32.140 --> 09:42.680
Entonces, si solo hago variable 'todos. lenth '- esto va a recordar, porque solo se ejecutará una vez, va

09:42.680 --> 09:43.580
a ...

09:43.730 --> 09:48.370
Esto se ejecutará, luego asignaremos '5' a 'todos. longitud'.

09:48.560 --> 09:51.370
Y luego esto se repetirá.

09:51.400 --> 09:59.940
Entonces, si guardo esto y actualizo, veamos 'todos'. ¡Mira eso! ¡Terminamos todos nuestros 'todos'!

10:00.070 --> 10:00.790
Muy genial.

10:01.430 --> 10:11.230
Bueno, déjame mostrarte otra opción, que es el ciclo "while". El ciclo 'while' va más o menos así.

10:15.250 --> 10:18.810
'while', - creemos una variable aquí. Variable 'counter'

10:21.390 --> 10:22.910
'counterOne'

10:23.090 --> 10:36.160
Vamos a decir eso, eso es '0'. Y vamos a decir: 'mientras counterOne es menor que 10'.

10:36.300 --> 10:39.810
En ese caso quiero 'consola. log

10:43.000 --> 10:50.590
'' counterOne '. Y luego quiero 'counterOne' plus, plus.

10:50.640 --> 10:53.010
Recuerde que estamos haciendo, estamos agregando.

10:53.430 --> 10:58.800
Así que cada vez estamos aumentando 'contador' en '1'. Veamos qué pasa aquí.

10:58.800 --> 11:09.330
Si guardo esto y actualizo: "0, 1, 2, 3, 4, 5, 6, 7, 8, 9" y luego se detiene, porque, tan pronto como sea '10', esto ya no

11:10.330 --> 11:11.500
es correcto .

11:11.500 --> 11:14.530
Entonces esta parte del bloque no se ejecuta.

11:17.820 --> 11:18.260
OKAY.

11:18.420 --> 11:29.200
Puedo hacer algo... tal vez... ¿al revés? Donde decimos que el 'contador' es '10' y esta vez

11:29.200 --> 11:30.180
queremos contar atrás.

11:30.520 --> 11:38.940
Entonces, mientras el contador es '10', continúe y, de lo contrario, pare. Y la forma en que hacemos eso, obviamente queremos

11:39.210 --> 11:39.780
restar.

11:39.780 --> 11:43.900
No queremos seguir '11' o '12', porque de lo contrario continuará para siempre.

11:44.070 --> 11:47.570
La forma en que lo hacemos es: menos, menos, que es exactamente lo contrario.

11:47.580 --> 11:49.190
Entonces resta '1'.

11:49.620 --> 11:50.810
Veamos qué pasa.

11:52.610 --> 11:56.410
'10, 9, 8, 7, 6, 5, 4, 3, 2, 1 '.

11:56.420 --> 11:57.830
Ahí tienes.

11:57.890 --> 12:05.300
Ahora, por curiosidad, qué sucederá si voy así, donde el número sigue aumentando de

12:05.330 --> 12:08.560
'10' a '11', hasta, bueno, infinito.

12:08.590 --> 12:08.890
¿Correcto?

12:08.900 --> 12:16.800
Simplemente seguirá subiendo y puede hacerlo en Google Chrome si lo desea.

12:16.880 --> 12:19.950
En realidad es bastante, muy entretenido.

12:19.970 --> 12:27.170
Lo que sucede es que simplemente continúa para siempre. Obtendrá una lista de todas estas cosas y se

12:27.260 --> 12:34.460
llama así en un 'bucle infinito'. Un 'bucle infinito' significa que prácticamente se va infinitamente. Excepto que no lo

12:34.460 --> 12:38.910
hace realmente, porque eventualmente Google Chrome se bloqueará.

12:38.990 --> 12:42.440
Dirá: "Oye, no puedo manejar toda esta información.

12:42.440 --> 12:45.630
Me estás volviendo loco. "y va a dejar de funcionar.

12:46.640 --> 12:47.040
OKAY.

12:47.120 --> 12:49.930
Entonces aprendimos el 'for loop'.

12:50.060 --> 12:52.700
Aprendimos el 'tiempo'. ¿Qué más tenemos?

12:52.700 --> 12:55.630
Tenemos el 'hacer'.

12:55.790 --> 13:07.470
Entonces, esto se llama el bucle 'do while' y es un poco diferente 'el tiempo'. Comenzamos con 'do'.

13:07.750 --> 13:19.070
Luego, entre llaves, y decimos 'contador' ... Llamemos a 'counterTwo' esta vez. Haré la variable 'counterTwo'

13:19.910 --> 13:25.860
igual a '10'. Y haga 'counterTwo', más, más.

13:25.930 --> 13:27.180
Entonces agregue 'counterTwo'.

13:27.640 --> 13:32.850
Y también 'consola. log (contador dos) '.

13:33.130 --> 13:41.440
Y queremos mover 'consola. ingrese 'en la parte superior, porque de esta manera comenzaré con' 10 ', luego aumentaré, ¡vaya!

13:41.490 --> 13:43.450
Esto debería ser restado.

13:43.530 --> 13:45.700
Entonces hacemos '10'.

13:45.790 --> 13:49.710
Es algo así como '10', luego se restará. Entonces, la próxima vez que venga por

13:49.710 --> 13:50.980
aquí, será '9'.

13:51.480 --> 13:55.650
Y luego hacemos 'while', y le damos una condición aquí.

13:55.650 --> 14:04.890
Por lo tanto, las condiciones serán 'contra dos', será mayor que '0'.

14:05.240 --> 14:05.520
OKAY.

14:05.530 --> 14:08.910
Entonces, veamos qué sucede aquí.

14:08.990 --> 14:13.960
Refresco: '10, 9, 8, 7, 6, 5, 4, 3, 2, 1 '.

14:14.310 --> 14:21.580
Hmmm, parece que acabamos de hacer lo mismo que el 'bucle while', ¿no?

14:21.580 --> 14:24.060
Así que déjame probar eso.

14:24.070 --> 14:27.240
Vamos a refrescarnos aquí.

14:27.470 --> 14:35.120
Y vemos que tenemos '10' a '1' para el ciclo while y '10' a '1' a través del ciclo 'do while'.

14:35.120 --> 14:37.490
Entonces, ¿cuál es la diferencia aquí?

14:37.760 --> 14:44.930
La diferencia es que con un bucle 'while' verificamos primero la condición, por lo que decimos: "¿Es counterOne mayor que

14:44.930 --> 14:45.500
'0'?

14:45.550 --> 14:53.960
OKAY. Entonces haz esto. "Frente al ciclo 'do while', que dice:" Primero haz las cosas y luego haz 'counterTwo'. "Permítanme

14:54.110 --> 14:57.500
demostrar ese punto.

14:57.570 --> 15:07.530
Si lo hacemos ... '10' aquí. Y '10'. Vamos a refrescarnos

15:07.750 --> 15:09.200
Solo obtengo '1'.

15:09.210 --> 15:11.430
Hmm ... Veamos algo aquí.

15:11.510 --> 15:24.330
Voy a decir que este es el ciclo 'while' y este es el ciclo 'do while'. Guarda y actualiza. Entonces parece que el 'do while'

15:24.330 --> 15:26.530
se ejecutó.

15:26.910 --> 15:32.520
Pero el ciclo 'while' nunca lo hizo, porque. Bueno, '10' es igual a '10'.

15:32.700 --> 15:40.770
Esto falla y el bucle no se ejecuta. En comparación con el bucle 'do while', eso lo hace primero y luego

15:40.770 --> 15:42.670
verifica la condición, si deberían hacerlo.

15:42.810 --> 15:51.180
Entonces esa es la diferencia entre estos dos. Pero, para ser sincero, la mayoría de las

15:51.180 --> 16:00.530
veces usará un bucle 'for'. Y el bucle 'for' es a lo que te acostumbrarás. Pero, en realidad, hay una mejor

16:00.530 --> 16:02.530
manera de hacerlo.

16:02.720 --> 16:08.990
Si nos fijamos en 'SectionOutline', vemos que tengo uno último, que es 'forEach' y dice "nuevo

16:08.990 --> 16:10.590
en ECMAScript 5".

16:10.880 --> 16:19.070
Entonces, como recuerdan, JavaScript está en constante evolución y ECMAScript 5 era un nuevo estándar

16:19.230 --> 16:25.170
que agregaba el método 'forEach'. Entonces, ¿cuál es el método 'forEach'?

16:25.180 --> 16:29.190
Bueno, te voy a mostrar la diferencia entre un bucle 'for' y un 'forEach'.

16:29.190 --> 16:30.920
Ambos hacen la misma cosa.

16:31.110 --> 16:34.620
Pero dime cuál se ve mejor.

16:34.710 --> 16:42.490
Entonces, bueno aquí diremos 'consola. log (i) 'Así que solo estamos

16:43.640 --> 16:54.010
registrando la' i '. Y con un bucle 'forEach' puedo hacer 'todos. para cada 'función' i ','

16:55.110 --> 16:58.260
consola. log (i) '.

16:58.560 --> 17:04.270
Mi aspecto es un poco confuso, pero vamos a probarlo y veamos qué sucede.

17:04.880 --> 17:16.160
Parece que la línea '10' se imprime en '0, 1, 2, 3, 4' y la línea '14' imprime "espacio despejado, cepillarse los dientes, hacer

17:16.170 --> 17:17.950
ejercicio, estudiar javascript, comer

17:17.950 --> 17:19.090
sano".

17:19.090 --> 17:20.480
¿Qué estamos haciendo aquí?

17:20.480 --> 17:22.220
Bueno, el

17:22.430 --> 17:24.190
'forEach' toma una matriz.

17:24.190 --> 17:31.530
En este caso, el 'todos', y pide una discusión, es decir 'dime qué hacer con él'.

17:33.030 --> 17:41.820
Entonces, la acción que queremos realizar en los 'todos' se puede representar en una función.

17:41.870 --> 17:52.330
Entonces digo 'función', y esta función recibe el argumento de 'i', que es que cada elemento individual en el

17:52.330 --> 17:53.170
'todos'.

17:53.530 --> 18:02.750
Entonces, podría decir 'todo' aquí y 'todo'. Y actualiza y seguirá siendo exactamente lo mismo.

18:02.770 --> 18:12.030
Entonces, ves aquí que no necesariamente estamos accediendo al índice como estamos con este, porque aquí para obtener los

18:12.030 --> 18:21.600
'todos' tuve que hacer, 'todos [i]'. Si me refresco. OKAY.

18:21.710 --> 18:24.440
En ese caso, ahora todo es lo mismo.

18:24.910 --> 18:29.190
OK, pero ¿cómo accedo al índice dentro de 'forEach'?

18:29.570 --> 18:38.860
Bueno, el segundo parámetro. Y el segundo argumento que recibe es la 'i', el índice.

18:38.870 --> 18:52.260
Entonces, ahora si hago 'i' y actualizo: '0, 1, 2, 3, 4'. Entonces, es lo mismo que está haciendo esto en el ciclo 'for'. Y refresco

18:52.980 --> 19:03.710
y miro eso. Ahora, mirando estos 2, ¿cuál te dice más sobre lo que hace?

19:04.850 --> 19:06.670
Este o este?

19:06.710 --> 19:17.490
Leamos en inglés: 'todos. forEach 'ejecuta una función, esa' consola registra 'ese' todo 'y el'

19:18.520 --> 19:19.720
índice 'Versus

19:20.130 --> 19:22.520
Bueno, francamente, esto parece confuso.

19:23.460 --> 19:28.860
Entonces, 'forEach' es un método realmente genial que han agregado al lenguaje, que realmente simplifica

19:28.860 --> 19:29.700
las cosas.

19:29.700 --> 19:31.930
La mayoría de las personas

19:31.920 --> 19:37.610
pueden confundirse con esta parte de la función. Pero solo quiero mostrarle cuán poderoso es 'forEach' que realmente podemos hacer esto.

19:37.650 --> 19:45.760
Voy a eliminar la función y la voy a llamar 'logTodos'.

19:46.010 --> 19:59.390
Y ahora todo lo que tengo que hacer es tener una función y llamarla 'logTodos'.

19:59.570 --> 20:02.340
Y ahora voy a comentar esto.

20:02.630 --> 20:09.330
Hará exactamente lo mismo, pero ahora puedo usar 'logTodos' en otros lugares.

20:10.260 --> 20:23.300
Entonces, ahora puedo hacer, digamos, tengo otra lista, que tal vez tenga signos de exclamación, como hicimos en la primera.

20:26.340 --> 20:28.760
'todosImportante'.

20:30.780 --> 20:47.700
Entonces, ahora puedo hacer 'todosImportant. forEach 'y use la misma función' logTodos '. Guardo y actualizo. ¡Y mira eso!

20:47.700 --> 20:47.700
Tenemos estos para usar también.

20:47.740 --> 20:51.280
Entonces puedes ver que es muy extensible.

20:51.300 --> 20:56.830
Ahora, la única advertencia que quiero mostrarles con 'forEach' es que es un nuevo estándar.

20:56.910 --> 21:01.590
Como hacemos con todos los nuevos estándares, debemos verificar que funcionen en todos los navegadores.

21:01.590 --> 21:08.070
Entonces, si recuerdas, tuvimos 'caniuse. com ', que usamos para esto. Y lo usamos en

21:08.100 --> 21:15.390
CSS para asegurarnos de que nuestras funciones CSS3, como 'boxshadow' y 'transitions' funcionen en todos los navegadores.

21:15.420 --> 21:23.410
Entonces hagamos eso. Hagamos 'foreach' y verá aquí 'ECMAScript5' - 'foreach'.

21:23.600 --> 21:27.500
Parece que, bueno, ¡soporte completo!

21:27.770 --> 21:29.160
Todo se ve bien.

21:29.420 --> 21:33.840
Solo tenemos Opera Mini, que tiene soporte parcial.

21:33.980 --> 21:41.460
Entonces, se ve bastante bien. A menos que estemos realmente preocupados por Opera Mini. Podemos usar 'foreach' en el navegador.

21:41.530 --> 21:54.460
Y solo para probar si abrimos nuestra consola, bueno, definitivamente podemos ver que una matriz tiene 'forEach'.

21:54.540 --> 21:56.920
Entonces ahí lo tienes.

21:57.060 --> 22:07.630
Teníamos el bucle 'for', el bucle 'while', el bucle 'do while' y finalmente 'forEach'. Y el próximo video lo ampliaremos en nuestro ejemplo de

22:07.630 --> 22:14.320
Facebook y tendremos múltiples usuarios. Entonces, podemos recorrer la base de datos de múltiples

22:14.410 --> 22:19.830
usuarios y ver si el 'nombre de usuario' y la 'contraseña' coinciden con alguno de ellos.

22:20.080 --> 22:21.640
Nos vemos en la próxima. Adiós
