WEBVTT

00:01.000 --> 00:06.710
¡Dar una buena acogida! Las funciones son la parte más difícil de JavaScript.

00:07.140 --> 00:11.380
Y tomará algún tiempo obtenerlo por completo. Sin embargo, en este

00:11.480 --> 00:13.810
video vamos a intentar hacer eso.

00:13.880 --> 00:18.020
Vamos a aprender las funciones de JavaScript.

00:18.030 --> 00:21.710
Entonces, comencemos con "¿Qué son las funciones? "Bueno, son

00:22.640 --> 00:28.040
código, que realizan acciones. Sin funciones, JavaScript realmente

00:28.040 --> 00:30.730
no haría nada.

00:30.740 --> 00:40.340
Lo bueno es que las funciones pueden realizar una acción o múltiples acciones. Pero volveremos a eso. Primero, hablemos sobre cómo ya

00:40.390 --> 00:45.560
conoce algunas funciones de JavaScript sin siquiera darse cuenta.

00:45.640 --> 00:47.250
Los has visto antes.

00:47.300 --> 00:53.160
'alerta': esa es una función. 'prompt': esa es una

00:56.130 --> 00:57.970
función.

00:58.150 --> 00:59.350
Ya has visto esto antes.

01:00.240 --> 01:07.500
Entonces, JavaScript nos proporciona algunas funciones, que son realmente muy útiles, para que todos los que escriben

01:07.500 --> 01:12.380
JavaScript puedan usarlas sin tener que escribirlas una y otra vez.

01:12.430 --> 01:15.700
Entonces, con las funciones tenemos 2 opciones.

01:15.830 --> 01:20.990
Uno: está utilizando las funciones de JavaScript existentes, como 'alerta' y 'aviso'.

01:21.980 --> 01:25.880
Y dos: podemos crear el nuestro.

01:25.880 --> 01:32.900
Entonces, antes de entrar en cómo creamos nuestras propias funciones y qué es tan útil sobre ellas, es posible que haya

01:32.900 --> 01:37.920
notado, notado una cosa: estos corchetes, que están uno al lado del otro con funciones.

01:37.940 --> 01:45.800
¿Qué quieren decir? Bueno, eso en JavaScript significa ejecutar la función.

01:46.840 --> 01:52.750
Entonces, veamos si sucede, cuando solo escribo 'alerta' y presiono 'enter'.

01:52.810 --> 02:01.540
Recibo 'f alert ()' y algunas cosas raras. Hmmm, 'f' aquí representa la función y puede ver cuando paso el mouse sobre

02:01.540 --> 02:01.990
ella.

02:01.990 --> 02:04.450
Dice 'alerta de función ()'.

02:04.450 --> 02:08.060
Esto es lo que significa ejecutar una

02:08.080 --> 02:08.960
función:

02:09.010 --> 02:13.090
para ejecutar 'alert ()' lo ejecuto llamándolo así ['alert

02:15.010 --> 02:23.330
()'] Entonces, estos corchetes significan 'llamar a una función', por lo que puedo llamar a una función.

02:23.490 --> 02:28.580
Y también notó que dentro de 'alerta' puedo agregar

02:29.050 --> 02:33.800
cosas como "¡Hola! "Todos estos se llaman 'argumentos' y

02:33.910 --> 02:42.190
sé que te estoy lanzando un montón de jerga, un montón de palabras, pero estas son solo cosas que escucharás una

02:42.190 --> 02:44.670
y otra vez, cuando eres un

02:44.710 --> 02:51.490
desarrollador, y se quedarán con usted, no será la primera vez, pero, como dije, solo trate de

02:51.700 --> 02:53.990
llegar paso a paso.

02:54.010 --> 02:58.630
Entonces, 'argumentos' son lo que se da a las funciones.

02:58.840 --> 03:03.880
Por ejemplo, cuando lo hicimos, en nuestro ejemplo aquí.

03:03.970 --> 03:13.190
"Hellooooo" y la 'consola. log 'fue un' argumento '. Y lo interesante es que puede tener múltiples argumentos: por

03:13.200 --> 03:19.820
ejemplo, si eliminé esto y solo lo tengo, solo tengamos 'consola. iniciar sesión por ahora.

03:20.190 --> 03:24.690
Puedo hacer "¿Cómo estás?".

03:24.700 --> 03:27.950
Guardo y actualizo y consigo.

03:27.950 --> 03:29.150
"Hola como estás".

03:29.210 --> 03:37.800
Mira, puedo tener múltiples argumentos, pero solo agrego una coma. Pero de nuevo, eso depende de la función.

03:37.810 --> 03:47.870
Ahora, nuevamente antes de comenzar a crear el nuestro, repasemos. 'alert' es una función, 'alert' con los corchetes,

03:47.960 --> 03:56.220
llamo a la función 'alert' y llamo a la función 'alert' con el

03:56.400 --> 03:59.910
argumento 'Hola'. 'alertar' necesita ser llamado, de

04:00.090 --> 04:02.460
lo contrario es solo estar sentado allí.

04:03.900 --> 04:08.880
Ahora, la gran razón para usar la función es que puede llamarlas tantas veces como desee.

04:08.970 --> 04:19.080
Piense en 'alerta', imagine tener que decir cada vez "Hey, computadora, cree esta ventana 'emergente' e imprima cualquier argumento que

04:19.080 --> 04:21.090
ponga" cada vez.

04:21.270 --> 04:27.540
Quiero decir que realmente apestaría. ¿No es agradable que podamos llamar "alerta" y que aparezca una ventana emergente

04:27.540 --> 04:29.770
para nosotros y que todo esté hecho para usted?

04:29.780 --> 04:32.010
Bueno, eso es más o menos lo que hacen las funciones.

04:32.010 --> 04:39.810
Hacen la vida más fácil al tener acciones agrupadas, por lo que solo las escribe una vez y

04:39.810 --> 04:41.450
luego puede llamarlas.

04:41.480 --> 04:43.480
OKAY. Así que vamos a la parte divertida.

04:43.490 --> 04:54.970
Creemos nuestras propias funciones. Entonces, si volvemos a nuestro documento aquí, veamos aquí. Tenemos 2 formas de

04:54.970 --> 05:00.180
crear funciones y te mostraré la primera.

05:00.340 --> 05:01.980
En realidad, te voy a mostrar este primero.

05:02.200 --> 05:08.970
Entonces, creemos nuestra propia función, usando el primer método, que es 'declaración de función'.

05:09.310 --> 05:17.780
Y vamos a usar nuestro 'script. js 'aquí, que está vinculado a nuestro HTML, que hicimos en el video anterior.

05:17.930 --> 05:23.840
Entonces, aquí puedo decir 'function sayHello ()' es

05:27.960 --> 05:30.510
'consola. log ("Hola") '.

05:35.380 --> 05:38.700
Nuevamente, la sintaxis es un poco diferente, pero solo debes recordarla.

05:38.800 --> 05:41.850
Estoy diciendo 'función': se llamará 'sayHello'.

05:42.070 --> 05:49.150
Tenemos esos soportes, que nos son muy familiares. Y luego 'consola. log ("Hola"); '. A ver,

05:49.150 --> 05:53.480
qué pasa cuando guardo. Yo refresco

05:53.830 --> 05:54.860
Hmmm, no pasa nada.

05:55.980 --> 05:56.920
¿Porqué es eso?

05:57.240 --> 06:00.530
Bueno, declaramos esta función.

06:00.540 --> 06:09.430
Pero recuerde, ¿qué hicimos con 'alerta'? Bueno, existe, pero no lo hemos ejecutado.

06:09.480 --> 06:16.170
Tenemos que llamar a la función, así que tenemos que decir 'hola', así. Ahora cuando me refresco.

06:16.740 --> 06:19.430
Me sale "Hola".

06:19.570 --> 06:25.610
Así que piensa en esto con la variable. Cuando digo 'var a es igual a 5',

06:25.720 --> 06:29.260
eso no va a hacer nada, hasta que realmente obtengamos 'a'.

06:29.560 --> 06:34.120
Y ahí es cuando imprime '5'.

06:34.130 --> 06:36.500
OKAY. Entonces esa es una forma.

06:36.510 --> 06:39.060
¿Cuál es la segunda forma de crear una función?

06:39.270 --> 06:45.150
La segunda forma se llama 'expresión de función'.

06:45.340 --> 06:47.900
Y esto va así.

06:48.130 --> 07:01.430
Puedo decir 'var sayBye = function ()' 'consola. log ("Bye"); '.

07:02.300 --> 07:05.620
Nuevamente guardaré esto y actualizaré.

07:05.810 --> 07:11.660
Y nuevamente solo recibimos 'Hola' porque, bueno, nuevamente tenemos que llamar a esa función.

07:11.720 --> 07:20.560
Entonces, digo 'sayBye', ejecútalo y actualiza. "Hola y adios". Ahora, una cosa que puede haber

07:20.640 --> 07:30.040
notado aquí es que estamos asignando esta función a la variable 'sayBye', pero ¿cuál es el nombre

07:30.940 --> 07:33.240
de la función?

07:33.250 --> 07:40.520
Quiero decir, aquí claramente el nombre de la función es 'sayHello', pero aquí estamos, solo estamos asignando a la variable.

07:40.520 --> 07:48.230
Quiero decir, técnicamente la función no tiene un nombre y esto se llama una 'función anónima'.

07:48.360 --> 07:54.480
Hemos asignado esta función a 'sayBye', por lo que podemos hacer referencia a ella a través de 'sayBye', pero de lo contrario

07:54.480 --> 07:56.350
no podemos acceder a esta función.

07:56.640 --> 07:59.880
Bueno, verás por qué eso es importante

07:59.940 --> 08:01.500
en videos posteriores.

08:01.500 --> 08:06.770
Pero técnicamente podría hacer esto: y llamar a esta función 'byebye'.

08:13.110 --> 08:13.760
OKAY.

08:14.050 --> 08:20.560
Entonces, ahora que sabemos cómo crear funciones, ¿por qué necesitamos estos argumentos?

08:20.830 --> 08:23.740
Recuerde, ¿por qué necesitamos cosas dentro de los corchetes?

08:23.740 --> 08:26.660
Quiero decir, estos parecen lo suficientemente útiles, ¿verdad?

08:27.630 --> 08:40.090
Bueno, intentemos algo. 'sing', hagamos una función 'sing' y esta 'sing' tendrá, tendrá 'consola. log 'y diré

08:40.120 --> 08:46.220
"AHHHHHHHHHHHH". Ese, ese soy yo, cantando.

08:46.230 --> 08:51.550
Y también tiene 'consola. log ("TEEEEEEEEE") '.

08:52.030 --> 09:00.390
Así canto yo. Ahora, si guardo esto y actualizo, asegúrese de que todavía canta. ¡Oh, tengo que llamarlo!

09:03.440 --> 09:04.920
Vamos a refrescarnos

09:05.040 --> 09:07.410
Hermosa canción: AHHHHHHHHHHHH, TEEEEEEEEE.

09:07.680 --> 09:18.530
Pero ahora, cada vez que quiero cambiar a una canción diferente, tal vez quería decir 'laaa deeee daaa'.

09:18.660 --> 09:31.840
Bueno, tengo que eliminar esto y cambiarlo a 'laaa deeee daaa' o tengo

09:32.260 --> 09:33.640
que

09:36.310 --> 09:50.750
crear uno nuevo, llamado consola 'sing2'. log 'y puedes ver aquí, lo molesto que es, que estoy escribiendo lo mismo una y otra vez y

09:51.020 --> 09:52.710
simplemente cambiando estas cosas.

09:52.910 --> 10:00.090
Y ahora tengo que ejecutar 'sing2'. Y refresco, y ¡uf, eso fue agotador! OKAY.

10:00.460 --> 10:07.600
Hice todo esto y ahora imagino, si tuviéramos miles de canciones, que queremos cantar; somos 'Spotify' y queremos mostrar

10:07.600 --> 10:10.330
todas las letras de las canciones.

10:10.330 --> 10:13.210
Quiero decir que es bastante, bastante cansado, ¿verdad?

10:13.210 --> 10:18.680
Y una de las reglas con los desarrolladores es esta idea de "DRY: no se repita".

10:18.730 --> 10:21.790
Idealmente, desea que las cosas sean lo más eficientes posible.

10:22.000 --> 10:34.820
Y una cosa que puede hacer es agregar argumentos. Así que puedo agregar algo como 'canción' y ahora, déjenme eliminar esto

10:34.820 --> 10:35.970
por ahora.

10:37.720 --> 10:46.670
En la 'consola. log 'Solo puedo decir' canción '.

10:46.820 --> 11:01.190
Entonces, cada vez que quiero cambiar la canción, puedo decir "Laaa deee daaa". 'sing ("helllloooooo") Luego "sing (" backstreets

11:02.140 --> 11:08.990
back bien ") Ahora guardo y

11:11.770 --> 11:14.470
actualizo.

11:14.500 --> 11:23.060
¡Y mira eso! Usted ve cuántas líneas de código acabamos de guardar y cómo ahora puedo usar 'cantar' en

11:23.330 --> 11:26.600
cualquier momento que quiera, y puedo personalizarlo a lo que quiero.

11:26.600 --> 11:28.050
Algo así como 'alerta'.

11:28.130 --> 11:30.570
Eso es lo que hacen los argumentos.

11:30.830 --> 11:37.790
Los argumentos nos permiten no repetirnos y hacer que nuestras funciones sean más extensibles.

11:37.790 --> 11:40.530
Se pueden personalizar.

11:40.590 --> 11:44.860
Hagamos otra cosa para aprender algo divertido sobre las funciones.

11:44.970 --> 11:57.450
Vamos a eliminar esto e intentar 'function multiply ()'. Y le daremos 'a' y 'b', por lo que aceptará dos

11:57.450 --> 12:01.330
argumentos y haremos 'a * b'.

12:01.710 --> 12:15.320
Y ahora dentro de 'a * b' diremos 'multiplicar', y llamaremos 'multiplicar (5, 10)'. Guarda y actualiza.

12:15.460 --> 12:18.890
Y ahora deberíamos tener 'multiplicar' disponible para nosotros.

12:18.910 --> 12:24.570
Puedes ver aquí 'multiplicar (a, b)' eso es 'b' exactamente lo que escribimos.

12:24.600 --> 12:27.370
Bien, ¿qué pasa si

12:29.630 --> 12:32.020
'multiplico' (5, 10)?

12:32.480 --> 12:33.410
¿Qué crees que obtendré?

12:33.560 --> 12:33.910
¡Veamos!

12:37.980 --> 12:39.770
Hmmm, eso es realmente raro.

12:39.780 --> 12:42.340
Intentemos eso de nuevo con un número diferente.

12:42.370 --> 12:44.180
Todavía 'indefinido'.

12:44.380 --> 12:47.530
¿Porqué es eso? Bueno, esto se llama depuración.

12:47.530 --> 12:50.680
Veamos si podemos descubrir qué está pasando aquí.

12:50.680 --> 12:53.580
Voy a hacer una 'consola. iniciar sesión aquí.

12:54.490 --> 12:59.050
Y voy a cerrar sesión 'a' y 'b' para asegurarme de que esta función se esté ejecutando realmente.

12:59.210 --> 13:11.600
Así que voy a guardar y actualizar. OKAY. 'consola. log ',' a 'y' b 'y acabo de ejecutar la función nuevamente.

13:11.660 --> 13:17.610
'consola. Iniciar sesión'. OKAY. Parece que se está ejecutando, pero luego me estoy "indefiniendo" por aquí.

13:17.770 --> 13:23.440
Bueno, puedo mostrarte esto en un diagrama.

13:23.440 --> 13:27.270
Entonces, una función es una 'entrada'.

13:27.330 --> 13:32.270
Le damos una especie de 'entrada', tal vez a veces está vacía, así que eso es lo que está entre corchetes.

13:32.460 --> 13:34.900
En nuestro caso es 'a' y 'b'.

13:35.010 --> 13:42.790
Entonces esos son números, entonces '5' y '10'. Y luego la función hace lo que le decimos que haga.

13:42.790 --> 13:51.550
En nuestro caso fue 'multiplicar 5 por 10'. Y luego obtenemos una 'salida', pero no estamos obteniendo esa 'salida'.

13:51.550 --> 13:52.280
¿Porqué es eso?

13:52.350 --> 13:56.270
Bueno, porque una función funciona así.

13:56.650 --> 14:01.450
Y no te preocupes, acabo de agregar un montón de flechas, pero revisaré todo y te lo explicaré.

14:01.450 --> 14:03.400
La 'entrada' está recibiendo '5' y '10'.

14:03.400 --> 14:11.950
La función hace algunas cosas, y hasta ahora solo hemos hecho 'consola. log ', y el camino' consola. log 'funciona es, la

14:11.950 --> 14:18.870
función dice:' Simplemente conéctelo a la consola en el navegador '.

14:19.100 --> 14:24.400
Pero nunca lo hemos hecho donde hemos devuelto un 'valor'.

14:24.470 --> 14:25.820
Déjame mostrarte lo que quiero decir.

14:26.600 --> 14:29.300
Cuando no devolvemos algo, nos 'indefinimos'.

14:29.330 --> 14:32.240
Cuando devolvemos algo, obtenemos el 'valor'.

14:32.240 --> 14:37.090
Así que veamos aquí si podemos explicar esto.

14:37.110 --> 14:47.410
Entonces, aquí cada vez que digo 'multiplicar (10, 5)', y voy a eliminar la 'consola. log 'solo para que no nos confunda,

14:47.410 --> 14:50.400
guarde y actualice ...

14:50.770 --> 14:51.820
Me "indefinido".

14:52.000 --> 14:56.710
Eso es porque, como puede ver en este diagrama, no devolvemos nada.

14:56.710 --> 15:04.330
Entonces, en JavaScript, la forma en que devuelve las cosas es: debe poner 'return' dentro de una función.

15:04.690 --> 15:12.400
Entonces, ahora va a 'devolver a * b' y verá que es una palabra especial en JavaScript resaltada

15:12.400 --> 15:13.740
en rojo.

15:14.020 --> 15:20.310
Bueno, ahora está diciendo 'Sí, vamos a devolver el valor'.

15:20.370 --> 15:28.320
Entonces, incluso si agregamos 'consola. Iniciar sesión'. Lo harás 'consola. iniciar sesión 'y luego preguntar "Hola, ¿tengo un' retorno '? ".

15:28.470 --> 15:31.160
Si lo hago, le enviaré un valor.

15:32.170 --> 15:33.520
Con suerte, eso no es demasiado confuso.

15:33.520 --> 15:35.170
A ver si funciona.

15:35.930 --> 15:37.980
Voy a guardar y actualizar.

15:38.240 --> 15:47.700
Y ahora si hago 'multiplicar (5, 10)', obtengo '50'.

15:47.840 --> 15:56.860
¡Hurra! Conseguimos que nuestra función funcionara y ese es un concepto clave muy importante,

15:56.860 --> 16:01.010
que debemos recordar es que debemos devolver algo de una función.

16:01.030 --> 16:02.870
Quiero decir que no tenemos que hacerlo.

16:02.980 --> 16:07.990
Pero lo ideal es que lo hagamos, por lo que no obtenemos estos casos, donde simplemente tenemos "indefinido" y no sabemos qué

16:07.990 --> 16:08.680
hace la función.

16:08.680 --> 16:14.830
Es algo así como una 'caja negra', que hace algo y podríamos obtener una 'consola'. log ', o no, pero no sabemos lo

16:14.830 --> 16:16.410
que sucede dentro.

16:16.410 --> 16:22.620
Es bueno tener un 'retorno' para asegurarse de que la función actúa de la manera que esperamos.

16:22.650 --> 16:24.540
Ok, ¿y si hacemos algo como esto?

16:24.540 --> 16:33.550
¿Qué sucede si 'devuelvo a' y olvido un punto y coma aquí, y 'devuelvo b'? ¿Qué piensas tú que sucederá? Vamos a

16:33.550 --> 16:37.930
actualizar y ejecutar esto.

16:37.960 --> 16:38.540
OKAY.

16:38.830 --> 16:41.870
¿Qué sucede si cambio el orden y pongo 'a' primero?

16:41.960 --> 16:43.080
Intentemos eso de nuevo.

16:44.960 --> 16:54.550
Obtengo '5' y 'return' es la forma final de finalizar una función si eso tiene sentido. Entonces, tan pronto como diga 'regresar' en una

16:54.550 --> 16:57.770
función, el programa se cierra.

16:57.820 --> 17:04.240
Entonces, para pasar por esto, digo 'multiplicar (5, 10)'. Va a la función,

17:04.240 --> 17:10.690
dice: "Sí, tengo la función 'multiplicar'. Voy a poner 'a' como '5' y '10' como 'b' ".

17:10.840 --> 17:20.540
Y ahora entra en la función y dice: 'return 5', que es 'a'. Entonces devuelve eso y sale de la función.

17:20.950 --> 17:23.290
Así que ahora estas dos líneas no se están ejecutando en absoluto.

17:23.290 --> 17:30.090
El programa simplemente lee esto, va hasta aquí, lee la primera línea de la función y luego sale.

17:30.100 --> 17:37.630
Entonces, en una función, debe tener una declaración de 'retorno', ¿o es así?

17:38.500 --> 17:41.910
Veamos un caso en el que eso podría no ser correcto.

17:41.920 --> 17:43.750
Agreguemos una declaración 'if' a esto.

17:44.080 --> 17:53.330
Digamos que queremos 'multiplicar', pero también somos un poco flojos y no queremos ser demasiado duros con la

17:53.330 --> 17:54.040
computadora.

17:54.140 --> 18:05.420
Entonces, digamos que queremos decir eso, 'if': recordamos la declaración 'if'. "si 'a' es mayor que '10'" o "si 'b' es

18:05.420 --> 18:07.430
mayor que '10'".

18:10.170 --> 18:18.430
Podemos decir 'return' eso es demasiado difícil ';'.

18:18.710 --> 18:19.290
De

18:25.850 --> 18:33.380
lo contrario [else] devolveremos 'a * b'. Veamos que pasa aquí.

18:34.890 --> 18:39.050
Voy a guardar y actualizar. Hagamos 'multiplicar (5,4)'.

18:43.400 --> 18:46.220
Obtengo '20'.

18:46.270 --> 18:49.680
¿Qué pasa si hacemos '5' y '40'? Obtengo "eso es

18:49.690 --> 19:01.180
demasiado difícil", porque ahora está leyendo la función '5' y '10', y dice: "Hmmm, 'b', que es '40' es mayor

19:01.180 --> 19:02.440
que '10'".

19:02.470 --> 19:06.560
Entonces, de acuerdo con la declaración 'if', voy a decir "eso es demasiado difícil".

19:06.670 --> 19:19.480
Y debido a que un 'retorno' sale de la función, nunca llega a esto, incluso si hago 'devolver a * b', nunca llegarás allí, porque el

19:19.480 --> 19:24.490
'retorno' sale de la función. Solo para verificar,

19:24.490 --> 19:28.960
hagamos eso: hagamos '5 * 40'.

19:28.970 --> 19:34.750
Y nunca llega a ninguna de estas líneas, porque tan pronto como ve un 'retorno', sale de la función.

19:35.790 --> 19:37.320
Sé que es mucho

19:37.320 --> 19:41.980
Y veremos por qué estas cosas son importantes en los próximos videos.

19:42.210 --> 19:50.540
Pero también quería mostrarte que puedes tener funciones internas. Entonces, en JavaScript, las funciones son 'variables'.

19:50.880 --> 19:54.120
Y lo que eso significa es que pudimos asignar

19:56.880 --> 19:59.990
funciones como esta. ¿Correcto?

20:00.200 --> 20:02.960
Y si hicimos algo como esto, bueno,

20:03.080 --> 20:09.640
podemos llamar 'a' de la misma manera que lo hicimos y simplemente asignamos la función como una variable.

20:09.680 --> 20:15.030
Entonces técnicamente podríamos hacer algo como esto.

20:15.050 --> 20:22.830
Así que tengamos 'multiplicar': volvamos a la forma en que lo teníamos. Dejaremos 'multiplicar' como está en la forma

20:22.830 --> 20:23.580
simple.

20:27.330 --> 20:29.640
Y

20:32.140 --> 20:38.190
en realidad podemos decir 'alerta (multiplicar)'.

20:38.650 --> 20:43.900
Y luego aquí haremos '3' y '4'. Y sé que son muchos paréntesis.

20:43.900 --> 20:45.620
No te preocupes, lo veremos.

20:45.760 --> 20:49.490
Pero, guardemos esto y refresquémonos y veamos qué sucede.

20:49.570 --> 20:58.150
Obtengo '12'. Porque lo que está sucediendo es: estamos comenzando con la función interna y estamos diciendo: "¡Oye, queremos

20:58.150 --> 20:59.330
alertar algo! ".

20:59.470 --> 21:00.630
"¿Qué quieres alertar? ""

21:00.640 --> 21:03.610
Bueno, queremos 'multiplicar' "" "Queremos llamar a esta función

21:03.610 --> 21:06.330
y darle 'a' it '3' y '4'".

21:06.400 --> 21:14.560
Entonces va a 'multiplicar' y dice: "Sí, asignaremos 'a' y 'b' a '3' y '4', y quiero devolver 'a' y 'b'.

21:14.560 --> 21:24.010
Así que ahora 'multiplicar' cambia a '12' y luego 'alerta'.

21:24.020 --> 21:33.580
Entonces, ves que ahora, en lugar de tener algo como 'total', 'multiplicar (4,5)' y luego poner

21:33.590 --> 21:37.420
'total' aquí, podemos asignar 'multiplicar' aquí.

21:40.370 --> 21:41.620
¡Uf! eso fue, eso fue mucho!

21:41.640 --> 21:44.850
Pero quiero mostrarle que hemos abordado, creo, el tema

21:44.880 --> 21:51.000
más difícil en JavaScript, que son las funciones. Y también has cubierto el 'retorno', que

21:51.000 --> 21:53.040
es muy, muy bueno.

21:53.050 --> 21:59.140
La otra cosa que quiero mostrarles es que mucha gente se confunde con la terminología y no creo

21:59.260 --> 22:02.340
que sea tan importante, pero solo quiero aclararlo.

22:02.390 --> 22:11.370
Existe el concepto de 'parámetros' y 'argumentos'.

22:11.400 --> 22:18.520
Ahora los 'parámetros' y los 'argumentos' son muy similares pero ligeramente diferentes.

22:18.520 --> 22:22.420
Entonces 'argumentos' como hemos dicho, son '4' y '5'.

22:22.480 --> 22:27.640
Entonces las funciones pueden tener 'argumentos' y se llaman con 'argumentos'.

22:28.060 --> 22:31.330
Los 'parámetros' son lo que son 'a' y 'b'.

22:31.330 --> 22:36.290
Entonces 'multiplicar' tiene dos 'parámetros' de 'a' y 'b'.

22:36.420 --> 22:38.210
Sé que eso es un poco confuso.

22:38.210 --> 22:40.010
Puedes leerlo un poco más.

22:40.010 --> 22:46.860
No creo que sea importante saber realmente la diferencia, pero solo cuando estés leyendo artículos o

22:46.860 --> 22:52.550
aprendiendo, tal vez a través de YouTube, escucharás estas palabras casi indistintamente.

22:52.590 --> 22:56.710
Más o menos significan lo mismo, solo una pequeña diferencia en ellos.

22:58.460 --> 23:00.290
¡Todo bien!

23:00.910 --> 23:03.690
¡Lo sé, sé que te he lanzado mucha terminología!

23:03.730 --> 23:10.780
Pero después de repetirlo varias veces tendrá sentido, así que mantente fuerte. Pero eso es todo por funciones.

23:11.080 --> 23:13.580
Es hora de que pruebes algunos ejercicios.

23:13.600 --> 23:15.420
Vuelve a mirar este video si es necesario.

23:15.430 --> 23:21.370
Realmente desea asegurarse de comprender las funciones, ya que será el núcleo de JavaScript.

23:21.370 --> 23:28.360
Solo recuerde, lo que estamos haciendo con las funciones es que estamos creando nuevas palabras en

23:28.360 --> 23:34.510
el lenguaje, en el lenguaje JavaScript. Por lo tanto, podemos crear 'variables' o podemos crear 'funciones' para agregar vocabulario al

23:34.750 --> 23:37.370
lenguaje y hasta ahora es todo lo que hemos estado haciendo.

23:37.390 --> 23:44.950
Obtuvimos este JavaScript que tenía algunas palabras, que podemos usar, y hemos agregado otras nuevas como 'multiplicar' y

23:45.370 --> 23:48.760
'total' para que sea más útil para nosotros.

23:49.000 --> 23:51.020
Y eso es lo que es la programación.

23:51.210 --> 23:53.110
Nos vemos en la próxima. Adiós
