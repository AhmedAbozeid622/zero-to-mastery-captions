WEBVTT 00:01.650 -&gt; 00:10.830 Agreguemos una herramienta más a nuestro conocimiento en React andReact 16, que era una nueva versión de reaccionar, 00:11.010 -&gt; 00:18.780 introdujo algo llamado &quot;límites de error&quot; y resolvió el problema que tenía Reaccionar anteriormente, que era 00:19.110 -&gt; 00:25.110 si había algún tipo de error dentro de un componente por alguna razón no había manera graciosa 00:25.110 -&gt; 00:32.370 de manejar eso. en el siguiente render obtendrá todos estos errores crípticos y las cosas simplemente no funcionarían 00:32.370 -&gt; 00:34.710 muy bien. Para un usuario 00:35.130 -&gt; 00:42.900 Desea asegurarse de que incluso si se rompe una parte del árbol de componentes, aún puede tener una experiencia de IU agradable, 00:42.910 -&gt; 00:48.780 tal vez una pieza de texto que dice que algo salió mal, pero no tiene el salto de la aplicación. 00:48.780 -&gt; 00:54.520 Por lo tanto, en este video vamos a hablar sobre límites de error y aplicarlo a nuestra aplicación RoboFriends. 00:54.600 -&gt; 00:55.500 Comencemos. 00:57.140 -&gt; 01:04.370 Lo primero que quiero hacer es incluir en el componente un nuevo archivo y llamaremos a este componente 01:04.760 -&gt; 01:13.330 ErrorBoundry.js y solo un recordatorio de que necesitas Reacción 16 o superior para que esto funcione. 01:13.430 -&gt; 01:21.930 Asegúrese de que en su archivo package.json tenga la versión correcta de React. Ahora aquí podemos 01:22.110 -&gt; 01:25.980 hacer nuestro componente normal de importación de reacción 01:28.960 -&gt; 01:33.620 y lo estamos importando desde el paquete de reacción. 01:34.050 -&gt; 01:41.000 Y finalmente tenemos una clase de ErrorBoundry que extiende el componente de reacción 01:43.830 -&gt; 01:45.840 y aquí tenemos el constructor 01:48.960 -&gt; 01:51.460 y otra vez llamamos super aquí. 01:52.610 -&gt; 02:03.420 Y para que tengamos acceso a los accesorios, tendremos que - dentro del constructor - tener los accesorios paramater. 02:03.560 -&gt; 02:11.880 Y finalmente, por este estado. Vamos a crear una propiedad llamada hasError. 02:12.370 -&gt; 02:16.190 Y por ahora va a ser falso. 02:16.260 -&gt; 02:26.310 Y tampoco nos olvidemos de exportar DefaultBoundry por defecto, así que tenemos acceso a él y tenemos nuestro render predeterminado 02:26.520 -&gt; 02:29.760 aquí que regresará para nosotros. 02:30.830 -&gt; 02:32.760 Hmm, ¿qué debería devolver? 02:33.170 -&gt; 02:41.300 Bien, idealmente con este componente ErrorBoundry podemos envolver el componente o podemos envolver un componente 02:41.300 -&gt; 02:48.890 como el componente CardList con un componente ErrorBoundry y si el componente CardList falla podemos 02:48.890 -&gt; 02:51.340 atraparlo en ErrorBoundry. 02:52.390 -&gt; 02:57.790 Sé que esto es un poco difícil de seguir. Reaccionar tiene una documentación realmente buena sobre esto para que pueda 02:57.790 -&gt; 02:59.520 leerlo más tarde. 02:59.530 -&gt; 03:01.150 Pero quédate conmigo. 03:01.150 -&gt; 03:03.220 Confía en mí, va a tener sentido. 03:03.220 -&gt; 03:14.080 Entonces, lo primero que queremos hacer es verificar si this.state.hasError es igual a true. 03:14.150 -&gt; 03:23.000 Entonces, si hay algún tipo de error, entonces queremos devolver este estado predeterminado de cómo podemos con gracia 03:24.330 -&gt; 03:29.670 mostrar algo al usuario, eso lo hace significativo para ellos, aunque no pudimos mostrar 03:29.670 -&gt; 03:31.190 lo que pretendíamos originalmente. 03:32.040 -&gt; 03:44.590 En nuestro caso, podemos decir que tenemos un <h1> &quot;Oooops. Eso no es bueno&quot; para que el usuario lo vea. 03:44.620 -&gt; 03:52.760 Entonces, estamos diciendo que si, por alguna razón hay un error, vamos a escupir una etiqueta h1. 03:53.940 -&gt; 03:54.870 De lo contrario, 03:55.100 -&gt; 03:58.460 y podemos hacer una devolución aquí. 03:58.560 -&gt; 04:06.150 Vamos a decir que this.props.children renderizará, recuerde nuevamente, porque los niños 04:06.150 -&gt; 04:09.070 serán cualquier cosa que esté entre ErrorBoundry. 04:09.090 -&gt; 04:16.050 En nuestro caso, probablemente sea la CardList. Así renderice a los niños, lo que haya dentro 04:16.140 -&gt; 04:17.410 de ErrorBoundry, 04:17.470 -&gt; 04:19.330 <h1> . 04:19.710 -&gt; 04:28.390 ¿Ahora cómo vamos a poder cambiar este hasError? Bueno, con React 16 tenemos un nuevo ciclo de vida 04:28.390 -&gt; 04:38.270 método que se introdujo y se llama componentDidCatch y este componentDidCatch es tipo 04:38.270 -&gt; 04:49.390 de como el bloque try catch en javascript si cualquier error que se produzca ejecutará este enlace de ciclo de vida y este gancho de ciclo de vida 04:49.400 -&gt; 04:52.420 en realidad obtiene un par de parámetros. 04:52.450 -&gt; 04:55.690 Ese es el error y la información. 04:55.830 -&gt; 05:03.540 Pero en nuestro caso solo queremos decir que this.setState va a ir ahora, si este componente 05:03.590 -&gt; 05:08.230 comete errores, va a tener un error igual a cierto. 05:08.280 -&gt; 05:13.760 Entonces, si alguna vez se disparara, se renderizaría la etiqueta H-1. 05:13.870 -&gt; 05:14.190 De acuerdo. 05:14.230 -&gt; 05:17.490 Ahorremos y vámonos a app.js 05:17.580 -&gt; 05:20.730 Vamos a importar nuestro errorBoundry 05:25.190 -&gt; 05:26.630 de nuestros componentes. 05:32.210 -&gt; 05:34.030 Y ahora podemos usar esto. 05:34.100 -&gt; 05:38.740 Vamos a usarlo aquí para la lista de tarjetas. 05:38.900 -&gt; 05:46.370 Entonces, si algo continúa con CardList, queremos tener algún tipo de límite de salida elegante. 05:46.580 -&gt; 05:55.340 Así que diremos ErrorBoundary y porque estamos representando este dot props dot children, si lo envolvemos como 05:55.340 -&gt; 05:55.970 esto. 05:57.250 -&gt; 06:00.450 Y nada continúa, seguirá representando CardList. 06:00.490 -&gt; 06:03.030 Así que vamos a guardar Vamos a ver si hemos cometido algún error. 06:03.130 -&gt; 06:04.570 Hasta ahora todo bien. 06:04.690 -&gt; 06:08.320 Volvamos a nuestra aplicación y. 06:08.380 -&gt; 06:10.400 Bien, echemos un vistazo a la consola. 06:10.410 -&gt; 06:17.280 No hay errores aquí, si no actualizamos errores aquí si escribo cosas, no hay errores, eso está bien. 06:19.190 -&gt; 06:26.840 Ahora con este límite de error, si algo en la CardList falla, la atrapará y mostrará nuestro mensaje de error 06:26.840 -&gt; 06:28.000. 06:28.070 -&gt; 06:29.420 Así que vamos a ver a qué me refiero. 06:29.710 -&gt; 06:39.420 Si ingreso a CardList aquí y ahora aquí si decimos, si por ahora solo diremos cierto. 06:39.660 -&gt; 06:48.440 Vamos a suponer que en CardList hubo un error, entonces podemos hacer eso diciendo tiro nuevo error y decir &quot;NOOOOOOO&quot; 06:51.790 -&gt; 06:54.850 Si guardamos esto, todo sigue funcionando. 06:54.850 -&gt; 06:59.750 Si vuelvo, verá que sigo recibiendo el error, dice error no capturado. 06:59.800 -&gt; 07:00.620 No. 07:00.910 -&gt; 07:07.030 Y en la parte inferior dice que se produjo el error anterior en el componente CardList. React intentará recrear 07:07.030 -&gt; 07:11.950 este árbol de componentes desde cero utilizando la biblioteca de errores que proporcionó. ErrorBoundry. 07:12.360 -&gt; 07:16.670 Está bien, pero aún veo el error. 07:16.900 -&gt; 07:23.770 Y eso es porque estamos ejecutando ahora mismo en modo desarrollo. Para crear la aplicación de reacción. 07:23.770 -&gt; 07:29.780 Quieren mostrarnos cada vez que hay un error en nuestro componente. Los límites de error son realmente útiles cuando 07:29.780 -&gt; 07:38.750 pone sus aplicaciones en producción donde no tiene estos registros detallados de los errores que tiene. Tus usuarios de 07:38.750 -&gt; 07:40.540 nunca verán esto. 07:40.550 -&gt; 07:45.040 Entonces, si actualizo aquí muy rápido, ¿lo ven por aquí? 07:45.050 -&gt; 07:48.320 Cómo dijo - Oooops, eso no es bueno. 07:48.470 -&gt; 07:49.010 Vaya. 07:49.100 -&gt; 07:50.450 Eso no es bueno. 07:50.450 -&gt; 07:54.820 Entonces, en la producción, los usuarios verán eso. 07:55.040 -&gt; 08:01.640 Pero para nuestro caso el comportamiento previsto para crear la aplicación React en desarrollo es mostrarnos los errores 08:01.910 -&gt; 08:05.770 pero con límites de error tenemos esa seguridad adicional durante la producción. 08:07.830 -&gt; 08:08.890 Eso es todo por ahora. 08:08.890 -&gt; 08:10.800 Lo veré en el próximo. Adiós.