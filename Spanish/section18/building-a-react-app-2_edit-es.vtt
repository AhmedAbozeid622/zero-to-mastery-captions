WEBVTT

00:00.480 --> 00:01.230
Dar una buena acogida

00:01.410 --> 00:05.020
Continuemos construyendo nuestra aplicación RoboFriends

00:05.080 --> 00:12.460
Ahora, hasta este punto, si nos fijamos en nuestro index.js, bueno, hubo una gran cantidad de copiar y pegar que

00:12.670 --> 00:15.640
lo hicimos. Si tuviéramos muchos amigos robot

00:15.640 --> 00:19.810
imagina tener cientos de estos que tenemos que copiar y pegar constantemente

00:19.910 --> 00:21.530
Eso no es muy eficiente ¿verdad?

00:21.730 --> 00:30.160
Además, si recuerdas nuestro diagrama de flujo de datos de una manera, siempre tuvimos un padre como una aplicación

00:30.160 --> 00:34.980
componente que tenía niños que tienen sus propios hijos y así sucesivamente y así sucesivamente

00:35.050 --> 00:43.300
Entonces, usando ese conocimiento, podemos tener un gran componente de aplicación que tenga diferentes niños para que hagamos cada

00:43.300 --> 00:47.970
componente pequeño y reutilizable

00:47.990 --> 00:57.160
Regresemos a nuestro ejemplo. Ahora que tenemos 'robot.js' idealmente podemos listar a todos estos 10 usuarios

00:58.700 --> 01:09.740
La forma en que hacemos eso - vamos a tener un componente 'CardList' para que si importamos un componente 'CardList' que es

01:09.740 --> 01:17.000
un padre de 'Tarjeta', entonces podemos simplemente renderizar eso en lugar de todas estas tarjetas

01:17.290 --> 01:30.390
Entonces diré 'CardList' y nuevamente tendremos que crearlo. Así que voy a decir un nuevo archivo, 'CardList.js'

01:33.060 --> 01:43.050
volviéndolo a cambiar a nuestra sintaxis 'Babel' - haremos importación 'React' desde 'reaccionar' y haré esto un poco

01:43.050 --> 01:44.970
un poco más grande

01:45.020 --> 01:52.800
Y nuevamente diremos 'const', 'CardList' es igual a - no aceptará nada por ahora

01:54.360 --> 01:56.530
Pero volverá ...

01:56.890 --> 02:01.700
Bueno, ¿qué debería devolver?

02:01.850 --> 02:05.070
Debería devolver las cartas, ¿verdad?

02:05.920 --> 02:07.960
Podemos simplemente copiar y pegar esto

02:11.750 --> 02:13.160
pon esto aquí

02:13.480 --> 02:15.750
Arreglemos la sangría aquí un poco

02:18.730 --> 02:26.660
Ahora 'CardList' será el que devuelva estas tarjetas y 'index.html'

02:26.710 --> 02:33.280
solo renderizará 'Cardlist'

02:33.350 --> 02:39.330
Si guardo esto, bueno, supongo que 'tarjeta' no se está utilizando para que podamos eliminarlo

02:39.770 --> 02:42.500
Y 'robots' no están siendo utilizados

02:42.620 --> 02:48.400
Pero podemos usar los 'robots' ahora para pasar eso, como 'robots'

02:48.400 --> 02:59.560
es igual a la matriz de 'robots'. 'CardList' está aceptando un 'robot' prop

02:59.730 --> 03:05.880
Si guardo esto, todo funciona, pero obtengo este error porque, como puede ver, no exportamos

03:06.950 --> 03:13.910
Si volvemos a la lista de tarjetas, exportar, por defecto, y con suerte ya estás empezando a acostumbrarte

03:13.920 --> 03:20.040
Hay mucha repetición aquí, pero cada vez, siempre que aprendas la sintaxis, estamos creando estos

03:20.520 --> 03:28.410
componentes muy bien. Y obtenemos un montón de errores porque no tenemos acceso a 'robots' e ID y, bueno,

03:28.830 --> 03:30.270
tarjeta para el caso, ya sea

03:30.300 --> 03:37.520
Así que vamos a importar una tarjeta de - nuevamente el mismo directorio -

03:37.700 --> 03:38.400
'Card.js'

03:39.280 --> 03:40.960
Robots no está definido

03:40.960 --> 03:45.540
Sabemos que 'CardList' recibe robots ahora

03:45.540 --> 03:52.540
Así que tengo acceso a él en los 'accesorios' o puedo desestructurarlo y decir que tenemos acceso a él

03:53.570 --> 04:04.940
con 'robots'. Si guardo esto, mira que tengo todo de vuelta como estaba

04:05.080 --> 04:07.390
Pero no son todos ellos, ¿verdad?

04:07.390 --> 04:10.480
Solo estamos agarrando el 0, 1, 2

04:10.510 --> 04:11.800
Solo tres de ellos

04:11.800 --> 04:17.970
Y como vimos en robots.js tengo 10

04:18.130 --> 04:20.870
Hm. ¿Cómo podemos hacer esto mejor?

04:21.040 --> 04:28.410
Hagamos esto un poco más pequeño para que pueda ver. Parece que queremos hacer algún tipo de bucle

04:28.510 --> 04:29.410
¿derecho?

04:29.410 --> 04:35.650
Queremos pasar por encima de los robots y crear un componente de tarjeta para cada uno

04:35.650 --> 04:36.880
¿Cómo podemos hacer eso aquí en React?

04:36.900 --> 04:45.060
Comencemos añadiendo otra variable aquí. Lo llamaremos 'const'

04:47.740 --> 04:50.300
'CardComponent'

04:50.510 --> 04:56.630
Y dentro del 'cardComponent' queremos decir que 'robots' - queremos

04:56.690 --> 04:59.390
bien, ¿qué queremos hacer? Cuando hacemos un ciclo

04:59.420 --> 05:03.460
como he dicho antes, queremos hacer un mapa, ¿verdad?

05:03.470 --> 05:06.740
Podríamos hacer cuatro cada uno, pero siempre recomiendo hacer un mapa

05:07.120 --> 05:09.280
Y dentro de este mapa cada robot

05:11.820 --> 05:12.930
consigue esto

05:12.990 --> 05:16.800
Entonces, obtenemos un usuario cada vez que lo mapeamos. Entonces podemos decir 'usuario'

05:20.070 --> 05:26.550
debería regresar de nuevo, porque un mapa debe regresar, lo devuelve, ¿verdad?

05:26.610 --> 05:32.890
Queremos devolver un componente de la tarjeta. Puedo copiar y pegar esto aquí

05:34.500 --> 05:42.370
y dentro del retorno puedo decir ahora en lugar del índice de robots 0 - ¿tenemos el índice? Bueno, sí, porque

05:42.450 --> 05:48.800
recuerdas, el segundo parámetro que obtenemos en un mapa es el índice

05:48.800 --> 05:52.730
Entonces puedo decir 'usuario' y 'yo' para el índice

05:52.790 --> 06:03.640
Y ahora dentro de 'robots' voy a decir 'yo' para el índice. Cada vez que la primera vez alrededor de esto será cero, entonces 1 entonces

06:03.640 --> 06:07.610
2 hasta 9 para incluir nuestros 10 robots

06:08.840 --> 06:11.260
Veamos si esto realmente funciona

06:11.360 --> 06:19.260
Si agrego el componente de la tarjeta aquí ... Recuerdas que tenemos que envolverlo entre llaves porque es javascript

06:19.260 --> 06:22.170
por lo que sabe evaluar

06:22.410 --> 06:28.270
Si guardo esto, parece que se está compilando correctamente, vuelvo y

06:28.630 --> 06:29.960
Holy Moly

06:30.240 --> 06:33.650
Nos conseguimos una matriz de cartas

06:33.820 --> 06:35.140
¡Cuan genial es eso!

06:35.140 --> 06:37.160
Eso fue increíblemente rápido de hacer

06:37.330 --> 06:40.820
Acabamos de utilizar nuestro sentido común y el conocimiento de Javascript

06:41.020 --> 06:46.240
Acabo de usar 'map', para devolver varios componentes

06:46.240 --> 06:50.620
Espero que se den cuenta de lo poderoso que es eso y es por eso que React es tan popular en este momento

06:50.680 --> 06:57.510
Podemos usar Javascript para devolver estos elementos HTML y hacer cosas realmente muy rápido

06:59.390 --> 07:04.240
Si abro la consola aquí, veré que recibo una advertencia

07:04.250 --> 07:11.120
Cada niño en una matriz o iterador debe tener un accesorio clave único y hay un enlace si

07:11.120 --> 07:12.280
quiero leer más sobre eso

07:13.370 --> 07:20.450
Este es un caso especial que solo debes recordar. Al trabajar con reaccionar de la manera en que el DOM virtual

07:20.450 --> 07:23.950
funciona es que realiza un seguimiento de lo que son todas estas tarjetas

07:24.320 --> 07:35.300
Pero sin tener algo llamado un accesorio clave, si algunas de estas tarjetas se eliminan, React no sabrá

07:36.720 --> 07:42.660
cuál es cuál y tendremos que cambiar todo el DOM. En comparación, si tuviera un accesorio clave que diga 'oh este

07:42.660 --> 07:43.230
se elimina "

07:43.230 --> 07:49.080
Solo puedo eliminar esto del DOM. Recuerde que queremos minimizar la cantidad de trabajo que le hacemos a la

07:49.080 --> 07:50.190
DOM

07:50.280 --> 07:53.170
Entonces cuando haces un ciclo, es solo algo que debes recordar

07:53.220 --> 07:57.100
Tienes que darle una clave única. En nuestro caso

07:57.240 --> 08:01.200
Podemos decir 'yo' que es índice

08:01.210 --> 08:02.250
Si guardamos esto

08:05.300 --> 08:10.130
Vaya, tenemos que envolverlo entre llaves nuevamente

08:11.000 --> 08:14.720
porque es Javascript Y ahí tienes

08:14.740 --> 08:22.800
Ahora ya no tenemos el error

08:23.020 --> 08:29.150
Y hagamos esto en una nueva línea, solo para que se vea más bonito

08:33.640 --> 08:39.270
Y debido a que lo estamos devolviendo en varias líneas, queremos ajustar esto en un corchete, ¿verdad?

08:39.340 --> 08:42.070
Bien. Y eso es mejor

08:42.120 --> 08:45.350
Así que esto está funcionando bien, como lo queremos

08:45.420 --> 08:51.150
Quiero mostrarte una cosa. Porque esto es Javascript, todo lo que ponemos en estas llaves es

08:51.150 --> 08:53.940
javascript incluyendo comentarios -

08:54.450 --> 08:58.730
Bueno, podemos copiar y pegar todo esto

08:58.800 --> 09:04.080
Elimina la constante y simplemente agrégala entre los paréntesis

09:07.750 --> 09:14.360
Si guardo esto, todavía debería funcionar, como lo hace

09:14.500 --> 09:20.200
Y este es otro poder de React. React te convierte en un programador de JavaScript realmente bueno porque

09:20.920 --> 09:25.040
aparte de esta sintaxis JSX todo lo demás es solo javascript

09:25.390 --> 09:32.830
Entonces, podemos crear un componente CardLList que enumera las tarjetas y todo lo que tenemos que hacer es aprobarlo.

09:33.310 --> 09:39.140
de robots Y acabamos de hacer esto un limpiador de toneladas

09:39.440 --> 09:40.840
Muy genial

09:40.880 --> 09:42.880
Está bien, eso es todo por este video

09:42.890 --> 09:45.490
Más cosas sucederán en la próxima

09:45.500 --> 09:46.600
Nos vemos en ese

09:46.610 --> 09:46.880
Adiós
