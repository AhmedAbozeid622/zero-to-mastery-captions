WEBVTT

00:01.680 --> 00:02.310
Todo bien.

00:02.310 --> 00:03.240
Dar una buena acogida.

00:03.240 --> 00:06.540
Tenemos nuestra aplicación Hello World, pero eso no se ve muy bien.

00:06.540 --> 00:09.430
Queremos hacer nuestra aplicación RoboFriends.

00:09.450 --> 00:16.540
Entonces, en este video, vamos a empezar creando nuestro primer componente. Si volvemos aquí,

00:16.640 --> 00:19.080
recordamos que tenemos la terminal en el lado derecho.

00:19.100 --> 00:25.880
Y acabamos de ejecutar 'npm start' y 'create-react-app' comprueba todos los archivos para asegurarse de que no haya errores.

00:25.880 --> 00:33.680
Dice que nuestra aplicación está definida pero nunca se usó, así que comencemos a comentar 'command' 'slash' save this

00:34.370 --> 00:37.080
y verás que todo está funcionando bien.

00:38.590 --> 00:43.510
Ahora puede tener algunas preguntas solo en este archivo 'index.js'

00:44.210 --> 00:48.920
Primero, vemos que estamos importando React, pero ¿cómo es que funciona?

00:48.920 --> 00:55.390
recordamos que no funcionó antes; tuvimos que usar 'require' y luego 'browserify'. De nuevo, React tiene una

00:55.390 --> 00:59.260
paquete web debajo del capó que hace el paquete para nosotros.

00:59.260 --> 01:03.670
Así que estamos autorizados a usar 'importar', siempre y cuando mantengamos esto en la parte superior del archivo.

01:03.760 --> 01:10.650
Podemos importar cualquier otro archivo que deseemos o cualquier paquete que deseemos.

01:10.660 --> 01:14.360
También vemos que hay dos cosas:React y ReactDOM.

01:14.380 --> 01:21.200
Si lo recuerda, Reaccionar es una biblioteca 'vista'.

01:21.260 --> 01:25.660
Este es el pequeño robot que recordamos del video anterior.

01:26.030 --> 01:31.120
Es el núcleo del paquete que hace la manipulación DOM para nosotros.

01:31.310 --> 01:35.890
Pero como dije antes, React se puede usar en múltiples lugares, no solo en el navegador.

01:36.170 --> 01:38.330
Se puede usar para dispositivos móviles.

01:38.330 --> 01:45.350
Se puede utilizar para la realidad virtual y puede conectar y jugar diferentes bibliotecas como esta basadas en

01:45.440 --> 01:47.850
en qué pantalla estás renderizando

01:48.000 --> 01:52.830
Entonces ReactDOM se usa para los sitios web DOM (for).

01:52.940 --> 01:54.370
Entonces es el pegamento de React.

01:54.390 --> 01:57.620
Pero podemos tener algo como React native.

01:57.620 --> 02:01.950
Eso realmente rinde a los teléfonos móviles.

02:02.000 --> 02:04.740
También tenemos:import './index.css'.

02:04.760 --> 02:13.340
Y esta es una nueva sintaxis Bueno, React nos permite agregar CSS no solo en un archivo, sino para cada uno diferente

02:13.340 --> 02:14.270
componente.

02:14.390 --> 02:15.960
Si vamos a 'App.js',

02:16.110 --> 02:21.000
bueno, tenemos 'App.css' que describe la aplicación.

02:21.230 --> 02:22.890
Si vamos a 'index.js',

02:22.910 --> 02:32.060
bueno, tenemos 'index.css' que tiene sus propios estilos y estos estilos solo se aplicarán a los componentes que sean

02:32.540 --> 02:35.740
'index.js' representa.

02:35.910 --> 02:41.550
Y la forma en que lo usamos es que solo decimos 'importar', y luego a diferencia del paquete React, donde solo decimos el nombre

02:41.550 --> 02:47.940
del paquete y sabe de forma automática para verificar la carpeta de módulos conocidos, tenemos que decirle dónde

02:48.000 --> 02:49.770
'index.css' vive.

02:49.830 --> 02:55.170
Y esta sintaxis de 'punto' 'barra inclinada' significa que está en el mismo directorio.

02:55.320 --> 03:01.690
Entonces, está diciendo que la verificación en la carpeta fuente 'index.css' debería estar allí. DE ACUERDO.

03:01.740 --> 03:05.100
Y finalmente vemos 'registerServiceWorker'.

03:05.100 --> 03:11.040
Y este es un tema avanzado que no cubriremos en este curso, pero piense en los trabajadores del servicio como un nuevo

03:11.040 --> 03:16.660
función que permite que nuestras aplicaciones sean más rápidas y potencialmente trabajen fuera de línea.

03:16.800 --> 03:19.130
Es algo con lo que no debemos preocuparnos.

03:19.140 --> 03:26.280
Así que, por ahora, puedes comentar esto y seguirá funcionando, pero lo mantendremos aquí solo porque create-react-app

03:26.280 --> 03:34.880
nos lo da de forma gratuita. Sin embargo, las cosas que realmente nos importan son:bueno, esta línea

03:34.880 --> 03:43.160
aqui. Todo esto es lo que React hace, está diciendo:Quiero que el paquete reactDOM use la función

03:43.250 --> 03:52.600
'render', y este 'render' es lo que quiero que sea renderizado, pero si recuerdas antes de tener la aplicación,

03:55.110 --> 03:59.060
y bueno, esto no es realmente una etiqueta HTML.

03:59.220 --> 04:04.850
Acabamos de crear esto de:parece el mismo directorio.

04:04.860 --> 04:12.450
Hay algo llamado aplicación y no tiene un archivo '.js', como lo vemos aquí y eso es

04:12.450 --> 04:19.390
porque automáticamente dice que si no hay '.css' o cualquier tipo después de él,

04:19.410 --> 04:27.480
Bueno, asume que es Javascript, pero esto funcionará tan bien como puede ver. Vayamos a

04:27.540 --> 04:34.680
Archivo 'App.js' y vea por qué podemos usar esta etiqueta HTML que hemos creado. Si vamos al archivo 'App.js',

04:34.680 --> 04:40.230
Bueno, de nuevo, vemos que estamos importando algo, estamos haciendo algo llamado desestructuración

04:40.230 --> 04:42.420
aquí y obtener componente también.

04:43.350 --> 04:49.660
Y tenemos algunos archivos como 'logo.svg' y 'app.css' que estamos importando.

04:49.950 --> 04:52.300
Y nuevamente vemos que nuestra sintaxis está un poco desajustada.

04:52.300 --> 05:03.830
Así que asegúrese de cambiar nuestros archivos a Javascript (Babel) y parece que 'la aplicación de la clase extiende el componente'

05:04.520 --> 05:05.830
eso viene con React.

05:05.840 --> 05:08.060
Y esta es solo la sintaxis estándar.

05:08.090 --> 05:15.740
Esto representa:recuerde que un componente siempre tiene la función de que debe representar al menos algo.

05:15.960 --> 05:21.260
Y la forma en que lo hacemos es devolver una pieza HTML del sitio web.

05:21.440 --> 05:24.870
Entonces vemos aquí:'Bienvenido a React. Para comenzar, edita ... '

05:25.100 --> 05:27.940
Bueno, eso es exactamente lo que dice aquí.

05:28.100 --> 05:29.440
Ese es el poder de Reaccionar.

05:29.450 --> 05:38.680
Estamos creando nuestros propios componentes personalizados, nuestras propias etiquetas HTML personalizadas, que podemos agregar y si

05:38.680 --> 05:45.320
recuerde la imagen de flujo de datos de una manera, tenemos un padre que tiene hijos.

05:45.320 --> 05:52.050
Entonces 'App' tiene hijos, pero ya sabes, construyamos nuestro propio componente para aclarar este punto.

05:52.370 --> 06:00.370
En lugar de tener 'hola mundo' aquí, vamos a crear un componente llamado 'Hola' y es un cierre automático

06:00.380 --> 06:02.500
etiqueta, por lo que desea tener la barra invertida.

06:02.700 --> 06:08.630
Y aquí, en lugar de decir importación de la aplicación, vamos a importar 'Hola' de

06:08.970 --> 06:12.600
lo llamaremos 'hello.js'

06:12.610 --> 06:14.710
y notarás que está en mayúscula aquí.

06:14.810 --> 06:19.790
Bueno, si está construyendo un componente, el estándar es que está en mayúscula.

06:19.880 --> 06:29.070
Entonces se llamará 'Hello.js'. Si guardamos esto, obtendremos un error. Dice:'Módulo no encontrado:no se puede resolver' ./Hola ''

06:29.090 --> 06:31.070
Porque el archivo no existe

06:31.070 --> 06:32.290
Entonces, creemos uno.

06:32.330 --> 06:38.590
Voy a decir, nuevo archivo 'Hello.js'. Ahí tienes.

06:38.670 --> 06:42.920
Tenemos un nuevo archivo 'Hello.js' y se compiló con éxito.

06:43.020 --> 06:46.370
Si vamos al sitio web, bueno, mira eso.

06:46.380 --> 06:51.920
De hecho, incluso nos da error en el sitio web, y es por eso que 'crear-reaccionar-aplicación' es simplemente increíble.

06:51.990 --> 06:57.660
Le muestra exactamente cuáles son los errores, sin abrir la consola aquí.

06:59.520 --> 07:03.830
De nuevo, no tenemos nada construido en este momento en 'Hola', así que tenemos que crearlo.

07:03.840 --> 07:06.030
Usemos 'App.js' como ejemplo.

07:06.030 --> 07:14.860
Parece que necesitamos importar 'Reaccionar' y 'Componente', por lo que tenemos que decir e 'importar Reaccionar, {Componente} de' reaccionar ';'.

07:15.460 --> 07:16.170
Bueno.

07:16.590 --> 07:25.080
Y la razón por la que estamos haciendo esto, una vez más, esto es desestructurar en lugar de hacer 'React.Component',

07:25.080 --> 07:31.270
ahora puede hacer 'Componente', y significa lo mismo.

07:31.400 --> 07:34.370
Nuevamente mirando 'App.js', parece que decimos clase

07:34.430 --> 07:39.440
'nuestro nombre de componente' extiende el componente. Vamos a hacer eso.

07:39.440 --> 07:41.800
clase, llamaremos a esto 'Hola', de nuevo,

07:41.800 --> 07:47.990
así es como se llama nuestro componente, se extiende 'Componente'.

07:48.040 --> 07:58.780
Y recuerde cambiar nuestro Javascript a Babel. Y si recuerdas una regla es que siempre

07:58.780 --> 08:07.600
queremos tener una función de renderizado, y dentro de esta función de renderización le decimos lo que queremos devolver.

08:08.070 --> 08:13.870
Bueno, queremos devolver el ejemplo de 'Hola mundo', pero podemos decir 'h1'

08:16.630 --> 08:18.290
'Hola mundo' '/ h1'.

08:21.940 --> 08:27.340
Bien, veamos qué sucede cuando hago esto:guardo,

08:27.520 --> 08:31.650
Y dice:export 'default' (importado como 'Hello') no se encontró.

08:31.650 --> 08:34.770
Bueno, es porque no estamos exportando esto.

08:34.770 --> 08:42.660
Recuerde que si queremos otro archivo para usarlo, tenemos que exportar. Y usamos 'export default' cuando solo estamos

08:42.930 --> 08:44.760
exportando una cosa

08:44.760 --> 08:50.880
Si utilizamos la palabra predeterminada, significa que este archivo solo exporta una cosa y esa es la 'Aplicación'.

08:50.880 --> 08:54.690
Entonces puedo decir 'export default'

08:55.310 --> 08:57.650
'Hola'

08:57.730 --> 08:59.220
Ahorremos

08:59.420 --> 09:01.100
Parece que está funcionando.

09:01.160 --> 09:03.070
Veamos qué sucede en nuestro sitio web.

09:03.500 --> 09:04.470
'Hola Mundo'.

09:04.490 --> 09:12.300
Acabamos de crear nuestro primer componente. ¡Cuan genial es eso! Ahora,

09:12.320 --> 09:14.290
ahora mismo solo tenemos una linea

09:14.300 --> 09:22.610
Pero, ¿y si quisiera hacer algo como, div envolviéndolo en un div y tal vez debajo, diré

09:23.240 --> 09:31.550
un párrafo que dice "Bienvenido a Reaccionar".

09:31.630 --> 09:35.270
Si guardo esto, me sale otro error.

09:38.020 --> 09:45.010
Y es porque solo le estamos dando múltiples líneas aquí y 'return' está esperando una sola cosa.

09:45.280 --> 09:47.850
Necesitamos envolver esto entre paréntesis.

09:49.020 --> 09:55.270
Así, para que Javascript diga, "Ah, esta es una expresión".

09:55.270 --> 09:57.190
"Evalúa todo esto".

09:57.340 --> 10:05.690
Si guardamos esto, parece que está funcionando y luego 'Hola Mundo, Bienvenido a Reaccionar'.

10:05.770 --> 10:06.580
Muy genial.

10:07.710 --> 10:18.780
Aquí, si recuerda si 'importamos' ./Hello.css ';', podemos crear cualquier estilo de CSS que podamos

10:18.780 --> 10:25.620
querer, pero primero tenemos que crear ese archivo. Así que hagámoslo, nuevo archivo,

10:26.050 --> 10:27.660
y necesito agregar una 'o' aquí.

10:27.670 --> 10:32.090
El nuevo nombre de archivo será 'Hello.css'. Ahora,

10:32.100 --> 10:34.720
en 'Hello.css', puedo decir que h1.

10:34.770 --> 10:40.150
Y esto es solo CSS estándar, tendrá fondo de rojo.

10:40.470 --> 10:42.320
Voy a ahorrar,

10:42.330 --> 10:43.230
guarda esto también.

10:43.230 --> 10:44.400
Todo se ve bien.

10:45.320 --> 10:46.490
Y mira eso.

10:49.300 --> 10:55.480
Pero sabes qué, para hacerlo más rápido y porque hemos revisado CSS, quiero mostrarte un paquete genial

10:55.510 --> 11:05.080
llamados 'tachyons', y 'tachyons' nos permite tener nombres de clases predefinidos y bootstrap que nosotros

11:05.080 --> 11:08.720
solo puede agregar a los componentes para que las cosas se vean realmente bien.

11:08.770 --> 11:09.470
Así que hagámoslo.

11:09.490 --> 11:17.750
Voy a cerrar esto y decir 'npm install tachyons'.

11:17.800 --> 11:18.290
Bien.

11:18.290 --> 11:21.390
Se agrega al paquete; podemos verificar yendo a 'package.json'.

11:21.410 --> 11:27.920
Vemos que 'tachyons' están ahí y podemos usar 'tachyons' muy fácilmente, pero solo vamos a 'index.js'

11:27.920 --> 11:33.200
archivo y diciendo 'importar' tachyons ';'.

11:33.420 --> 11:39.150
Y ahora tenemos acceso a este paquete, solo para mostrarle qué son los 'tachyons'.

11:39.150 --> 11:42.510
si voy a 'estilos tachyons',

11:46.820 --> 11:54.200
eso nos da un poco de clases que podemos usar que, por ejemplo, 'centro de texto', diremos 'tc' y siempre

11:54.200 --> 12:01.220
como tenemos 'tachyons' instalados, usamos 'tc' como nombre de clase, alineará nuestro texto.

12:01.330 --> 12:06.880
Ahora que tenemos 'tachyons' en este archivo 'index.js', podemos decir aquí

12:10.990 --> 12:19.230
'class =' ​​f1 '' para la fuente 1 y 'text center' - guardo.

12:19.340 --> 12:19.880
Tengo que hacer,

12:19.880 --> 12:20.960
'npm start' aquí.

12:20.960 --> 12:24.510
Asegúrese de que nuestro servidor se esté ejecutando, para que podamos verificar nuestros cambios.

12:25.220 --> 12:30.970
Y obtenemos 'Hello World, Bienvenido a React'.

12:31.020 --> 12:33.210
Pero en realidad hay un truco aquí.

12:33.210 --> 12:39.270
Si abres la consola, aunque funcionó, recibo una advertencia que dice "clase de propiedad DOM no válida".

12:39.270 --> 12:41.330
'¿Querías decir' nombre de clase '?' - Y React es

12:41.340 --> 12:50.810
realmente muy bueno para darte errores, y es posible que te preguntes:¿por qué un 'nombre de clase' en lugar de

12:51.050 --> 12:51.650
'clase'?

12:51.800 --> 12:57.840
Porque si guardo esto, vuelvo, ya no tengo ese error.

12:58.400 --> 12:59.370
¿Porqué es eso?

12:59.600 --> 13:04.310
Hasta este punto, hemos escrito algo de HTML,

13:04.610 --> 13:06.950
pero este es un archivo Javascript.

13:07.040 --> 13:10.180
¿Cómo podemos hacer esto?

13:10.190 --> 13:13.430
Esto es realmente algo llamado JSX.

13:13.430 --> 13:23.520
Parte del React, es que te permite escribir esta sintaxis similar a HTML en tu Javascript. Y podrías

13:23.520 --> 13:32.790
pregúntese, uno, no rompe la regla de separación de preocupaciones, y dos, ¿cómo estamos

13:32.790 --> 13:39.210
capaz de agregar HTML a Javascript. Para responder a la primera pregunta de separación de preocupaciones, React tiene la

13:39.210 --> 13:44.910
idea de componentes, y eso es:es mejor tener funcionalidad y estilos por componente para que cada

13:44.910 --> 13:47.940
componente es su propio universo separado.

13:47.940 --> 13:50.160
Y solo agrega estos componentes.

13:50.670 --> 13:58.440
Y la idea de separación de preocupaciones con React, es que los componentes, bueno, están preocupados por ellos mismos,

13:58.470 --> 13:59.260
nada más.

13:59.430 --> 14:03.570
Por lo tanto, cambia el paradigma aquí, y es agradable.

14:03.570 --> 14:05.090
Solo puedo mirar el componente 'Hola'.

14:05.100 --> 14:06.410
Sé exactamente lo que está haciendo.

14:06.420 --> 14:07.900
Puedo mirar el CSS.

14:08.460 --> 14:14.730
Y cada vez que necesito hacer un cambio, solo tengo que preocuparme por los archivos que contienen el 'Hello.css'

14:14.730 --> 14:15.960
y 'Hello.js'.

14:15.960 --> 14:21.510
Lo segundo es esto, esto llamado JSX. Debajo de la capucha,

14:21.540 --> 14:29.040
lo que React está haciendo es realmente dejarme usar esta sintaxis, pero no son etiquetas HTML reales.

14:29.160 --> 14:34.890
Recuerda lo que dije sobre el DOM virtual y cómo React crea su propio objeto y luego mira el

14:34.890 --> 14:39.360
DOM y lo compara y dice:'Hmm, necesito cambiar esto y lo hace por nosotros'?

14:39.360 --> 14:48.110
React usa JSX para crear su DOM virtual, su DOM falso, que construyeron en base a lo que le damos

14:48.120 --> 14:48.850
para ellos

14:48.990 --> 14:55.350
Luego miran este DOM virtual y el DOM real, y dicen que esta parte ha cambiado.

14:55.350 --> 15:01.930
Voy a cambiar el ahora basado en el DOM virtual, y es por eso que Reaccionar realmente rápido.

15:02.070 --> 15:08.430
Crea estos objetos que es realmente rápido en Javascript y solo cambia lo que se necesita hacer en el

15:08.430 --> 15:09.020
DOM.

15:09.360 --> 15:10.790
Así que solo acostúmbrate a eso.

15:10.830 --> 15:18.240
Es incómodo al principio, pero de nuevo, siempre y cuando lo envuelva en un corchete, puede escribir aquí HTML, como

15:18.240 --> 15:24.180
así como sus propios componentes personalizados, como 'Hola' que usamos en el archivo 'index.js'.

15:28.540 --> 15:39.600
Y ahora quizás tenga sentido por qué no podemos decir clase aquí, porque la clase es una palabra clave reservada en Javascript.

15:39.940 --> 15:42.830
La clase es parte del lenguaje que usa Javascript.

15:42.840 --> 15:49.630
Entonces, si esto es Javascript, el hecho de que decimos clase aquí no tiene sentido. En la versión anterior de

15:49.630 --> 15:50.080
Reaccionar,

15:50.080 --> 15:57.780
esto realmente rompió React, pero ahora nos da un buen error. Porque esto es Javascript y no HTML,

15:57.790 --> 16:01.150
tenemos que decir 'className', y es algo a lo que te acostumbrarás.

16:01.150 --> 16:05.890
Al principio te engañarán, pero después de un tiempo se vuelve fácil.

16:06.040 --> 16:12.010
Lo último que te voy a mostrar es la parte de React. Dentro del componente 'Hola',

16:12.040 --> 16:16.320
Ahora puedo agregar algo llamado accesorios o propiedades.

16:17.290 --> 16:19.270
Y estos accesorios pueden llamarse cualquier cosa.

16:19.270 --> 16:21.350
Piense en ellos como atributos de HTML.

16:21.370 --> 16:27.850
Puedo decir 'greeting = []', y aquí,

16:28.030 --> 16:35.520
Quiero envolverlo entre llaves y esta es una expresión de Javascript, lo que yo quiera, puedo decir 'Hola'

16:38.980 --> 16:49.000
'React Ninja', y si guardo esto me sale un error diciendo que no hay concatenación inútil.

16:49.000 --> 16:53.970
Entonces, está diciendo eso:¿por qué estás agregando cosas cuando puedes simplemente ponerlas todas juntas?

16:54.070 --> 17:00.100
Por lo tanto, es lo suficientemente inteligente como para incluso darle sugerencias o advertencias cuando está haciendo algo que no es

17:00.100 --> 17:00.360
limpiar.

17:00.360 --> 17:03.050
Pero por ahora, para fines de demostración, esto está bien.

17:03.400 --> 17:11.120
Ahora que lo he dado, lo que llamamos 'saludo' para 'Hola', ahora tengo acceso en 'Hello.js'

17:11.130 --> 17:14.640
para apoyos. Ahora puedo decir

17:17.190 --> 17:31.820
'this.props.greeting', guardo esto, vuelvo, y digo 'Hola React Ninja'.

17:32.050 --> 17:43.650
Usted ve, con esta sintaxis, está diciendo que este objeto, que es 'Hola', tiene propiedades 'accesorios', es decir 'saludo'.

17:44.060 --> 17:51.140
Sé que esto es confuso, es solo la sintaxis a la que te tienes que acostumbrar, pero ahora tenemos acceso a lo que sea

17:51.350 --> 17:57.100
propiedad, y cualquier valor de propiedad que obtenemos de

17:57.270 --> 18:02.320
'Hola'. Este es un poder que será útil más adelante.

18:02.390 --> 18:08.080
Pero quiero que construyas tu propio componente aquí y te sientas cómodo con la sintaxis.

18:08.230 --> 18:14.110
Es realmente muy poderoso y una vez que te acostumbras, puedes construir cualquier componente que desees.

18:14.350 --> 18:14.650
DE ACUERDO.

18:14.680 --> 18:15.670
Una última cosa.

18:16.760 --> 18:23.560
Este índice podría ser un poco difícil, pero quiero mostrarte que esto es solo una función.

18:23.730 --> 18:38.580
Si hago 'const Hello', y aquí, esta función acepta 'props'. Si hago una función de error aquí,

18:39.030 --> 18:40.620
envuélvelo entre llaves,

18:40.860 --> 18:47.620
y en lugar de hacer esto render, simplemente regreso

18:54.720 --> 19:02.670
Si guardé esto, bueno, estoy obteniendo un error porque 'this.props.greeting' realmente no existe

19:02.700 --> 19:05.220
porque ya no es un objeto.

19:05.220 --> 19:06.120
Es una función.

19:06.120 --> 19:07.280
Entonces no necesito los accesorios.

19:07.290 --> 19:14.040
Recibe accesorios, cualquiera que sea el parámetro que le demos, y 'props.greeting' es aceptable para nosotros.

19:14.070 --> 19:16.820
Guardo esto, vuelvo y miro eso.

19:16.830 --> 19:17.710
Esta funcionando.

19:17.880 --> 19:19.820
Solo son funciones.

19:19.810 --> 19:27.510
Piense en React como eso:solo estamos creando estas funciones que toman parámetros y estos parámetros

19:27.780 --> 19:36.460
que se dan dando atributos y valores, simplemente se están representando.

19:36.740 --> 19:43.410
Tengo acceso a 'props.greeting', si le doy otro accesorio aquí llamado, digamos, un perro, entonces tendré

19:43.440 --> 19:47.110
'props.dog' disponible para mí también.

19:48.600 --> 19:54.210
Y de nuevo tuvimos un pequeño error diciendo que 'Componente', estamos agarrando esto pero no estamos realmente

19:54.210 --> 19:59.190
usándolo y estamos usando concatenación innecesaria de cadenas.

19:59.190 --> 20:05.770
Otra vez realmente útil como puedes ver, bastante simple de recoger. En la próxima lección,

20:05.780 --> 20:10.850
comenzaremos a trabajar en nuestra aplicación RoboFriends, ahora que tenemos lo básico.

20:10.880 --> 20:12.620
Te veré en eso. Adiós.
