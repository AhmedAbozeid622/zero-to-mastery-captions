WEBVTT

00:01.470 --> 00:07.810
Quiero agregar una última cosa que hemos pasado por alto hasta este punto porque, bueno, no

00:07.810 --> 00:10.300
quiero empantanarte con demasiadas cosas.

00:10.300 --> 00:21.520
Si echamos un vistazo a nuestro proyecto. Bueno, es ... son muchos archivos. A pesar de que es una aplicación simple,

00:21.520 --> 00:26.380
usted puede imaginarse cuánto (mucho) más grande y más grande y más grande puede obtener este archivo fuente.

00:26.530 --> 00:31.010
Y la organización es una gran parte de trabajar en proyectos.

00:31.030 --> 00:36.940
La mayoría de las aplicaciones serán mucho más grandes que las que hemos creado y necesitamos una buena forma de organizarlas

00:36.940 --> 00:40.640
estas y la estructura de carpetas es una de las cosas más importantes.

00:40.660 --> 00:42.520
Así que vamos a limpiar este código.

00:42.580 --> 00:48.780
Te mostraré lo que haría si estuviera trabajando en esta aplicación y quiero que sea más extensible

00:48.790 --> 00:52.660
eso es más limpio, así que cuando otras personas entran en el equipo lo entienden.

00:52.660 --> 00:56.110
Y también puedo seguir creciendo esta base de código.

00:59.270 --> 01:09.350
Lo primero que haré es crear algunas carpetas. Uno se llamará "componentes" y estos son

01:09.350 --> 01:14.240
los componentes que hemos creado, como "CardList", "SearchBox" y "Scroll".

01:14.300 --> 01:20.560
El segundo se llamará "contenedores". Y contenedores

01:20.990 --> 01:29.030
son estos componentes inteligentes los componentes que contienen, que tienen estado en ellos, que tienen ganchos de ciclo de vida,

01:29.120 --> 01:31.880
que tienen la sintaxis de clase

01:31.880 --> 01:35.660
Ves estos componentes o estos contenedores,

01:35.660 --> 01:39.680
no podemos usar una función pura con ellos porque técnicamente no son puros.

01:39.740 --> 01:45.630
Han indicado que modifican dentro de estas funciones y eso está bien.

01:45.680 --> 01:52.700
Es imposible tener solo funciones puras porque la mayoría de las veces podemos necesitar hacer solicitudes

01:52.820 --> 01:58.600
al mundo exterior. Pero estos componentes son especiales y los llamaremos contenedores que contienen

01:58.600 --> 02:03.560
cosas y simplemente pasan de estado a componentes.

02:03.570 --> 02:14.920
Ahora podemos decir que vamos a mover "App.css" para que ahora esté en "contenedores".

02:14.920 --> 02:21.800
También vamos a decir "App.js", también vamos a moverlo para que esté en "contenedores".

02:25.440 --> 02:30.030
Y luego los componentes, las funciones simples, las funciones puras que hemos creado

02:30.090 --> 02:33.370
"SearchBox", "Scroll" y "CardList"

02:33.390 --> 02:42.370
Bueno, estos pueden estar en "componentes". Vamos a abrir la carpeta y hacer esto más simple. va a cerrar la pestaña,

02:42.370 --> 02:54.740
abre robofriends y vamos a abrir la fuente. Diremos "Scroll", "SearchBox", "Card" y "CardList"

02:54.790 --> 02:58.350
que son solo funciones puras dentro de "componentes".

02:59.420 --> 03:05.420
Ahora si recuerda que nuestra fuente también es parte del archivo "App.css".

03:05.450 --> 03:11.550
Así que vamos a mover eso allí también, porque está definido allí. Con eso volvamos a nuestra aplicación,

03:12.650 --> 03:20.290
y bueno, ahora tenemos muchos errores porque ahora se refieren a diferentes partes. Nuestra App.js

03:20.300 --> 03:27.590
vive en una carpeta diferente a "CardList" y "SearchBox" y "Scroll". La forma en que hacemos eso es

03:27.590 --> 03:37.940
usamos ".." lo que significa que dejamos la carpeta o vamos a la carpeta y luego desde allí, vamos a los contenedores

03:40.390 --> 03:44.140
oh, lo siento, entra desde los contenedores-

03:44.200 --> 03:48.950
entonces donde está "App.js", me voy a ir, que es ".."

03:49.210 --> 03:57.070
Y una vez que estoy aquí en el nivel de la carpeta, voy a decir "componentes" y puedo hacer lo mismo por

03:57.610 --> 03:58.660
el resto de ellos también.

04:05.410 --> 04:11.300
Guarde y también tenemos "index.js"

04:11.640 --> 04:15.360
que ahora se refiere a la "Aplicación" que vive en contenedores.

04:15.360 --> 04:21.540
Entonces, de nuevo, porque ahora estamos viviendo una carpeta, estamos en el mismo vecindario mientras que solo podemos

04:22.350 --> 04:25.390
"./containers/App"

04:25.610 --> 04:30.220
Ahorremos, oh, y dije mal.

04:30.220 --> 04:31.630
Buena ortografía por mi

04:31.760 --> 04:32.920
Todo se ve bien.

04:33.080 --> 04:36.090
Volvamos a nuestro sitio web.

04:36.090 --> 04:36.840
Ahí tienes.

04:36.840 --> 04:38.670
Todo se está arrastrando muy bien.

04:39.880 --> 04:40.090
DE ACUERDO.

04:40.100 --> 04:43.640
Entonces tenemos una bonita estructura de carpetas aquí.

04:43.650 --> 04:45.360
Las cosas se han limpiado.

04:45.370 --> 04:47.750
Y también tenemos "Scroll.js"

04:48.470 --> 04:55.500
Y creo que solo tenemos una copia extra, así que podemos ... haber hecho una copia de eso.

04:55.770 --> 04:57.730
Asegúrate de que todo sigue funcionando,

04:57.990 --> 04:59.160
Sí, todo sigue funcionando.

05:01.650 --> 05:05.440
Queremos eliminar un par de espacios aquí que hemos hecho.

05:05.460 --> 05:10.120
También notamos algunos errores, no necesariamente errores, sino cosas estilísticas.

05:10.140 --> 05:16.710
Por ejemplo, con el filtro, digo filtrar los robots e iterar a través de los robots, no

05:16.710 --> 05:18.270
realmente tiene sentido, ¿verdad? Debería ser

05:18.270 --> 05:23.470
cada elemento es un usuario "robot" que obtenemos.

05:23.610 --> 05:28.380
Así que guardo que sigue siendo el mismo sin errores.

05:28.410 --> 05:35.690
También veo un poco de limpieza que se puede hacer con el uso de "this.state" mucho,

05:35.770 --> 05:39.490
podemos decir, de nuevo, usando la desestructuración, podemos decir

05:42.100 --> 05:44.320
"robots const" y "campo de búsqueda"

05:44.350 --> 05:45.610
estamos haciendo desestructuración-

05:45.700 --> 05:50.810
es igual a "this.state".

05:51.000 --> 05:54.780
Y ahora puedo eliminar "this.state" de aquí.

05:54.780 --> 06:04.140
Puedo eliminar "this.state" de aquí y de todos los otros lugares donde estamos usando "this.state" y

06:04.140 --> 06:08.630
el "render". Si guardo, todo sigue funcionando.

06:08.750 --> 06:11.680
Pero el código es mucho más limpio.

06:11.700 --> 06:19.050
También notamos que aquí "longitud del lenguaje" es igual a cero, en realidad hay una manera más fácil de hacerlo.

06:19.050 --> 06:21.150
Y nuevamente es solo estilístico.

06:21.150 --> 06:23.930
Esto va a ser igual a cero.

06:23.970 --> 06:29.070
Entonces, si esto es cero, eso va a evaluar en JavaScript a falso.

06:29.070 --> 06:31.250
Entonces podemos decir lo opuesto.

06:31.300 --> 06:36.470
Recuerde la sintaxis? entonces si esto es cero y va a ser falso,

06:36.480 --> 06:45.390
Conviértalo en verdadero para que, si no hay robots, estemos "Cargando". Guardar y eso debería funcionar.

06:45.390 --> 06:56.220
Y finalmente, si ves una 'declaración if else', bueno, podemos volver, ¿o no? podemos decir-

06:56.470 --> 06:58.960
"devolver robots". Si hay robots

07:02.540 --> 07:07.060
"devuelve esto", veamos si eso todavía funciona.

07:09.040 --> 07:10.180
No necesitamos ese soporte adicional.

07:14.200 --> 07:15.630
Mira eso, todavía funciona.

07:15.970 --> 07:19.210
Y ahora puedes ver que las cosas están mucho más limpias.

07:19.210 --> 07:26.670
Tenemos una aplicación que representa todas nuestras cosas para nosotros.

07:26.670 --> 07:34.800
Y para terminar, ¿recuerdas? "packaged.json"? ¿Cómo tenemos algunos scripts preconstruidos? Y tuvimos esta "construcción"

07:35.510 --> 07:36.130
mando.

07:36.300 --> 07:48.700
Si detengo esto ahora y hago "compilación de NPM" o "compilación de ejecución de NPM", mira esto. Mientras esto está construyendo

07:48.910 --> 07:57.200
han creado una nueva carpeta llamada "compilar" y aquí, tenemos todos nuestros archivos

07:57.400 --> 08:00.090
Pero esta vez, optimizado. Qué significa eso?

08:00.100 --> 08:10.420
Bueno, si vamos a "static" y vamos a "js", mira eso, todo se minimiza para nosotros, nuestro CSS está optimizado

08:11.320 --> 08:19.540
y todo lo que necesitamos para implementar el sitio web está en esta carpeta. Así que ahora podemos tomar esta carpeta de "compilación"

08:19.840 --> 08:21.060
y ponerlo en cualquier lugar.

08:21.070 --> 08:24.540
Así que está en internet e incluso te da buena información.

08:24.700 --> 08:28.780
Entonces ahora tenemos esta "compilación" optimizada, no tenemos que minificarla,

08:28.810 --> 08:31.420
no tenemos que hacer todas estas optimizaciones.

08:31.510 --> 08:35.240
Pasa por babel para que podamos usar declaraciones de importación en los navegadores.

08:35.290 --> 08:40.370
Y ahora esta carpeta de "compilación" ahora se puede implementar en cualquier lugar.

08:40.410 --> 08:44.670
Como dije "Crear aplicación de reacción" elimina todo el dolor de la configuración.

08:44.820 --> 08:51.120
Todo está hecho para ti, solo puedes escribir código para usar componentes de React de toda la web

08:51.360 --> 08:55.250
para construir hermosos sitios web.

08:55.280 --> 08:57.560
Espero que estés entusiasmado con React como yo.

08:57.560 --> 09:02.680
Esta es la razón por la cual es una herramienta tan popular y esta es la razón por la que muchas compañías ahora la están usando.

09:03.710 --> 09:04.760
Te veré en el próximo.

09:04.970 --> 09:05.350
Adiós
