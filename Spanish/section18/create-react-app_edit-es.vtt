WEBVTT

00:01.340 --> 00:02.130
Dar una buena acogida.

00:02.180 --> 00:06.380
Es hora de construir nuestra aplicación Robo Friends para comenzar.

00:06.500 --> 00:08.850
Bueno, vamos a abrir nuestra terminal.

00:08.870 --> 00:11.050
Deberíamos estar cómodos con esto ahora.

00:11.480 --> 00:17.960
Para esta sección, realmente recomiendo la codificación y seguir los procesos porque

00:17.960 --> 00:23.310
aprenderá mucho mejor haciendo esto usted mismo.

00:23.360 --> 00:24.530
Y como lo prometí.

00:24.530 --> 00:28.750
Es bastante fácil y tendremos una hermosa aplicación al final.

00:28.850 --> 00:35.450
Pero para aquellos que disfrutan solo viendo y trabajando después, les proporcionaré los amigos finales de Robo.

00:35.540 --> 00:38.190
archivos de la aplicación para usted al final de esta sección.

00:40.150 --> 00:40.590
DE ACUERDO.

00:40.860 --> 00:41.940
Entonces no tenemos nada todavía.

00:41.970 --> 00:43.470
Estamos en el escritorio

00:43.470 --> 00:52.940
Necesitamos crear una carpeta de proyecto y necesitamos instalar reaccionar.

00:52.940 --> 01:01.490
Ahora si recuerdas en NPM, podríamos instalar reaccionar y tenerlo como parte de nuestros paquetes en package.json

01:01.500 --> 01:02.350
-

01:02.530 --> 01:07.480
Pero hay una herramienta otra vez porque las aplicaciones de reacción son tan comunes.

01:07.480 --> 01:15.320
Hay una herramienta que nos permite crear de inmediato una aplicación de reacción con todos nuestros archivos ya implementados.

01:15.370 --> 01:18.050
Se llama crear reaccionar

01:20.580 --> 01:21.280
aplicación

01:21.680 --> 01:29.780
Esta herramienta es un paquete global que desea instalar desde NPM y crea un proyecto inicial que

01:29.810 --> 01:36.270
contiene paquete web que contiene babel para que podamos usar las últimas funciones de JavaScript.

01:36.620 --> 01:41.860
Contiene pelusa y depuración que aún no hemos visto.

01:41.990 --> 01:46.880
Crea toda esta infraestructura para usted, así que de inmediato puede comenzar a escribir la aplicación y es una muy

01:46.880 --> 01:51.720
muy buena herramienta que mucha gente usa, así que vamos a instalar create-react-app.

01:51.740 --> 01:55.880
Si lo recuerdas, simplemente hacemos npm install dash g

01:59.110 --> 02:04.130
y esto nos dará la aplicación create-react-app nuevamente si obtienes estos errores.

02:04.160 --> 02:07.220
Siempre recuerda hacer sudo

02:14.550 --> 02:20.920
ahora que tenemos create-react-app, simplemente decimos create-react-app y el nombre de nuestra aplicación.

02:20.940 --> 02:25.390
En nuestro caso lo llamaremos Amigos Robo.

02:29.180 --> 02:36.010
Ves que está instalando un montón de cosas que necesitamos.

02:36.400 --> 02:44.260
Parece que es un Robo Friends creado con éxito en mi directorio e incluso te da algunos buenos comandos

02:44.290 --> 02:52.600
npm start npm ejecuta build npm test npm ejecuta expulsa pero lo veremos luego.

02:52.600 --> 02:55.940
Veamos lo que tenemos en nuestra carpeta de escritorio.

02:57.120 --> 03:01.250
Tenemos amigos de Robo que ya han sido creados para nosotros.

03:01.650 --> 03:03.270
OK, vamos a cd en eso.

03:05.000 --> 03:14.690
Y ahora si lo hago, parece que tenemos un montón de carpetas y archivos como package.json que eran

03:14.690 --> 03:18.150
ya creados para nosotros y módulos de nodos, qué increíble es eso.

03:18.170 --> 03:23.790
Ya instala reaccionar y todas las dependencias que necesitamos.

03:23.930 --> 03:28.830
De hecho, si vamos al escritorio vemos la carpeta aquí.

03:28.970 --> 03:31.690
Así que vamos a arrastrar esto a Sublime Text.

03:31.880 --> 03:36.740
Ábrelo y voy a cambiar las pantallas para que podamos ver

03:40.280 --> 03:42.190
ambos al mismo tiempo.

03:47.680 --> 03:56.180
Ahora, antes de mostrarle lo que hay en la carpeta, vemos que si vamos a package.json vemos las dependencias

03:56.180 --> 03:57.530
nosotros hemos reaccionado

03:57.530 --> 04:04.880
Tenemos algo llamado react-dom y react-scripts y también tenemos un conjunto de scripts que

04:04.970 --> 04:07.160
ellos ya han creado para nosotros.

04:07.160 --> 04:10.850
Tenemos comenzar la prueba de compilación y expulsar.

04:11.010 --> 04:16.710
Comencemos con el inicio porque bueno, parece que el inicio lee las secuencias de comandos de reacción y comienza

04:16.710 --> 04:18.210
nuestro servidor

04:18.210 --> 04:19.790
Así que voy a decir npm start

04:26.870 --> 04:35.990
mira que tenemos en nuestro servidor local una aplicación de reacción de muestra para que todo funcione.

04:36.030 --> 04:40.200
No tuvimos que hacer nada excepto ejecutar solo dos comandos realmente.

04:40.470 --> 04:41.220
Muy genial.

04:41.400 --> 04:41.680
DE ACUERDO.

04:41.700 --> 04:46.530
Veamos qué ha creado create-react-app para nosotros.

04:46.530 --> 04:52.660
Tenemos un archivo Léame que es solo información que si recuerdas cuando lo ponemos en github

04:52.710 --> 04:53.820
esto mostrará

04:53.840 --> 05:01.040
en la carpeta del proyecto tenemos package.json que nuevamente tiene sentido.

05:01.280 --> 05:03.500
Te explicaré lo que significan las dependencias.

05:03.530 --> 05:04.710
en el próximo video

05:04.940 --> 05:12.110
Pero vemos que los scripts que proporcionamos y todos usan secuencias de comandos de reacción.

05:12.410 --> 05:16.540
Ahora, reaccionar scripts es lo que hace que create-react-app

05:16.580 --> 05:22.960
tan impresionante en lugar de instalar cosas como webpack y babel.

05:22.970 --> 05:29.330
¿Recuerdas cuánta configuración tuvimos que hacer para que JavaScript ES6 funcione?

05:29.480 --> 05:36.170
Y luego también usamos browserify para agrupar los archivos de JavaScript y los scripts de reacción hacen todo

05:36.170 --> 05:42.940
para ti y utiliza lo último y lo mejor de lo mejor para que no tengamos que preocuparnos por nada de eso.

05:42.950 --> 05:49.820
Por lo tanto, permite que las personas construyan aplicaciones realmente muy rápidas y puedes usar la expulsión si terminas queriendo

05:49.820 --> 05:53.610
para personalizar los scripts de reacción e ir por su cuenta.

05:54.020 --> 06:00.710
Así que a medida que su proyecto se hace cada vez más grande, siempre puede expulsar y personalizar su aplicación, es la mejor manera

06:00.710 --> 06:02.450
para comenzar un proyecto de reacción.

06:02.450 --> 06:06.920
Es administrado por el equipo de Facebook y es realmente muy bueno.

06:08.580 --> 06:09.060
DE ACUERDO.

06:09.230 --> 06:16.910
También vemos que hay un archivo package-lock.json y este es un archivo que se genera automáticamente

06:16.910 --> 06:18.390
por package.json

06:18.620 --> 06:26.000
Se asegura de que los números de versión de sus dependencias estén bloqueados de modo que si doy este proyecto

06:26.000 --> 06:33.350
a cualquier persona en cualquier parte del mundo nos aseguramos de que las versiones sean correctas para que funcione

06:34.130 --> 06:35.300
100 por ciento del tiempo

06:36.370 --> 06:40.900
También tenemos algo llamado git-ignore y tiene un punto al frente.

06:40.900 --> 06:42.600
En realidad se llama un archivo de puntos.

06:42.850 --> 06:47.230
Y antes de ejecutar git e impulsar este proyecto en github.

06:47.560 --> 06:54.460
Bueno, comprueba este archivo y si ve algo aquí, no debería incluirlo automáticamente.

06:54.460 --> 06:56.030
dice ignorar estos archivos.

06:56.200 --> 07:01.720
Así que recuerda cómo dije que los módulos de nodos no queremos enviar eso a un repositorio porque también tenemos package.json

07:01.720 --> 07:08.950
y crea trabajo innecesario y espera para impulsar nuestro proyecto nuevamente, no nos importa

07:08.950 --> 07:13.780
carpeta de módulos nodo no nos importa la carpeta de cobertura que una vez más se trata de pruebas que no necesitamos

07:13.780 --> 07:14.870
para cubrir eso.

07:15.100 --> 07:18.430
Y tampoco nos importan las carpetas de compilación.

07:18.450 --> 07:25.940
Y un par de otros simplemente genera esto automáticamente para nosotros, no necesitamos tocarlo.

07:26.120 --> 07:32.810
Entonces, obviamente, tenemos nuestros módulos de nodo y se puede ver aquí hay un montón de ellos que otra vez

07:32.840 --> 07:36.940
create-react-app solo se construye automáticamente para nosotros.

07:36.990 --> 07:41.850
También tenemos una carpeta pública y aquí todo debería ser familiar.

07:41.850 --> 07:48.730
Tenemos index.html tenemos algo llamado manifest.json

07:49.070 --> 07:56.300
Es una nueva característica que permite a las personas descargar un acceso directo a su sitio web y tener un ícono en su

07:56.300 --> 07:56.750
escritorio.

07:56.750 --> 07:58.640
Pero nuevamente no tenemos que preocuparnos por eso.

07:58.760 --> 08:06.620
Y luego tenemos favicon.ico que es el pequeño ícono que aparece en la parte superior aquí y tú

08:06.620 --> 08:13.060
puede cambiar eso con cualquier archivo .ico que desee y hay herramientas en línea para generar esto para usted.

08:13.070 --> 08:14.970
De nuevo, algo de lo que no tenemos que preocuparnos.

08:16.520 --> 08:21.240
Y finalmente tenemos la carpeta src que es la carpeta de origen.

08:21.400 --> 08:25.090
Aquí es donde sucede toda la reacción mágica.

08:25.370 --> 08:29.640
Si miras index.js ese es el archivo de script principal.

08:29.660 --> 08:37.100
Estamos haciendo algunas importaciones que recuerda que solo estamos importando scripts diferentes y simplemente somos

08:37.100 --> 08:40.720
diciendo esta nueva sintaxis que nunca hemos visto antes.

08:40.730 --> 08:45.310
ReactDOM render el documento de la aplicación obtiene elemento por ID.

08:45.320 --> 08:46.890
OK, sabemos esto.

08:47.000 --> 08:55.420
Así que estamos agarrando un elemento de raíz de ID y estamos diciendo que la aplicación de renderizado ReactDOM.

08:55.700 --> 09:02.120
Si vamos al archivo index.html que vemos aquí y tienen comentarios muy agradables que

09:02.130 --> 09:11.580
Puedes leer que vemos que dentro del cuerpo hay solo un div este archivo noscript es en caso de que un navegador

09:11.580 --> 09:13.260
no está usando JavaScript.

09:13.260 --> 09:15.660
De nuevo, no tenemos que preocuparnos por eso.

09:15.690 --> 09:18.360
Simplemente viene con el valor predeterminado porque es una buena práctica.

09:18.630 --> 09:23.960
Pero en el cuerpo solo tenemos este div con ID root y nada más.

09:23.980 --> 09:26.160
Sin embargo, cuando vamos a nuestra aplicación, vemos eso.

09:26.370 --> 09:28.270
Bueno, definitivamente hay algo allí.

09:28.360 --> 09:33.310
Aquí hay al menos texto y al menos un logotipo allí. Así que volviendo aquí.

09:34.550 --> 09:37.010
Sin saber nada, podemos decir eso.

09:37.170 --> 09:37.840
DE ACUERDO.

09:38.300 --> 09:48.820
Estamos agarrando esta raíz de ID en el archivo index.js y estamos diciendo que queremos renderizar esta aplicación

09:49.300 --> 09:54.750
componente y esto es lo que llamamos sintaxis JSX que veremos más adelante.

09:54.910 --> 09:59.030
Esta aplicación es la forma de reaccionar de decir que este es un componente de reacción.

09:59.050 --> 10:06.240
Y quiero que renderices en la pantalla en el cuerpo así puedo cambiar esto a

10:06.550 --> 10:13.550
Bueno, podemos decir h1 Hello World.

10:14.120 --> 10:14.520
Hola Mundo

10:18.160 --> 10:18.760
h1

10:19.680 --> 10:29.520
Y ahora si guardo esto notarás que reaccionar compila automáticamente esto para nosotros, así que no tengo

10:29.520 --> 10:32.490
para actualizar y mirar eso en nuestro sitio web tenemos

10:32.670 --> 10:33.860
Hola Mundo.

10:35.280 --> 10:36.490
Muy genial.

10:36.510 --> 10:39.450
Ahora, nuevamente, otra gran cosa acerca de crear-reaccionar-aplicación

10:39.450 --> 10:43.670
También le da advertencias de que dice que la aplicación está definida pero nunca utilizada.

10:43.680 --> 10:48.920
Entonces, si voy aquí sí, estoy importando una aplicación, pero nunca la uso.

10:48.930 --> 10:56.740
Así que también recibimos muy buenos consejos en nuestra terminal sobre cómo podemos mejorar la aplicación.

10:57.010 --> 10:57.490
DE ACUERDO.

10:57.750 --> 11:02.160
Lo último que quiero mostrarte antes de entrar en la siguiente sección es que empecemos a investigar

11:02.160 --> 11:05.800
el código como puedes ver el color está apagado.

11:05.820 --> 11:12.280
Y eso es porque Sublime Text realmente no entiende lo que está sucediendo aquí.

11:13.790 --> 11:21.080
Si cambiamos esto a Babel JavaScript, ahí va.

11:21.230 --> 11:26.720
Obtenemos la sintaxis agradable y todo se ve bien.

11:27.660 --> 11:28.500
Perfecto.

11:28.560 --> 11:33.260
Tenemos nuestra aplicación configurada. Quiero que cambies la etiqueta aquí para

11:33.270 --> 11:33.900
Hola Mundo

11:33.900 --> 11:37.540
Por ahora solo para asegurarse de que todo esté funcionando.

11:37.660 --> 11:43.880
Pero por ahora tienes una configuración en el siguiente video vamos a ir a través del resto de los archivos y

11:43.880 --> 11:47.270
En realidad, comenzamos a construir nuestro primer componente.

11:47.300 --> 11:48.430
Va a ser muy divertido.

11:48.470 --> 11:49.410
Te veré en eso. Adiós
