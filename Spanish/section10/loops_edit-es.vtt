WEBVTT

00:01.210 --> 00:07.830
Dar una buena acogida. Hasta este punto, hemos aprendido que el código solo se ejecuta de arriba hacia abajo.

00:07.830 --> 00:14.020
Solo en línea recta. Hemos aprendido sobre condicionales, donde podemos agregar una 'declaración de si' y tenerla

00:14.020 --> 00:17.380
ve por un camino o 'else', ve por el otro lado.

00:17.710 --> 00:24.220
Luego también aprendimos sobre 'if else' y 'else if'.

00:24.310 --> 00:35.680
Entonces 'if', 'else if', 'else if', 'else'. Y luego, ¿y si quisiéramos hacer algo como esto? Algo donde guardamos

00:35.680 --> 00:42.280
haciéndolo una y otra vez. Y eso se llama 'bucle', y es allí donde vamos a aprender en este video.

00:42.640 --> 00:49.750
Y como puede ver en nuestro esquema, bucle de JavaScript, vamos a revisar todo esto en este video.

00:49.910 --> 00:50.720
Empecemos.

00:52.480 --> 01:02.160
Tengo una etiqueta de 'script' vacía aquí. Una vez más, esto se adjunta a nuestro HTML y comencemos con tal vez una 'lista de tareas pendientes'.

01:02.160 --> 01:12.760
Y una lista de cosas por hacer tiene ... o debería ser una matriz. Y queremos tener tal vez "habitación limpia".

01:12.880 --> 01:25.730
Queremos tener "dientes de cepillo". Tal vez "ejercicio", definitivamente debería "estudiar" algunos "javascript".

01:25.790 --> 01:28.910
Y finalmente, bueno, deberíamos "comer sano".

01:29.090 --> 01:32.330
Todo bien. Entonces tenemos una 'lista de tareas'.

01:33.200 --> 01:39.950
Digamos que queríamos agregar un signo de admiración al final de estos elementos de la "lista de tareas pendientes".

01:39.950 --> 01:43.140
Quiero decir, todos estos son realmente importantes y queremos enfatizar eso.

01:43.170 --> 01:49.190
Pero, quiero decir, eso es un poco tedioso, ¿verdad? Tengo que ir uno por uno y agregar un signo de exclamación, agregar un

01:49.220 --> 01:50.130
signo de exclamación.

01:50.130 --> 01:54.310
E imagina si la 'lista de tareas pendientes' tuviera cientos de líneas.

01:55.470 --> 01:58.410
Y como programadores, queremos hacer las cosas de manera eficiente.

01:58.410 --> 02:00.310
Para eso tenemos máquinas.

02:00.720 --> 02:06.930
Entonces, agreguemos algo de bucle a esto. Para hacer un bucle en JavaScript

02:06.930 --> 02:12.530
una de las principales formas en que puede hacerlo, se llama 'for loop'. Y vas a aprender una nueva sintaxis aquí.

02:12.540 --> 02:19.410
Y ten cuidado! Parece confuso al principio, pero es una de esas cosas otra vez, tienes que hacerlo unos pocos

02:19.410 --> 02:21.890
veces, y lo entenderá.

02:21.900 --> 02:27.370
Entonces, el primero es la variable 'i' es igual a '0' que haremos.

02:27.390 --> 02:33.240
Cuando 'i' es menor que 'todos.length'.

02:33.480 --> 02:37.780
Y luego haremos 'i ++'.

02:37.780 --> 02:40.220
No te preocupes, explicaré lo que esto significa.

02:40.270 --> 02:47.310
Tenemos los corchetes y luego aquí por ahora, esperemos y explicamos qué está pasando.

02:47.320 --> 02:53.410
Entonces, estoy diciendo 'para', que es una palabra de JavaScript que dice:vamos a hacer un ciclo.

02:53.890 --> 02:59.200
Ahora, en este ciclo, lo primero que vamos a hacer es decir:'i' es igual a '0'.

02:59.200 --> 03:01.220
Entonces, solo una variable aleatoria 'yo' es:03:01.300 --> 03:04.840
es común que se use en un bucle 'for' - significa 'índice'.

03:04.840 --> 03:07.080
Entonces 'yo' comienza con '0'.

03:07.090 --> 03:13.670
Tenemos un punto y coma, lo que significa que es el final de la expresión, simplemente le asignamos a la variable 'i' el '0'

03:14.330 --> 03:18.840
y luego en la siguiente línea dice:'yo', que es en este momento '0'.

03:19.160 --> 03:27.150
Si eso es menor que la longitud 'todos' y 'todos.length', nunca hemos visto esto antes.

03:29.360 --> 03:32.050
Pero está diciendo:¿cuánto tiempo dura la lista?

03:32.060 --> 03:40.350
En este caso '1, 2, 3, 4, 5'. Entonces '0' es mayor que (* menor que) '5'.

03:40.530 --> 03:44.040
Si ese es el caso, ejecuta este ciclo.

03:44.280 --> 03:51.800
Y luego, cuando hayas terminado, haz 'i ++', que significa 'i' más '1'.

03:51.820 --> 03:53.620
Entonces, repasemos eso.

03:53.620 --> 04:06.760
Primero fuera de 'todos.lenth'. si voy, si copio esto, hago 'todos.length' - obtengo '5', cinco elementos.

04:06.870 --> 04:07.940
Yo también puedo hacer

04:08.070 --> 04:14.060
'' helllooo '' .length 'y obtengo' 8 '.

04:14.070 --> 04:22.730
Entonces 1, 2, 3, 4, 5, 6, 7, 8. Entonces 'longitud' solo nos dice cuántos elementos hay en la lista.

04:22.720 --> 04:26.390
Y si hago la variable 'i' es igual a '0'.

04:27.620 --> 04:28.700
Bueno, 'yo' es '0'.

04:28.710 --> 04:39.700
Pero si hago 'i ++', y veo 'i' otra vez, veo que es '1'. Si hago 'i ++' otra vez, bueno, obtengo '2'.

04:39.740 --> 04:43.010
Entonces esto está incrementando 'yo'.

04:43.100 --> 04:48.850
Entonces, lo que estamos haciendo es decir:comenzar con '0', y siempre que 'yo'

04:48.890 --> 04:54.120
es menor que '5', luego ejecuta cualquier cosa en este bloque.

04:54.140 --> 04:57.880
Y una vez que haya terminado con esto, agregue '1' a 'i'.

04:57.950 --> 05:01.980
Entonces, veamos qué sucede si hago 'console.log'.

05:02.390 --> 05:10.130
'Yo aqui. Vamos a guardar y actualizar '0', '1', '2', '3', '4'.

05:10.320 --> 05:13.570
Entonces, estamos haciendo un ciclo, donde comienza con '0'.

05:13.740 --> 05:15.370
Que agreguemos '1'.

05:15.450 --> 05:21.990
Ahora es '1'. Luego agregamos otro '1' a '2', otro '1' a '3', y otro '1' a '4', y ¿cómo es que

05:21.990 --> 05:31.890
no tenemos '5' aquí porque, tan pronto como 'i' es igual a '5', va a coincidir con 'todos.length' y el ciclo se detiene.

05:31.920 --> 05:36.780
Así es como le decimos al ciclo que pare. DE ACUERDO.

05:36.990 --> 05:44.290
Entonces, ¿cómo podemos hacer esto:si quisiéramos agregar un signo de exclamación al final de estos?

05:44.310 --> 05:47.250
Bueno, podemos acceder a 'todos'

05:50.430 --> 05:58.840
por - porque es una matriz, por 'yo'. Debido a que la primera vez, 'i' será '0', que debería ser "sala limpia".

05:58.920 --> 06:05.550
Luego '1' que es 'dientes de cepillo', luego '2' que es 'ejercicio', '3' que es 'estudiar javascript' y 4 que

06:05.550 --> 06:07.420
es "comer sano".

06:07.540 --> 06:14.620
Entonces, veamos eso. Si hago 'todos [i]' y guardo. Actualice y debería cambiar esto a 'i'.

06:14.670 --> 06:16.220
Ahí tienes.

06:16.310 --> 06:25.220
De lo contrario, si hago esto, esto no se ejecutará, mire esto. Porque, bueno, esto es '5' igual a '5', entonces es

06:25.220 --> 06:27.570
Nunca voy a ir, nunca va a pasar por esto.

06:27.770 --> 06:29.090
Cambiemos eso a 'yo'.

06:29.210 --> 06:34.290
Y actualice:'sala limpia', 'cepillo de dientes', 'ejercicio', 'estudiar javascript', 'comer saludable'.

06:34.310 --> 06:35.050
Perfecto.

06:35.060 --> 06:41.840
Entonces, ahora puedo hacer '[i] + "!"'

06:42.220 --> 06:45.850
Vamos a actualizar ¡Mira eso!

06:46.090 --> 06:47.630
Así de importantes son estos artículos.

06:47.740 --> 06:59.740
Pero si hago 'todo' - o 'todos'. Bueno, mis 'todos' en realidad no tienen este signo de exclamación que acabamos de registrar en la consola

06:59.740 --> 07:02.990
ellos, pero en realidad no hemos cambiado ese 'todo', ¿verdad?

07:03.190 --> 07:06.800
Así que hagámoslo.

07:06.970 --> 07:22.090
Ahora podemos decir que 'todos [i] = todos [i] + "!"'.

07:22.110 --> 07:23.020
Entonces, veamos.

07:23.020 --> 07:24.570
Me refresco

07:24.570 --> 07:25.330
No pasa nada.

07:25.330 --> 07:26.760
Pero ahora si reviso 'todos' ...

07:29.490 --> 07:33.540
¡Mira eso! Tengo exclamaciones en cada uno de mis 'todos'.

07:34.140 --> 07:45.620
Y nuevamente, para desglosar eso, decimos que "sala limpia" ahora equivale a "sala limpia" más signo de exclamación.

07:45.620 --> 07:46.620
Muy genial.

07:47.060 --> 07:47.580
DE ACUERDO.

07:47.720 --> 07:51.060
Aprendamos algunos otros, en realidad antes que nosotros,

07:51.290 --> 07:57.620
¿Qué pasa si queremos eliminarlos de la lista? Tal vez queremos tacharlos, porque los hemos hecho. Bien,

07:58.130 --> 08:01.460
podemos hacer algo como 'todos [i] .pop'.

08:01.490 --> 08:06.140
Si lo recuerdas, ese es un método de matriz 'pop' que elimina el último elemento.

08:06.350 --> 08:14.870
Entonces, si voy, guardo y actualizo, obtengo 'todos [i] .pop no es una función'.

08:14.870 --> 08:15.540
¿Porqué es eso?

08:15.560 --> 08:20.070
Bueno, porque estamos diciendo "habitación limpia" - "pop".

08:20.100 --> 08:21.820
Y eso es una 'cuerda'.

08:22.290 --> 08:27.990
Lo que queremos hacer es 'todos.pop', porque esa es la 'matriz'.

08:28.350 --> 08:34.230
Entonces, si guardo y actualizo eso, veamos qué tenemos en nuestros 'todos':08:35.880 --> 08:38.920
"habitación limpia" y "dientes de cepillo".

08:38.930 --> 08:39.510
Hmm.

08:39.630 --> 08:40.740
¿Porqué es eso?

08:41.160 --> 08:46.820
Bueno, porque inicialmente esto era '0'.

08:47.060 --> 08:50.290
Y la longitud de la lista 'todos' era '5'.

08:50.600 --> 08:59.770
Pero luego, debido a que lo insertamos, esto cambió a '4' y esto a 'uno', y luego a '3' y '2'.

09:00.050 --> 09:05.910
Entonces, como puede ver, eliminamos "comer sano", "estudiar javascript" y "hacer ejercicio".

09:05.930 --> 09:12.270
Pero debido a que nuestro lenth 'todos' cambió, bueno, se detuvo a la mitad.

09:12.310 --> 09:16.080
Entonces, ¿de qué manera podemos solucionar ese problema?

09:17.630 --> 09:29.360
Bueno, podemos hacer variable 'todos.length' igual a 'todos.length'.

09:29.650 --> 09:32.020
Entonces ahora esta variable es '5'.

09:32.140 --> 09:42.680
Si solo hago la variable 'todos.lenth', esto va a recordar, porque solo se ejecutará

09:42.680 --> 09:43.580
una vez, va ...

09:43.730 --> 09:48.370
Esto se ejecutará, luego asignaremos '5' a 'todos.length'.

09:48.560 --> 09:51.370
Y luego esto va a pasar.

09:51.400 --> 09:59.940
Entonces, si guardo esto y lo actualizo, veamos 'todos'. ¡Mira eso! ¡Terminamos todos nuestros 'todos'!

10:00.070 --> 10:00.790
Muy genial.

10:01.430 --> 10:11.230
Bueno, déjame mostrarte otra opción, que es el ciclo "while". El ciclo "while" es algo como esto.

10:15.250 --> 10:18.810
'while', - vamos a crear una variable aquí. Variable 'contador'

10:21.390 --> 10:22.910
'counterOne'

10:23.090 --> 10:36.160
Vamos a decir eso, eso es '0'. Y vamos a decir:'mientras que CounterOne es menos de 10'.

10:36.300 --> 10:39.810
En ese caso, quiero 'console.log'

10:43.000 --> 10:50.590
'counterOne'. Y luego quiero 'counterOne' plus, plus.

10:50.640 --> 10:53.010
Recuerde que lo estamos haciendo, estamos agregando.

10:53.430 --> 10:58.800
Así que cada vez aumentamos el "contador" en "1". Veamos qué pasa aquí.

10:58.800 --> 11:09.330
Si guardo esto y actualizo:"0, 1, 2, 3, 4, 5, 6, 7, 8, 9" y luego se detiene, porque, en cuanto esto sea '10',

11:10.330 --> 11:11.500
esto ya no es correcto.

11:11.500 --> 11:14.530
Entonces esta parte del bloque no se ejecuta.

11:17.820 --> 11:18.260
DE ACUERDO.

11:18.420 --> 11:29.200
¿Puedo hacer algo ... tal vez ... al revés? Donde decimos que el 'contador' es '10' y esta vez queremos

11:29.200 --> 11:30.180
para contar hacia abajo

11:30.520 --> 11:38.940
Entonces, mientras el contador es '10' - sigue, y de lo contrario, detente. Y la forma en que hacemos eso, obviamente queremos

11:39.210 --> 11:39.780
sustraer.

11:39.780 --> 11:43.900
No queremos seguir '11' o '12', porque de lo contrario continuará por siempre.

11:44.070 --> 11:47.570
La forma en que hacemos eso es menos, menos, que es exactamente lo contrario.

11:47.580 --> 11:49.190
Entonces, resta '1'.

11:49.620 --> 11:50.810
Veamos qué pasa.

11:52.610 --> 11:56.410
'10, 9, 8, 7, 6, 5, 4, 3, 2, 1 '.

11:56.420 --> 11:57.830
Ahí tienes.

11:57.890 --> 12:05.300
Ahora, por curiosidad, ¿qué pasará si voy así, donde el número sigue aumentando desde

12:05.330 --> 12:08.560
'10' a '11', a, bueno, infinito.

12:08.590 --> 12:08.890
¿Derecha?

12:08.900 --> 12:16.800
Simplemente va a seguir y puede hacer esto en Google Chrome si lo desea.

12:16.880 --> 12:19.950
En realidad es bastante, bastante entretenido.

12:19.970 --> 12:27.170
Lo que ocurre es que simplemente continúa para siempre. Obtendrás una lista de todas estas cosas y

12:27.260 --> 12:34.460
se llama eso en un "ciclo infinito". Un 'bucle infinito' significa que prácticamente va infinitamente. Excepto esto

12:34.460 --> 12:38.910
realmente no, porque eventualmente Google Chrome va a colapsar.

12:38.990 --> 12:42.440
Va a decir:"Oye, no puedo manejar toda esta información.

12:42.440 --> 12:45.630
Me estás volviendo loco "y va a dejar de funcionar.

12:46.640 --> 12:47.040
DE ACUERDO.

12:47.120 --> 12:49.930
Entonces aprendimos el 'for loop'.

12:50.060 --> 12:52.700
Aprendimos el 'mientras'. ¿Qué más tenemos?

12:52.700 --> 12:55.630
Tenemos el 'hacer'.

12:55.790 --> 13:07.470
Entonces, esto se llama el ciclo 'do while' y es un poco diferente 'while'. Comenzamos con 'hacer'.

13:07.750 --> 13:19.070
Luego, corchetes, y decimos 'contador' ... llamemos 'contador Dos' esta vez. Haré variable 'counterTwo'

13:19.910 --> 13:25.860
es igual a '10'. Y haz 'counterTwo', plus, plus.

13:25.930 --> 13:27.180
Así que agrega 'counterTwo'.

13:27.640 --> 13:32.850
Y también 'console.log (contador Dos)'.

13:33.130 --> 13:41.440
Y queremos mover 'console.log' en la parte superior, porque de esta manera comenzaré con '10', luego aumentaré - uy ...

13:41.490 --> 13:43.450
Esto debe ser restado.

13:43.530 --> 13:45.700
Entonces hacemos '10'.

13:45.790 --> 13:49.710
Es algo así como '10', luego va a restar. Así que la próxima vez que ocurra aquí, va a

13:49.710 --> 13:50.980
ser '9'.

13:51.480 --> 13:55.650
Y luego hacemos 'while', y damos una condición aquí.

13:55.650 --> 14:04.890
Entonces las condiciones van a ser 'counterTwo', va a ser mayor que '0'.

14:05.240 --> 14:05.520
DE ACUERDO.

14:05.530 --> 14:08.910
Entonces, veamos qué pasa aquí.

14:08.990 --> 14:13.960
Actualizo:'10, 9, 8, 7, 6, 5, 4, 3, 2, 1 '.

14:14.310 --> 14:21.580
Hmmm, parece que hicimos lo mismo que el 'while loop', ¿no?

14:21.580 --> 14:24.060
Así que déjame probar eso.

14:24.070 --> 14:27.240
Vamos a actualizar aquí.

14:27.470 --> 14:35.120
Y vemos que tenemos '10' a '1' para el ciclo while y '10' a '1' a través del ciclo 'do while'.

14:35.120 --> 14:37.490
Entonces, ¿cuál es la diferencia aquí?

14:37.760 --> 14:44.930
La diferencia es que con un ciclo 'while' comprobamos primero la condición, por lo que decimos:"¿Es mayor CounterOne?

14:44.930 --> 14:45.500
que '0'?

14:45.550 --> 14:53.960
DE ACUERDO. Luego haz esto ". Frente al ciclo" do while ", que dice:" Haz las cosas primero y luego haz 'counterTwo' ".

14:54.110 --> 14:57.500
Déjame solo demostrar ese punto.

14:57.570 --> 15:07.530
Si lo hacemos ... '10' aquí. Y '10'. Vamos a actualizar

15:07.750 --> 15:09.200
Solo obtengo '1'.

15:09.210 --> 15:11.430
Hmm ... Vamos a verificar algo aquí.

15:11.510 --> 15:24.330
Voy a decir que este es el ciclo 'while' y este es el ciclo 'do while'. Guardar y actualizar Entonces parece

15:24.330 --> 15:26.530
el 'do while' se ejecutó.

15:26.910 --> 15:32.520
Pero el ciclo 'while' nunca lo hizo, porque. Bueno, '10' es igual a '10'.

15:32.700 --> 15:40.770
Esto falla y el ciclo no se ejecuta. Frente al ciclo 'do while', eso hace primero y luego verifica

15:40.770 --> 15:42.670
condición, si deberían hacer un bucle.

15:42.810 --> 15:51.180
Entonces esa es la diferencia entre estos dos. Pero para ser honesto contigo, la mayoría de las veces vas a

15:51.180 --> 16:00.530
estar usando un bucle 'for'. Y el ciclo 'para' es a lo que te acostumbrarás. Pero, en realidad hay una mejor

16:00.530 --> 16:02.530
forma de hacerlo.

16:02.720 --> 16:08.990
Si miras la 'SectionOutline', vemos que tengo una última, que es 'forEach' y dice "new in

16:08.990 --> 16:10.590
ECMAScript 5 ".

16:10.880 --> 16:19.070
Así que, al recordar que JavaScript evoluciona constantemente y que ECMAScript 5 era un nuevo estándar, eso agregó

16:19.230 --> 16:25.170
el método 'forEach'. Entonces, ¿cuál es el método 'para cada uno'?

16:25.180 --> 16:29.190
Bueno, voy a mostrarte la diferencia entre un bucle "for" y un "forEach".

16:29.190 --> 16:30.920
Ambos hacen la misma cosa.

16:31.110 --> 16:34.620
Pero, dime cuál se ve mejor.

16:34.710 --> 16:42.490
Bueno, aquí diremos 'console.log (i)'

16:43.640 --> 16:54.010
Así que solo estamos registrando la 'i'. Y con un bucle 'forEach' puedo hacer la función 'todos.forEach'

16:55.110 --> 16:58.260
'i', 'console.log (i)'.

16:58.560 --> 17:04.270
Es mi mirada un poco confusa, pero vamos a probarlo, veamos qué pasa.

17:04.880 --> 17:16.160
Así que parece que una línea '10' está imprimiendo a '0, 1, 2, 3, 4' y la línea '14' está imprimiendo "espacio libre, cepillo

17:16.170 --> 17:17.950
dientes, ejercicio, estudio javascript,

17:17.950 --> 17:19.090
come sano".

17:19.090 --> 17:20.480
¿Qué estamos haciendo aquí?

17:20.480 --> 17:22.220
Bueno, el 'para cada uno'

17:22.430 --> 17:24.190
Toma una matriz.

17:24.190 --> 17:31.530
En este caso, el 'todos', y pide una discusión, es 'dime qué hacer con eso'.

17:33.030 --> 17:41.820
Entonces, la acción que queremos realizar en los 'todos' se puede representar en una función.

17:41.870 --> 17:52.330
Así que digo 'función', y esta función recibe el argumento de 'i', que es que cada elemento individual en

17:52.330 --> 17:53.170
los 'todos'.

17:53.530 --> 18:02.750
Entonces, podría decir 'todo' aquí y 'todo'. Y actualiza y seguirá siendo el mismo.

18:02.770 --> 18:12.030
Entonces, ven aquí que no estamos necesariamente accediendo al índice como estamos con este, porque aquí

18:12.030 --> 18:21.600
para obtener los 'todos' que tuve que hacer, 'todos [i]'. Si me actualizo DE ACUERDO.

18:21.710 --> 18:24.440
En ese caso, ahora es todo lo mismo.

18:24.910 --> 18:29.190
OK, pero ¿cómo accedo al índice dentro de 'forEach'?

18:29.570 --> 18:38.860
Bueno, el segundo parámetro. Y el segundo argumento que recibe es la 'i', el índice.

18:38.870 --> 18:52.260
Entonces, si hago 'i' y actualizo:'0, 1, 2, 3, 4'. Entonces, es lo mismo que está haciendo esto en el ciclo 'para'. Y me refresco

18:52.980 --> 19:03.710
y mira eso. Ahora, al mirar estos 2 ¿cuál te dice más acerca de lo que hace?

19:04.850 --> 19:06.670
¿Este o este?

19:06.710 --> 19:17.490
Leámoslo en inglés:'todos.forEach' ejecuta una función, esa 'consola registra' ese 'todo' y el 'índice'

19:18.520 --> 19:19.720
Versus

19:20.130 --> 19:22.520
Bueno, francamente esto parece confuso.

19:23.460 --> 19:28.860
Entonces, 'forEach' es un método muy bueno que han agregado al lenguaje, que realmente simplifica

19:28.860 --> 19:29.700
cosas.

19:29.700 --> 19:31.930
La mayoría de las personas pueden confundirse con esta parte

19:31.920 --> 19:37.610
la función. Pero solo quiero mostrarte cuán poderoso es 'forEach' en realidad podemos hacer esto.

19:37.650 --> 19:45.760
Voy a sacar la función y la llamaré 'logTodos'.

19:46.010 --> 19:59.390
Y ahora todo lo que tengo que hacer es tener una función y llamarla 'logTodos'.

19:59.570 --> 20:02.340
Y ahora voy a comentar esto.

20:02.630 --> 20:09.330
Va a hacer exactamente lo mismo, pero ahora puedo usar 'logTodos' en otros lugares.

20:10.260 --> 20:23.300
Entonces, ahora puedo hacer, digamos, tengo otra lista, que quizás tenga signos de exclamación, como hicimos en la primera.

20:26.340 --> 20:28.760
'todos importante'.

20:30.780 --> 20:44.810
Entonces, ahora puedo hacer 'todosImportant.forEach' y usar la misma función 'logTodos'. Guardo y renuevo Y mira

20:44.810 --> 20:47.700
¡a eso! Tenemos estos para usar también.

20:47.740 --> 20:51.280
Entonces puedes ver que es muy extensible.

20:51.300 --> 20:56.830
Ahora la única advertencia que quiero mostrarte con 'forEach' es que es un nuevo estándar.

20:56.910 --> 21:01.590
Como hacemos con todos los nuevos estándares, debemos verificar que funcionen en todos los navegadores.

21:01.590 --> 21:08.070
Entonces, si lo recuerda, tuvimos 'caniuse.com', que usamos para esto. Y lo usamos en CSS para asegurarnos

21:08.100 --> 21:15.390
que nuestras características de CSS3, como 'boxshadow' y 'transitions' funcionan en todos los navegadores.

21:15.420 --> 21:23.410
Así que hagámoslo. Hagamos 'foreach' y vea aquí 'ECMAScript5' - 'foreach'.

21:23.600 --> 21:27.500
Parece que, bueno, ¡soporte completo!

21:27.770 --> 21:29.160
Todo se ve bien.

21:29.420 --> 21:33.840
Solo tenemos Opera Mini, que tiene soporte parcial.

21:33.980 --> 21:41.460
Por lo tanto, se ve bastante bien. A menos que estemos realmente preocupados por Opera Mini. Podemos usar 'foreach' en el navegador.

21:41.530 --> 21:54.460
Y solo para probar si abrimos nuestra consola, bueno, definitivamente podemos ver que una matriz tiene 'forEach'.

21:54.540 --> 21:56.920
Entonces ahí lo tienes.

21:57.060 --> 22:07.630
Tuvimos el bucle 'for', el bucle 'while', el bucle 'do while' y finalmente 'forEach'. Y el próximo video que estamos

22:07.630 --> 22:14.320
vamos a expandir nuestro ejemplo de Facebook y tendremos varios usuarios. Entonces, que podemos recorrer la base de datos

22:14.410 --> 22:19.830
de múltiples usuarios y ver si el 'nombre de usuario' y la 'contraseña' coinciden con cualquiera de esos.

22:20.080 --> 22:21.640
Te veré en el próximo. Adiós
