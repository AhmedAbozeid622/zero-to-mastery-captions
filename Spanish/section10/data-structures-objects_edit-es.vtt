WEBVTT

00:01.790 --> 00:05.860
Objetos. Son estructuras de datos realmente poderosas.

00:06.810 --> 00:12.270
Y como pueden ver, es la segunda estructura de datos que vamos a aprender en Javascript.

00:12.270 --> 00:22.440
Y, de hecho, también son un tipo de JavaScript. Los objetos son colecciones de propiedad. Bien que

00:22.440 --> 00:23.270
¿eso significa?

00:24.410 --> 00:27.530
Echemos un vistazo tratando de escribir un objeto.

00:27.530 --> 00:37.700
Entonces para escribir un objeto puedo tener algo así como un usuario y llaves y dentro de esto puedo decir

00:37.820 --> 00:41.790
el nombre es igual a "Juan".

00:42.170 --> 00:46.000
Puedo decir que H es "34".

00:46.050 --> 00:49.320
Hobby es "fútbol".

00:50.900 --> 00:54.490
Y tal vez incluso podemos poner "está casado"

00:56.660 --> 01:00.390
a falso y la coma en

01:00.540 --> 01:03.440
al final aquí puedo dejarlo o agregarlo,

01:03.460 --> 01:04.630
funciona en ambos sentidos.

01:05.770 --> 01:13.880
Pero ahora si guardo esto y lo actualizo, veamos si tenemos el objeto de usuario. Sí.

01:13.950 --> 01:20.820
Parece que tenemos "nombre:John edad:34 pasatiempo:fútbol está casado:falso".

01:20.990 --> 01:28.190
Y ves aquí que tenemos un objeto y se ve un poco diferente de una matriz, ¿no?

01:28.220 --> 01:38.210
Porque si recordamos una matriz como esta, "manzana", "plátano", "naranja".

01:38.240 --> 01:47.100
Entonces, una matriz si actualizamos tenemos un 'usuario' que se ve así y una 'lista' que se ve así.

01:47.210 --> 01:57.280
Si abro esto, vemos que tenemos un poco de diferencia porque un objeto es más dinámico

01:57.280 --> 02:00.000
Puedo tener propiedades y valor.

02:00.220 --> 02:12.770
Así que propiedad 'nombre', valor "Juan", propiedad, 'edad', valor "34". Con una matriz, teníamos un índice '0' que contenía "manzana"

02:12.890 --> 02:17.720
y un índice '1' que contenía "plátano".

02:17.720 --> 02:18.680
Mmm interesante.

02:18.740 --> 02:19.000
DE ACUERDO.

02:19.010 --> 02:30.370
Pero ¿cómo puedo tomar propiedades porque con una matriz que podría hacer 'lista', agarrar el segundo elemento con '1'

02:30.940 --> 02:39.520
y tengo un "plátano". Con los objetos, lo que puedes hacer es decir 'user.name',

02:39.690 --> 02:51.950
John. 'User.age', 34. 'User.hobby', fútbol. Y 'user.isMarried', falso. DE ACUERDO.

02:52.250 --> 03:06.510
Ahora con una matriz tenemos métodos como 'pop' o 'push' para cambiar la matriz.

03:06.590 --> 03:08.740
Incluso tuvimos 'concat'.

03:09.210 --> 03:14.930
¿Cómo podemos agregar propiedades a un objeto? Bueno, es muy simple.

03:14.930 --> 03:29.700
Todo lo que tenemos que hacer es decir algo como 'user.favoriteFood' y haré iguales y haré espinacas.

03:29.890 --> 03:36.320
Ahora, si miro el objeto del usuario, tengo comida favorita,

03:36.320 --> 03:39.160
Espinacas.

03:39.230 --> 03:44.060
Así que acabamos de expandir el objeto de usuario.

03:44.100 --> 03:44.730
¿Qué hay de esto?

03:44.730 --> 03:53.000
¿Puedo cambiar a 'isMarried' por "verdadero" para decir que nuestro amigo John acaba de casarse?

03:53.130 --> 04:01.510
Bueno, ahora si voy al usuario, tengo 'isMarried' en "true".

04:01.560 --> 04:02.940
Muy genial.

04:02.940 --> 04:07.890
Entonces puede ver la diferencia entre una matriz y un objeto.

04:07.890 --> 04:22.370
Ahora una pregunta que podría estar teniendo es:"¿Por qué no 'array' es un tipo de javascript, pero 'object' es? Bueno, porque

04:22.370 --> 04:32.120
en términos simplificados, técnicamente una matriz es algo como esto.

04:36.480 --> 04:44.040
Incluso vimos cuando miramos la lista que tenemos que "0" va para Apple.

04:44.040 --> 04:52.220
"1" es igual a banana y "2" es igual a naranja. Y ves cuál es el poder de las estructuras de datos

04:52.580 --> 04:54.020
en javascript

04:54.080 --> 05:01.120
Esa idea de un cajón de escritorio y en ese cajón no quieres tener un desastre que no quieras simplemente poner

05:01.130 --> 05:07.920
Una cosa es que quieras tener varias cosas pero las quieres organizadas. Así que tal vez quieras todos los bolígrafos

05:07.930 --> 05:12.420
organizado en una sección y los archivos organizados en una sección diferente.

05:12.830 --> 05:18.280
Y como mencioné las estructuras de datos nos ayudan a organizar las cosas mejor.

05:18.350 --> 05:26.570
Entonces, por ejemplo, una matriz es realmente muy buena en tal vez con una lista de compras o una lista de tareas pendientes.

05:27.140 --> 05:33.190
Pero un objeto puede ser realmente bueno para contener algo como la información del usuario.

05:34.000 --> 05:39.610
Entonces, si piensas en un juego, digamos que estás construyendo un juego donde controlas a este asistente.

05:39.940 --> 05:48.050
Bueno, este mago:qué tan alto es el mago, qué tan poderoso es, cuántos puntos de experiencia tiene.

05:48.250 --> 05:54.040
Bueno, sería muy bueno poner un objeto porque ese asistente es un objeto.

05:54.040 --> 06:03.400
Necesitamos propiedades y valores, pero tal vez los hechizos que podrían ser una lista porque solo podemos tener una cadena

06:03.520 --> 06:07.050
de todos los hechizos que el mago conocería.

06:07.090 --> 06:11.890
Entonces, ¿significa que podemos tener matrices dentro de los objetos?

06:12.010 --> 06:25.350
Sí, si el usuario era un mago, puedo poner 'hechizos' o 'hechizos' y puedo hacer una selección de todos los hechizos

06:25.740 --> 06:35.340
"abracadabra" o "Shazam" o puedo hacer "abucheo".

06:35.430 --> 06:39.800
Entonces ahora tengo una matriz dentro de un usuario.

06:40.080 --> 06:41.460
OK, ¿qué pasa al revés?

06:41.460 --> 06:48.310
¿Puedo tener un usuario dentro de una matriz?

06:48.710 --> 06:49.480
Bueno, si puedes.

06:49.640 --> 06:59.790
Digamos que queríamos tener una lista de usuarios sobre una aplicación para nuestro sitio web. Podemos tener una lista de objetos

06:59.790 --> 07:01.710
donde tenemos 'nombre de usuario'

07:06.960 --> 07:15.830
"Andy" que tiene "contraseña", "secreto" y podemos tener

07:18.540 --> 07:28.310
'nombre de usuario', "Jess" que tiene la 'contraseña' "123". Veamos esto en acción.

07:28.370 --> 07:37.370
Voy a actualizar y decir 'lista' y mirar eso. Dentro de esta lista, tengo el primer elemento con el

07:37.370 --> 07:38.520
nombre de usuario y contraseña.

07:38.520 --> 07:44.500
Y el segundo nombre de usuario y contraseña. Entonces las listas son realmente buenas en

07:44.530 --> 07:52.240
bueno, hacer listas y esas son matrices. Y los objetos son realmente buenos para contener objetos. Pero

07:52.360 --> 07:54.520
¿cómo accedemos a ellos ahora?

07:55.000 --> 07:57.580
Bueno, miremos al usuario primero.

07:57.670 --> 08:07.630
Si quisiera acceder a un hechizo bien podría hacer 'user.spells' y obtendré una matriz de vuelta, pero si quería

08:07.630 --> 08:10.050
a - digamos acceso a "Shahzam"

08:10.450 --> 08:15.680
Bueno, yo solo haría 'user.spells' y luego porque es una matriz

08:15.730 --> 08:28.740
Obtengo el segundo elemento usando '[1]' - "Shahzam". A la inversa para la lista, puedo decir 'lista':la primera

08:28.740 --> 08:35.320
artículo que es "Andy" y quiero obtener su contraseña.

08:35.450 --> 08:37.410
Bueno, haré 'contraseña'.

08:37.770 --> 08:42.590
Y ahora me sale, bueno, Andy escribió mal su contraseña, se supone que dice "secreto".

08:42.600 --> 08:45.930
Pero tenemos "secre".

08:46.180 --> 08:48.220
Así es como tienes acceso a las cosas.

08:48.570 --> 08:49.350
DE ACUERDO.

08:49.840 --> 08:51.480
Otra pregunta que tengo.

08:51.850 --> 09:05.590
¿Qué pasaría si quisiera decir que este usuario John, que es un asistente, también puede 'gritar'? Tal vez puede hacer algún tipo de

09:05.590 --> 09:06.510
de una acción.

09:06.640 --> 09:09.320
¿Podemos agregar una función a un objeto?

09:09.580 --> 09:13.080
Sí, podemos, todo lo que tenemos que hacer es hacer 'funcionar'

09:13.120 --> 09:17.260
Y ves que el color ha cambiado, significa que estamos haciendo algo bien.

09:17.260 --> 09:20.840
Puedo decir 'function console.log'

09:24.380 --> 09:29.070
Gritando "Ah", ahorremos eso y veamos eso en acción.

09:31.720 --> 09:35.940
'Usuario':asegúrese de que tenemos el grito allí, sí

09:35.960 --> 09:38.380
Y mira que tiene la "F" para 'función'.

09:38.900 --> 09:45.350
Y ahora si voy a 'user.shout' y recuerdo que tengo que llamar a la función.

09:45.770 --> 09:53.960
Me sale "AHHHHH!" Muy genial. Entonces puedo tener funciones dentro de objetos.

09:54.320 --> 10:00.680
Y una cosa que podrías notar es - espera un segundo, pensé que las funciones debían decir algo

10:00.680 --> 10:03.120
como, ya sabes, alerta.

10:03.330 --> 10:08.710
Pero este tenemos 'user.shout'.

10:08.770 --> 10:16.240
Entonces esto es un poco diferente de lo que hemos visto antes y esto se llama un método y

10:16.240 --> 10:18.250
esta es otra terminología que vamos a aprender.

10:18.250 --> 10:23.110
Pero una función dentro de un objeto es un 'método'.

10:23.110 --> 10:29.500
Entonces puedo decir que 'gritar' es un 'método' de 'usuario'.

10:29.720 --> 10:42.090
Al igual que con una matriz como listas y si hago 'pop' - bueno 'pop' es un 'método' de 'lista'.

10:42.230 --> 10:48.390
Y otra cosa de la que quizás se hayan dado cuenta es 'console.log'.

10:48.620 --> 10:49.310
Qué piensas

10:49.370 --> 10:58.190
'log' es que hemos estado haciendo todo este tiempo? Bueno, 'consola' como resultado es solo un objeto.

10:58.260 --> 11:06.300
¿Ves eso? 'consola' tiene todo esto parece un método.

11:06.360 --> 11:10.180
Así que todo este tiempo hemos estado haciendo console.log.

11:10.400 --> 11:19.770
Pero también puedo hacer - hagamos 'información'. Si hago console.info y voy a decir "hola".

11:23.930 --> 11:24.850
Me pongo "hola"

11:24.990 --> 11:26.220
Nada cambia.

11:26.220 --> 11:29.150
Pero, ¿y si hacemos algo como 'error'?

11:29.340 --> 11:40.100
Bueno, puedo hacer 'console.error' y ahora, mira eso, obtengo el error.

11:40.420 --> 11:46.690
Entonces eso es lo que son los métodos. Son funciones dentro de un objeto.

11:46.700 --> 11:55.510
De acuerdo, tengo una última cosa interesante que mostrarles y es:"¿Puedo hacer algo como esto?

11:57.450 --> 12:03.200
¿Puede un usuario ser un objeto vacío? "Sí, funciona.

12:03.200 --> 12:09.170
Entonces, si obtengo 'user2' simplemente obtengo el objeto vacío y no hay nada realmente en él.

12:10.630 --> 12:10.940
DE ACUERDO.

12:10.960 --> 12:11.950
¿Qué hay de las matrices?

12:11.950 --> 12:15.490
¿Puedo hacer una lista que está vacía?

12:18.010 --> 12:24.050
Sí, puedo hacer una lista que está vacía.

12:24.210 --> 12:31.040
Pero como pueden ver, realmente no puedo usar ninguna propiedad en 'user2' porque no tiene propiedades.

12:31.920 --> 12:41.610
Y realmente no puedo acceder a 'list [0]' o 'list2 [0]', que es el vacío,

12:41.680 --> 12:44.130
Bueno, porque no hay nada en este momento.

12:46.200 --> 12:57.440
Entonces, esto nos recuerda que cuando no declaramos una variable nos "indefinimos" pero con un objeto y una lista

12:57.500 --> 13:03.030
podemos tener algo vacío y no está indefinido. Pero hay una cosa que quiero mostrarte.

13:03.230 --> 13:06.350
Puede haber un objeto vacío.

13:06.350 --> 13:18.730
Entonces, si hago un objeto vacío 'var', bueno, es un objeto vacío, pero hay algo llamado 'nulo'.

13:19.120 --> 13:33.030
Y ese es nuestro sexto tipo de datos y 'nulo' es un tipo especial que simplemente dice que un objeto es nulo.

13:33.040 --> 13:34.530
Entonces, veamos qué significa eso.

13:34.600 --> 13:39.640
Si miro el objeto vacío, obtengo un objeto vacío.

13:39.970 --> 13:46.920
Si obtengo un objeto 'nulo', devuelve nulo.

13:46.960 --> 13:54.850
Así que este es un personaje especial que abordaremos más adelante en las lecciones, pero solo significa que hay

13:54.850 --> 13:57.190
no hay nada en este objeto.

13:57.190 --> 14:09.150
Si voy 'null0bj.name = Andy'

14:09.340 --> 14:13.230
No puedo establecer el nombre de la propiedad de nulo.

14:13.400 --> 14:22.430
Pero si hago eso para un objeto vacío que es solo un objeto vacío, bueno, puedo decir el nombre

14:22.790 --> 14:27.300
es igual a Andy

14:27.370 --> 14:30.400
Y mira, tengo a Andy.

14:30.610 --> 14:32.230
Entonces eso es lo que es un objeto 'nulo'

14:32.290 --> 14:40.140
Está vacío, completamente vacío y en este momento parece inútil, como que no lo necesitamos.

14:40.150 --> 14:44.580
Pero te mostraré casos en los que esto es importante para nosotros.

14:44.590 --> 14:46.930
OK, eso fue un montón de cosas.

14:47.020 --> 14:51.870
Pero en realidad has aprendido mucho en JavaScript.

14:51.990 --> 14:59.550
Esto es más o menos diría que el 80 por ciento de lo que necesitas saber en JavaScript para trabajar profesionalmente

14:59.670 --> 15:05.650
y parece que no cubrimos tanto o quizás para algunos puede parecer que cubrimos mucho.

15:05.670 --> 15:12.390
Pero en términos de sintaxis solo mirando esto, solo hemos aprendido algunas palabras y algunas formas de hacer las cosas.

15:13.470 --> 15:20.190
Con este nuevo poder voy a mostrarte cómo podemos construir un Facebook simple con lo que acabamos de

15:20.190 --> 15:20.780
aprendido.

15:22.630 --> 15:23.730
Te veré en el próximo video. Adiós
