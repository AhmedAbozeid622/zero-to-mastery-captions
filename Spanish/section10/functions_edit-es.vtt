WEBVTT

00:01.000 --> 00:06.710
¡Dar una buena acogida! Las funciones son la parte más difícil de JavaScript.

00:07.140 --> 00:11.380
Y tomará un tiempo para obtenerlo por completo. Sin embargo,

00:11.480 --> 00:13.810
en este video vamos a intentar hacer eso.

00:13.880 --> 00:18.020
Vamos a aprender funciones de JavaScript.

00:18.030 --> 00:21.710
Entonces, comencemos con, "¿Qué son las funciones?"

00:22.640 --> 00:28.040
Bueno, son un pedazo de código, que realizan acciones. Sin funciones

00:28.040 --> 00:30.730
JavaScript no haría realmente nada.

00:30.740 --> 00:40.340
La belleza es que las funciones pueden realizar una acción o múltiples acciones. Pero volveremos a eso. Primero,

00:40.390 --> 00:45.560
hablemos de cómo usted ya conoce algunas funciones de JavaScript sin siquiera darse cuenta.

00:45.640 --> 00:47.250
Tú los has visto antes

00:47.300 --> 00:53.160
'alerta' - esa es una función. 'prompt' -

00:56.130 --> 00:57.970
esa es una función.

00:58.150 --> 00:59.350
Has visto esto antes.

01:00.240 --> 01:07.500
Por lo tanto, JavaScript nos proporciona algunas funciones, que son realmente útiles, para que todo el que escriba

01:07.500 --> 01:12.380
JavaScript, puede usarlos sin tener que escribirlos una y otra vez.

01:12.430 --> 01:15.700
Entonces con las funciones tenemos 2 opciones.

01:15.830 --> 01:20.990
Uno:está usando funciones JavaScript existentes, como 'alerta' y 'aviso'.

01:21.980 --> 01:25.880
Y dos, podemos crear el nuestro.

01:25.880 --> 01:32.900
Entonces, antes de entrar en cómo creamos nuestras propias funciones y qué es tan útil acerca de ellas, es posible que

01:32.900 --> 01:37.920
notado - notó una cosa:estos corchetes, que están uno al lado del otro con funciones.

01:37.940 --> 01:45.800
¿Qué quieren decir? Bueno, eso en JavaScript significa ejecutar la función.

01:46.840 --> 01:52.750
Entonces, veamos si sucede lo que sucede, cuando escribo 'alerta' y presiono 'enter'.

01:52.810 --> 02:01.540
Me pongo 'f alert ()' y algunas cosas raras. Hmmm, 'f' aquí representa la función y puede ver cuando vuelo

02:01.540 --> 02:01.990
encima de eso.

02:01.990 --> 02:04.450
Dice 'function alert ()'.

02:04.450 --> 02:08.060
Esto es lo que significa ejecutar una función:para ejecutar

02:08.080 --> 02:08.960
'alerta()'

02:09.010 --> 02:13.090
Lo ejecuto llamándolo así ['alert ()']

02:15.010 --> 02:23.330
Entonces, estos paréntesis significan 'llamar a una función', así que puedo llamar a una función.

02:23.490 --> 02:28.580
Y también notaron que dentro de "alerta" puedo agregar cosas como

02:29.050 --> 02:33.800
"¡Hola!"

02:33.910 --> 02:42.190
Todos estos son llamados 'argumentos' y lo sé, les estoy arrojando un montón de jerga, un montón de palabras, pero estas

02:42.190 --> 02:44.670
son cosas que escuchas una y otra vez

02:44.710 --> 02:51.490
cuando eres un desarrollador, y se apegan a ti - no será la primera vez, pero, como dije, solo intenta y

02:51.700 --> 02:53.990
llegar allí paso a paso.

02:54.010 --> 02:58.630
Así que 'argumentos' son los que se le dan a las funciones.

02:58.840 --> 03:03.880
Por ejemplo, cuando lo hicimos, en nuestro ejemplo aquí.

03:03.970 --> 03:13.190
"Hellooooo" y el "console.log" fue un "argumento". Y lo interesante es que puedes tener múltiples argumentos:03:13.200 --> 03:19.820
por ejemplo, si eliminé esto y solo lo hice, solo tengamos 'console.log' por ahora.

03:20.190 --> 03:24.690
Puedo hacer "¿Cómo estás?"

03:24.700 --> 03:27.950
Guardo y renuevo y consigo.

03:27.950 --> 03:29.150
"Hola, ¿cómo estás?"

03:29.210 --> 03:37.800
Mira, puedo tener múltiples argumentos, pero solo agrego una coma. Pero de nuevo, eso depende de la función.

03:37.810 --> 03:47.870
Ahora, nuevamente antes de comenzar a crear el nuestro, repasemos. 'alerta' es una función, 'alerta' con los corchetes,

03:47.960 --> 03:56.220
Estoy llamando a la función 'alerta' y estoy llamando a la función 'alerta' con el argumento

03:56.400 --> 03:59.910
'Hola'. 'alerta' necesita ser llamado,

04:00.090 --> 04:02.460
de lo contrario, está ahí sentado.

04:03.900 --> 04:08.880
Ahora la gran razón para usar la función es que puedes llamarlos tantas veces como quieras.

04:08.970 --> 04:19.080
Piensa en 'alerta', imagina tener que decir cada vez que "Oye, computadora, crea esta ventana 'emergente' e imprime lo que sea

04:19.080 --> 04:21.090
argumento que presenté "todo el tiempo".

04:21.270 --> 04:27.540
Quiero decir que realmente apestaría. ¿No es agradable que podamos llamar a "alerta" y que aparezca una ventana emergente para

04:27.540 --> 04:29.770
nosotros y todo está hecho para ti?

04:29.780 --> 04:32.010
Bueno, eso es más o menos lo que hacen las funciones.

04:32.010 --> 04:39.810
Te hacen la vida más fácil teniendo acciones, abrigado, así que solo las escribes una vez y luego puedes

04:39.810 --> 04:41.450
llámalo.

04:41.480 --> 04:43.480
DE ACUERDO. Así que vayamos a la parte divertida.

04:43.490 --> 04:54.970
Vamos a crear nuestras propias funciones. Entonces, si volvemos a nuestro documento aquí, veamos aquí. Tenemos 2

04:54.970 --> 05:00.180
formas de crear funciones y te mostraré la primera manera.

05:00.340 --> 05:01.980
En realidad, voy a mostrarte esto primero.

05:02.200 --> 05:08.970
Entonces, creemos nuestra propia función, usando el primer método, que es 'declaración de función'.

05:09.310 --> 05:17.780
Y vamos a usar nuestro 'script.js' aquí, que está vinculado a nuestro HTML, que hicimos en el video anterior.

05:17.930 --> 05:23.840
Entonces, aquí puedo decir 'function sayHello ()'

05:27.960 --> 05:30.510
es 'console.log ("Hello")'.

05:35.380 --> 05:38.700
Nuevamente la sintaxis es un poco diferente, pero solo tienes que recordarlo.

05:38.800 --> 05:41.850
Estoy diciendo 'función' - se llamará 'sayHello'.

05:42.070 --> 05:49.150
Tenemos esos corchetes, que son muy familiares para nosotros. Y luego 'console.log ("Hello");'. Veamos qué pasa

05:49.150 --> 05:53.480
cuando ahorro Me refresco

05:53.830 --> 05:54.860
Hmmm, no pasa nada

05:55.980 --> 05:56.920
¿Porqué es eso?

05:57.240 --> 06:00.530
Bueno, declaramos esta función.

06:00.540 --> 06:09.430
Pero recuerda, ¿qué hicimos con 'alerta'? Bueno, existe, pero no lo hemos ejecutado.

06:09.480 --> 06:16.170
Tenemos que llamar a la función, por lo que tenemos que decir 'sayHello', como tal. Ahora cuando renuevo

06:16.740 --> 06:19.430
Me sale "Hola".

06:19.570 --> 06:25.610
Entonces piensa en esto con la variable. Cuando digo 'var a es igual a 5',

06:25.720 --> 06:29.260
eso no va a hacer nada, hasta que realmente obtengamos la 'a'.

06:29.560 --> 06:34.120
Y es entonces cuando imprime '5'.

06:34.130 --> 06:36.500
DE ACUERDO. Entonces esa es una forma.

06:36.510 --> 06:39.060
¿Cuál es la segunda forma de crear una función?

06:39.270 --> 06:45.150
La segunda forma se llama 'expresión de función'.

06:45.340 --> 06:47.900
Y esto va así.

06:48.130 --> 07:01.430
Puedo decir 'var sayBye = function ()' 'console.log ("Bye");'.

07:02.300 --> 07:05.620
Nuevamente guardaré esto y actualizaré.

07:05.810 --> 07:11.660
Y de nuevo solo recibimos 'Hola' porque, bueno, de nuevo tenemos que llamar a esa función.

07:11.720 --> 07:20.560
Por lo tanto, digo 'sayBye', ejecútelo y actualice. "Hola y adios". Ahora

07:20.640 --> 07:30.040
Una cosa que puede haber notado aquí, es que estamos asignando esta función a la variable 'sayBye', pero

07:30.940 --> 07:33.240
¿Cuál es el nombre de la función?

07:33.250 --> 07:40.520
Quiero decir, aquí claramente el nombre de la función es 'sayHello', pero aquí estamos, solo estamos asignando a la variable.

07:40.520 --> 07:48.230
Quiero decir, técnicamente la función no tiene un nombre y esto se llama 'función anónima'.

07:48.360 --> 07:54.480
Hemos asignado esta función a 'sayBye', por lo que podemos hacer referencia a través de 'sayBye', pero de lo contrario no podemos

07:54.480 --> 07:56.350
realmente acceder a esta función.

07:56.640 --> 07:59.880
Bueno, verás por qué eso es importante

07:59.940 --> 08:01.500
en videos posteriores.

08:01.500 --> 08:06.770
Pero técnicamente puedes hacer esto:y llamar a esta función 'byebye'.

08:13.110 --> 08:13.760
DE ACUERDO.

08:14.050 --> 08:20.560
Entonces, ahora que sabemos cómo crear funciones, ¿por qué necesitamos estos argumentos?

08:20.830 --> 08:23.740
Recuerde, ¿por qué necesitamos cosas dentro de los corchetes?

08:23.740 --> 08:26.660
Quiero decir, estos parecen bastante útiles, ¿no?

08:27.630 --> 08:40.090
Bueno, probemos algo. 'cantar', hagamos una función 'cantar' y este 'cantar' tendrá, tendrá 'console.log'

08:40.120 --> 08:46.220
y yo diré "AHHHHHHHHHHHH". Eso es, soy yo, cantando.

08:46.230 --> 08:51.550
Y también tiene 'console.log ("TEEEEEEEEE")'.

08:52.030 --> 09:00.390
Así es como yo canto. Ahora, si guardo esto y lo actualizo, asegúrate de que todavía esté cantando. ¡Oh, tengo que llamarlo!

09:03.440 --> 09:04.920
Vamos a actualizar

09:05.040 --> 09:07.410
Hermosa canción:AHHHHHHHHHHHH, TEEEEEEEEE.

09:07.680 --> 09:18.530
Pero ahora, cada vez que quiero cambiar a una canción diferente, tal vez quería decir 'laaa deeee daaa'.

09:18.660 --> 09:31.840
Bueno, tengo que eliminar esto y cambiar esto a 'laaa deeee daaa' o tengo que crear uno nuevo, llamando

09:32.260 --> 09:33.640
'sing2'

09:36.310 --> 09:50.750
'console.log' y se puede ver aquí, qué molesto es eso, estoy escribiendo lo mismo una y otra vez

09:51.020 --> 09:52.710
y simplemente cambiando estas cosas.

09:52.910 --> 10:00.090
Y ahora tengo que ejecutar 'sing2'. Y refresco, y ¡uf, eso fue agotador! DE ACUERDO.

10:00.460 --> 10:07.600
Hice todo esto y ahora imagino, si tuviéramos miles de canciones, que queremos cantar; somos 'Spotify' y

10:07.600 --> 10:10.330
queremos mostrar todas las letras de las canciones.

10:10.330 --> 10:13.210
Quiero decir que es bastante agotador, ¿verdad?

10:13.210 --> 10:18.680
Y una de las reglas con los desarrolladores es esta idea de "SECO:no te repitas".

10:18.730 --> 10:21.790
Lo ideal es que quieras que todo sea lo más eficiente posible.

10:22.000 --> 10:34.820
Y una cosa que puedes hacer es agregar argumentos. Así que puedo agregar algo como 'canción' y ahora - déjenme solo

10:34.820 --> 10:35.970
eliminar esto por ahora.

10:37.720 --> 10:46.670
En 'console.log' puedo decir 'canción'.

10:46.820 --> 11:01.190
Entonces, cada vez que quiero cambiar la canción, puedo decir "Laaa deee daaa". 'cantar ("helllloooooo")

11:02.140 --> 11:02.990
Entonces "canta

11:05.330 --> 11:08.990
("backstreets backright")

11:11.770 --> 11:14.470
Ahora guardo y refresco.

11:14.500 --> 11:23.060
¡Y mira eso! Verá cuántas líneas de código acabamos de guardar y cómo puedo usar 'cantar' cuando lo desee,

11:23.330 --> 11:26.600
y puedo personalizarlo para lo que quiero.

11:26.600 --> 11:28.050
Algo así como 'alerta'.

11:28.130 --> 11:30.570
Eso es lo que hacen los argumentos.

11:30.830 --> 11:37.790
Los argumentos nos permiten no repetirnos y hacer que nuestras funciones sean lo que llamamos más extensibles.

11:37.790 --> 11:40.530
Pueden ser personalizados.

11:40.590 --> 11:44.860
Hagamos otra cosa para aprender algo divertido sobre las funciones.

11:44.970 --> 11:57.450
Vamos a eliminar esto y probar 'function multiply ()'. Y le daremos 'a' y 'b', por lo que aceptará dos

11:57.450 --> 12:01.330
argumentos y haremos 'a * b'.

12:01.710 --> 12:15.320
Y ahora dentro de 'a * b' diremos 'multiplicar', y llamaremos 'multiplicar (5, 10)'. Guardar y actualizar

12:15.460 --> 12:18.890
Y ahora deberíamos tener 'multiplicar' disponible para nosotros.

12:18.910 --> 12:24.570
Puedes ver aquí 'multiplicar (a, b)' eso es 'b' exactamente lo que escribimos.

12:24.600 --> 12:27.370
OK, entonces que pasa si hago 'multiplicar'

12:29.630 --> 12:32.020
(5, 10)?

12:32.480 --> 12:33.410
¿Qué crees que obtendré?

12:33.560 --> 12:33.910
¡Veamos!

12:37.980 --> 12:39.770
Hmmm, eso es realmente extraño.

12:39.780 --> 12:42.340
Probemos de nuevo con un número diferente.

12:42.370 --> 12:44.180
Aún 'indefinido'.

12:44.380 --> 12:47.530
¿Porqué es eso? Bueno, esto se llama depuración.

12:47.530 --> 12:50.680
Veamos si podemos descubrir qué está pasando aquí.

12:50.680 --> 12:53.580
Voy a hacer un 'console.log' aquí.

12:54.490 --> 12:59.050
Y voy a cerrar la sesión 'a' y 'b' para asegurarme de que esta función se está ejecutando.

12:59.210 --> 13:11.600
Así que voy a guardar y actualizar. DE ACUERDO. 'console.log', 'a' y 'b' y solo ejecuto la función nuevamente.

13:11.660 --> 13:17.610
'console.log'. DE ACUERDO. Así que parece que se está ejecutando, pero entonces estoy 'indefinido' aquí.

13:17.770 --> 13:23.440
Bueno, puedo mostrarte esto en un diagrama.

13:23.440 --> 13:27.270
Entonces, una función es una 'entrada'.

13:27.330 --> 13:32.270
Le damos una especie de 'entrada', tal vez a veces está vacía, entonces eso es lo que está en el paréntesis.

13:32.460 --> 13:34.900
En nuestro caso, es 'a' y 'b'.

13:35.010 --> 13:42.790
Entonces esos son números, entonces '5' y '10'. Y luego la función hace lo que le decimos que haga.

13:42.790 --> 13:51.550
En nuestro caso fue 'multiplicar 5 y 10'. Y luego obtenemos una 'salida', pero no estamos obteniendo esa 'salida'.

13:51.550 --> 13:52.280
¿Porqué es eso?

13:52.350 --> 13:56.270
Bueno, porque una función funciona así.

13:56.650 --> 14:01.450
Y no te preocupes, acabo de agregar un montón de flechas, pero revisaré todo y te lo explicaré.

14:01.450 --> 14:03.400
La 'entrada' está recibiendo '5' y '10'.

14:03.400 --> 14:11.950
La función hace algunas cosas, y hasta este momento solo hemos hecho 'console.log', y el camino 'console.log'

14:11.950 --> 14:18.870
funciona, la función dice:'Simplemente conéctelo a la consola en el navegador'.

14:19.100 --> 14:24.400
Pero nunca lo hemos hecho donde hemos devuelto un 'valor'.

14:24.470 --> 14:25.820
Déjame mostrarte lo que quiero decir.

14:26.600 --> 14:29.300
Cuando no devolvemos algo, nos 'indefinimos'.

14:29.330 --> 14:32.240
Cuando devolvemos algo, obtenemos el 'valor'.

14:32.240 --> 14:37.090
Así que veamos aquí si podemos explicar esto.

14:37.110 --> 14:47.410
Por lo tanto, aquí cada vez que digo 'multiplicar (10, 5)', y voy a eliminar el 'console.log' solo para que no confunda

14:47.410 --> 14:50.400
nosotros, guardar y actualizar ...

14:50.770 --> 14:51.820
Me pongo 'indefinido'.

14:52.000 --> 14:56.710
Eso es porque, como ven en este diagrama, no estamos devolviendo nada.

14:56.710 --> 15:04.330
Entonces, en JavaScript, la forma en que devuelve las cosas es:tiene que poner 'return' dentro de una función.

15:04.690 --> 15:12.400
Entonces, ahora va a 'regresar a * b' y verá, es una - es una palabra especial en JavaScript -

15:12.400 --> 15:13.740
resaltado en rojo.

15:14.020 --> 15:20.310
Bueno, ahora está diciendo 'Sí, vamos a devolver el valor'.

15:20.370 --> 15:28.320
Entonces, incluso si agregamos 'console.log'. Harás 'console.log' y luego preguntarás "Oye, ¿tengo un 'return'?".

15:28.470 --> 15:31.160
Si lo hago, le enviaré un valor.

15:32.170 --> 15:33.520
Con suerte, eso no es demasiado confuso.

15:33.520 --> 15:35.170
Veamos si funciona.

15:35.930 --> 15:37.980
Voy a guardar y actualizar.

15:38.240 --> 15:47.700
Y ahora si lo hago 'multiplicar (5, 10)', obtengo '50'.

15:47.840 --> 15:56.860
¡Hurra! Tenemos nuestra función funcionando y ese es un concepto clave muy importante, que debemos recordar

15:56.860 --> 16:01.010
es que tenemos que devolver algo de una función.

16:01.030 --> 16:02.870
Quiero decir que no tenemos que hacerlo.

16:02.980 --> 16:07.990
Pero idealmente lo hacemos, así que no obtenemos estos casos, donde solo tenemos 'indefinido' y no sabemos qué

16:07.990 --> 16:08.680
la función lo hace.

16:08.680 --> 16:14.830
Es algo así como una "caja negra", que hace algo y podríamos obtener un 'console.log', o no, pero no lo hacemos

16:14.830 --> 16:16.410
saber lo que está pasando adentro

16:16.410 --> 16:22.620
Es bueno tener un 'retorno' para asegurarnos de que la función funcione de la manera que esperamos.

16:22.650 --> 16:24.540
Ok, ¿y si hacemos algo como esto?

16:24.540 --> 16:33.550
¿Qué pasa si hago 'return a', y olvidé un punto y coma aquí, y 'return b'. ¿Qué piensas tú que sucederá? Vamos a

16:33.550 --> 16:37.930
actualizar y ejecutar esto.

16:37.960 --> 16:38.540
DE ACUERDO.

16:38.830 --> 16:41.870
¿Qué pasa si cambio el orden y puse 'a' primero?

16:41.960 --> 16:43.080
Probemos eso de nuevo.

16:44.960 --> 16:54.550
Obtengo '5' y 'retorno' es la última forma de finalizar una función si tiene sentido. Entonces, tan pronto como dices

16:54.550 --> 16:57.770
'return' en una función, el programa sale.

16:57.820 --> 17:04.240
Entonces, para pasar por esto, digo 'multiplicar (5, 10)'. Va a la función, dice:"Sí, tengo la función

17:04.240 --> 17:10.690
'multiplicar'. Voy a poner 'a' como '5' y '10' como 'b' ".

17:10.840 --> 17:20.540
Y ahora entra en la función y dice:'return 5', que es 'a'. Entonces lo devuelve y sale de la función.

17:20.950 --> 17:23.290
Entonces ahora estas dos líneas no se están ejecutando en absoluto.

17:23.290 --> 17:30.090
El programa simplemente lee esto, va a aquí, lee la primera línea de la función y luego sale.

17:30.100 --> 17:37.630
Entonces, en una función, debe tener una declaración de 'retorno', ¿o es correcto?

17:38.500 --> 17:41.910
Veamos un caso donde eso podría no ser correcto.

17:41.920 --> 17:43.750
Agreguemos una declaración 'if' a esto.

17:44.080 --> 17:53.330
Digamos que queremos hacer 'multiplicar', pero también somos un poco flojos y no queremos ser demasiado duros con

17:53.330 --> 17:54.040
el ordenador.

17:54.140 --> 18:05.420
Entonces digamos que queremos decir eso, 'si' - recordamos la 'declaración if'. "si 'a' es mayor que '10'" o "si 'b' es

18:05.420 --> 18:07.430
mayor que '10' ".

18:10.170 --> 18:18.430
Podemos decir 'retorno' que es muy difícil "; '

18:18.710 --> 18:19.290
De lo contrario [más]

18:25.850 --> 18:33.380
devolveremos 'a * b'. Veamos qué pasa aquí.

18:34.890 --> 18:39.050
Voy a guardar y actualizar. Hagamos 'multiplicar (5.4)'.

18:43.400 --> 18:46.220
Obtengo '20'.

18:46.270 --> 18:49.680
¿Qué pasa si hacemos '5' y '40'? yo obtengo

18:49.690 --> 19:01.180
"eso es muy difícil", porque ahora está leyendo la función '5' y '10', y está diciendo:"Hmmm, 'b', que es '40' es más alto

19:01.180 --> 19:02.440
que '10' ".

19:02.470 --> 19:06.560
Entonces, de acuerdo con la 'declaración if', voy a decir "eso es muy difícil".

19:06.670 --> 19:19.480
Y porque un 'retorno' sale de la función, nunca llega a esto, incluso si lo hago 'devuelve un * b', nunca lo harás

19:19.480 --> 19:24.490
llegar allí, porque el 'retorno' sale de la función. Solo para verificarlo dos veces,

19:24.490 --> 19:28.960
hagamos eso:hagamos '5 * 40'.

19:28.970 --> 19:34.750
Y nunca llega a ninguna de estas líneas, porque tan pronto como ve un 'retorno', sale de la función.

19:35.790 --> 19:37.320
Sé que es mucho.

19:37.320 --> 19:41.980
Y vamos a ver por qué estas cosas son importantes en los próximos videos.

19:42.210 --> 19:50.540
Pero también quería mostrarte que puedes tener funciones internas. Entonces en JavaScript las funciones son 'variables'.

19:50.880 --> 19:54.120
Y lo que eso significa es que pudimos asignar

19:56.880 --> 19:59.990
funciones como esta ¿Derecha?

20:00.200 --> 20:02.960
Y si hiciéramos algo así,

20:03.080 --> 20:09.640
bien, podemos llamar 'a' de la misma manera que lo hicimos y simplemente asignamos la función como una variable.

20:09.680 --> 20:15.030
Entonces, técnicamente podríamos hacer algo como esto.

20:15.050 --> 20:22.830
Así que vamos a 'multiplicar' - Volvamos a la forma en que lo teníamos. Dejaremos 'multiplicar' la forma en que está en el

20:22.830 --> 20:23.580
forma simple.

20:27.330 --> 20:29.640
Y podemos en realidad

20:32.140 --> 20:38.190
diga 'alerta (multiplicar)'.

20:38.650 --> 20:43.900
Y luego aquí haremos '3' y '4'. Y sé que son muchos paréntesis.

20:43.900 --> 20:45.620
No te preocupes, lo revisaremos.

20:45.760 --> 20:49.490
Pero, guardemos esto y actualizaremos y veremos qué sucede.

20:49.570 --> 20:58.150
Obtengo '12'. Porque lo que está sucediendo es:estamos comenzando con la función interna y estamos diciendo:"Hey, nosotros

20:58.150 --> 20:59.330
quiero alertar algo! ".

20:59.470 --> 21:00.630
"¿Qué quieres alertar?"

21:00.640 --> 21:03.610
"Bueno, queremos 'multiplicar'"

21:03.610 --> 21:06.330
"Queremos llamar a esta función y darle 'a' it '3' y '4'".

21:06.400 --> 21:14.560
Entonces va a 'multiplicarse' y dice:"Sí, asignaremos 'a' y 'b' a '3' y '4', y quiero devolver 'a' y 'b'.

21:14.560 --> 21:24.010
Entonces ahora 'multiplica' cambia a '12' y luego 'alertamos'.

21:24.020 --> 21:33.580
Entonces, ves que ahora, en lugar de tener algo como 'total', 'multiplicar (4.5)' y luego poner 'total'

21:33.590 --> 21:37.420
aquí, podemos asignar 'multiplicar' aquí.

21:40.370 --> 21:41.620
¡Uf! eso fue, ¡eso fue mucho!

21:41.640 --> 21:44.850
Pero quiero mostrarte que hemos - hemos abordado,

21:44.880 --> 21:51.000
Creo que el tema más difícil en JavaScript, que es funciones. Y también cubriste el 'retorno', que

21:51.000 --> 21:53.040
es muy muy bueno

21:53.050 --> 21:59.140
La otra cosa que quiero mostrarte es que mucha gente se confunde con la terminología y

21:59.260 --> 22:02.340
No creo que sea tan importante, pero solo quiero aclararlo.

22:02.390 --> 22:11.370
Existe el concepto de 'parámetros' y 'argumentos'.

22:11.400 --> 22:18.520
Ahora los 'parámetros' y 'argumentos' son muy similares pero ligeramente diferentes.

22:18.520 --> 22:22.420
Entonces 'argumentos' como hemos dicho, son '4' y '5'.

22:22.480 --> 22:27.640
Entonces las funciones pueden tener 'argumentos' y se les llama con 'argumentos'.

22:28.060 --> 22:31.330
'Parámetros' son lo que 'a' y 'b' son.

22:31.330 --> 22:36.290
Entonces 'multiplicar' tiene dos 'parámetros' de 'a' y 'b'.

22:36.420 --> 22:38.210
Sé que es un poco confuso.

22:38.210 --> 22:40.010
Puedes leer sobre esto un poco más.

22:40.010 --> 22:46.860
No creo que sea importante saber realmente la diferencia, pero siempre que estés leyendo artículos

22:46.860 --> 22:52.550
o aprender, tal vez a través de YouTube, que escuchará estas palabras de manera casi intercambiable.

22:52.590 --> 22:56.710
Más o menos significan lo mismo, solo una ligera diferencia en ellos.

22:58.460 --> 23:00.290
¡Todo bien!

23:00.910 --> 23:03.690
Lo sé, sé que te he echado mucha terminología.

23:03.730 --> 23:10.780
Pero después de repetirlo algunas veces tendrá sentido, así que mantente fuerte. Pero eso es todo por las funciones.

23:11.080 --> 23:13.580
Es hora de que intentes algunos ejercicios.

23:13.600 --> 23:15.420
Vuelve a mirar este video si lo necesitas.

23:15.430 --> 23:21.370
Realmente desea asegurarse de comprender las funciones, ya que será el núcleo de JavaScript.

23:21.370 --> 23:28.360
Solo recuerda, lo que estamos haciendo con las funciones es, estamos creando nuevas palabras en el lenguaje, en el JavaScript

23:28.360 --> 23:34.510
idioma. Entonces podemos crear 'variables' o podemos crear 'funciones' para agregar vocabulario al lenguaje y

23:34.750 --> 23:37.370
hasta este punto eso es todo lo que hemos estado haciendo.

23:37.390 --> 23:44.950
Obtuvimos este JavaScript que tenía algunas palabras, que podemos usar, y hemos agregado nuevas como 'multiplicar' y

23:45.370 --> 23:48.760
'total' para que sea más útil para nosotros.

23:49.000 --> 23:51.020
Y eso es lo que es la programación.

23:51.210 --> 23:53.110
Te veré en el próximo. Adiós
