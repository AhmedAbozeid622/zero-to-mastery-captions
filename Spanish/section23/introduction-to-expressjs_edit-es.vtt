WEBVTT 00:00.760 -&gt; 00:07.620 Bienvenidos como mencioné antes, los desarrolladores son realmente buenos para asegurarse de que no mantengan 00:07.620 -&gt; 00:09.630 haciendo lo mismo una y otra vez. 00:09.900 -&gt; 00:15.940 Y si hay algo que se hace una y otra vez, crean una herramienta para que sea más simple. 00:17.810 -&gt; 00:20.170 Bueno, construir servidores fue uno de ellos. 00:20.170 -&gt; 00:23.290 Es algo que todo el mundo usa. 00:23.450 -&gt; 00:29.360 Así que las personas usan las bibliotecas al igual que nosotros usamos Reaccionar en el front-end en la parte superior de JavaScript para hacer que nuestras 00:29.360 -&gt; 00:34.260 vidas sean más fáciles y construir servidores más robustos y rápidos. 00:34.270 -&gt; 00:39.690 Y hay muchas bibliotecas que las personas usan con Node para crear un servidor. 00:40.340 -&gt; 00:47.630 Pero el más popular y el mejor en este momento es el Express y tengo aquí el estado de JavaScript 2017 00:47.630 -&gt; 00:54.290 encuesta - es una encuesta famosa que recibe hecho todos los años al final del año que pregunta a los desarrolladores 00:54.350 -&gt; 00:57.740 cuáles son sus herramientas favoritas para qué herramientas de front-end usan. 00:57.740 -&gt; 00:59.880 Y le recomiendo que lo compruebe. 01:00.050 -&gt; 01:07.910 Pero puede ver aquí que, para el back-end, la biblioteca más popular es Express, y esta barra púrpura 01:07.910 -&gt; 01:10.710 significa &#39;Lo he usado antes y lo usaría de nuevo &#39;. 01:11.430 -&gt; 01:17.500 Hay otros como Koa, Meteor, Hapi, pero su uso es muy pequeño. 01:17.510 -&gt; 01:24.370 Express solo fue probado; hay muchas herramientas e información en línea para él 01:24.370 -&gt; 01:29.140 así que si alguna vez te quedas atascado puedes encontrar una respuesta a tu problema de inmediato. 01:29.260 -&gt; 01:33.160 So Express es el camino a seguir en 2018. 01:33.160 -&gt; 01:40.130 Aprendamos un poco de Express y le mostraremos cuánto más fácil es crear nuestro propio servidor. 01:41.610 -&gt; 01:48.510 Así que vamos a eliminar el servidor que construimos previamente en el último video e instalar Express. 01:48.860 -&gt; 01:55.680 Hagamos &#39;npm install&#39; y nuevamente a través de npm tenemos el paquete Express. 01:58.930 -&gt; 02:01.620 Y ahora tenemos Express disponible para nosotros. 02:01.660 -&gt; 02:03.070 Así que vamos a agarrarlo. 02:03.110 -&gt; 02:13.230 La forma de crear un servidor Express es muy simple:simplemente &#39;const express = require (&#39; express &#39;);&#39;. 02:13.550 -&gt; 02:25.800 Tenemos que hacer una &#39;aplicación const&#39; y luego crear esa aplicación, para ejecutar Express, simplemente hacemos &#39;express ()&#39; 02:25.970 -&gt; 02:27.650 Y luego finalmente 02:27.650 -&gt; 02:32.710 &#39;app.listen (3000)&#39; y eso es todo. 02:32.730 -&gt; 02:35.710 Tenemos Express corriendo. 02:36.010 -&gt; 02:44.920 Déjenme hacer &#39;npm start&#39; y vemos que nuestro servidor de Nodo se está ejecutando. 02:45.150 -&gt; 02:51.140 Y si vuelvo a localhost:3000 tengo &#39;Can not GET&#39;. 02:51.370 -&gt; 02:54.150 Y eso es porque bueno, de nuevo, no estamos haciendo nada. 02:54.470 -&gt; 03:01.580 Pero en solo tres líneas tenemos un servidor y quiero mostrarle que Express tiene un excelente 03:04.510 -&gt; 03:09.600 una gran guía para comenzar y mucha información sobre cómo para usarlo 03:10.680 -&gt; 03:14.120 y documentación para que pueda verificar por su cuenta. 03:14.250 -&gt; 03:15.630 Pero, por ahora, construyamos el nuestro. 03:18.440 -&gt; 03:20.890 Well express es realmente muy bueno para hacer routing. 03:21.030 -&gt; 03:29.690 Si recuerdas en nuestro host local, obtuvimos &#39;No se PUEDE OBTENER&#39;. Para hacer una solicitud GET con Express simplemente hacemos 03:29.930 -&gt; 03:34.450 &#39;app.get ()&#39; - en el primer parámetro es la ruta; simplemente haremos la ruta de ruta [&#39;/&#39;]. 03:36.710 -&gt; 03:43.580 Y el segundo parámetro recibe una solicitud y una respuesta y en Express en lugar de escribir todo 03:43.580 -&gt; 03:56.620 fuera, la forma común de hacerlo es &#39;req&#39; y &#39; res &#39;y aquí podemos decir&#39; res.send () &#39;y vamos a 03:56.720 -&gt; 04:06.780 simplemente enviar un&#39; hellooooo &#39;como lo hicimos en nuestro video anterior donde usamos el módulo HTTP que viene con Nodo. 04:06.920 -&gt; 04:19.750 Así que vamos a verificar eso; veamos si eso funciona Voy a guardar, actualizar y me sale &#39;hellooooo&#39;. Si abro la consola 04:19.750 -&gt; 04:28.560 aquí y la pestaña Red y vuelvo a actualizar, veo que la respuesta es &#39;hellooooo&#39;. 04:28.690 -&gt; 04:40.520 Vemos &#39;Content-Type:text / html&#39; que se convirtió automáticamente para nosotros. También puedo enviar en lugar de [ing] 04:40.730 -&gt; 04:43.710 un HTML. 04:43.880 -&gt; 04:47.150 Entonces, en lugar de hacer algo como &#39; <h1> &#39;04:49.990 -&gt; 04:51.010 y&#39; </h1> &#39;04:54.400 -&gt; 05:06.080 que nos da una <h1> &#39;Hellooooo&#39; Ahora también puedo enviar JSON. &#39;const user&#39; otra vez y esta vez el nombre de usuario 05:06.080 -&gt; 05:08.300 será Sally 05:13.590 -&gt; 05:23.470 y su afición será el fútbol y tenemos que agregar un &#39;=&#39; aquí y luego pasar &#39;usuario&#39; 05:26.370 -&gt; 05:31.430 Si guardo eso y regreso y actualizo. ¡Mira eso! 05:31.780 -&gt; 05:37.180 Hace automáticamente el &#39;JSON.stringify ()&#39; para mí y devuelve 05:37.280 -&gt; 05:46.000 a JSON Content-Type y &#39;application / json&#39; Content-Type con la respuesta eso es JSON. Muy genial. Entonces, 05:46.000 -&gt; 05:49.400 pueden ver el poder de Express incluso con este simple ejemplo. 05:49.690 -&gt; 05:56.420 Nos quita mucha repetición y hace que nuestra vida sea mucho más fácil. 05:56.440 -&gt; 06:01.990 Ahora solo hemos hecho GET aquí pero también puedes hacer solicitudes POST. 06:01.990 -&gt; 06:05.920 Entonces, por ejemplo, si hice &#39;publicar&#39; &#39;/ perfil&#39;, bueno 06:06.190 -&gt; 06:11.440 ahora si actualizo recibo un error porque 06:14.390 -&gt; 06:19.410 porque ahora hice el Método de Solicitud, que fue GET del navegador. 06:19.640 -&gt; 06:30.950 Pero aquí solo acepto una solicitud POST desde &#39;perfil&#39;. Si hago &#39;/ profile&#39; aquí 06:35.620 -&gt; 06:45.060 obtengo &#39;Can not GET / profile&#39; porque a pesar de que vamos a la URL correcta ahora estamos haciendo una solicitud GET. 06:45.070 -&gt; 06:46.750 Cada vez que actualizamos un navegador 06:46.780 -&gt; 06:48.290 es una solicitud GET. 06:48.790 -&gt; 06:56.530 Y para poder hacer eso necesitamos enviar algunos datos y les mostraré cómo hacerlo en 06:56.620 -&gt; 06:58.200 en los próximos videos. 06:58.240 -&gt; 07:07.890 Pero para mostrarte cómo funciona Express, puedo seguir agregando estas rutas:hagamos &#39;obtener&#39; un &#39;/ perfil&#39; que devuelva 07:12.790 -&gt; 07:15.460 &quot;obteniendo perfil&quot;. 07:15.640 -&gt; 07:17.110 Y si hago un 07:21.230 -&gt; 07:26.760 otro &#39;get&#39; esta vez para la url &#39;root&#39; [/] y este solo diré &quot;getting root&quot; 07:29.580 -&gt; 07:30.630 si guardo esto ahora 07:30.620 -&gt; 07:43.340 y actualiza &#39;/ profile&#39;, obtendré un &#39;200 OK&#39; con la respuesta &#39;get pro&#39; y si no lo hago &#39;/ profile&#39; 07:43.340 -&gt; 07:45.830 y solo la URL &#39;raíz&#39; obtendré &#39;root&#39;. 07:48.950 -&gt; 07:53.780 Y la forma en que Express funciona es que comprueba cada línea por línea. 07:53.790 -&gt; 08:01.670 Entonces, por ejemplo, comprobará, &quot;Oye, ¿la solicitud GET tiene la url &#39;raíz&#39; [/]?&quot;. 08:02.100 -&gt; 08:05.160 &quot;¿La solicitud GET tenía &#39;/ profile&#39;. 08:05.160 -&gt; 08:07.760 La solicitud POST tenía &#39;/ profile&#39;. 08:07.980 -&gt; 08:10.150 Y si concuerda con cualquiera de estos 08:10.260 -&gt; 08:14.640, funcionará independientemente de la función dentro de él. 08:14.940 -&gt; 08:28.280 Si hago una url que no existe, obtengo un &#39; 404 Not Found &#39;porque bien hicimos una solicitud GET a esta url 08:28.280 -&gt; 08:33.660 que no existe. Así que usando esto podemos usar el método GET 08:33.670 -&gt; 08:41.830 el método POST , el método PUT y el método DELETE que vamos a demostrar realmente en el próximo 08:41.830 -&gt; 08:43.210 par de videos 08:43.210 -&gt; 08:49.990 Pero como podemos ver, es una cuestión simple de decir que si vas a esta ruta haz esto si vas a este:08:50.200 -&gt; 08:54.510 hazlo y todo es lógico y todo se reduce. 08:56.040 -&gt; 08:58.480 Todo bien Te veré en el próximo video. 08:58.480 -&gt; 08:58.930 Adiós.