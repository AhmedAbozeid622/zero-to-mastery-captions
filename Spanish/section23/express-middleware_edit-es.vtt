WEBVTT 00:01.450 -&gt; 00:03.440 Bienvenido de nuevo. En este video 00:03.450 -&gt; 00:09.000 quiero hablar sobre un concepto importante en Express y sobre middleware. 00:09.110 -&gt; 00:10.430 Déjame mostrarte cómo funciona. 00:10.550 -&gt; 00:20.030 Si ejecuto el servidor aquí solo tengo un servidor simple que envía &#39;testest&#39;, Express tiene un concepto de middleware 00:21.180 -&gt; 00:28.720 y si lo hago &#39;app.use () &#39;este es un middleware Express genérico que puedo ingresar aquí. 00:29.040 -&gt; 00:35.730 Y lo que hace el middleware - como su nombre lo indica - a medida que se recibe la solicitud va a pasar a través de 00:35.730 -&gt; 00:40.420 esta función de &#39;uso&#39; y luego gotee a lo que sea que obtengamos:00:40.420 -&gt; 00:47.430 POST, PUT, DELETE y este middleware va a hacer algo con la solicitud que acabamos de tener para ordenar 00:47.430 -&gt; 00:50.880 tal vez hacer que sea más fácil trabajar con aquí abajo. 00:52.280 -&gt; 01:02.020 Vamos a demostrar ese ejemplo:&#39;app.use ()&#39; recibe &#39;request&#39;, &#39;response&#39; y luego algo llamado &#39;next&#39;. 01:02.240 -&gt; 01:04.010 Y dentro de esta función 01:07.830 -&gt; 01:10.710 solo diremos &#39;console.log ()&#39; 01:14.390 -&gt; 01:15.000 &#39; <h1> Helllooo </h1> &#39;01:18.750 -&gt; 01:27.600 Si guardamos y volvemos aquí y ejecutamos el servidor local, hmmm está colgando aquí. 01:27.700 -&gt; 01:31.170 Incluso si abro la consola, no ocurre nada. 01:31.390 -&gt; 01:38.170 Si vuelvo, veo eso &#39; <h1> helllooo </h1> &#39;se activa porque estoy registrando la consola, pero nunca llega aquí 01:41.540 -&gt; 01:49.950, eso es porque para que el middleware siga pasando datos debe llamar a&#39; siguiente &#39;. 01:50.340 -&gt; 01:52.720 El tercer parámetro. 01:52.810 -&gt; 01:59.530 Entonces, al llamar a &#39;siguiente&#39; si actualizo, recibo &#39;testest&#39;. 01:59.620 -&gt; 02:09.620 Entonces, el middleware de la forma en que funciona es que usamos &#39;app.use ()&#39; para obtener las solicitudes del sitio web; aparece la solicitud 02:09.620 -&gt; 02:10.510. 02:10.520 -&gt; 02:12.190 Podemos hacer lo que queramos con él. 02:12.200 -&gt; 02:17.010 En nuestro caso, realmente no lo estamos tocando, solo estamos registrando la consola &#39; <h1> helllooo </h1> &#39;y luego pulsamos Next 02:17.030 -&gt; 02:21.740 y luego Express sigue corriendo a través de [app.get () y app.listen ()]. 02:21.830 -&gt; 02:26.030 ¿Y aunque pienses por qué es útil? 02:26.060 -&gt; 02:31.920 Hay muchos casos que mostraré más adelante, mientras que el middleware es importante, y middlewares 02:31.920 -&gt; 02:40.220 son excelentes scripts que las personas han preescrito para poder agregue a su servidor pero verá más 02:40.220 -&gt; 02:40.970 en el siguiente video. 02:40.970 -&gt; 02:47.760 Solo quería mostrarte el concepto básico de middleware:algo que recibe por adelantado antes de 02:47.760 -&gt; 02:55.570 llegamos a las rutas, la solicitud, la modificamos y luego pasa la siguiente función para mantenerlo en funcionamiento. 02:56.640 -&gt; 02:58.410 Veré en el próximo. Adiós.