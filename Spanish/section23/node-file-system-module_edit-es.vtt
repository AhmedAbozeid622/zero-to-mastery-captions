WEBVTT

00:00.980 --> 00:02.900
Hola todos.

00:02.900 --> 00:04.000
Dar una buena acogida.

00:04.280 --> 00:12.170
Y en este video, quiero mostrarte algo que realmente me emocionó mucho cuando comencé

00:12.170 --> 00:19.040
nodo de aprendizaje, y espero que te pongas tan emocionado como yo a medida que avanzamos en este video y luego hacemos

00:19.040 --> 00:20.300
un pequeño desafío.

00:20.300 --> 00:21.310
Te va a volar la cabeza.

00:21.330 --> 00:25.760
Al menos lo hizo cuando comencé a aprender a codificar.

00:25.850 --> 00:34.250
Ahora en el video anterior hablamos sobre algo llamado el módulo FS que viene con el nodo, y esto

00:34.250 --> 00:39.590
es algo que está integrado en el nodo y la forma en que lo conseguimos es que simplemente haremos const.

00:39.760 --> 00:50.360
Bueno, en realidad necesitamos un archivo primero, así que hagamos un toque de script.js, crearemos un nuevo guión perfecto.

00:50.400 --> 00:52.920
De acuerdo, podemos cerrar eso porque no necesitamos esto.

00:53.490 --> 01:02.190
Y en el script.js que tenemos en esta carpeta o en algún nodo podemos tener 'const fs'.

01:02.210 --> 01:14.990
es igual a 'require (' fs ')', por lo que FS aquí significa sistema de archivos y si tiene un nodo descargado tiene acceso

01:14.990 --> 01:15.460
a esto.

01:15.470 --> 01:17.680
Simplemente haciendo esto.

01:17.880 --> 01:21.750
Ahora, ¿por qué es esto tan emocionante y tan útil?

01:22.320 --> 01:30.830
Bueno, porque el sistema de archivos FS te permite acceder a nuestro sistema de archivos, lo que de nuevo no suena tan emocionante.

01:30.840 --> 01:38.230
Pero permítanme demostrar lo que sucede y por qué esto es útil, así que tengan paciencia conmigo aquí.

01:38.280 --> 01:42.080
Voy a hacer un poco de codificación y luego voy a explicar exactamente lo que está sucediendo.

01:43.140 --> 01:48.470
Entonces vamos a usar el 'fs.readFile'.

01:48.560 --> 01:50.720
Es bastante auto explicativo.

01:51.200 --> 02:01.380
Tenemos un parámetro en blanco y luego tenemos errores por error, datos.

02:01.760 --> 02:03.710
Y esta es una función de flecha.

02:05.450 --> 02:12.270
Entonces, el segundo parámetro es una función, y esta función tiene errores o datos.

02:12.310 --> 02:24.630
Entonces, para el error, voy a decir si hay un error, simplemente arrojaremos err, o podemos simplemente decir console dot

02:25.020 --> 02:30.660
log errrroooorrr. Realmente ponlo en su cara.

02:31.550 --> 02:42.680
¡Bien! Ahora bien, si no hubo un error, simplemente diremos que solo diremos console.log y acabaremos de cerrar sesión

02:42.680 --> 02:45.150
cualesquiera que sean los datos

02:45.370 --> 02:45.990
Bien.

02:46.150 --> 02:47.720
Déjame agregar los puntos y comas.

02:48.830 --> 02:51.090
Y guarda eso.

02:51.100 --> 02:59.440
Entonces lo que acabo de hacer aquí. Acabo de importar el módulo FS que viene con el nodo y el módulo FS tiene un método

02:59.740 --> 03:01.670
readFile () que

03:01.720 --> 03:05.480
bueno, parece que lee algún tipo de archivo.

03:05.560 --> 03:13.300
El primer parámetro es el archivo real que queremos hacer, por lo que la ruta al archivo, que todavía no tenemos.

03:13.300 --> 03:14.650
Entonces, creemos uno.

03:14.650 --> 03:25.200
Voy a decir un nuevo archivo y lo llamaremos 'hello.txt', y con 'hello.txt', haremos nuestro clásico

03:26.300 --> 03:27.850
helllloooooo allí!

03:29.090 --> 03:32.300
Y cosas emocionantes, así que signos de exclamación.

03:32.540 --> 03:37.120
Lo guardamos y ahora podemos decir que queremos leer el archivo.

03:37.190 --> 03:40.340
'hello.txt' del directorio actual.

03:41.140 --> 03:42.340
Hola punto

03:42.790 --> 03:45.140
texto.

03:45.280 --> 03:50.450
Ahora este método readFile va a encontrar el archivo con la ruta,

03:50.500 --> 03:52.700
Ok, entonces aquí está.

03:52.840 --> 03:59.420
Lo leerá y luego, si hay un error, saltará un error.

03:59.590 --> 04:06.670
Si hay algún tipo de datos y todo es exitoso, va a escupir datos. Con el

04:06.670 --> 04:08.300
forma en que podemos ejecutar este archivo en el nodo.

04:08.310 --> 04:13.720
Bien, primero, tendré que guardarlo. Diremos node script.js

04:15.140 --> 04:19.740
Entra y tengo buffer.

04:20.920 --> 04:22.740
¿Que es eso?

04:22.840 --> 04:27.460
Y eso es porque tenemos que hacer un poco de codificación.

04:27.670 --> 04:34.680
Y lo que eso significa es que si hago esto 'toString ()', probemos esto y le mostraremos lo que quiero decir.

04:37.450 --> 04:38.530
Y lo entiendo

04:38.770 --> 04:41.250
Hola.

04:41.260 --> 04:49.530
Entonces el 'readFile' lee el archivo como su nombre lo sugiere, y va a escupir lo que está leyendo.

04:50.010 --> 04:50.750
Datos.

04:51.500 --> 04:55.490
Ahora, ¿por qué tenemos que poner 'toString ()' aquí?

04:56.970 --> 05:04.380
Solo para que sepas que 'toString ()' hace algo, de forma predeterminada, si no agregas nada, usará el

05:04.380 --> 05:11.280
la codificación llamada UTF 8 y UTF 8 es un tipo de codificación.

05:11.420 --> 05:14.640
Ejecutamos esto para asegurarnos de que esto siga siendo el mismo.

05:14.750 --> 05:15.530
Sí.

05:15.530 --> 05:20.300
Entonces UTF 8 es un tipo de codificación que tenemos.

05:20.300 --> 05:22.980
Eso es bastante estándar con HTML 5.

05:23.000 --> 05:26.900
Y casi todo el mundo lo usa en la web.

05:27.290 --> 05:37.160
Es una forma de que tengamos personajes, ya sean latinos, conozcan ABC o coreanos.

05:37.160 --> 05:45.770
Caracteres japoneses, chinos, todos están representados por un número, y UTF 8 es una forma de codificar estos

05:45.770 --> 05:48.870
números para asegurarse de que podamos leerlos.

05:48.920 --> 05:55.910
En realidad, es un tema bastante complejo, por lo que recomiendo la página de Wikipedia que habla sobre UTF 8.

05:55.970 --> 06:03.420
Por ahora solo debes saber que UTF 8 es un tipo de codificación que es bastante estándar en toda la web.

06:03.500 --> 06:09.290
Es posible que también haya visto ASCII y ASCII antes de que existiera UTF 8.

06:09.290 --> 06:19.610
ASCII era principalmente para idiomas basados ​​en América, entonces el ABC; y UTF expandió eso para incluir muchos más de

06:19.860 --> 06:22.540
muchos más idiomas de diferentes partes del mundo.

06:22.960 --> 06:29.780
Bien, un poco tangente que no necesitamos continuar, pero como pueden ver aquí

06:30.530 --> 06:30.990
tener

06:31.070 --> 06:35.300
'helllloooooo there' y podemos leer el archivo.

06:35.300 --> 06:36.320
Bien.

06:36.330 --> 06:37.030
Muy genial.

06:38.270 --> 06:42.810
Permítanme agregar otro método a su repertorio.

06:43.250 --> 06:57.160
Hagamos también 'fs.readFileSync ()' y 'fs.readFileSync ()' funciona un poco diferente que el anterior

06:57.160 --> 07:00.210
uno y sincronización significa sincrónico.

07:00.580 --> 07:01.540
Entonces veremos qué pasa.

07:01.540 --> 07:02.500
Voy a poner en

07:05.340 --> 07:12.230
'hello.txt' una vez más, y esta vez voy a dejarlo así.

07:14.150 --> 07:26.630
Y digamos que esto igualará el archivo y simplemente 'console.log (file)'.

07:26.650 --> 07:27.020
Bien.

07:27.050 --> 07:31.710
Déjame guardar eso y ejecutar esto.

07:31.760 --> 07:32.390
Bien.

07:32.460 --> 07:37.370
Sabemos una vez más que obtuvimos esto porque tenemos que hacer 'toString ()'.

07:37.440 --> 07:38.610
Así que hagámoslo.

07:38.640 --> 07:42.660
Voy a probar 'toString ()'

07:46.060 --> 07:51.020
Voy a guardar y ejecutar esto de nuevo. Bien, entiendo

07:51.280 --> 07:52.410
'helllloooooo allí!'

07:52.510 --> 08:05.020
Pero solo para distinguirlos, digamos que este es el número uno y este es el número dos.

08:05.450 --> 08:07.660
Guardo esto, ejecute esto de nuevo.

08:08.630 --> 08:12.510
Y vaya, qué acaba de pasar.

08:14.050 --> 08:21.140
Tenemos uno que viene después de los dos.

08:21.920 --> 08:30.830
Ahora bien, si ha visto el video sincrónico asíncrono en este curso, entonces puede comprender qué es

08:30.830 --> 08:32.090
pasando aquí.

08:32.090 --> 08:34.210
Si no, voy a hacer una rápida sinopsis.

08:34.220 --> 08:42.610
Pero te recomiendo que eches un vistazo a ese video. Ahora el archivo de lectura es asincrónico, y es por eso que tiene algo

08:42.610 --> 08:45.200
llamada la función de devolución de llamada.

08:45.220 --> 08:53.290
Está diciendo:hey voy a leer este archivo, y cuando termine con él, sigues adelante con tu

08:53.290 --> 08:55.120
negocios y sigue leyendo.

08:55.120 --> 08:59.010
Línea tres, línea cuatro, línea cinco, línea seis, hasta 11.

08:59.260 --> 09:07.010
Cuando termine, se lo haré saber y le daré un error o algunos datos. 'readFileSync ()' que

09:07.010 --> 09:11.740
is synchronous dice:Voy a leer este archivo.

09:11.780 --> 09:14.750
No hagas nada, solo espera aquí cuando termine

09:14.750 --> 09:18.600
Voy a asignarlo a 'archivo' y luego puedes continuar.

09:20.210 --> 09:30.080
Entonces, como pueden ver aquí, lo que sucede es que leemos el archivo y, como esto es asincrónico, va a ir

09:30.080 --> 09:41.280
ejecutar esto y pasar a la línea 10 y ejecutar el 'fs.readFileSync ()' y el 'readFileSync ()' porque está diciendo

09:41.280 --> 09:45.150
oye espera hasta que haya terminado esto, va a imprimir

09:45.330 --> 09:46.920
'helllloooooo allí!'

09:47.160 --> 09:52.340
y luego el código asíncrono va a decir:hey, terminé de leer el archivo,

09:52.380 --> 09:55.770
aquí están los datos y se imprimen aquí abajo.

09:55.770 --> 09:59.860
Nuevamente, realmente recomiendo que revisen el video sincrónico asincrónico.

10:00.330 --> 10:03.070
Pero por ahora espero que tenga sentido.

10:03.240 --> 10:12.240
Ahora mirando esto, ¿cuál deberías usar? Bueno, para un caso simple como este,

10:12.400 --> 10:19.690
podemos usar lo que queramos. Pero es posible que vea un problema con el segundo, especialmente si estamos construyendo

10:19.690 --> 10:21.150
algo así como un servidor.

10:21.250 --> 10:25.090
Si tenemos un archivo masivo que tiene algo más que 'helllloooooo there !!!',

10:25.300 --> 10:34.360
bueno, si hacemos 'readFileSync ()', lo que sucede es que vamos a detener o detener la ejecución de nuestro

10:34.360 --> 10:39.980
archivo y leerá el texto completo.

10:40.370 --> 10:47.000
Y el programa simplemente estará esperando que eso termine; frente al archivo de lectura que dice:oye tu

10:47.000 --> 10:48.230
puede seguir adelante.

10:48.320 --> 10:50.340
Te avisaré cuando haya terminado con esto.

10:50.360 --> 10:56.210
Entonces cuando estás construyendo un servidor y digamos un servidor express con rutas.

10:56.360 --> 11:03.530
Bueno, en ese caso, queremos usar readFile () si estamos leyendo cualquier tipo de archivo o archivo de texto, lo que sea

11:03.530 --> 11:04.160
es.

11:04.310 --> 11:08.680
Porque de esa manera no estamos bloqueando la ejecución y el programa puede seguir haciendo cosas.

11:09.700 --> 11:10.050
Bien.

11:10.150 --> 11:12.750
Así que una última vez solo para aclarar las cosas.

11:12.760 --> 11:17.690
Voy a etiquetar esto como 'Async' y 'Sync'.

11:17.710 --> 11:22.350
Entonces, una vez más, si ejecutamos esto, tenemos 'Sincronización' y 'Async'.

11:22.420 --> 11:23.360
'helllloooooo allí!'

11:23.790 --> 11:32.350
Pero muy bueno, podemos leer un archivo y ambas instancias, lo que fue genial.

11:32.350 --> 11:38.800
Permítanme mostrarles algunas más y luego les digo exactamente por qué es tan emocionante y cómo podemos

11:38.800 --> 11:40.880
Úselo para hacer cosas realmente emocionantes.

11:44.090 --> 11:50.770
Así que digamos '¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡ah! " el texto es algo aburrido y queremos agregarlo.

11:51.110 --> 11:54.230
Bueno, podemos hacer algo como esto.

11:55.280 --> 12:01.160
'fs.appendFile ()' le damos el archivo que queremos adjuntar.

12:01.430 --> 12:05.220
Entonces en este caso es './hello.txt'.

12:05.780 --> 12:10.130
Y, por cierto, si esto no existe, en realidad solo creará el archivo para nosotros.

12:10.130 --> 12:13.130
Y el segundo parámetro dirá lo que queremos agregar.

12:13.130 --> 12:28.150
Entonces, digamos que también queríamos agregar un espacio y luego decir "Esto es genial", ahora hay un signo de exclamación.

12:28.210 --> 12:36.020
Y finalmente el tercer parámetro toma un error y este error simplemente lo dirá si hay un error.

12:36.040 --> 12:37.020
Déjame hacer esto más pequeño

12:37.040 --> 12:43.540
para que pueda ver, digamos que si hay un error, simplemente 'console.log'

12:47.320 --> 12:49.790
'console.log (err)'

12:49.870 --> 12:50.210
Bien.

12:50.260 --> 12:51.780
Perfecto.

12:51.830 --> 12:53.900
Entonces, ejecutemos esto y veamos qué pasa.

12:53.900 --> 12:57.520
Voy a ejecutar el script y me sale

12:57.530 --> 12:58.360
'helllloooooo allí!'

12:58.370 --> 12:58.970
'helllloooooo allí!'

12:58.970 --> 13:10.710
Porque estos se ejecutaron primero, pero si voy a 'hello.txt', mira eso, simplemente escribimos en un archivo. Y ahora tenemos "Esto

13:10.710 --> 13:11.690
es muy bueno."

13:12.000 --> 13:17.440
Entonces, si ejecuto esto de nuevo, déjenme aclarar esto para que tengamos más espacio

13:21.160 --> 13:22.180
Mira eso. yo obtengo

13:22.270 --> 13:22.930
'helllloooooo allí!'

13:22.930 --> 13:23.860
'Esto es genial'

13:23.860 --> 13:24.520
'helllloooooo allí!'

13:24.520 --> 13:25.990
'Esto es genial'

13:26.010 --> 13:30.770
Si volvemos al archivo hello.txt, oh chico, hemos añadido aún más

13:30.770 --> 13:31.850
'Esto es genial'

13:32.490 --> 13:33.460
texto.

13:33.680 --> 13:35.140
Así que eso es genial.

13:35.140 --> 13:39.740
Acabamos de agregar algunas líneas más a nuestro archivo.

13:39.800 --> 13:42.450
Déjame eliminar eso solo para que no se vuelva demasiado molesto.

13:42.800 --> 13:44.780
Vamos a guardarlo y regresar.

13:46.190 --> 13:48.930
Está bien, así que aprendimos el apéndice.

13:49.090 --> 13:57.880
Permítanme comentar esto para que no interfiera con ninguno de los otros.

13:57.900 --> 14:04.570
Hagamos una 'escritura' esta vez - ahora creemos un espacio aquí para que podamos ver

14:07.240 --> 14:09.220
Con la escritura, como te puedes imaginar,

14:10.320 --> 14:17.020
'fs.writeFile ()' y solo diremos que este archivo se llamará 'bye.txt'.

14:17.020 --> 14:19.550
Un nombre muy original por mí mismo.

14:20.400 --> 14:21.540
Y solo diré.

14:21.540 --> 14:23.750
Triste de verle partir.

14:27.200 --> 14:44.280
Y una vez más, tomará un error y este error dirá 'if (err)' 'console.log (err)'

14:44.340 --> 14:50.640
De acuerdo, entonces vamos a guardar eso, ejecutar el archivo o ejecutar el script.

14:51.890 --> 14:56.110
Y mira eso, 'bye.txt' acaba de ser agregado.

14:56.240 --> 15:00.580
Si hacemos clic en él, tenemos "Triste de verte partir".

15:00.650 --> 15:03.090
Acabamos de crear un nuevo archivo de texto.

15:03.940 --> 15:05.870
Muy muy genial.

15:05.930 --> 15:17.010
Por cierto, para que sepas lo que sucede, si digamos que escribo mal el archivo de lectura y ahora es 'hell.txt'

15:17.150 --> 15:22.280
Bueno, si ejecuto esto, obtendré un error y puedes ver eso.

15:22.340 --> 15:30.610
Debido a que se equivoca, recibo el mensaje de error, error con muchas R's.

15:30.620 --> 15:30.930
Bien.

15:30.950 --> 15:39.260
Hay un poco de transición, pero por si la gente pregunta o estás pensando en eso.

15:39.340 --> 15:39.990
Bien.

15:40.160 --> 15:45.190
Woo ~ Me estoy cansando así que vamos a hacer una última y luego voy a decirte exactamente por qué esto es tan

15:45.190 --> 15:46.670
guay.

15:46.840 --> 15:54.180
El último que vamos a hacer, de nuevo, hagamos un espacio aquí, será el 'eliminar'.

15:54.490 --> 15:59.240
Entonces con esa 'eliminación' podemos hacer 'fs.unlink ()'.

15:59.270 --> 16:08.500
el nombre está un poco fuera de aquí pero 'fs.unlink ()' y diremos 'bye.txt' y notamos que pude

16:08.500 --> 16:18.730
simplemente haz 'bye.txt' pero solo para mantenerlo constante, solo diré './bye.txt' con el './' antes

16:18.730 --> 16:18.940
eso

16:23.530 --> 16:24.400
y con este.

16:24.400 --> 16:25.970
De nuevo si hay algún error

16:28.550 --> 16:29.680
solo 'console.log (err)'

16:29.790 --> 16:32.720
Vaya, olvidé hacer el 'si'

16:37.540 --> 16:39.900
perfecto, ahora

16:40.130 --> 16:42.020
Bueno, veamos qué pasa aquí.

16:43.460 --> 16:52.940
Y solo por diversión, simplemente agreguemos un 'console.log ()' aquí después de que haya terminado de eliminarse y diremos 'inception' porque

16:52.940 --> 16:58.590
estamos diciendo 'adios' a './bye.text'. Mente soplada

16:58.990 --> 17:00.290
Bien, corramos esto.

17:00.290 --> 17:06.220
Voy a decir, y vamos a comentar el archivo de escritura aquí porque no necesita escribirlo,

17:06.220 --> 17:08.320
ya tenemos el 'bye.text'.

17:08.420 --> 17:09.640
Déjame salvar.

17:09.810 --> 17:13.280
Ahora, si miras el 'bye.text', veamos qué sucede aquí cuando ejecuto el script

17:16.580 --> 17:20.410
mira eso, el 'bye.text' fue eliminado.

17:20.830 --> 17:22.910
El inicio acaba de suceder.

17:25.290 --> 17:26.430
Increíble.

17:26.490 --> 17:30.840
Así que eso fue muy emocionante para mí, espero que sea para ti también.

17:30.900 --> 17:34.270
Pero, ¿por qué es esto emocionante?

17:34.650 --> 17:42.900
Bueno, porque ahora podemos usar programación en JavaScript fuera de los navegadores web y fuera de

17:42.900 --> 17:46.760
de solo construir sitios web y servidores.

17:46.890 --> 17:52.760
Lo que podemos hacer ahora con este conocimiento es que podemos hacer nuestras vidas más fáciles.

17:52.800 --> 18:01.540
Puedes pensar en casos, tal vez quieras leer un archivo Excel y hay cosas que puedes usar, usando

18:01.540 --> 18:05.690
lea el archivo y use los módulos de NPM que puede leer.

18:05.830 --> 18:06.180
Digamos.

18:06.180 --> 18:10.730
Columnas en un excel y hacer algunas matemáticas.

18:11.140 --> 18:18.100
O tal vez tiene una hoja de Excel con todos estos correos electrónicos y desea enviar un correo electrónico para decir

18:18.190 --> 18:24.160
100 personas en esta lista pero tampoco quieres que te atrapen las personas que envían correos no deseados por el filtro google

18:24.160 --> 18:32.650
que esta cuenta está enviando spam porque simplemente enviaron 100 correos electrónicos en dos minutos. Bien usando algo

18:32.650 --> 18:40.150
como Node, puede crear tal vez algo que cada seis horas envíe cinco correos electrónicos.

18:40.150 --> 18:48.520
Otra cosa que puede hacer si tiene un robot, por ejemplo, algo similar a un sistema de archivos en lugar de

18:48.520 --> 18:50.010
teniendo lectura del archivo.

18:50.000 --> 18:58.000
Puede leer del robot, tal vez a través de la red inalámbrica, tal vez a través de cables y obtener una entrada de algunos datos

18:58.450 --> 19:00.040
que tiene el robot

19:00.400 --> 19:03.570
Tal vez detectó un gato.

19:03.910 --> 19:10.120
Bueno, utilizando esa información, puede hacer algo que pueda responder, tal vez enviarle un correo electrónico diciendo que el

19:10.120 --> 19:16.420
el robot acaba de detectar un gato y envía ese correo electrónico o envía una salida.

19:16.420 --> 19:24.160
Y eso es lo que llamamos salida de entrada, donde obtiene una entrada de otra fuente, otra máquina

19:24.760 --> 19:32.140
y luego también está produciendo algo para el consumo, eso es realmente emocionante porque

19:32.170 --> 19:35.490
abre el mundo donde puedes crear herramientas para ti.

19:35.620 --> 19:36.730
Puedes automatizar cosas

19:36.730 --> 19:41.760
Puedes literalmente hacer cualquier cosa que tu mente pueda pensar.

19:42.310 --> 19:48.310
Y sé que esto todavía es temprano y todavía estás al comienzo de tu carrera como desarrollador, pero esto es

19:48.310 --> 19:54.370
el primer paso para entender cómo puedes usar la programación para resolver problemas y hacer tu vida

19:54.610 --> 19:58.580
más eficiente, o tal vez un poco más divertido.

19:58.630 --> 20:02.040
Entonces en el próximo video vamos a hacer algo divertido.

20:02.140 --> 20:07.650
Vamos a usar lo que acabamos de aprender y vamos a ayudar a Santa en un desafío de codificación.

20:08.720 --> 20:10.190
Te veré en eso.

20:10.360 --> 20:10.570
Adiós
