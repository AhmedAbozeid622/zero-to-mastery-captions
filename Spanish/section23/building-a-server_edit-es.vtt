WEBVTT 00:00.670 -&gt; 00:04.770 Bienvenido de nuevo. Creo que es hora de crear nuestro propio servidor ahora. 00:06.270 -&gt; 00:09.620 Así que vamos a crear un nuevo archivo llamado &#39;server.js&#39;. 00:09.660 -&gt; 00:11.470 [touch server.js] 00:11.700 -&gt; 00:15.540 Y para que nodemon escuche &#39;server.js&#39;. 00:15.540 -&gt; 00:19.630 Escribamos &#39;nodemon&#39; y luego &#39;server.js&#39;. 00:19.830 -&gt; 00:27.450 Ahora, si guardo este nodemon, lo escucharé mientras diga &#39;npm start&#39; 00:31.120 -&gt; 00:33.070 Como mencioné antes 00:34.360 -&gt; 00:42.250 Node viene con su propio módulo HTTP y eso es lo que vamos a usar para crear nuestro servidor. 00:42.250 -&gt; 00:44.080 Y es muy simple de usar. 00:44.260 -&gt; 00:56.600 Simplemente tomamos el módulo HTTP y luego creamos un servidor definiéndolo diciendo &#39;http.createServer ()&#39;. En este 00:56.600 -&gt; 01:05.940 &#39;createServer&#39; crearemos una función de flecha y aquí por ahora solo hagamos 01:05.970 -&gt; 01:11.100 &#39;console.log (&#39; ¡Te escucho! Gracias por la solicitud) &#39;01:12.910 -&gt; 01:20.320 Y finalmente tenemos que hacer&#39; server.listen () &#39;y darle el número de puerto que queremos escuchar 01:20.320 -&gt; 01:20.660 for. 01:20.770 -&gt; 01:23.930 Así que solo haga 3000 por ahora, pero nuevamente puede hacer cualquier cosa, puede hacer 01:23.930 -&gt; 01:27.710 3001 si lo desea, pero 3000 es agradable. 01:27.940 -&gt; 01:31.160 Hagamos &#39;node server.js&#39; 01:31.180 -&gt; 01:32.020 - 01:34.690 -&gt; 01:37.000 Y parece que está colgado allí. 01:38.000 -&gt; 01:43.680 Pero vayamos al puerto 3000 en nuestro servidor local que es nuestra máquina y veamos qué sucede. 01:45.140 -&gt; 01:51.910 Si abro una pestaña nueva y voy a localhost 3000 hmm, no pasa nada. 01:52.180 -&gt; 01:59.160 Si abro la consola, no hay nada, pero si vuelvo, veo &quot;Te escucho. 01:59.230 -&gt; 02:05.080 Gracias por la solicitud&quot; y eso es porque recuerdas &#39;servidor&#39; .js &#39;se está ejecutando en el nodo. 02:05.230 -&gt; 02:11.350 Se está ejecutando aquí en la Terminal. Pero está escuchando conexiones. 02:11.350 -&gt; 02:19.570 Entonces cuando pulso &#39;actualizar&#39; aquí o presiono Enter e intento conectar, estará escuchando y se ejecutará 02:19.870 -&gt; 02:24.410 &#39;console.log ()&#39; y puede ver el segundo &quot;Te escucho. Gracias por la solicitud&quot; justo aquí. 02:24.520 -&gt; 02:25.180 Si actualizo 02:25.180 -&gt; 02:26.300 dos veces más. 02:28.190 -&gt; 02:31.260 Bueno, de nuevo tengo dos más. 02:31.480 -&gt; 02:36.150 Pero ahora el navegador simplemente está colgado allí porque no estamos haciendo nada. 02:36.190 -&gt; 02:37.800 No estamos respondiendo nada. 02:37.800 -&gt; 02:40.760 Puedes ver en la parte inferior que dice &#39;esperando el host local&#39;. 02:40.960 -&gt; 02:44.080 Estamos simplemente registrando la consola de nuestra parte, pero no recibimos ninguna respuesta. 02:46.060 -&gt; 02:47.050 Hagámoslo. 02:47.050 -&gt; 02:53.950 Voy a eliminar el registro de la consola y usar los parámetros que &#39;createServer&#39; nos proporciona. 02:53.980 -&gt; 03:02.510 Entonces, cada vez que intentemos conectar, tenemos una &#39;solicitud&#39; luego un parámetro &#39;respuesta&#39; que podemos usar y vamos a 03:02.510 -&gt; 03:07.240 hacer esto un poco más pequeño solo para que podamos ver. 03:07.430 -&gt; 03:16.700 Y aquí podemos hacer algo como &#39;response.setHeader ()&#39; ... 03:19.760 -&gt; 03:26.010 &#39;Content-Type&#39; - le informamos de qué tipo del contenido que íbamos a enviar y va a ser 03:26.580 -&gt; 03:37.950 &#39;text / html&#39; - y esta es solo la forma estándar de declarar el tipo de contenido y diremos &#39;response.end ()&#39; con 03:39.470 -&gt; 03:42.200 an &#39; <h1> &#39;etiqueta que dice&#39; Helloooooo &#39;. 03:46.740 -&gt; 03:50.730 Si guardo esto y vuelvo a ejecutar 03:54.350 -&gt; 03:57.530, nuevamente, tenemos que reiniciar nuestro servidor. 03:57.620 -&gt; 04:02.840 Así que vamos a involucrar a nodemon aquí para que escuche los cambios de archivos. 04:02.880 -&gt; 04:05.000 Voy a &#39;package.json&#39; Voy a guardar esto. 04:05.000 -&gt; 04:10.340 Y ahora ejecutaré &#39;npm start&#39; para ver si todo está funcionando. 04:10.340 -&gt; 04:12.150 Regresemos a nuestro archivo &#39;server.js&#39;. 04:12.410 -&gt; 04:19.560 Si regreso y renuevo, recibo &#39;helloooooo&#39;; si voy a la pestaña Red 04:20.350 -&gt; 04:28.670 veo que localhost obtengo una respuesta de 200; si hago clic en esto, veo que la respuesta fue &#39; <h1> helloooooo </h1> &#39;04:28.900 -&gt; 04:39.970 Si voy a encabezados, veo que era un código de estado 200 y el tipo de contenido era&#39; text / html &#39;. 04:40.150 -&gt; 04:41.230 Muy bueno. 04:41.260 -&gt; 04:43.940 También puedo escuchar solicitudes. 04:43.990 -&gt; 04:51.720 Así que por ejemplo aquí podría haber dicho &#39;console.log (request.headers)&#39; 04:54.700 -&gt; 05:05.880 Podría haber dicho también, podría haberlo hecho también dicho &#39;método&#39; y finalmente algo como &#39;url&#39; 05:05.880 -&gt; 05:10.430 &#39;solicitud&#39; nos da mucha información sobre las solicitudes que recibimos. 05:10.530 -&gt; 05:13.700 Y para que tengamos claro cuáles son cada uno de estos. 05:13.710 -&gt; 05:25.680 Puedo decir &#39;encabezados&#39;, &#39;método&#39; y &#39;url&#39;. Si guardo esto 05:28.820 -&gt; 05:29.540 y vuelva a ejecutar 05:32.440 -&gt; 05:36.680 veo que los encabezados que obtengo son &#39;localhost:3000&#39;. 05:36.850 -&gt; 05:42.310 Vemos que el &#39;usuario-agente&#39; era Mozilla, Macintosh. Entonces eso es lo que usamos. 05:42.610 -&gt; 05:44.180 Usamos una Apple para hacer esa solicitud. 05:44.180 -&gt; 05:44.930 De acuerdo. 05:46.050 -&gt; 05:51.830 Y el método era un método &#39;GET&#39; y la url era solo la barra invertida [\]. 05:51.900 -&gt; 05:55.890 Vamos a comentar los encabezados por ahora y mostraremos cómo cambian las cosas. 05:55.890 -&gt; 06:01.020 Si ahora ingreso &#39;localhost:3000 / profile / 123&#39; 06:04.450 -&gt; 06:07.930 obtengo &#39;method GET&#39; y &#39;url&#39; fue &#39;/ profile / 123&#39; 06:07.990 -&gt; 06:12.530 Así que obtenemos información sobre la solicitud que hizo el front-end, lo cual es genial. 06:13.560 -&gt; 06:22.240 Ahora, con nuestra respuesta, respondimos con &#39;text / html&#39; pero ¿recuerdas a JSON, verdad? Hablamos sobre lo útil que es 06:22.240 -&gt; 06:26.260 JSON cuando se realizan solicitudes AJAX. 06:26.370 -&gt; 06:27.630 ¿Podemos hacer eso aquí? 06:27.690 -&gt; 06:35.870 Por supuesto, si voy y cambio &#39;Content-Type&#39; a &#39;application / json&#39;, entonces tendréis que acostumbrarme a 06:35.870 -&gt; 06:39.980 pero esto es la forma en que dices que el tipo de contenido es JSON. 06:40.040 -&gt; 06:50.270 Ahora podemos enviar un objeto JavaScript como &#39;usuario&#39; y diremos &quot;nombre:&#39;Juan&#39;&quot; 06:53.210 -&gt; 06:57.280 &quot;hobby:&#39;Patinaje&#39;&quot;. 06:57.320 -&gt; 07:05.360 Ahora este usuario, puedo pasar aquí, pero recuerde que para transferir entre los cables necesitamos usar 07:05.510 -&gt; 07:12.980 &#39;JSON.stringify&#39; y asegúrese de verificar el video JSON si eso te resulta confuso. 07:13.040 -&gt; 07:22.090 Pero nuevamente estamos cambiando este objeto a una cadena JSON para poder enviarlo a través de los cables. 07:22.230 -&gt; 07:33.390 Si guardo y volvemos y refresco, ¡lo veo, mire eso! - una respuesta JSON nuevamente &quot;nombre:&#39;John&#39;, hobby:&#39;patinaje&#39;&quot; 07:33.960 -&gt; 07:40.560 y si hago clic en la pestaña Red aquí, veo que el &#39;Tipo de contenido&#39; es &#39;application / json&#39; &#39;y la respuesta 07:40.620 -&gt; 07:43.610 está en formato JSON. 07:43.640 -&gt; 07:47.740 Entonces en el front-end ejecutaremos &#39;json.parse ()&#39; 07:47.750 -&gt; 07:52.520 Y luego este [{&quot;nombre:&quot; John &quot;,&quot; hobby &quot;]:&quot;Skating&quot;}] para convertirlo en un objeto JavaScript 07:52.580 -&gt; 07:53.340 Muy bien 07:54.340 -&gt; 08:03.670 Acabamos de crear nuestro primer servidor pero este HTTP es huesos bastante simples, como se puede imaginar, construir servidores 08:03.670 -&gt; 08:11.670 es algo que todo el mundo hace que tiene un sitio web y hay muchas herramientas que podemos usar ahora que 08:11.790 -&gt; 08:12.780 son más elegante 08:12.840 -&gt; 08:19.500 que ejecutar HTTP, y el más popular y el mejor para usar con Node.js es algo llamado 08:19.500 -&gt; 08:23.510 Express, que vamos a hablar sobre en el próximo video. 08:23.620 -&gt; 08:25.360 Te veré en ese video. Adiós