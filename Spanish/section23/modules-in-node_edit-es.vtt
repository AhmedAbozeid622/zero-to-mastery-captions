WEBVTT

00:01.050 --> 00:09.260
Ahora, vuelvo a mi ejemplo aquí, agreguemos un nuevo archivo, y lo llamaremos 'script2.js'.

00:09.270 --> 00:09.820
-

00:11.820 --> 00:20.110
Ahora el 'script2.js' puede tener una constante llamada 'largeNumber'.

00:20.340 --> 00:24.320
Y digamos que son 356.

00:24.780 --> 00:35.410
Y si queremos exportar esto y decir 'export default largeNumber' y ahora dentro de 'script.js' lo hago

00:35.410 --> 00:44.880
"import largeNumber from 'script2.js'".

00:44.940 --> 00:47.000
- Hagamos esto un poco más pequeño -

00:47.220 --> 00:48.810
Y ahora cambié esto a

00:51.920 --> 00:59.120
'largeNumber' haremos 'a + b' si ejecuto 'node script.js'

00:59.160 --> 01:05.660
Aparece un error 'Importación de token inesperada'.

01:05.890 --> 01:13.390
Y eso es porque Node aún debe implementar la nueva característica ES6 de las instrucciones de importación.

01:15.090 --> 01:19.910
Y hay formas de evitarlo y puedes agregar paquetes para permitirte hacer esto.

01:20.170 --> 01:25.980
Pero voy a mostrarte el método CommonJS porque la mayoría de los servidores que encontrarás tendrán la

01:25.980 --> 01:26.710
CommonJS manera.

01:26.790 --> 01:29.730
Y a lo largo de los años, esta [importación] y esto [de] se harán más frecuentes.

01:29.730 --> 01:32.750
Pero ya sabes cómo hacerlo desde la sección de front-end.

01:32.820 --> 01:34.260
Entonces, nada es diferente aquí.

01:34.260 --> 01:40.460
Para que se familiarice con CommonJS vamos a utilizar el formulario 'requerir'.

01:40.470 --> 01:44.200
Entonces, ¿cómo podemos hacer esto usando la forma en que funciona?

01:44.280 --> 01:44.950
-

01:45.120 --> 01:47.150
en el Nodo 8.9, ¿cuál es la versión que tenemos?

01:51.100 --> 02:01.040
Bueno, tendremos que hacer un 'const largeNumber = require (' ./ script2.js ')'

02:01.110 --> 02:04.140
- De nuevo, esto podría ser familiar -

02:04.330 --> 02:10.850
Y luego dentro de aquí tenemos que darle la ruta del archivo. Con 'requiere'

02:10.910 --> 02:16.040
ahora tenemos 'largeNumber' y también queremos exportarlo ahora.

02:16.210 --> 02:25.750
Y la forma en que las exportaciones funcionan con CommonJS es que hagas 'module.export' y eso es porque - déjame aclarar

02:25.750 --> 02:36.350
esto y te lo muestro. Si hago 'node' y hago 'module' verá que 'module' es un objeto global al que tenemos acceso

02:36.350 --> 02:42.140
y usando 'module.exports'

02:42.190 --> 02:49.880
Puedo decir qué objetos quiero exportar en este archivo.

02:49.880 --> 02:52.760
En nuestro caso, habrá 'largeNumber'.

02:56.170 --> 03:05.090
Si guardo esto y ahora ejecuto nuestro 'script de nodo', primero se debe salir del proceso.

03:06.880 --> 03:07.800
Claro

03:07.880 --> 03:09.750
Si ejecuto 'node script.js'

03:09.790 --> 03:16.110
Obtengo [object Object] 5.

03:16.220 --> 03:17.200
Hmm, ¿por qué es eso?

03:17.600 --> 03:25.250
Bueno, ahora que hemos exportado este objeto, y la forma en que queremos acceder a él, aquí,

03:26.110 --> 03:29.350
Estamos exportando un objeto global que podemos nombrar lo que sea.

03:29.350 --> 03:39.620
En nuestro caso, podemos decir 'script2' y para obtener la propiedad de 'script2' vamos a decir

03:39.700 --> 03:41.780
'script2.largeNumber'

03:41.780 --> 03:49.730
Y ahora si ejecuto esto obtengo 361 y esto puede llamarse cualquier cosa, es solo una variable que usted está declarando.

03:49.770 --> 03:56.470
Entonces podemos llamarlo 'c' - 'c.largeNumber' y aún funciona.

03:57.980 --> 04:01.610
Es un estilo un poco diferente de lo que estamos acostumbrados en el front-end.

04:02.630 --> 04:09.230
Y eso es solo porque no hemos implementado el, o el nodo no ha implementado la importación y exportación

04:09.350 --> 04:10.770
con esta versión de eso.

04:11.000 --> 04:12.140
Pero llegará con el tiempo.

04:12.140 --> 04:19.190
Simplemente no te asustes si lo ves de esta manera; una vez que te acostumbras a la sintaxis, es más o menos lo mismo.

04:19.210 --> 04:21.540
De acuerdo, te veré en el próximo.

04:21.550 --> 04:22.020
Adiós.
