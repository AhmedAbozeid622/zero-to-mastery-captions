WEBVTT

00:03.080 --> 00:06.920
Dar una buena acogida. La seguridad es algo muy muy importante en la web.

00:07.280 --> 00:14.360
Y como desarrolladores tenemos la responsabilidad de asegurarnos de que la información de usuario que obtenemos la manejamos

00:14.360 --> 00:17.160
con cuidado de una manera segura.

00:18.770 --> 00:27.160
Y hasta ahora te he mostrado cómo hacer una configuración simple de inicio de sesión, pero realmente no te he mostrado una configuración segura

00:27.160 --> 00:28.820
forma de hacerlo.

00:30.190 --> 00:32.810
Y en este video voy a hablar sobre bcrypt-nodejs.

00:32.890 --> 00:39.560
Y brypt es una biblioteca que es muy poderosa.

00:40.660 --> 00:45.500
Nos permite crear un inicio de sesión muy seguro.

00:45.500 --> 00:46.650
Ahora, ¿qué significa eso?

00:46.970 --> 00:49.000
Deja que te enseñe.

00:49.120 --> 00:58.160
Hasta ahora teníamos 'contraseña' solo en texto plano. En la vida real

00:58.250 --> 01:06.800
nunca almacenamos contraseñas como textos simples como esto como una cadena en nuestra base de datos.

01:08.530 --> 01:16.300
Así es exactamente cómo se piratean las empresas y se liberan las contraseñas de los usuarios cuando lo almacenan así.

01:16.300 --> 01:24.040
Queremos almacenar contraseñas en algo llamado hashes y voy a llegar a lo que es en un segundo, pero yo

01:24.040 --> 01:31.540
desea cambiar la base de datos para mostrarle un aspecto más realista de cómo se almacenarán las cosas.

01:31.540 --> 01:35.680
Usted ve en nuestra base de datos que podemos tener algo tal vez como

01:39.730 --> 01:46.910
'login:' y este inicio de sesión contendrá una matriz de objetos

01:50.590 --> 01:51.760
que tiene un 'id:'

01:51.880 --> 02:05.320
digamos '987' con el hash que estará vacío por el momento y luego un correo electrónico y este correo electrónico solo

02:05.590 --> 02:08.150
referencia john@gmail.com.

02:08.230 --> 02:12.480
Esto es algo en lo que profundizaremos cuando hablemos de bases de datos.

02:12.680 --> 02:18.230
Pero quiero mostrarte, quiero demostrarte este punto.

02:18.380 --> 02:27.920
Para que podamos manejar la información sensible, es decir, si Juan entra en nuestro sitio y quiere

02:27.920 --> 02:40.010
para hacer un inicio de sesión nos va a dar su correo electrónico más su contraseña, que es 'cookies'. Ahora, él está confiando

02:40.010 --> 02:41.490
nosotros con esta información.

02:41.690 --> 02:47.360
Y lo primero que queremos hacer es ... bueno, definitivamente no vamos a agregarlo como una cadena de consulta

02:47.720 --> 02:52.020
en una solicitud GET:lo vamos a agregar a una solicitud POST.

02:52.040 --> 02:55.530
Entonces está en el cuerpo de la solicitud.

02:55.940 --> 02:59.220
También queríamos enviarlo a través de HTTPS.

02:59.420 --> 03:01.750
Eso es algo que requiere un certificado.

03:02.180 --> 03:08.690
Y no vamos a entrar en eso, pero definitivamente queremos incluirlo a través de una solicitud HTTPS para

03:08.690 --> 03:12.110
que está encriptado Cuando envía 'cookies'

03:12.260 --> 03:20.510
se va a mezclar y nadie en el medio puede ver esto o podrán verlo, pero

03:20.510 --> 03:22.210
ellos no entenderán lo que significa.

03:22.520 --> 03:30.750
Y solo el servidor una vez que recibe esta contraseña puede entender que esto significa 'cookies'.

03:32.100 --> 03:34.110
Está bien, entonces uno es HTTPS.

03:34.150 --> 03:38.010
La segunda cosa es, ¿cómo almacenamos esa contraseña?

03:39.230 --> 03:47.430
Bueno, lo almacenamos en un hash, y brypt, el paquete del que acabo de hablar, nos permite hacer esto.

03:47.480 --> 03:52.230
Permíteme descargar este paquete y mostrarte cómo funciona.

03:58.680 --> 03:59.250
Ahí tienes.

03:59.430 --> 04:07.300
Ahora con la bcrypt instalada, puedes ver aquí que tiene algunas cosas que podemos usar y voy a copiar y pegar

04:07.300 --> 04:14.770
esto y mover algunas de estas cosas.

04:14.770 --> 04:16.440
De hecho, voy a poner esto en la parte inferior.

04:20.490 --> 04:25.030
bcrypt nos da una forma de hash de una contraseña

04:27.940 --> 04:29.650
y una forma de comparar

04:32.210 --> 04:35.970
contraseñas o hashes. Pero ¿qué significa eso?

04:36.070 --> 04:40.850
Vayamos uno por uno.

04:41.030 --> 04:43.880
Si tomo esta función y en nuestro '/ iniciar sesión'

04:46.770 --> 04:55.530
o lo siento, supongo en nuestro '/ registro' porque es cuando damos nuestra contraseña. En nuestro '/ register' cuando corremos

04:57.620 --> 05:01.410
'bcrypt.hash' y en lugar de 'tocino'

05:01.420 --> 05:04.450
esto es lo que pasamos como la contraseña del usuario

05:04.660 --> 05:11.640
- si pasamos la contraseña aquí, bueno, tenemos un par de parámetros que nos dan

05:11.640 --> 05:13.240
y estas son opciones que podemos ingresar.

05:13.260 --> 05:15.200
Por ahora solo lo dejaremos como está.

05:18.840 --> 05:28.050
Si 'console.log' el hash que recibimos en esta función, entonces bcrypt va a cortar la contraseña

05:28.410 --> 05:33.780
y luego devuelve este hash; solo diremos 'hash'.

05:33.840 --> 05:35.550
De acuerdo, veamos qué pasa aquí.

05:35.580 --> 05:37.980
Voy a salvar. Entonces correré

05:37.980 --> 05:44.000
'npm start' vuelve a nuestro cartero.

05:44.160 --> 05:48.830
Si hago '/ register' con Ann - voy a hacer clic en Enviar

05:51.940 --> 05:56.070
y entiendo 'bcrypt no está definido' porque no lo he incluido aquí.

05:56.080 --> 06:02.090
Hagamos eso, hagamos 'const bcrypt = require (' bcrypt-nodejs ')'

06:05.360 --> 06:08.750
-

06:08.740 --> 06:12.730
Vamos a guardar eso e intentar eso de nuevo.

06:12.840 --> 06:13.870
Voy a hacer clic en enviar.

06:15.900 --> 06:28.030
Volvemos a la consola, ¿lo ves? Acabamos de obtener un hash y eso es lo que hace una función hash. Una función hash

06:32.820 --> 06:44.030
Una función hash toma una cuerda y la mezcla de una manera que no hay manera de que yo pueda

06:44.030 --> 06:50.650
descubra que este [el hash] representa la contraseña 'cookies' y las funciones hash son de una sola vía.

06:50.970 --> 06:57.140
Es decir, puede ingresar 'cookies' y obtendrá esto, pero nunca podrá regresar.

06:57.620 --> 07:03.930
Y la otra cualidad de las funciones hash es que si ahora hago esto de nuevo con una contraseña, supongo que

07:03.930 --> 07:05.870
la contraseña para Ann era 'manzanas'

07:05.880 --> 07:14.460
- Si hago clic en enviar Regrese, veo que el hash la primera vez y la segunda vez son diferentes.

07:14.460 --> 07:19.920
Y aunque las funciones hash en realidad siempre devuelven lo mismo para el mismo valor bcrypt es una

07:19.920 --> 07:25.800
un poco más seguro que eso y agrega un poco de otra magia para asegurarse de que sea imposible

07:25.950 --> 07:27.940
alguna vez averigüe cuál es la contraseña.

07:27.960 --> 07:37.270
Pero ahora podemos almacenar este hash - este valor desordenado - en nuestra base de datos aquí para el inicio de sesión y en cualquier momento

07:37.320 --> 07:43.560
nos registramos y queremos verificar si las contraseñas del usuario coinciden.

07:43.890 --> 07:47.800
Bien, ahora, déjame eliminar esto

07:47.940 --> 07:48.600
- tenemos

07:52.130 --> 07:53.940
- vamos a '/ iniciar sesión' y en la parte superior

07:57.130 --> 08:05.090
podemos comparar los hashes para agarrar el hash que teníamos antes - usemos este

08:05.390 --> 08:07.230
o usemos el último que tenemos.

08:08.160 --> 08:09.330
Reemplazaré esto.

08:09.330 --> 08:18.450
Va a parecer bastante feo, pero voy a reemplazar este hash con esta cadena larga y voy a

08:18.450 --> 08:19.230
comparar

08:21.650 --> 08:26.170
'manzanas' porque esa es la contraseña de Ann.

08:26.240 --> 08:31.480
Si comparo 'manzanas' con este hash, vamos a console.log.

08:32.680 --> 08:34.480
'primera suposición'

08:38.230 --> 08:42.730
tendremos la respuesta de nuevo

08:42.860 --> 08:46.970
- eso es lo que recibimos después de que bcrypt hace esto.

08:47.140 --> 08:52.380
Y la segunda vez también haremos un 'registro de la consola' con la contraseña incorrecta, que es 'verduras'

08:57.560 --> 09:04.480
y esta será la 'segunda conjetura'.

09:04.510 --> 09:06.640
Vamos a hacer un inicio de sesión.

09:06.640 --> 09:11.990
Realmente no importa lo que es porque no estamos realmente preocupados por una respuesta.

09:13.330 --> 09:21.180
Y me sale un error al decir que hash no está definido porque no he actualizado este hash a lo que acabamos de

09:21.180 --> 09:21.930
copiado antes

09:21.930 --> 09:23.230
Entonces déjame hacer eso.

09:26.480 --> 09:27.080
Ahí tienes.

09:28.860 --> 09:30.980
Déjame volver atrás, haz clic en Enviar.

09:32.320 --> 09:34.110
Si miro hacia atrás aquí, me sale

09:34.120 --> 09:36.160
'primera suposición es verdad'

09:36.370 --> 09:39.920
es decir, 'manzanas' es igual a este hash

09:39.940 --> 09:45.310
nos dieron pero 'verduras' no es igual al hash que nos dieron allí.

09:48.400 --> 09:53.830
Déjame cerrar eso un poco. Y brypt es realmente muy poderoso.

09:53.840 --> 09:59.780
Vamos a usar esto cuando realmente implementemos una base de datos para nuestro registro. Usando bcrypt, que

09:59.780 --> 10:07.730
es un paquete hash probado y probado, podemos almacenar de forma segura la información de los usuarios, las contraseñas de los usuarios en nuestro

10:07.730 --> 10:14.840
base de datos y nadie, incluso si ellos, incluso si los piratas informáticos acceden a nuestra base de datos, les será muy difícil conseguirlos

10:14.840 --> 10:16.500
las contraseñas de usuario.

10:17.300 --> 10:22.370
Es posible que puedan obtener sus direcciones de correo electrónico pero nunca nuestras contraseñas e implementaremos eso en nuestra

10:22.370 --> 10:25.770
base de datos usando bcrypt.

10:25.830 --> 10:29.940
Pero realmente quiero enfatizar este punto porque la seguridad es realmente importante.

10:30.930 --> 10:37.570
Envíe siempre cualquier información confidencial desde el front-end al back-end usando HTTPS

10:38.550 --> 10:48.960
en un cuerpo POST y si obtienes algo así como una contraseña, la forma en que la almacenas en la base de datos está usando

10:48.960 --> 10:51.820
algo así como bcrypt para generar un hash,

10:52.140 --> 11:00.220
y cada vez que un usuario inicia sesión, verifique ese hash con lo que ingresó el usuario. En la siguiente parte, he

11:00.250 --> 11:01.210
izquierda para ti

11:01.330 --> 11:08.830
un artículo de seguridad que escribí que puede ser un poco avanzado, pero creo que cubre la mejor manera de

11:08.830 --> 11:14.710
usted para almacenar contraseñas de usuario, algo que se pasa por alto con bastante frecuencia, pero de nuevo muy, muy importante si

11:14.710 --> 11:18.100
quieres ser ese desarrollador superior.

11:18.180 --> 11:19.770
Veré en el próximo. Adiós
