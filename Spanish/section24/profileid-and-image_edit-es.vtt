WEBVTT

00:00.920 --> 00:10.160
Dar una buena acogida. Terminemos de configurar las últimas dos rutas en nuestro servidor. Primero tenemos el '/ profile /:userId'

00:10.160 --> 00:12.420
que es una solicitud GET.

00:12.440 --> 00:18.960
Eso es lo que queremos OBTENER para el usuario de su página de inicio.

00:19.190 --> 00:22.510
Vamos a hacer eso. Voy a agregar otra ruta.

00:22.670 --> 00:32.030
Esta vez solo será una solicitud GET y va a aceptar '/ profile /' y una 'id' - recuerda que si lo hacemos

00:32.030 --> 00:39.170
con esta sintaxis [:id] eso significa que podemos ingresar cualquier cosa en nuestro navegador y podremos obtener este 'id'

00:39.650 --> 00:43.270
a través de los derechos de propiedad 'req.params'.

00:43.280 --> 00:45.580
Nuevamente haremos lo mismo.

00:45.590 --> 00:46.670
Solicitar respuesta

00:49.910 --> 00:52.460
y agreguemos un espacio aquí para mantener las cosas limpias.

00:54.150 --> 01:06.360
Y dentro de esta solicitud, la respuesta que queremos es, antes que nada, tomar el parámetro 'id' así que hagámoslo 'const', 'id'

01:06.840 --> 01:11.190
vendrá de 'req.params'.

01:11.450 --> 01:13.700
¿Y qué deberíamos hacer aquí?

01:13.700 --> 01:21.380
Bueno, para obtener nuestros usuarios queremos recorrer nuestra base de datos de muestra y encontrar la 'id' correspondiente.

01:21.710 --> 01:22.550
Si coincide

01:22.550 --> 01:27.930
Queremos devolver al usuario.

01:27.940 --> 01:28.170
Todo bien.

01:28.170 --> 01:29.470
Podemos evitarlo más.

01:29.470 --> 01:36.370
Tenemos que hacer un ciclo 'para' aquí. La forma en que hacemos eso es que podemos hacer 'database.users'

01:40.180 --> 01:44.800
- aunque me gusta usar 'mapa' para este caso - solo estamos cruzando a través de los usuarios y realmente no necesitamos

01:44.800 --> 01:49.600
para crear una nueva matriz, es solo una base de datos y queremos mantenerla constante, así que solo diremos 'forEach ()'

01:51.240 --> 02:01.210
y si recuerda 'forEach ()' se ejecutará a través de los usuarios uno a la vez y diremos que si 'user.id'

02:02.670 --> 02:11.390
que es lo que obtendremos de esa base de datos es igual a la 'id' que recibimos de los 'params', si eso es

02:11.390 --> 02:23.610
En este caso, responderemos con JSON, ese usuario [req.json (usuario)] - enviaremos al usuario el 'id' correspondiente; de ​​lo contrario,

02:26.440 --> 02:34.180
Responderemos con 'req.json (' no such user ')'.

02:38.140 --> 02:45.830
E incluso podemos decir que es un estado de 404, que significa "no encontrado".

02:45.840 --> 02:46.040
Todo bien.

02:46.050 --> 02:47.440
Vamos a ver si esto funciona.

02:47.630 --> 02:57.700
Voy a guardar volver a nuestro ejemplo. Bueno, sabemos que tenemos '123' y '124'

02:57.740 --> 03:01.410
y debido a que el servidor se reinició, no tendremos a Ann.

03:01.810 --> 03:04.000
Quieres agarrar '/ profile / 123'.

03:04.410 --> 03:09.830
Si hacemos clic en Enviar obtengo '200 OK'.

03:09.840 --> 03:10.500
-

03:10.500 --> 03:11.710
Está bien, tenemos a John.

03:11.880 --> 03:20.060
Si hago '124' me sale "no such user" si volvemos aquí

03:22.780 --> 03:23.860
- mmm, Sally debería estar aquí.

03:23.860 --> 03:25.220
¿Cómo es que no la estamos atrapando?

03:28.240 --> 03:30.880
Y vemos aquí que obtenemos un error aquí:03:30.970 --> 03:32.890
'No se pueden establecer encabezados después de que se envían'.

03:32.890 --> 03:39.590
Eso es porque estamos pasando por esto y en lugar de regresar del ciclo, porque una vez que encontramos

03:39.590 --> 03:44.480
la identificación del usuario:no necesitamos mantener el bucle.

03:44.520 --> 03:49.830
Así que aquí deberíamos estar enviando un 'return res.json ()'

03:49.980 --> 03:57.180
y si el usuario no se encuentra bien, no necesariamente quiere hacerlo en el ciclo, ¿verdad?

03:57.390 --> 04:07.980
Queremos decir que para cada uno si se encuentra este usuario 'devuelve res.json ()' y diremos que una variable

04:09.270 --> 04:16.780
'found', que cambiaremos a 'false' también se actualizará con 'true'

04:20.610 --> 04:26.610
y tendrá que ser 'let' porque lo estamos reasignando para que 'found' sea igual a 'true'

04:26.620 --> 04:29.610
si lo encontramos, y sé que hay mejores formas de hacerlo.

04:29.620 --> 04:32.250
Pero de nuevo, creo que esto ilustrará un punto.

04:32.290 --> 04:38.030
También podríamos hacer un 'mapa' o un 'filtro' para ver si realmente encontramos a una persona con un 'id'.

04:38.420 --> 04:42.670
Pero por ahora solo hagamos 'si no se encuentra' [si (! Found)]

04:42.700 --> 04:48.000
Así que lo opuesto a 'encontrado' - en ese caso, solo responderemos con

04:51.830 --> 05:00.090
'res.status (400) .json (' no encontrado ')'

05:00.260 --> 05:01.210
Démosle una oportunidad.

05:07.130 --> 05:07.470
Todo bien.

05:07.490 --> 05:19.150
Recibo a Sally. Si uso '123' obtengo a John, perfecto y solo por diversión, registremos

05:19.590 --> 05:25.080
Ann otra vez. Voy a presionar enviar y su 'id' es '125'.

05:25.200 --> 05:30.970
Entonces si vuelvo a '/ profile /' y hago '125' obtengo Ann.

05:31.060 --> 05:32.470
¿Y qué tan genial es eso?

05:34.600 --> 05:34.990
Increíble.

05:34.990 --> 05:42.610
Así que tenemos este punto final trabajando y tenemos uno último que es la imagen y esta que solo queríamos

05:42.610 --> 05:47.020
para actualizar al usuario para aumentar su

05:49.890 --> 05:53.130
'entradas' cuentan. Cada vez que envían una imagen

05:53.130 --> 05:55.330
queremos aumentar sus 'entradas'.

05:57.670 --> 06:03.580
Hagámoslo creando nuestro punto final final que es 'app.post ()'

06:06.930 --> 06:11.330
y lo llamaremos '/ imagen'.

06:11.560 --> 06:19.510
Recibiremos una solicitud, respuesta.

06:19.790 --> 06:26.200
Y de nuevo aquí tendremos que encontrar la 'id' del usuario nuevamente.

06:27.800 --> 06:31.070
Para actualizar sus entradas.

06:35.860 --> 06:43.080
En este caso, podemos simplemente copiar lo que hemos hecho antes y cada vez que necesitamos copiar algún tipo de función

06:44.140 --> 06:52.390
bueno, es un buen momento para sacarlo y crear tu propia función para que puedas usarla en ambos

06:52.390 --> 06:53.770
de estos.

06:53.900 --> 06:57.070
Pero por ahora copiemos y peguemos

07:01.410 --> 07:09.960
y en lugar de tener 'params' en nuestro caso, recibiremos la 'identificación' del usuario del cuerpo.

07:10.170 --> 07:15.340
Y ahora queremos decir eso, queremos copiar también esta parte inferior

07:19.010 --> 07:27.480
- diremos que si la 'id' del usuario coincide, en ese caso responderemos

07:29.100 --> 07:38.450
con las 'user.entries' y estas 'entradas' que realmente queremos aumentar.

07:38.450 --> 07:48.070
Así que diremos que 'user.entries ++' - recuerda que esa es la forma corta de hacer más uno y reasignar

07:48.070 --> 07:48.540
eso.

07:48.820 --> 07:54.010
Así que solo haremos '++' y ahora las entradas del usuario deberían aumentar y luego responderemos con

07:54.010 --> 07:59.490
ese. Si eso no funciona, si el usuario no fue encontrado

08:00.360 --> 08:05.500
- en ese caso, lo mantendremos tal como está:el usuario no fue encontrado.

08:06.780 --> 08:12.640
Digamos eso y regresemos a Postman. Diremos '/ image'.

08:12.880 --> 08:23.010
Y dentro de esta imagen tendremos una solicitud POST, lo que significa un cuerpo y podemos simplemente pasarle al usuario

08:23.450 --> 08:24.600
"carné de identidad".

08:25.080 --> 08:29.560
En nuestro caso, diremos "Id":"123", que es Johns "id".

08:32.240 --> 08:34.270
Y haremos clic en Enviar.

08:35.750 --> 08:47.900
Obtengo "1" si hago clic nuevamente obtengo "2", "3", "4", "5" y si vuelvo a la "raíz" que

08:47.900 --> 08:57.370
devuelve a nuestros usuarios y cambia eso a GET. Obtengo a John con cinco entradas y a Sally con cero entradas.

09:00.090 --> 09:02.080
Asegurémonos de que también funcione para Sally.

09:02.120 --> 09:14.340
Si hago "124" ahora recibo entradas de "1" y volviendo a los usuarios GET obtengo John con cinco entradas

09:14.370 --> 09:20.070
y Sally con una entrada. ¡Asombroso!

09:20.250 --> 09:24.200
Nos conseguimos un buen servidor API.

09:24.230 --> 09:25.430
Definitivamente puede mejorar.

09:25.430 --> 09:32.600
Hay algunas cosas que obviamente queremos cambiar, como 'iniciar sesión', no solo para John.

09:32.900 --> 09:40.040
Tenemos algunas repeticiones de código que quizás podamos extraer en una función.

09:40.260 --> 09:47.970
Pero quería que tuviéramos algo que funcionara y que pudiéramos usar para poder conectarlo de inmediato

09:47.970 --> 09:48.680
con nuestro front-end.

09:51.680 --> 09:58.150
Finalmente podemos eliminar nuestra sección comentada donde planeamos cómo se verá nuestra API.

09:59.950 --> 10:01.710
Buen trabajo llegando hasta aquí.

10:01.810 --> 10:03.670
Lo veré en el próximo video. Adiós
