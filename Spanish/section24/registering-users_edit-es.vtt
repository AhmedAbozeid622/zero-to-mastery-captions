WEBVTT

00:00.570 --> 00:01.290
Dar una buena acogida.

00:01.410 --> 00:05.160
Implementemos más rutas en nuestra aplicación de front-end.

00:05.230 --> 00:09.430
Acabamos de iniciar sesión en el front-end.

00:09.580 --> 00:18.320
Así que ahora también trabajemos en el registro, y ya tenemos un buen marco de lo que queremos hacer basado

00:18.320 --> 00:34.290
en lo que hicimos con Iniciar sesión. Nuevamente podemos convertir esto a una clase que amplíe 'React.Component'.

00:34.520 --> 00:37.340
Y esto hará que

00:42.370 --> 00:49.870
esta declaración de devolución.

00:50.100 --> 00:57.520
Y también queremos tener un par de rutas que por ahora solo vamos a copiar por completo desde Iniciar sesión.

01:05.120 --> 01:09.140
Y aquí solo tendremos - para el registro

01:09.180 --> 01:09.830
podemos decir

01:12.330 --> 01:16.000
'Contraseña de Email'

01:16.270 --> 01:18.190
Y finalmente, también 'nombre'

01:21.840 --> 01:25.750
y tendremos que agregar otro método aquí.

01:26.960 --> 01:35.460
Eso será solo por el nombre y esto se llamará 'onNameChange' y tendremos que cambiar el

01:35.460 --> 01:43.680
valores para 'nombre', 'correo electrónico' y 'contraseña'. Increíble.

01:48.230 --> 01:55.680
Guardaremos eso y tendremos que comenzar a agregar esto a nuestro componente.

01:55.680 --> 02:02.700
Lo primero que queremos hacer es utilizar desestructuración para obtener nuestro componente o 'onRouteChange'

02:03.600 --> 02:12.820
de 'this.props' y agreguemos 'onPasswordChange' en todas las otras entradas; otra vez creando estos

02:12.820 --> 02:36.860
en una nueva linea

02:37.030 --> 02:38.830
Whoo! Todo bien.

02:38.990 --> 02:41.720
Y de nuevo queremos crear un método de 'búsqueda' aquí.

02:41.720 --> 02:48.910
Así que al mirar Iniciar definitivamente queremos hacer un POST así que podemos copiar esto por ahora.

02:48.910 --> 02:55.700
De nuevo, no soy un gran admirador de la copia y la repetición del código, pero espero que esto te dé una idea de algunos de los

02:55.700 --> 03:00.410
cosas que podemos mejorar a medida que mejoramos nuestra aplicación más adelante.

03:00.830 --> 03:10.680
Ahora en 'submitSignIn' otra vez, querremos hacer esto en lugar de 'onRouteChange' así que hagamos 'on'

03:11.350 --> 03:16.600
y tendremos que hacer 'this.onSubmitSignIn'.

03:16.740 --> 03:21.260
Y olvidé la palabra clave this en todo esto también.

03:25.070 --> 03:30.600
Está bien, ahora el ... Veo que nos falta el 'correo electrónico' desde aquí.

03:30.620 --> 03:31.480
Eso no debería estar allí.

03:31.500 --> 03:32.340
Todo bien.

03:32.460 --> 03:38.010
Y querremos asegurarnos de enviar el 'correo electrónico' a 'this.state.email'

03:38.540 --> 03:39.700
-

03:43.070 --> 03:50.020
Haremos 'contraseña'

03:50.120 --> 03:54.260
Y finalmente haremos 'this.state.name'.

03:58.580 --> 04:05.430
Y 'onRouteChange' - ya no lo necesitamos aquí, ¿verdad? 'onRouteChange'

04:05.620 --> 04:12.610
- queremos ir a 'casa' una vez que estamos registrados, pero recuerde que si vamos a nuestro servidor nuestro '/ registro' regresa

04:12.610 --> 04:13.940
el último usuario

04:13.960 --> 04:19.840
entonces nuestro usuario actual. Esta información será el usuario.

04:19.850 --> 04:26.130
Digamos usuario.

04:26.230 --> 04:36.640
Entonces, si recuperamos a un usuario, cambiaremos la ruta a 'hogar' y también es probable que deseemos actualizar el perfil del usuario

04:37.330 --> 04:38.250
en el front-end.

04:39.630 --> 04:44.720
Pero si nos fijamos en el front-end, todavía no tenemos un perfil de usuario, pero tal vez deberíamos hacerlo.

04:44.720 --> 04:52.430
Entonces, agreguemos eso. Voy a decir usuario y va a ser un objeto que contiene 'correo electrónico', que es

04:52.430 --> 04:53.480
una cadena vacía

04:54.910 --> 04:59.680
Y solo podemos copiar lo que obtengamos devuelto de nuestra base de datos

05:04.180 --> 05:05.060
en nuestro caso

05:05.140 --> 05:12.580
serán todos estos valores, no necesitamos el correo electrónico porque lo tenemos ahí abajo, excepto que todo será

05:13.760 --> 05:17.690
vacío para comenzar, y no necesitamos devolver la contraseña.

05:22.400 --> 05:30.850
'correo electrónico' es eliminado. 'entradas' será cero por ahora, y 'unir' será una cadena vacía.

05:30.860 --> 05:34.690
Idealmente, cuando nos registremos podemos actualizar estos.

05:34.760 --> 05:42.650
Entonces, lo que podemos hacer con Register es que tendremos un cambio de ruta, pero tal vez también llamemos a una función

05:42.650 --> 05:51.830
llamada:'updateUser' o 'loadUser', que aún no tenemos.

05:51.830 --> 05:55.370
Y quizás podamos pasar el objeto del usuario a esto.

05:55.680 --> 06:01.840
Y como esto es algo que toda la aplicación necesita, creo que deberíamos compilarla en el componente de la aplicación.

06:01.970 --> 06:11.460
Así que guardaremos 'this.props.loadUser (usuario)' y volveremos a 'App.js' y crearemos esa función

06:12.400 --> 06:28.370
Diremos 'loadUser', 'user' y simplemente actualizaremos el estado con el usuario que recibimos.

06:30.570 --> 06:33.030
En nuestro caso, serán estos valores.

06:46.030 --> 06:54.100
Y todos estos valores vendrán del parámetro 'usuario'. Y cambiemos el nombre aquí para que podamos

06:54.100 --> 06:57.350
no se confunda - a 'datos' por el momento.

07:02.120 --> 07:03.260
'data.id'

07:06.890 --> 07:11.110
Tendremos 'nombre' aquí; tendremos 'correo electrónico'

07:15.360 --> 07:16.210
'entradas'

07:16.530 --> 07:17.490
Y finalmente

07:23.520 --> 07:33.950
'unido'. Aquí tengo un poco la sintaxis. Ahí tienes.

07:34.080 --> 07:41.130
Está bien si volvemos a 'Register.js' tenemos 'onRouteChange' guardado con éxito. Así que estamos cargando al usuario

07:41.670 --> 07:46.020
y luego también cambiando la ruta. Eso fue mucho trabajo sin probar el código

07:46.020 --> 07:47.300
así que vamos a echarle un vistazo.

07:47.400 --> 07:48.570
Vamos a ver si esto funciona.

07:49.440 --> 08:02.890
Voy a ir a Registrarse. Dudo que esto funcione la primera vez, pero veamos. 'wes@gmail.com'

08:03.230 --> 08:03.920
Ese es el nombre.

08:03.950 --> 08:12.370
Entonces diremos 'wes', 'wes@gmail.com', nuestra contraseña es '123'. Voy a abrir la consola aquí solo para ver

08:12.370 --> 08:13.710
qué tipo de errores obtenemos

08:15.860 --> 08:17.810
Dudo que funcione la primera vez, pero ya veremos.

08:17.810 --> 08:19.930
Registro. Todo bien.

08:19.930 --> 08:29.590
Tenemos un par de errores aquí. "loadUser no es una función" y eso es porque si vamos a 'App.js'

08:29.630 --> 08:34.450
'loadUser' nunca pasa a 'Registrarse'.

08:34.530 --> 08:35.190
Así que hagámoslo.

08:38.110 --> 08:42.730
'Registrarse' también recibirá 'loadUser'

08:46.810 --> 08:47.200
Me gusta esto.

08:50.720 --> 08:52.130
Y tendrá que ser 'this.loadUser'.

08:52.220 --> 08:52.780
-

08:53.300 --> 08:53.830
Todo bien.

08:53.870 --> 08:54.520
Segundo round.

08:54.620 --> 08:55.960
Vamos a ver si esto funciona.

09:03.250 --> 09:08.190
Uno dos tres.

09:08.190 --> 09:08.710
Todo bien.

09:08.730 --> 09:17.160
Podemos iniciar sesión, pero tenemos una mala solicitud.

09:17.190 --> 09:21.210
Veamos que nuestra información se ve bien.

09:21.210 --> 09:23.210
'correo electrónico', 'nombre', 'contraseña'.

09:23.630 --> 09:26.830
Y la respuesta que obtuvimos fue "error al iniciar sesión".

09:27.110 --> 09:31.580
Y eso es porque si volvemos a nuestra página de registro.

09:31.610 --> 09:34.390
Bueno, no cambiamos solo esto para '/ registrar' ¿verdad?

09:34.400 --> 09:35.680
Eso es tonto de nosotros.

09:36.580 --> 09:39.190
Cambiamos eso para 'registrar', guardar

09:42.670 --> 09:42.910
Voy a obtener

09:42.920 --> 09:45.420
cansado de escribir la información de Wes aquí.

09:50.000 --> 09:54.700
Y registrarse. Todo bien.

09:54.720 --> 10:00.990
Sin errores. Veamos cuál fue la respuesta de 'registrarse'.

10:01.180 --> 10:11.340
Obtenemos la respuesta; Wes es el usuario '125'; 'contraseña' es '123'; 'entries' es 0 ', y' joined '- en este día.

10:11.470 --> 10:13.590
Nuevamente, realmente no queremos la contraseña.

10:13.630 --> 10:22.250
Realmente no deberíamos devolver la contraseña, pero es una solución fácil y simplemente la eliminamos de

10:22.250 --> 10:24.490
el 'server.js'.

10:24.500 --> 10:25.420
¿Cuan genial es eso?

10:25.430 --> 10:27.700
Tenemos nuestro auto un registro.

10:28.130 --> 10:35.260
Y si realmente volvemos a solo una ruta raíz, o si vamos a localhost, vamos por este lado

10:35.270 --> 10:35.730
aquí.

10:36.940 --> 10:44.470
Y solo ve a la ruta raíz; Hemos actualizado nuevamente para que Wes no esté allí, pero si se registra nuevamente ...

10:48.050 --> 10:53.020
De nuevo, esto es exactamente por lo que no podemos esperar para tener una base de datos.

10:53.060 --> 10:55.630
Probemos eso de nuevo y miremos eso.

10:55.670 --> 10:59.230
Tenemos a Wes como nuestro usuario.

10:59.290 --> 11:00.520
Muy genial.

11:00.520 --> 11:06.760
Y ahora hay un poco de repetición ¿no? Simplemente buscamos mucho para conectarnos con nuestro servidor

11:07.060 --> 11:12.910
y ambas partes quieren asegurarse de que envían los datos correctos y el servidor responde con el derecho

11:12.910 --> 11:13.480
datos.

11:13.480 --> 11:18.190
Definitivamente hay mucha limpieza que podemos hacer, muchos errores que pueden suceder, por ejemplo, si

11:18.190 --> 11:23.210
ingrese un correo electrónico inválido y una contraseña o nombre de usuario.

11:23.430 --> 11:26.280
Pero creo que estás comenzando a entender el punto.

11:26.290 --> 11:26.650
Todo bien.

11:26.740 --> 11:28.040
Te veré en el próximo. Adiós
