WEBVTT

00:01.010 --> 00:01.960
Dar una buena acogida.

00:02.000 --> 00:07.130
En este video vamos a hablar sobre RESTful API.

00:07.250 --> 00:08.050
Ahora que es eso?

00:08.940 --> 00:16.290
Una API REST define un conjunto de funciones que los desarrolladores pueden realizar solicitudes y

00:16.350 --> 00:25.310
recibir respuestas a través de un protocolo HTTP como GET, POST, PUT, DELETE, algo de lo que hemos hablado.

00:25.310 --> 00:33.590
Recuerde cómo dije que un navegador web envía una solicitud y solo espera que el servidor devuelva lo que solicitó el

00:33.620 --> 00:34.410
navegador.

00:34.640 --> 00:37.590
Un servidor de Google puede enviarnos lo que quiera.

00:37.610 --> 00:46.040
No tiene que seguir las reglas que quizás establece el navegador web. Con RESTful API podemos crear una API que es

00:46.070 --> 00:52.670
RESTful, algo que sigue las reglas en las que todos pueden estar de acuerdo para

00:52.670 --> 00:55.930
que tengamos compatibilidad entre diferentes sistemas.

00:57.350 --> 01:05.290
Entonces, una API RESTful es un estilo arquitectónico y es un enfoque de las comunicaciones; un

01:05.290 --> 01:14.230
conjunto de reglas acordado para que todos jueguen bien. Los usuarios de una API RESTful RECIBEN recibir un recurso,

01:14.440 --> 01:22.990
PONER para cambiar el estado o actualizar un recurso, una POST que crea un recurso y un DELETE para eliminarlo.

01:23.390 --> 01:30.800
Y eso es algo de lo que ya hemos hablado, y la API RESTful es una forma de definir nuestro servidor

01:31.700 --> 01:35.610
para que especifique lo que puede proporcionar y cómo usarlo.

01:37.580 --> 01:42.520
En otras palabras, los parámetros de la URL deberían tener sentido.

01:42.550 --> 01:49.360
Por ejemplo, si estamos haciendo '/ profile', bueno, esperamos que si se trata de una solicitud GET vamos

01:49.360 --> 01:50.920
a obtener un perfil.

01:51.130 --> 01:55.270
Si se trata de una solicitud POST, agregaremos un perfil.

01:55.270 --> 02:00.130
Si es un PUT tal vez estamos actualizando el perfil, y esta URL tiene sentido.

02:01.050 --> 02:08.140
Y puedes pensar en esto como el sustantivo de lo que queremos recibir. La solicitud HTTP es el verbo

02:08.210 --> 02:13.600
y todo después de la barra inclinada [/] es el sustantivo.

02:16.180 --> 02:23.800
Ahora, finalmente, los APT REST son algo llamado 'sin estado', lo que significa que las llamadas se pueden hacer independientemente una de la otra

02:23.800 --> 02:32.040
y cada llamada contiene todos los datos necesarios para completarse con éxito. Un servidor no necesita seguir

02:32.160 --> 02:34.560
memorizando cosas.

02:34.560 --> 02:40.590
Cada solicitud que llega tiene suficiente información con la que el servidor puede responder, independientemente de

02:40.590 --> 02:42.570
quién sea esa persona.

02:42.570 --> 02:53.080
Entonces, en este ejemplo, construyamos una pequeña aplicación pequeña que tenga una API RESTful.

02:53.200 --> 02:55.740
Hagamos esto mucho más pequeño.

02:56.900 --> 03:03.940
Ahí tienes, tenemos nuestro ejemplo anterior, iniciaremos el servidor y hablaremos sobre algunas de las cosas

03:04.540 --> 03:06.430
que podemos hacer aquí.

03:06.700 --> 03:14.460
Bueno, cuando miramos una solicitud GET esta solicitud GET, eliminemos esto también para que no

03:14.460 --> 03:16.400
sea demasiado complicado.

03:18.240 --> 03:23.900
Esta solicitud GET tendrá un objeto de solicitud que recibiremos.

03:24.000 --> 03:27.690
Ahora este objeto de solicitud puede tener algunas cosas: podemos tener una solicitud de consulta

03:27.690 --> 03:29.300
de puntos [req. consulta] podemos

03:32.580 --> 03:37.020
tener solicitud de cuerpo de punto [req. cuerpo], que vimos en el video anterior.

03:37.020 --> 03:46.190
También tenemos solicitud de encabezado de punto [req. encabezado], de nuevo algo que hemos visto antes y también solicitar puntos params [req. parámetros] y esta es

03:46.190 --> 03:50.700
probablemente la propiedad de solicitud más utilizada.

03:50.790 --> 03:52.200
Así que veamos uno por uno.

03:54.100 --> 04:00.200
'req. consulta 'es lo que obtenemos cuando hacemos una consulta GET.

04:00.300 --> 04:12.250
Por ejemplo dentro de aquí, si hago una 'consola.

04:12.250 --> 04:12.250
log (req.

04:12.700 --> 04:24.850
consulta) 'Bueno, puedo ir a localhost y aquí, algo de lo que ya hemos hablado, puedo agregar un signo de interrogación para decir

04:24.850 --> 04:35.160
que se trata de una cadena de consulta y decir' name = andrei &amp; age = 31 '.

04:36.200 --> 04:37.770
Presiono Enter para

04:38.000 --> 04:44.240
volver y veo aquí que tengo 'nombre' es 'andrei', 'edad' es '31' porque tengo

04:44.280 --> 04:52.950
acceso a la cadena de consulta [consola. log (req. consulta)].

04:52.980 --> 05:01.020
También tenemos cuerpo de solicitud [req. body], del que ya hemos hablado: utilizando

05:01.430 --> 05:12.690
algo como sus analizadores de cuerpo 'urlencoded' o 'JSON', podemos agregar ese middleware para recibir lo que la solicitud envíe en el cuerpo.

05:12.720 --> 05:15.530
También tenemos solicitud de encabezado de punto [req. encabezamiento].

05:15.600 --> 05:30.900
Así que si 'consola. log (req. encabezado) 'bueno, esta vez usando Postman, puedo decir en el encabezado, y

05:30.900 --> 05:34.760
tiene una buena pestaña Encabezados, ves que tenemos Content-Type'

05:34.760 --> 05:41.210
application / json ', que lo hace automáticamente porque la última solicitud fue una solicitud JSON.

05:41.430 --> 05:50.130
Pero puedo poner cualquier cosa aquí, puedo decir 'nombre' es 'andrei', o esta vez solo para cambiarlo diremos 'sally' si

05:51.090 --> 05:56.510
envío esto, y este es un método DELETE, asegurémonos de que sea un

05:56.620 --> 05:57.490
método

06:01.120 --> 06:09.180
GET - Si envío esto, veo que ahora (req. encabezado) tiene todos estos encabezados pero también - nombre: 'sally'.

06:09.250 --> 06:10.510
Muy genial.

06:10.570 --> 06:16.460
Y finalmente, también tenemos algo llamado (req. params)

06:16.720 --> 06:28.050
Y si 'consola. log (req. params) ': esta es una sintaxis en la que utiliza los parámetros de la URL.

06:28.140 --> 06:39.620
Si hago el punto y coma y luego digamos 'id' ['/: id']: guardo esto y ahora tenemos acceso a cualquier parámetro de

06:40.190 --> 06:41.330
la URL.

06:41.390 --> 06:47.510
Entonces digamos '1234' y eliminaré el encabezado por ahora.

06:47.520 --> 06:54.080
Si 'Enviar' ahora tengo {id: '1234'} correcto.

06:54.080 --> 06:54.570
Increíble.

06:54.740 --> 07:02.290
Y puede tener tantos parámetros como desee y puede anidarlos, pero tenemos acceso a nuestra información

07:02.300 --> 07:05.340
de solicitud, lo cual es fantástico.

07:06.290 --> 07:15.700
Ahora, cuando enviamos una respuesta, también queremos tener una pequeña opción en cuanto a lo que queremos enviar. Bueno, con una respuesta podemos

07:15.700 --> 07:20.840
decir que con el envío también

07:20.840 --> 07:32.510
queremos responder con un estado, digamos un estado de 404 y podríamos decir enviar ("no

07:34.190 --> 07:45.440
encontrado") si actualizo y envío ahora, recibo 'no encontrado' con un estado de 404.

07:45.640 --> 07:48.460
Nuevamente, si vuelvo a mi navegador

07:51.350 --> 07:55.560
y actualizo, tengo en mi pestaña Red un estado 404.

07:55.580 --> 07:56.720
Todo bien.

07:56.720 --> 07:57.900
Perfecto.

07:57.980 --> 08:01.550
Y de nuevo, personaliza, para que tengamos una

08:01.820 --> 08:08.430
API RESTful, GET, POST, PUT y DELETE para seguir las reglas que esperan los navegadores web.

08:08.460 --> 08:09.780
Ahora una última cosa.

08:09.840 --> 08:12.270
Hasta ahora solo estamos enviando datos de un lado a otro.

08:12.270 --> 08:20.130
Pero, ¿qué pasa si queremos servir algo llamado activos estáticos que es 'índice'? html ', archivo CSS, archivo JavaScript, eso es

08:20.130 --> 08:22.180
más realista ¿verdad?

08:22.180 --> 08:30.210
Por lo general, queremos un archivo de índice y ejecutar nuestra aplicación, bueno, eso es muy fácil de hacer.

08:30.270 --> 08:36.310
Podemos crearlo dentro de este proyecto, hagamos una nueva carpeta llamada public.

08:36.780 --> 08:42.150
Y este nombre puede serle familiar porque cuando hicimos 'create-react-app', el público estaba allí

08:42.150 --> 08:44.650
y contenía todos nuestros archivos estáticos.

08:45.290 --> 08:50.980
Así que aquí vamos a hacer un nuevo archivo: 'índice. html '.

08:51.020 --> 08:55.070
Ahora, dentro de este archivo público, haremos un documento

08:55.070 --> 08:57.340
HTML rápido que dice 'hola'.

08:57.590 --> 09:01.940
Y aquí dentro diré 'está funcionando'.

09:04.820 --> 09:10.910
Para que Express envíe archivos estáticos, podemos eliminar esto por ahora

09:11.150 --> 09:13.370
solo para mantenerlo

09:13.460 --> 09:20.640
limpio y hacer otra aplicación de middleware. utilizar()'.

09:20.830 --> 09:30.300
Y esto viene con Express ya lo hacemos 'express. static () 'y aquí le damos la ruta del archivo.

09:30.410 --> 09:38.190
En nuestro caso, sabemos que queremos obtener el '__dirname', que hemos visto en un video anterior, que

09:38.190 --> 09:47.850
es el directorio de donde estamos; en nuestro caso es su nodo y queremos ir a la carpeta pública, así que hacemos 'public'.

09:53.680 --> 09:55.240
Esto va a imprimir 'nodo'

09:58.010 --> 09:59.380
y luego 'público'.

09:59.630 --> 10:08.670
Entonces, si guardo esto y vuelvo a nuestra solicitud GET, obtengo 'está funcionando'.

10:08.780 --> 10:12.670
Déjame hacer eso más grande para que puedas ver.

10:12.840 --> 10:22.260
Y si abrimos nuestra Consola y nuestra pestaña Red - Actualizo, obtengo - ooh, hagamos una actualización completa - Obtengo '200' Obtengo 'text

10:25.100 --> 10:26.210
/ html'

10:26.240 --> 10:29.400
Y la respuesta es mi archivo HTML.

10:29.570 --> 10:35.420
Y si tuviera un enlace CSS aquí, cargará el CSS en mi carpeta pública.

10:35.540 --> 10:41.700
Si tuviera un archivo JavaScript, lo cargaría porque dentro del cuerpo podemos agregar una etiqueta de script.

10:42.110 --> 10:49.350
Y este es un servidor que acabamos de construir que sirve activos estáticos simples.

10:49.580 --> 10:56.210
Y tan pronto como queremos tener algo así como una API donde interactuamos con

10:56.210 --> 10:56.930
ella,

10:56.990 --> 11:03.810
obtenemos, POSTAMOS, PONEMOS ELIMINAR, es entonces cuando comenzamos a usar nuestros métodos que aprendimos anteriormente.

11:03.860 --> 11:04.880
Muy genial.

11:05.000 --> 11:12.860
Ahora que tenemos esta base básica, vamos a construir nuestro servidor para nuestra aplicación: ¿la aplicación que creamos en nuestro

11:12.860 --> 11:16.230
proyecto final, nuestra aplicación de reconocimiento de imágenes?

11:16.640 --> 11:19.240
Bueno, vamos a construir el back-end para eso.

11:20.230 --> 11:21.870
Ya veré en la próxima. Adiós
