WEBVTT

00:00.980 --> 00:02.900
Hola todos.

00:02.900 --> 00:04.000
Dar una buena acogida.

00:04.280 --> 00:12.170
Y en este video, quiero mostrarles algo que me emocionó mucho cuando empecé a aprender el nodo, y espero que

00:12.170 --> 00:19.040
se emocionen tanto como yo a medida que avanzamos en este video y luego hacemos un pequeño

00:19.040 --> 00:20.300
desafío .

00:20.300 --> 00:21.310
Te va a volar la cabeza.

00:21.330 --> 00:25.760
Al menos lo hizo para mí cuando comencé a aprender a codificar.

00:25.850 --> 00:34.250
Ahora, en el video anterior, hablamos sobre algo llamado módulo FS que viene con el nodo, y esto es algo que está integrado en

00:34.250 --> 00:39.590
el nodo y la forma en que lo obtenemos es que simplemente haremos const.

00:39.760 --> 00:50.360
Bueno, en realidad necesitamos un archivo primero, así que hagamos un script táctil. js, crearemos un nuevo script perfecto.

00:50.400 --> 00:52.920
Bien, podemos cerrar eso porque no necesitamos esto.

00:53.490 --> 01:02.190
Y en el guión. js que tenemos en esta carpeta o en algún nodo podemos tener 'const fs'.

01:02.210 --> 01:15.460
es igual a 'require (' fs ')', por lo que FS aquí significa sistema de archivos y si tiene un nodo descargado, tiene acceso a esto.

01:15.470 --> 01:17.680
Simplemente haciendo esto.

01:17.880 --> 01:21.750
Ahora, ¿por qué es esto tan emocionante y tan útil?

01:22.320 --> 01:30.830
Bueno, porque el sistema de archivos FS le permite acceder a nuestro sistema de archivos, lo que nuevamente no suena tan emocionante.

01:30.840 --> 01:38.230
Pero permítanme demostrar lo que sucede y por qué esto es útil, así que tengan paciencia conmigo aquí.

01:38.280 --> 01:42.080
Voy a hacer un poco de codificación y luego voy a explicar exactamente lo que está sucediendo.

01:43.140 --> 01:48.470
Entonces vamos a usar los 'fs. readFile '.

01:48.560 --> 01:50.720
Es bastante autoexplicativo.

01:51.200 --> 02:01.380
Tenemos un parámetro en blanco y luego tenemos err para error, datos.

02:01.760 --> 02:03.710
Y esta es una función de flecha.

02:05.450 --> 02:12.270
Entonces, el segundo parámetro es una función, y esta función tiene error o datos.

02:12.310 --> 02:24.630
Entonces, para el error, voy a decir si hay un error, simplemente lanzaremos err, o simplemente podemos decir que la

02:25.020 --> 02:30.660
consola dot log errrroooorrr. Realmente empujalo en su cara.

02:31.550 --> 02:42.680
¡Bien! Ahora, si no hubo un error, solo diremos bien, solo diremos consola. log y simplemente cerraremos la sesión

02:42.680 --> 02:45.150
con cualquier dato.

02:45.370 --> 02:45.990
Bien.

02:46.150 --> 02:47.720
Déjame agregar los punto y coma.

02:48.830 --> 02:51.090
Y guarda eso.

02:51.100 --> 02:59.440
Entonces, lo que acabo de hacer aquí. Acabo de importar el módulo FS que viene con el nodo y

02:59.740 --> 03:01.670
el módulo FS tiene un

03:01.720 --> 03:05.480
método readFile () que parece que lee algún tipo de archivo.

03:05.560 --> 03:13.300
El primer parámetro es el archivo real que queremos hacer, por lo que la ruta al archivo, que aún no tenemos.

03:13.300 --> 03:14.650
Así que creemos uno.

03:14.650 --> 03:25.200
Voy a decir nuevo archivo y lo llamaremos 'hola'. txt 'y con' hola. txt ', haremos nuestro clásico helllloooooo

03:26.300 --> 03:27.850
allí !!!

03:29.090 --> 03:32.300
Y cosas emocionantes así que signos de exclamación.

03:32.540 --> 03:37.120
Guardamos eso y ahora podemos decir que queremos leer el archivo.

03:37.190 --> 03:40.340
'Hola. txt 'desde el directorio actual.

03:41.140 --> 03:42.340
Hola

03:42.790 --> 03:45.140
punto de texto.

03:45.280 --> 03:50.450
Ahora, este método readFile va a encontrar el archivo con la ruta,

03:50.500 --> 03:52.700
ok, así que aquí está.

03:52.840 --> 03:59.420
Lo va a leer y luego si hay un error, va a escupir un error.

03:59.590 --> 04:06.670
Si hay algún tipo de datos y todo tiene éxito, va a escupir datos. Con la forma en que podemos ejecutar este archivo

04:06.670 --> 04:08.300
en el nodo.

04:08.310 --> 04:13.720
Bueno, bueno primero tendré que guardarlo. Diremos script de nodo. js

04:15.140 --> 04:19.740
Enter y obtuve buffer.

04:20.920 --> 04:22.740
¿Que es eso?

04:22.840 --> 04:27.460
Y eso es porque tenemos que hacer un poco de codificación.

04:27.670 --> 04:34.680
Y lo que eso significa es que si hago esto 'toString ()', intentemos esto y le mostraremos a qué me refiero.

04:37.450 --> 04:38.530
Y lo entiendo.

04:38.770 --> 04:41.250
Hola.

04:41.260 --> 04:49.530
Entonces, el 'archivo de lectura' lee el archivo como su nombre lo indica, y va a escupir lo que sea que esté leyendo.

04:50.010 --> 04:50.750
Datos.

04:51.500 --> 04:55.490
Ahora, ¿por qué tenemos que poner 'toString ()' aquí.

04:56.970 --> 05:04.380
Para que sepa que 'toString ()' hace algo, de manera predeterminada si no agrega nada, usará

05:04.380 --> 05:11.280
la codificación llamada UTF 8 y UTF 8 es un tipo de codificación.

05:11.420 --> 05:14.640
Ejecutemos esto para asegurarnos de que sigue siendo el mismo.

05:14.750 --> 05:15.530
Sí.

05:15.530 --> 05:20.300
Entonces UTF 8 es un tipo de codificación que tenemos.

05:20.300 --> 05:22.980
Eso es bastante estándar con HTML 5.

05:23.000 --> 05:26.900
Y casi todo el mundo lo usa en la web.

05:27.290 --> 05:37.160
Es una forma de tener caracteres, ya sean caracteres latinos, ya sea ABC o tenemos caracteres coreanos japoneses, chinos,

05:37.160 --> 05:45.770
todos están representados por un número, y UTF 8 es una forma de codificar estos números para

05:45.770 --> 05:48.870
asegurarnos para que podamos leerlos

05:48.920 --> 05:55.910
En realidad es un tema bastante complejo, por lo que recomiendo la página de Wikipedia que habla sobre UTF 8.

05:55.970 --> 06:03.420
Por ahora solo sepa que UTF 8 es un tipo de codificación que es bastante estándar en toda la web.

06:03.500 --> 06:09.290
También es posible que haya visto ASCII y ASCII antes de que existiera UTF 8.

06:09.290 --> 06:19.610
ASCII era principalmente para idiomas basados en latín, por lo que el ABC; y UTF expandió eso para incluir muchos más de muchos más

06:19.860 --> 06:22.540
idiomas de diferentes partes del mundo.

06:22.960 --> 06:29.780
Muy bien, una pequeña tangente que no necesitábamos seguir, pero como puedes ver

06:30.530 --> 06:35.300
aquí tenemos 'helllloooooo allí' y podemos leer el archivo.

06:35.300 --> 06:36.320
Bien.

06:36.330 --> 06:37.030
Muy genial.

06:38.270 --> 06:42.810
Permítanme agregar otro método a su repertorio.

06:43.250 --> 06:57.160
Hagamos también fs. readFileSync () 'y' fs. readFileSync () 'funciona un poco diferente al anterior

06:57.160 --> 07:00.210
y sync es sincrónico.

07:00.580 --> 07:01.540
Entonces veremos qué pasa.

07:01.540 --> 07:12.230
Voy a poner 'hola.

07:12.230 --> 07:12.230
txt 'una vez más, y esta vez lo dejaré así.

07:14.150 --> 07:26.630
Y digamos que esto va a igualar el archivo y simplemente 'consolaremos'. archivo de registro)'.

07:26.650 --> 07:27.020
Bien.

07:27.050 --> 07:31.710
Déjame guardar eso y ejecutar esto.

07:31.760 --> 07:32.390
Bien.

07:32.460 --> 07:37.370
Sabemos una vez más que obtuvimos esto porque necesitamos hacer 'toString ()'.

07:37.440 --> 07:38.610
Entonces hagamos eso.

07:38.640 --> 07:42.660
Voy a intentar 'toString ()' Voy a guardar

07:46.060 --> 07:51.020
y ejecutar esto nuevamente. Muy bien, consigo 'helllloooooo allí

07:51.280 --> 07:52.410
!!!

07:52.510 --> 08:05.020
'Pero solo para distinguirlos, digamos que este es el número uno y este es el número dos.

08:05.450 --> 08:07.660
Guardo esto, ejecuto esto de nuevo.

08:08.630 --> 08:12.510
Y vaya, lo que acaba de pasar.

08:14.050 --> 08:21.140
Tenemos uno que viene después de los dos.

08:21.920 --> 08:30.830
Ahora, si has visto el video síncrono asíncrono en este curso, entonces puedes entender lo que está

08:30.830 --> 08:32.090
sucediendo aquí.

08:32.090 --> 08:34.210
Si no, voy a hacer una sinopsis rápida.

08:34.220 --> 08:42.610
Pero te recomiendo que veas ese video. Ahora leer el archivo es asíncrono, y es por eso que tiene

08:42.610 --> 08:45.200
algo llamado función de devolución de llamada.

08:45.220 --> 08:53.290
Dice: hey, voy a leer este archivo, y cuando termine con él, simplemente continúe con su negocio

08:53.290 --> 08:55.120
y siga leyendo.

08:55.120 --> 08:59.010
Línea tres, línea cuatro, línea cinco, línea seis, hasta el 11.

08:59.260 --> 09:07.010
Cuando termine, te lo haré saber y te daré un error o algunos datos. 'readFileSync ()' que es

09:07.010 --> 09:11.740
sincrónico dice: Voy a leer este archivo.

09:11.780 --> 09:14.750
No hagas nada, solo espera aquí cuando

09:14.750 --> 09:18.600
termine, voy a asignarlo a 'archivo' y luego puedes continuar.

09:20.210 --> 09:30.080
Entonces, como pueden ver aquí, lo que sucede es que leemos el archivo y, dado que es asíncrono, ejecutará

09:30.080 --> 09:41.280
esto y pasará a la línea 10 y ejecutará 'fs'. readFileSync () 'y' readFileSync () 'porque dice oye espera hasta que

09:41.280 --> 09:45.150
termine esto, va a imprimir' helllloooooo allí

09:45.330 --> 09:46.920
!!! 'y

09:47.160 --> 09:52.340
luego el código asincrónico va a decir: hey, terminé de leer el archivo,

09:52.380 --> 09:55.770
aquí están los datos y se imprimen aquí.

09:55.770 --> 09:59.860
Nuevamente, realmente te recomiendo que veas el video asíncrono sincrónico.

10:00.330 --> 10:03.070
Pero por ahora con suerte eso tiene sentido.

10:03.240 --> 10:12.240
Ahora mirando esto, ¿cuál deberías usar? Bueno, para un caso simple como este,

10:12.400 --> 10:19.690
podemos usar lo que queramos. Pero puede ver un problema con el segundo, especialmente si estamos construyendo algo

10:19.690 --> 10:21.150
así como un servidor.

10:21.250 --> 10:25.090
Si tenemos un archivo masivo que tiene algo más que '¡demonios! ', bueno, si

10:25.300 --> 10:34.360
estamos haciendo' readFileSync () ', lo que sucede es que vamos a detener o pausar la

10:34.360 --> 10:39.980
ejecución de nuestro archivo y leerá todo el texto.

10:40.370 --> 10:47.000
Y el programa solo estará esperando que eso termine; versus el archivo de lectura que dice: oye,

10:47.000 --> 10:48.230
puedes seguir adelante.

10:48.320 --> 10:50.340
Te avisaré cuando termine con esto.

10:50.360 --> 10:56.210
Entonces, cuando está creando un servidor y digamos un servidor express con rutas.

10:56.360 --> 11:03.530
Bueno, en ese caso queremos usar readFile () si estamos leyendo algún tipo de archivo o archivo de texto, sea lo que

11:03.530 --> 11:04.160
sea.

11:04.310 --> 11:08.680
Porque de esa manera no estamos bloqueando la ejecución y el programa puede seguir haciendo cosas.

11:09.700 --> 11:10.050
Bien.

11:10.150 --> 11:12.750
Entonces, una última vez solo para aclarar las cosas.

11:12.760 --> 11:17.690
Voy a etiquetar esto como 'Async' y 'Sync'.

11:17.710 --> 11:22.350
Entonces, una vez más, si ejecutamos esto tenemos 'Sync' y 'Async'.

11:22.420 --> 11:23.360
'¡Diablos!

11:23.790 --> 11:32.350
'Pero genial, podemos leer un archivo y ambas instancias, lo cual fue genial.

11:32.350 --> 11:38.800
Permíteme mostrarte algunos más y luego decirte exactamente por qué esto es tan emocionante y cómo podemos usarlo para

11:38.800 --> 11:40.880
hacer algunas cosas realmente emocionantes.

11:44.090 --> 11:50.770
Así que digamos el '¡demonios! 'el texto es un poco aburrido y queremos agregarlo.

11:51.110 --> 11:54.230
Bueno, podemos hacer algo como esto.

11:55.280 --> 12:01.160
'fs. appendFile () 'le damos el archivo que queremos agregar.

12:01.430 --> 12:05.220
Entonces en este caso es '. /Hola. TXT'.

12:05.780 --> 12:10.130
Y, por cierto, si esto no existe, en realidad solo creará el archivo para nosotros.

12:10.130 --> 12:13.130
Y el segundo parámetro dirá lo que queremos agregar.

12:13.130 --> 12:28.150
Digamos que también queríamos agregar quizás un espacio y luego decir "Esto es genial", ahora hay un signo de exclamación.

12:28.210 --> 12:36.020
Y finalmente, el tercer parámetro toma un error y este error solo dirá eso si hay un error.

12:36.040 --> 12:37.020
Permítanme hacer esto

12:37.040 --> 12:49.790
más pequeño para que puedan verlo. Digamos que si hay un error, solo 'consolaremos. log '' consola.

12:49.870 --> 12:50.210
log (err) 'Muy bien.

12:50.260 --> 12:51.780
Perfecto.

12:51.830 --> 12:53.900
Así que corramos esto y veamos qué sucede.

12:53.900 --> 12:57.520
¡Voy a ejecutar el script y me sale 'helllloooooo

12:57.530 --> 12:58.360
allí! '' ¡Qué

12:58.370 --> 12:58.970
demonios!

12:58.970 --> 13:11.690
'Porque estos corrieron primero pero si voy a' hola. txt ', mira eso, acabamos de escribir en un archivo. Y ahora tenemos "Esto es genial.

13:12.000 --> 13:17.440
"Entonces, si ejecuto esto nuevamente y me dejo aclarar esto solo para que tengamos más espacio Mira

13:21.160 --> 13:22.180
eso. Me sale 'helllloooooo allí

13:22.270 --> 13:22.930
!!!

13:22.930 --> 13:24.520
"¡Esto es genial!"

13:24.520 --> 13:25.990
"Esto es

13:26.010 --> 13:30.770
genial" Si volvemos al saludo. archivo txt, Oh chico, hemos agregado aún

13:30.770 --> 13:31.850
más texto 'Esto

13:32.490 --> 13:33.460
es genial'.

13:33.680 --> 13:35.140
Eso es muy bueno.

13:35.140 --> 13:39.740
Acabamos de agregar algunas líneas más a nuestro archivo.

13:39.800 --> 13:42.450
Déjame eliminar eso solo para que no se vuelva demasiado molesto.

13:42.800 --> 13:44.780
Voy a guardarlo y volver.

13:46.190 --> 13:48.930
Muy bien, así que aprendimos el apéndice.

13:49.090 --> 13:57.880
Permítanme comentar esto para que no interfiera con ninguno de los otros.

13:57.900 --> 14:04.570
Hagamos una 'escritura' esta vez, ahora cree un espacio aquí para que podamos

14:07.240 --> 14:09.220
ver Con la

14:10.320 --> 14:17.020
escritura, como puede imaginar, 'fs. writeFile () 'y solo diremos que este archivo se llamará' bye. TXT'.

14:17.020 --> 14:19.550
Nombre muy original por mí mismo.

14:20.400 --> 14:21.540
Y solo diré.

14:21.540 --> 14:23.750
Triste de verle partir.

14:27.200 --> 14:44.280
Y una vez más, aparecerá un error y este error dirá 'if (err)' 'console. log (err) 'Muy bien, así que guardemos eso, ejecute

14:44.340 --> 14:50.640
el archivo o ejecute el script.

14:51.890 --> 14:56.110
Y mira eso, adiós. txt 'acaba de agregarse.

14:56.240 --> 15:00.580
Si hacemos clic en él, tenemos "Triste verte ir".

15:00.650 --> 15:03.090
Acabamos de crear un nuevo archivo de texto.

15:03.940 --> 15:05.870
Muy muy genial.

15:05.930 --> 15:17.010
Por cierto, para que sepas lo que sucede, si digamos que escribo mal el archivo de lectura y ahora es un infierno. txt 'Bueno, si ejecuto esto, obtendré un

15:17.150 --> 15:22.280
error y puedes ver eso.

15:22.340 --> 15:30.610
Debido a que se produce un error, recibo el mensaje de error, error con muchas R.

15:30.620 --> 15:30.930
Bien.

15:30.950 --> 15:39.260
Un poco de segue allí, pero en caso de que la gente pregunte o usted esté pensando en eso.

15:39.340 --> 15:39.990
Bien.

15:40.160 --> 15:45.190
Woo ~ Me estoy cansando, así que hagamos un último y luego te diré exactamente por qué

15:45.190 --> 15:46.670
esto es tan genial.

15:46.840 --> 15:54.180
El último que haremos, nuevamente hagamos un poco de espacio aquí, será el 'eliminar'.

15:54.490 --> 15:59.240
Entonces con ese 'eliminar' podemos hacer 'fs. desconectar()'.

15:59.270 --> 16:08.500
el nombre está un poco fuera de aquí pero 'fs. unlink () 'y diremos el' bye. txt 'y fíjate que solo

16:08.500 --> 16:18.730
pude hacer' bye. txt 'pero solo para mantenerlo consistente, solo diré'. /adiós. txt 'con el'. /

16:18.730 --> 16:24.400
'antes y con este.

16:24.400 --> 16:25.970
De nuevo, si hay algún error,

16:28.550 --> 16:29.680
solo 'consola.

16:29.790 --> 16:32.720
log (err) 'Vaya, olvidé hacer el'

16:37.540 --> 16:39.900
si 'perfecto, ahora Bueno,

16:40.130 --> 16:42.020
veamos qué sucede aquí.

16:43.460 --> 16:52.940
Y solo por diversión, solo agreguemos una 'consola. log () 'aquí después de que se haya eliminado y diremos' inicio 'porque estamos

16:52.940 --> 16:58.590
diciendo' adiós 'al'. /adiós. texto'. Mente alucinada.

16:58.990 --> 17:00.290
Muy bien, corramos esto.

17:00.290 --> 17:06.220
Voy a decir, y comentaremos el archivo de escritura aquí porque no necesita escribirlo, ya tenemos

17:06.220 --> 17:08.320
el 'adiós'. texto'.

17:08.420 --> 17:09.640
Déjame salvar

17:09.810 --> 17:13.280
Ahora si nos fijamos en el 'adiós. texto ', veamos qué sucede aquí

17:16.580 --> 17:20.410
cuando ejecuto el script mira eso, el' adiós. texto 'se acaba de eliminar.

17:20.830 --> 17:22.910
El inicio acaba de suceder.

17:25.290 --> 17:26.430
Increíble.

17:26.490 --> 17:30.840
Así que eso fue muy emocionante para mí, espero que también lo fuera para ti.

17:30.900 --> 17:34.270
¿Pero por qué es esto emocionante?

17:34.650 --> 17:42.900
Bueno, porque ahora podemos usar la programación en javascript fuera de solo navegadores web y fuera

17:42.900 --> 17:46.760
de solo construir sitios web y servidores.

17:46.890 --> 17:52.760
Lo que podemos hacer ahora con este conocimiento es que podemos facilitarnos la vida.

17:52.800 --> 18:01.540
Puede pensar en casos, tal vez desee leer un archivo de Excel y hay cosas que puede usar, usar el archivo

18:01.540 --> 18:05.690
de lectura y los módulos NPM que puede leer.

18:05.830 --> 18:06.180
Digamos.

18:06.180 --> 18:10.730
Columnas en un Excel y hacer algunas matemáticas.

18:11.140 --> 18:18.100
O tal vez tiene una hoja de Excel con todos estos correos electrónicos y desea enviar un correo electrónico a, digamos, 100 personas en esta

18:18.190 --> 18:24.160
lista, pero tampoco desea que el filtro de Google lo atrape enviando correo no deseado a las personas diciendo que oye

18:24.160 --> 18:32.650
esta cuenta es spam porque acaban de enviar 100 correos electrónicos en dos minutos. Bien, usando algo como Nodo, puede

18:32.650 --> 18:40.150
crear tal vez algo que cada seis horas envíe cinco correos electrónicos.

18:40.150 --> 18:48.520
Otra cosa que puede hacer si tuviera un robot, por ejemplo, algo similar a un sistema de archivos en lugar de tener que

18:48.520 --> 18:50.010
leer el archivo.

18:50.000 --> 18:58.000
Puede leer desde el robot, tal vez a través de la conexión inalámbrica, tal vez a través de cables y obtener una entrada de algunos datos

18:58.450 --> 19:00.040
que tiene el robot.

19:00.400 --> 19:03.570
Tal vez detectó un gato.

19:03.910 --> 19:10.120
Bien usando esa entrada, puede hacer algo que puede responder, tal vez enviarle un correo electrónico

19:10.120 --> 19:16.420
diciendo que el robot acaba de detectar un gato y enviar ese correo electrónico o enviar una salida.

19:16.420 --> 19:24.160
Y eso es lo que llamamos entrada de salida, donde obtienes una entrada de otra fuente, otra máquina

19:24.760 --> 19:32.140
y luego también estás produciendo algo para el consumo, eso es realmente muy emocionante porque abre el

19:32.170 --> 19:35.490
mundo donde puedes crear herramientas para ti.

19:35.620 --> 19:36.730
Puedes automatizar las cosas.

19:36.730 --> 19:41.760
Literalmente puedes hacer cualquier cosa que tu mente pueda pensar.

19:42.310 --> 19:48.310
Y sé que esto todavía es temprano y todavía estás al comienzo de tu carrera como desarrollador, pero

19:48.310 --> 19:54.370
este es el primer paso para comprender cómo puedes usar la programación para resolver problemas y hacer tu

19:54.610 --> 19:58.580
vida más eficiente, o tal vez un poco más divertida. .

19:58.630 --> 20:02.040
Así que en el próximo video vamos a hacer algo divertido.

20:02.140 --> 20:07.650
Vamos a usar lo que acabamos de aprender y vamos a ayudar a Santa en un desafío de codificación.

20:08.720 --> 20:10.190
Te veré en ese.

20:10.360 --> 20:10.570
Adiós
