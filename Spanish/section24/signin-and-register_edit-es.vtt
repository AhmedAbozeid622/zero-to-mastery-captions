WEBVTT

00:01.240 --> 00:06.030
De acuerdo, comencemos a construir algunas rutas reales para nuestra aplicación.

00:06.100 --> 00:11.470
Tenemos un buen plan y podemos comenzar a implementarlo en base a lo que sabemos.

00:13.040 --> 00:18.830
Y de nuevo, la forma en que vamos a probar esto es utilizando Postman, no tenemos que preocuparnos por el front-end

00:18.830 --> 00:27.060
ahora; queremos construir nuestro servidor para que funcione correctamente y solo al final una vez que todo esté funcionando,

00:27.110 --> 00:34.230
podemos conectarlo al front-end y también podemos informar al equipo de front-end:"Oigan, estos son los puntos finales

00:34.680 --> 00:36.510
eso esperamos ".

00:36.960 --> 00:41.610
Y esto es con lo que responderemos.

00:41.680 --> 00:42.020
Todo bien.

00:42.040 --> 00:43.830
Entonces creo que es hora de comenzar.

00:45.980 --> 00:50.680
Lo primero que queremos abordar es el 'inicio de sesión'.

00:50.770 --> 00:51.840
Entonces, pensemos en esto.

00:51.850 --> 01:02.280
Voy a hacer 'app.post ()' para iniciar sesión. Y cuando hagamos la ruta de inicio de sesión tendremos una solicitud

01:02.430 --> 01:03.230
respuesta.

01:06.470 --> 01:11.600
Y aquí solo para probar que todo funciona, haremos 'res.send (' signing ')'

01:14.990 --> 01:24.690
Vamos a guardar ir a Cartero, haga localhost haga clic en Enviar.

01:24.740 --> 01:29.690
Siempre me gusta hacer pasos incrementales para asegurarme de que todo esté funcionando y obtener esos pequeños

01:29.690 --> 01:32.440
gana cada vez que estamos trabajando.

01:32.480 --> 01:37.230
Así que lo tengo diciendo 'esto está funcionando'.

01:37.610 --> 01:46.160
Bueno, eso es porque hicimos una solicitud GET a la raíz en lugar de hacer 'iniciar sesión' y luego un POST.

01:49.840 --> 01:58.380
Y tenemos 'Can not POST / sigin' porque aparentemente no puedo deletrearlo allí - un poco de ortografía

01:58.400 --> 01:59.470
de mi parte.

01:59.510 --> 02:00.440
Ahí vas 'firmando'

02:03.380 --> 02:04.110
Perfecto.

02:04.160 --> 02:07.160
Ahora quiero mostrarte algo que vamos a usar para seguir adelante.

02:07.160 --> 02:14.910
Hasta ahora hemos hecho 'enviar', que también puede enviar JSON, pero Express viene con un método JSON integrado

02:15.140 --> 02:21.040
en la respuesta que podemos usar y tiene un poco de características adicionales cuando respondemos con JSON

02:21.040 --> 02:23.490
y queremos enfocarnos en usar eso.

02:23.490 --> 02:30.480
Así que de ahora en adelante voy a usar esto y hay una ligera diferencia en lo que recibimos.

02:30.760 --> 02:33.080
Recibimos una cadena JSON de esta manera.

02:35.230 --> 02:35.530
Todo bien.

02:35.570 --> 02:41.350
Así que pensemos en 'iniciar sesión'; no necesariamente vamos a decir 'iniciar sesión' y eso es todo.

02:42.150 --> 02:47.820
Queremos verificar lo que ingrese el usuario en el front-end - va a volver aquí en la respuesta

02:47.850 --> 02:54.750
o en la solicitud y queremos verificarlo con nuestra lista actual de usuarios para asegurarnos de que sus contraseñas

02:54.750 --> 02:56.300
partido.

02:56.300 --> 03:02.300
Parece que necesitamos algún tipo de base de datos, pero por ahora, porque no hemos aprendido sobre ellos

03:02.300 --> 03:07.720
sin embargo, vamos a crear una variable y esta variable se llamará 'base de datos'

03:11.380 --> 03:21.930
y tendrá usuarios y esta propiedad de 'usuarios' será una matriz de objetos

03:25.280 --> 03:28.510
y esta matriz de objetos tendrá id:'123'

03:28.700 --> 03:32.690
tendrá nombre:'john'

03:33.230 --> 03:36.360
tendrá correo electrónico

03:36.800 --> 03:39.040
como 'john@gmail.com'

03:39.190 --> 03:40.220
-

03:41.150 --> 03:45.780
También tendremos una contraseña:diremos 'cookies'

03:48.760 --> 03:57.670
Tendremos 'entradas', que es lo que vamos a usar para rastrear puntajes así que las entradas significan cuántas veces

03:58.090 --> 04:03.730
John ha enviado fotos para la detección de rostros y, finalmente, también es probable que deseemos hacer un seguimiento de

04:03.970 --> 04:06.590
cuando John se unió a nuestra aplicación.

04:06.640 --> 04:11.860
Podemos hacerlo haciendo 'new Date ()', que viene con JavaScript -

04:11.860 --> 04:17.460
solo creará una fecha cuando se ejecute esta parte.

04:18.840 --> 04:21.300
Y verás más adelante cómo se mostrará esto.

04:23.550 --> 04:23.800
Todo bien.

04:23.820 --> 04:28.110
Y creemos otro usuario porque, después de todo, estamos en una matriz.

04:29.660 --> 04:38.510
Y se llamará a este usuario, así tendremos una 'id' de '124' - será 'Sally', 'sally@gmail.com'

04:38.510 --> 04:42.670
y su contraseña será 'plátanos'.

04:45.950 --> 04:46.970
Perfecto.

04:47.000 --> 04:51.620
Ahora mirando esto para 'iniciar sesión' vamos a recibir una solicitud.

04:51.680 --> 04:55.940
Y dentro de esta solicitud vamos a tener que recordar que con 'iniciar sesión' queremos asegurarnos de usar

04:56.440 --> 04:57.070
ENVIAR.

04:57.140 --> 05:03.300
Entonces vamos a tener acceso a 'req.body ()' y parece una declaración condicional, ¿no es así?

05:03.300 --> 05:03.780
-

05:03.780 --> 05:10.970
Si hacemos una declaración 'si' y decimos 'req.body ()' - bueno, ¿qué vamos a tener sobre el cuerpo? Antes de hacerlo

05:10.970 --> 05:17.940
esto regresemos a Postman y pensemos sobre a dónde vamos a enviar cuando lo hagamos 'firmand' vamos a ir

05:17.940 --> 05:21.610
para hacer una solicitud POST en el cuerpo.

05:21.990 --> 05:27.830
Recuerde que enviaremos JSON porque no estamos usando un formulario HTML.

05:28.040 --> 05:36.930
Vamos a presionar 'raw' y luego a JSON (application / json) y ahora que tenemos JSON aquí tenemos este

05:36.930 --> 05:41.380
caja donde podemos ingresar lo que queremos enviar con nuestro cuerpo.

05:41.900 --> 05:49.130
Una vez más, hará la validación para nosotros y diremos que, como lo hizo el formulario de inicio de sesión en nuestro front-end, tenemos

05:51.540 --> 05:58.590
'email' que será - digamos que tendremos 'john@gmail.com'.

05:58.630 --> 06:04.540
Entonces, puede imaginarse que John ingresa a nuestro sitio web y utiliza la ruta de inicio de sesión, el formulario de inicio de sesión.

06:05.800 --> 06:07.210
y su contraseña

06:10.420 --> 06:14.050
serán 'cookies'.

06:14.190 --> 06:19.680
Vamos a enviar esta información desde el front-end y solo estamos pretendiendo que John está registrando

06:19.680 --> 06:22.730
para que tengamos acceso aquí.

06:25.560 --> 06:29.640
Entonces, agreguemos que 'if' statement 'if (req.body.email === [

06:33.370 --> 06:33.770
-

06:37.100 --> 06:40.070
lo que tenemos en la base de datos])

06:40.370 --> 06:48.080
Digamos 'database.users' y tomaremos John's [0] aunque deberíamos pasar por esto,

06:48.090 --> 06:54.920
por ahora solo queremos asegurarnos de que funcione, tomaremos 'John' y comprobaremos la entrada del correo electrónico

06:55.040 --> 06:56.390
en la base de datos.

06:57.340 --> 07:06.040
Y 'req.body.password === [lo que tengamos en la base de datos]'

07:10.680 --> 07:20.000
Si eso funciona y eso es cierto, responderemos con un JSON que diga 'éxito'

07:22.920 --> 07:32.860
de lo contrario, podemos decir que responderemos con un 'res.status (400)' y diremos

07:35.770 --> 07:41.470
'error al iniciar sesión'.

07:41.470 --> 07:52.600
Está bien, vamos a dar esto hace un momento. Voy a guardar, volver aquí. Firmar. Hagamos clic en enviar y me sale un poco, un poco.

07:52.600 --> 07:58.670
de un error - '... leer el correo electrónico de propiedad de indefinido'.

07:58.730 --> 07:59.750
Esto es un poco complicado.

07:59.750 --> 08:03.520
¿Por qué no está leyendo la propiedad del correo electrónico?

08:03.740 --> 08:10.070
Y quiero mostrarte este error porque sucede mucho y es algo que la gente olvida todo

08:10.070 --> 08:10.760
el tiempo.

08:11.030 --> 08:19.160
Recuerde que cuando estamos enviando datos desde el front-end y está usando JSON, debemos analizarlo porque

08:19.160 --> 08:26.390
Express no sabe lo que acabamos de enviar; para poder usar 'req.body ()' así que necesitamos

08:26.390 --> 08:29.590
usar un analizador corporal, ¿verdad?

08:31.610 --> 08:32.560
Así que hagámoslo.

08:32.600 --> 08:43.660
Voy a importar un analizador de cuerpo y lo 'requeriré'.

08:43.810 --> 08:47.640
Y si no tienes esto en tu proyecto, entonces tendrás que 'npm install'.

08:47.770 --> 08:55.810
Pero en todas las aplicaciones Express vas a ver esto, así que es uno de esos paquetes que nunca deberías tener.

08:55.810 --> 09:01.060
olvida y casi todas las aplicaciones Express vienen con él. Para usar esto si recuerdas de nuestro anterior

09:01.060 --> 09:01.780
lección,

09:01.900 --> 09:12.180
simplemente hacemos 'app.use ()' porque es un middleware y haremos 'body-parser.json'.

09:12.410 --> 09:17.970
Y deberíamos hacer esto después de que se haya creado la aplicación - variable de aplicación -.

09:19.750 --> 09:23.080
Digámoslo e intentemos eso de nuevo.

09:24.030 --> 09:33.990
Voy a hacer clic en Enviar y obtenemos el "éxito", mira eso, si cambio esto ahora, solo di "cookie" | - haga clic en Enviar

09:35.230 --> 09:45.180
Recibo una '400 solicitud incorrecta' con "error al iniciar sesión". Hagamos esto un poco más grande para que pueda ver. Cómo

09:45.270 --> 09:46.470
impresionante es eso?

09:46.530 --> 09:49.070
Tenemos nuestro inicio de sesión funcionando bien.

09:51.970 --> 09:52.460
Todo bien.

09:52.460 --> 09:54.430
Eso es bastante lindo.

09:54.430 --> 09:59.620
Podríamos hacer un ciclo 'para' aquí - 'para cada'

09:59.650 --> 10:06.370
tal vez - para comprobar en caso de que registre a Sally, pero eso es un poco complicado ¿no?

10:06.370 --> 10:13.360
Imagínese si tuviéramos cientos de usuarios y utilizamos el bucle for en el inicio de sesión para comprobar en contra de todo

10:13.360 --> 10:15.380
usuarios y todas las contraseñas.

10:15.670 --> 10:22.200
Y esta es exactamente la razón por la cual uno de los motivos por los que usamos bases de datos es que las bases de datos son realmente realmente

10:22.200 --> 10:30.390
bueno para agarrar y verificar contra diferentes entradas frente a una variable o una matriz aquí donde tenemos

10:30.390 --> 10:31.860
para recorrer todo.

10:32.370 --> 10:35.200
Entonces, por ahora, porque esto está funcionando, mantengámoslo como está.

10:37.860 --> 10:39.340
Hagamos el siguiente.

10:39.420 --> 10:44.850
Regístrese si lo recuerda, regístrese será una solicitud POST

10:49.170 --> 10:52.230
y de nuevo obtendremos una solicitud, respuesta [(req.res)].

10:54.760 --> 10:59.840
Esta solicitud, respuesta '/ registro' significa que el usuario, un nuevo usuario, se creará.

11:03.200 --> 11:08.120
Así que no vamos a hacer ningún control como este porque el usuario no existe.

11:08.120 --> 11:17.900
Queremos obtener el 'req.body' e ingresar la nueva información en nuestra base de datos.

11:17.930 --> 11:25.820
En este caso, tenemos un objeto de base de datos que tiene usuarios y una matriz para que podamos hacer 'database.users.push ()'

11:26.780 --> 11:28.170
para agregar a esta matriz.

11:28.250 --> 11:28.680
Vamos a hacer eso.

11:31.730 --> 11:35.060
Siempre me gusta comenzar con lo que se verá la solicitud.

11:35.710 --> 11:39.960
Volviendo aquí, vemos que cuando creamos un nuevo usuario:11:40.150 --> 11:50.280
- si recuerda el formulario de registro, recibimos el nombre, el correo electrónico y la contraseña. Vayamos a Cartero y creemos eso.

11:50.560 --> 11:52.240
Voy a decir.

11:52.240 --> 11:54.450
POST '/ register'

11:55.060 --> 12:07.730
y aquí recibimos "correo electrónico", "contraseña" y también "nombre" y diremos que el nombre es "Ann", su contraseña es "manzanas"

12:08.210 --> 12:17.710
y el correo electrónico será "ann@gmail.com" y lo enviaremos a través de JSON, y veremos cómo funciona

12:17.710 --> 12:18.300
¿un error?

12:18.310 --> 12:21.860
Eso es porque me da una coma, de nuevo,

12:22.020 --> 12:25.240
Cartero es simplemente increíble para esto.

12:25.420 --> 12:32.540
Volviendo, queremos crear un usuario como este, así que solo copiemos

12:32.580 --> 12:33.680
esto, lo que tenemos aquí

12:38.130 --> 12:48.600
y decir que queremos crear un nuevo usuario diciendo 'database.users.push ()' para agregar al usuario

12:48.600 --> 12:49.370
formación.

12:49.920 --> 12:54.120
Y aquí agregaremos un objeto que es lo que acabamos de copiar,

12:57.220 --> 13:01.680
pero no queremos volver a agregar a John a los usuarios ¿verdad?

13:01.720 --> 13:06.180
No, queremos tomar lo que sea que obtengamos de 'req.body'.

13:06.280 --> 13:22.620
En nuestro caso, usando la desestructuración, podemos simplemente decir '{email, name, password} = req.body' y ahora

13:22.620 --> 13:29.600
la base de datos que podemos simplemente por ahora solo agrega estáticamente el 'id' de '125'.

13:29.870 --> 13:36.840
'nombre' será el nombre que recibamos, 'correo electrónico' será correo electrónico nuevamente que obtenemos

13:36.840 --> 13:45.390
y, finalmente, 'contraseña' será lo que recibamos y 'entradas' será cero porque

13:45.640 --> 13:51.640
bueno, Ann será una nueva usuaria y comenzará con cero entradas y 'unirse' será una nueva fecha porque

13:51.640 --> 14:00.910
generará, siempre que se ejecute, generará la marca de tiempo de ese día y hora.

14:01.020 --> 14:04.040
Vamos a guardar esto y ver si esto funciona.

14:05.130 --> 14:09.630
Vuelvo aquí, haz clic en Enviar.

14:09.740 --> 14:11.990
Obtengo una 'carga' y está girando.

14:12.050 --> 14:16.320
Voy a hacer clic en Cancelar solicitud y ¿sabes por qué?

14:16.710 --> 14:19.500
Bueno, porque no hemos enviado una respuesta.

14:19.500 --> 14:25.210
Express ahora solo está ahí porque no hemos devuelto nada que no hayamos respondido. Asi que

14:25.230 --> 14:26.730
siempre recuerda hacer eso.

14:28.000 --> 14:38.780
En nuestro caso, diremos que 'res.json ()' será el usuario, el nuevo usuario que se creó.

14:38.880 --> 14:44.730
Tal vez, si se están registrando, queremos tomar esa información y mostrarla en la página de perfil.

14:44.730 --> 14:52.140
En nuestro caso, diremos que queremos obtener 'database.users' y queremos captar al último usuario que

14:52.140 --> 14:54.660
acabamos de crear. Eso es simple de hacer.

14:54.660 --> 14:57.080
Acabamos de hacer 'database.users.length'

14:57.120 --> 15:04.670
que es la longitud de la matriz menos uno, de nuevo toma la última matriz o último elemento de la matriz.

15:07.030 --> 15:08.020
Ahorremos aquí.

15:09.490 --> 15:13.540
Y vuelve atrás, haz clic en enviar.

15:13.550 --> 15:15.070
Está bien, mira eso.

15:15.170 --> 15:19.900
Tenemos a Ann con cero entradas.

15:20.030 --> 15:23.690
Una nueva marca de tiempo para cuando se registró.

15:24.080 --> 15:26.040
Y ahora tenemos un nuevo usuario.

15:26.270 --> 15:31.090
Regresemos a la ruta raíz aquí.

15:31.370 --> 15:33.390
Y volvamos por ahora

15:33.620 --> 15:40.720
los 'database.users' para asegurarnos de que veamos qué usuarios tenemos.

15:43.580 --> 15:50.500
Voy a guardar aquí, regresar y hacer una solicitud GET en la ruta raíz.

15:50.540 --> 15:51.440
Si hago clic en Enviar

15:55.160 --> 15:58.230
Cometí un error aquí, no puedo deletrear.

15:58.460 --> 16:00.140
Probemos eso de nuevo.

16:00.140 --> 16:03.970
Si vuelvo, haga clic en Enviar.

16:03.990 --> 16:10.360
Está bien, obtuve a John y a Sally, pero ¿dónde está Ann?

16:10.900 --> 16:17.110
Volvamos a nuestra solicitud nuevamente y Cartero le da el historial de su solicitud para que no tenga

16:17.110 --> 16:25.320
para seguir escribiéndolos puedes volver a registrar mirar el cuerpo y enviar a Ann nuevamente.

16:25.320 --> 16:25.630
Todo bien.

16:25.630 --> 16:32.140
Nos registramos Ahora si volvemos a nuestra solicitud GET y hacemos clic en Enviar.

16:32.140 --> 16:32.610
Todo bien.

16:32.650 --> 16:36.190
Ann está allí; tenemos tres nuevos usuarios.

16:36.190 --> 16:44.100
Pero, ¿qué acaba de pasar? Bueno, este es otro buen argumento para explicar por qué necesitamos una base de datos.

16:44.130 --> 16:51.480
La razón por la que Ann no se agregó la primera vez es porque cambié la ruta raíz para incluir

16:51.560 --> 16:58.680
'database.users', lo que significaba que Nodemon tenía que reiniciarse; el servidor tuvo que reiniciarse y comenzar de nuevo.

16:59.160 --> 17:06.810
Y debido a que estas son variables de JavaScript cada vez que reiniciamos el servidor, esto se ejecuta nuevamente.

17:07.110 --> 17:11.320
Entonces, la base de datos se inicia solo con los dos usuarios.

17:11.500 --> 17:18.610
Nuevamente, realmente no utilizamos variables para almacenar la información que necesitamos a lo que llamamos 'persistir'

17:18.640 --> 17:28.040
- eso es para durar y ser memorizado por el sistema. Las bases de datos son realmente buenas porque se ejecutan

17:28.040 --> 17:36.050
disco en algún lugar del mundo y son realmente muy buenos para mantener esta información y

17:36.140 --> 17:43.910
no bajando o si bajan tienen copias de seguridad para que los usuarios siempre lo consigan y nosotros no

17:43.910 --> 17:45.220
perder cualquier información.

17:46.990 --> 17:51.380
Llegaremos a las bases de datos e implementaremos esto con una base de datos.

17:51.490 --> 17:54.960
Pero quiero mostrarte ahora los puntos dolorosos de no tener bases de datos.

17:55.060 --> 18:04.220
Tuvimos que realizar un bucle o tendríamos que pasar por estos usuarios si teníamos que marcar 'iniciar sesión' o teníamos que hacerlo siempre

18:04.640 --> 18:10.230
tenga en cuenta que cada vez que el servidor se reinicia, perdemos todos nuestros datos.

18:10.250 --> 18:13.380
Está bien, las cosas se ven bien.

18:15.160 --> 18:21.110
Definitivamente hay algunas cosas que podemos mejorar aquí, pero solo queremos construir el esqueleto.

18:21.470 --> 18:27.180
Nos quedan dos puntos finales más y vamos a abordarlos en el próximo video.

18:27.200 --> 18:28.570
Veré en eso.

18:28.640 --> 18:28.820
Adiós
