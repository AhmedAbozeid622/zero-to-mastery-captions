WEBVTT

00:00.760 --> 00:07.620
Bienvenido de nuevo, como mencioné antes, los desarrolladores son realmente buenos para asegurarse de que no sigan haciendo lo

00:07.620 --> 00:09.630
mismo una y otra vez.

00:09.900 --> 00:15.940
Y si hay algo que se hace una y otra vez, crean una herramienta para que sea más simple.

00:17.810 --> 00:20.170
Bueno, construir servidores fue uno de ellos.

00:20.170 --> 00:23.290
Es algo que todos usan.

00:23.450 --> 00:29.360
Entonces, las personas usan bibliotecas al igual que nosotros usamos React en el front-end sobre JavaScript

00:29.360 --> 00:34.260
para hacernos la vida más fácil y construir servidores más rápidos y robustos.

00:34.270 --> 00:39.690
Y hay muchas bibliotecas que las personas usan con Node para crear un servidor.

00:40.340 --> 00:47.630
Pero el más popular y el mejor en este momento es Express y tengo aquí la encuesta State of JavaScript 2017: es

00:47.630 --> 00:54.290
una encuesta famosa que se realiza todos los años al final del año y que pregunta a los desarrolladores cuáles

00:54.350 --> 00:57.740
son sus herramientas favoritas. herramientas de front-end que usan.

00:57.740 --> 00:59.880
Y le recomiendo que lo revise.

01:00.050 --> 01:07.910
Pero puede ver aquí que para el back-end, la biblioteca más popular es Express, y esta barra púrpura significa 'Lo he

01:07.910 --> 01:10.710
usado antes y lo volvería a usar'.

01:11.430 --> 01:17.500
Hay otros como Koa, Meteor, Hapi, pero su uso es muy pequeño.

01:17.510 --> 01:24.370
Express acaba de ser probado y probado; hay muchas herramientas e información en línea para que si alguna

01:24.370 --> 01:29.140
vez se atasca, puede encontrar una respuesta a su problema de inmediato.

01:29.260 --> 01:33.160
Así que Express es el camino a seguir.

01:33.160 --> 01:40.130
Así que aprendamos algo de Express y le mostraremos lo fácil que es crear nuestro propio servidor.

01:41.610 --> 01:48.510
Así que vamos a eliminar el servidor que creamos anteriormente en el último video e instalaremos Express.

01:48.860 --> 01:55.680
Hagamos 'npm install' y nuevamente a través de npm tenemos el paquete Express.

01:58.930 --> 02:01.620
Y ahora tenemos Express disponible para nosotros.

02:01.660 --> 02:03.070
Así que vamos a agarrarlo.

02:03.110 --> 02:13.230
La forma en que crea un servidor Express es muy simple: simplemente hace 'const express = require (' express ');'.

02:13.550 --> 02:25.800
Tenemos que hacer una 'aplicación const' y luego crear esa aplicación, para ejecutar Express, simplemente hacemos la aplicación

02:25.970 --> 02:27.650
'express ()'

02:27.650 --> 02:32.710
Y luego finalmente '. escuchar (3000) 'y eso es todo.

02:32.730 --> 02:35.710
Tenemos Express corriendo.

02:36.010 --> 02:44.920
Déjame hacer 'npm start' y vemos que nuestro servidor Node se está ejecutando.

02:45.150 --> 02:51.140
Y si vuelvo a localhost: 3000 tengo 'No puedo OBTENER'.

02:51.370 --> 02:54.150
Y eso es porque, bueno, nuevamente no estamos haciendo nada.

02:54.470 --> 03:01.580
Pero en solo tres líneas tenemos un servidor y quiero mostrarle que Express tiene una excelente guía

03:04.510 --> 03:09.600
para comenzar y una gran cantidad de información sobre cómo usarlo.

03:10.680 --> 03:14.120
Y documentación que puede consultar por su cuenta.

03:14.250 --> 03:15.630
Pero por ahora vamos a construir el nuestro.

03:18.440 --> 03:20.890
Bueno, express es realmente muy bueno haciendo rutas.

03:21.030 --> 03:29.690
Si recuerdas en nuestro host local, obtuvimos 'No se puede OBTENER'. Para hacer una solicitud GET con Express, simplemente

03:29.930 --> 03:34.450
hacemos la aplicación. get () '- en el primer parámetro está la ruta; simplemente haremos la ruta de ruta ['/'].

03:36.710 --> 03:43.580
Y el segundo parámetro recibe una solicitud y una respuesta y, en Express, en lugar de escribir

03:43.580 --> 03:56.620
todo, la forma común de hacerlo es haciendo 'req' y 'res' y aquí podemos decir 'res. send () 'y simplemente enviaremos un' hellooooo 'tal como

03:56.720 --> 04:06.780
lo hicimos en nuestro video anterior donde usamos el módulo HTTP que viene con Node.

04:06.920 --> 04:19.750
Así que vamos a ver eso; A ver si eso funciona. Voy a guardar, actualizar y me sale "holaoooo". Si abro la consola aquí y

04:19.750 --> 04:28.560
la pestaña Red y vuelvo a actualizar, veo que la respuesta es 'holaoooo'.

04:28.690 --> 04:40.520
Vemos 'Content-Type: text / html' que se convirtió automáticamente para nosotros. También puedo en lugar de enviar [ing]

04:40.730 --> 04:43.710
solo un HTML.

04:43.880 --> 04:47.150
Entonces, en lugar de hacer algo como

04:49.990 --> 04:51.010
'&lt;h1>'

04:54.400 --> 05:06.080
y '&lt;/h1>' que nos da un &lt;h1> 'Hellooooo', ahora también puedo enviar JSON. 'const user' nuevamente y esta vez el nombre de usuario

05:06.080 --> 05:08.300
será Sally y

05:13.590 --> 05:23.470
su pasatiempo será fútbol y necesitamos agregar un '=' aquí y luego pasar 'user' si guardo eso

05:26.370 --> 05:31.430
y vuelvo y me refresco. ¡Mira eso!

05:31.780 --> 05:37.180
Hace automáticamente el 'JSON. stringify () 'para mí y devuelve un tipo de contenido JSON y

05:37.280 --> 05:46.000
un tipo de contenido' application / json 'con la respuesta que es JSON. Muy genial. Entonces puede ver el poder

05:46.000 --> 05:49.400
de Express incluso con este simple ejemplo.

05:49.690 --> 05:56.420
Elimina muchas de las repeticiones y hace que nuestra vida sea mucho más fácil.

05:56.440 --> 06:01.990
Ahora solo hemos hecho GET aquí, pero también puedes hacer solicitudes POST.

06:01.990 --> 06:05.920
Entonces, por ejemplo, si 'publiqué' '/ profile',

06:06.190 --> 06:11.440
ahora si actualizo me sale un error porque ahora he realizado

06:14.390 --> 06:19.410
el Método de solicitud, que fue GET desde el navegador.

06:19.640 --> 06:30.950
Pero aquí solo acepto una solicitud POST de 'perfil'. Si hago '/ profile' aquí obtengo 'Cannot GET /

06:35.620 --> 06:45.060
profile' porque a pesar de que vamos a la URL correcta ahora estamos haciendo una solicitud GET.

06:45.070 --> 06:46.750
Cada vez que actualizamos un navegador

06:46.780 --> 06:48.290
es una solicitud GET.

06:48.790 --> 06:56.530
Y para hacerlo, necesitamos enviar algunos datos y te mostraré cómo hacerlo en los

06:56.620 --> 06:58.200
próximos videos.

06:58.240 --> 07:07.890
Pero solo para mostrarle cómo funciona Express, puedo seguir agregando estas rutas: hagamos 'get' a '/ profile'

07:12.790 --> 07:15.460
que devuelve "getting profile".

07:15.640 --> 07:17.110
Y si hago

07:21.230 --> 07:26.760
otro 'llegar' esta vez a la url 'raíz' [/] y esta solo

07:29.580 --> 07:30.630
diré "conseguir

07:30.620 --> 07:43.340
root" si guardo esto ahora y actualizo '/ profile' obtendré un '200 OK 'con la respuesta de' hacerse profesional y si no hago '/ profile' y solo

07:43.340 --> 07:45.830
la url 'root' obtendré 'root'.

07:48.950 --> 07:53.780
Y la forma en que Express funciona es que revisa cada línea por línea.

07:53.790 --> 08:01.670
Entonces, por ejemplo, verificará, "¿Oye, la solicitud GET tenía la URL 'raíz' [/]? ".

08:02.100 --> 08:05.160
"¿La solicitud GET tenía '/ perfil'?

08:05.160 --> 08:07.760
¿La solicitud POST tiene '/ perfil'?

08:07.980 --> 08:10.150
Y si coincide bien

08:10.260 --> 08:14.640
con alguno de estos, ejecutará cualquier función que tenga dentro.

08:14.940 --> 08:28.280
Si hago una url que no existe, obtengo un '404 Not Found' porque bien hicimos una solicitud GET a esta

08:28.280 --> 08:33.660
url que no existe. Entonces, usando esto, podemos usar el

08:33.670 --> 08:41.830
método GET, el método POST, el método PUT y el método DELETE que realmente demostraremos en los

08:41.830 --> 08:43.210
próximos videos.

08:43.210 --> 08:49.990
Pero como podemos ver, es una simple cuestión de decir que si vas a esta ruta, haz esto si vas a

08:50.200 --> 08:54.510
esta, haz esto y todo es lógico y gotea todo el camino.

08:56.040 --> 08:58.480
Muy bien, nos vemos en el próximo video.

08:58.480 --> 08:58.930
Adiós.
