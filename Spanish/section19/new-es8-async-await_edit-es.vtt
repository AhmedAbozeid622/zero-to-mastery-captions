WEBVTT

00:01.210 --> 00:08.290
Ah, la nueva característica en JavaScript de la que todo el mundo habla últimamente 'Async Await'. en este video

00:08.290 --> 00:12.830
vamos a aprender de qué se trata todo el bombo. Para empezar

00:12.890 --> 00:19.880
Primero debe saber que Async Await es parte de ES8 y está construido sobre las promesas.

00:20.000 --> 00:22.280
Si no está seguro de cuáles son las promesas.

00:22.280 --> 00:25.840
Asegúrate de mirar primero ese video.

00:25.960 --> 00:34.420
Ahora, debajo del capó, una función asíncrona es una función que devuelve una promesa. Pero el beneficio de Async

00:34.430 --> 00:37.710
Esperar es que hace que el código sea más fácil de leer.

00:38.110 --> 00:39.430
Déjame mostrarte lo que quiero decir.

00:39.760 --> 00:44.750
Esta es una promesa que acabamos de inventar.

00:44.770 --> 00:47.340
Es una función de jugador de movimiento.

00:47.350 --> 00:53.470
Imagina que estamos diseñando un juego y tiene la distancia más la dirección en la que se mueve el jugador y

00:53.470 --> 00:59.560
si queremos cambiar esto tenemos 'mover jugador' '.then', 'mover jugador' de nuevo, 'mover jugador' de nuevo.

00:59.650 --> 01:00.810
'mover jugador' de nuevo.

01:01.150 --> 01:03.670
Ahora bien, este es un código asíncrono.

01:03.730 --> 01:06.200
Sabemos que el jugador de movimiento va a suceder, luego

01:06.280 --> 01:08.390
Esto va a suceder, luego esto, luego esto.

01:08.500 --> 01:16.780
Si queremos tener algún tipo de acción aquí, podemos envolverlo entre corchetes y registrar la extracción de esa consola.

01:16.780 --> 01:21.370
Todo lo que puedes hacer con promesas. con async aguarda

01:21.410 --> 01:24.240
Se vería algo como esto.

01:27.300 --> 01:28.420
Que está pasando aqui.

01:29.770 --> 01:37.660
El gran beneficio de la asincrónica es que hace que el código sea más fácil de leer y sé que probablemente no estás pensando

01:37.660 --> 01:41.230
eso ahora porque esta es una sintaxis nueva, pero solo dale una oportunidad.

01:41.240 --> 01:48.850
El objetivo con async aguarda es hacer que el código parezca síncrono, un código que tiene una apariencia asíncrona sincrónica.

01:48.850 --> 01:54.890
Ahora bien, si recuerdas una promesa en javascript es algo así como un 'Te debo'.

01:55.020 --> 01:58.180
Prometo devolverle algo en el futuro.

01:58.990 --> 02:05.140
Algo así como una llamada AJAX que redimensiona una imagen y obtiene información de una base de datos.

02:05.140 --> 02:07.040
Estas son todas las cosas que toman tiempo.

02:07.180 --> 02:11.910
En lugar de esperar por ellos, queremos continuar con nuestras vidas y simplemente tenerlo

02:11.920 --> 02:13.510
Háganos saber cuándo está hecho.

02:13.780 --> 02:18.220
Pero vamos a seguir trabajando en nuestras propias cosas, mientras lo hacemos en segundo plano.

02:18.700 --> 02:22.290
Lo hacemos de esta manera porque así es como funciona JavaScript.

02:22.330 --> 02:30.010
Si recuerdas en nuestro video "Cómo funciona JavaScript", hablamos de que javascript tiene un único hilo. por

02:30.010 --> 02:34.270
nuestros programas sean eficientes, podemos usar programación asincrónica para hacer estas cosas.

02:34.450 --> 02:38.670
Entonces las promesas nos ayudan a resolver esto y se veía así.

02:39.560 --> 02:45.660
Ahora recuerde lo que dije al principio. El código de espera no sincronizado son solo promesas.

02:45.770 --> 02:53.960
Debajo del capó llamamos a este azúcar sintáctico algo que todavía hace lo mismo, pero es solo

02:54.170 --> 02:56.930
sintaxis diferente para que se vea más bonita.

02:56.960 --> 03:06.940
Azúcar sintáctica. Y las promesas tienen esto. Entonces, sigues teniendo que sincronizar la cadena por otro lado

03:06.940 --> 03:12.420
tiene esta palabra asincrónica al frente y algunos esperan palabras clave.

03:12.700 --> 03:15.180
Entonces, veamos qué significa todo esto.

03:15.980 --> 03:20.560
Aunque estas dos cosas hacen lo mismo con la función playerStart.

03:20.560 --> 03:25.650
Primero declaramos una función como async. Llevamos el conocimiento de javascript

03:25.660 --> 03:32.220
"Oye, esta es una función asíncrona". Y lo declaramos con la palabra función y luego un nombre de función.

03:32.270 --> 03:39.800
Ahora podemos hacer lo que queramos dentro de esta función, pero tenemos acceso a una nueva palabra porque utilizamos

03:39.890 --> 03:42.460
la palabra asíncrona para definir esta función.

03:42.620 --> 03:50.350
Tenemos la palabra clave 'aguardar' y esta palabra clave dice, y podemos eliminar esto por ahora.

03:51.330 --> 03:57.890
Esta palabra clave 'esperar' dice "oye esta función hasta que tenga algo para ti".

03:58.920 --> 04:01.580
Así que estamos esperando la respuesta.

04:02.360 --> 04:08.900
Y puede usar esta palabra clave 'esperar' delante de cualquier función que devuelva una promesa que sabemos que

04:08.910 --> 04:10.050
mover jugador hace.

04:10.220 --> 04:16.760
Y una vez que se resuelve la promesa, la función pasa a la siguiente línea y espera el próximo movimiento

04:17.030 --> 04:20.770
y espera el próximo movimiento y espera el siguiente movimiento.

04:20.840 --> 04:27.200
Ahora, lo bueno de esto es que, en lugar de encadenarlo de esta manera, ahora puedo asignarlo de forma asíncrona

04:27.410 --> 04:34.380
programación, variable primero para esperar esto y puedo asignar el segundo

04:37.770 --> 04:46.070
esperar esto y el primero y el segundo tendrán el resultado de cada función pero en una variable.

04:46.150 --> 04:48.220
Entonces parece muy sincrónico.

04:48.250 --> 04:50.980
No estás usando '.then' no estás encadenando.

04:50.980 --> 04:54.920
Simplemente tiene una programación sincrónica simple, está esperando que esto suceda.

04:54.930 --> 04:56.590
Luego esperando que esto suceda.

04:57.130 --> 05:02.720
Pero usemos un ejemplo más realista para que realmente comprendamos esto.

05:02.920 --> 05:07.860
Si usamos nuestra función de búsqueda y nuevamente si recuerda la función de búsqueda.

05:08.050 --> 05:10.010
Es una promesa.

05:11.190 --> 05:15.270
Ves que tenemos una promesa.

05:15.430 --> 05:26.070
Entonces, con la función de búsqueda si usamos nuestro recurso API favorito, json marcador de posición. Agarremos a los usuarios

05:26.080 --> 05:34.490
aquí para que los usuarios finalicen el punto. Si queremos buscar algo, devolvimos una promesa para que hiciéramos una

05:34.490 --> 05:34.800
.entonces

05:34.810 --> 05:40.450
respuesta tendríamos que ejecutarlo.

05:40.660 --> 05:41.540
json

05:42.780 --> 05:51.990
Y finalmente, finalmente. Luego console.log la respuesta o los datos que obtenemos.

05:51.990 --> 06:01.280
Así que, de nuevo, si copio y pego esto en nuestra consola, recibimos una promesa que está pendiente inicialmente, luego se pone

06:01.280 --> 06:06.050
resuelto y obtengo mis usuarios.

06:06.080 --> 06:09.010
Ahora, ¿cómo podemos convertir esto en una función asíncrona?

06:09.080 --> 06:16.060
De nuevo, la misma característica funcionará igual pero se verá un poco más limpia.

06:16.210 --> 06:18.340
Será azúcar sintáctico.

06:18.620 --> 06:27.950
Bueno, si lo recuerdas, tenemos que declarar una función con la palabra clave async y esta función dirá

06:28.400 --> 06:32.150
usuarios fetchUsers y fetch

06:32.430 --> 06:38.740
Tendrá esto dentro.

06:38.980 --> 06:43.580
Pero ahora podemos usarlo frente a cualquier cosa que devuelva una promesa.

06:43.640 --> 06:46.290
La palabra clave 'aguardar'.

06:46.770 --> 06:52.050
Entonces ahora esta función va a detenerse hasta que obtengamos una respuesta de fetch.

06:52.100 --> 06:57.150
Entonces puedo decir const 'response'

06:59.060 --> 07:13.750
equivale a esperar la llamada de búsqueda. Y ahora, en lugar de usar el .entonces puedo decir que const 'data' es igual a 'await'

07:14.710 --> 07:21.790
'response.json ()' porque nuevamente 'response.json' devuelve una promesa para que pueda poner la palabra clave 'await'. Y

07:21.790 --> 07:27.140
entonces finalmente puedo simplemente 'console.log (data)'

07:29.120 --> 07:31.570
De acuerdo, copiemos y peguemos esto y veamos si funciona.

07:35.610 --> 07:36.100
Todo bien.

07:36.150 --> 07:42.980
Ahora llamo a la función fetchUsers que es la función asíncrona.

07:43.160 --> 07:45.320
Y cometí un error aquí.

07:45.350 --> 07:51.050
No hay respuesta, es 'resp' respuesta de forma corta. Ahí va, intentémoslo de nuevo.

07:51.620 --> 07:53.460
Así que vamos a actualizar eso.

07:54.510 --> 08:01.990
Copie y pegue, ejecute la función fetchUsers y mire eso.

08:02.130 --> 08:05.940
Tenemos nuestra promesa que se resolvió.

08:06.240 --> 08:18.200
Y tenemos a nuestros usuarios nada diferente de la promesa, pero ahora tenemos un buen paso por paso

08:18.210 --> 08:21.210
buscando el código que dice buscar esto.

08:21.210 --> 08:29.450
Obtenga una respuesta, luego ejecútelo a través del método json y luego registre los datos de la consola. Y podrías estar pensando

08:29.450 --> 08:34.070
para ti mismo es esto realmente más bonito que lo que teníamos antes.

08:34.370 --> 08:36.470
Recordemos lo que teníamos antes.

08:43.920 --> 08:45.590
Esto es lo que teníamos antes.

08:45.780 --> 08:47.750
Esto es lo que tenemos ahora.

08:48.630 --> 08:52.760
Y algunos de ustedes podrían argumentar que la primera promesa se ve mejor.

08:53.130 --> 08:53.810
Y sabes qué.

08:53.850 --> 08:57.030
Es una preferencia personal y este es un ejemplo simple.

08:57.040 --> 09:00.100
Entonces, hay momentos en que esto realmente se ve mucho más limpio.

09:00.360 --> 09:07.340
Pero soy un gran creyente en hacer lo que es más fácil de leer y entender para ti y tus compañeros de equipo.

09:07.560 --> 09:12.850
Hagamos un último ejemplo. Hagamos algo aún más realista.

09:12.960 --> 09:20.130
Digamos que tenemos una lista de URL y esta vez tenemos los usuarios, publicaciones y álbumes del

09:20.130 --> 09:22.390
json placeholder API.

09:23.660 --> 09:25.810
Y queremos analizarlos todos.

09:25.850 --> 09:30.270
Si recuerdas en nuestro video de promesas, tenemos algo como esto.

09:30.500 --> 09:32.550
Vamos a eliminar esto para que puedas verlo mejor.

09:32.870 --> 09:34.010
Entonces tuvimos algo como esto.

09:34.010 --> 09:43.900
Prometimos. Todos:mapeamos a través de las URL. Buscamos las URL y respondimos con JSON

09:45.400 --> 09:54.020
y luego devolvimos la matriz y la matriz tenía usuarios, publicaciones, álbumes y también hicimos un .catch.

09:54.030 --> 10:03.440
Así que de nuevo solo para asegurarnos de que esto funciona va a copiar esto ponlo en nuestra consola y vemos que

10:03.440 --> 10:06.860
obtenemos nuestros datos de usuarios, publicaciones y álbumes.

10:06.860 --> 10:07.990
Entonces eso está funcionando.

10:08.270 --> 10:10.830
Vamos a convertir esto en una función asíncrona.

10:11.300 --> 10:21.970
Bien, comencemos haciendo un 'const getData' y esta será (igual) una función asíncrona.

10:23.610 --> 10:28.470
Y quiero señalar que lo hice esta vez con la expresión de función en lugar de la forma en que

10:28.470 --> 10:31.900
lo hicimos la última vez, que era una función asíncrona y luego el nombre de la función.

10:32.040 --> 10:33.570
Pero solo quiero mostrarte las dos formas.

10:35.350 --> 10:44.030
Muy bien, entonces, ¿cómo podemos hacer una 'promesa'? Bueno, si lo recuerdas, ahora podemos poner la palabra clave 'await'

10:44.060 --> 10:50.400
frente a cualquier promesa. Entonces podemos poner la palabra clave 'esperar' delante de promise.all

10:50.570 --> 11:02.760
Entonces puedo decir que const- y esta es una pequeña magia ES6 de desestructuración- puedo decir usuarios, publicaciones y álbumes

11:03.800 --> 11:12.700
que vamos a recibir va a ser igual a 'esperar' y luego a la promesa. Todos los que ya tenemos.

11:13.070 --> 11:14.450
Así que copiemos eso.

11:14.460 --> 11:19.170
Vamos a copiar la promesa.todo y colocarla aquí.

11:20.080 --> 11:20.680
Todo bien.

11:20.800 --> 11:32.750
Y ahora podemos simplemente registrar lo que teníamos. Podemos copiar y pegar justo después de que 'esperamos' todas las promesas

11:33.270 --> 11:42.590
tendremos 'usuarios', 'publicaciones', si puedo deletrear. y luego 'álbumes'. y en lugar de Array porque lo hemos hecho con desestructuración

11:42.830 --> 11:46.730
solo podemos decir 'usuarios'

11:49.790 --> 11:50.480
'publicaciones'

11:53.260 --> 11:55.250
y 'álbumes'.

11:55.510 --> 12:05.510
De acuerdo, veamos si esto funciona. Copia y pega esto y ejecuta getData

12:08.220 --> 12:09.030
y mira eso.

12:09.090 --> 12:12.920
Obtuvimos los mismos resultados exactos.

12:13.890 --> 12:14.670
Muy genial.

12:15.070 --> 12:23.420
Pero puede haber una cosa que hayas notado aquí que está en la promesa de que tenemos el .catch.

12:23.490 --> 12:31.590
Si alguno de estos falla, queremos detectar estos errores, ¿cómo podemos hacer eso con async await?

12:31.590 --> 12:33.740
En este momento no estamos detectando ninguno de estos errores.

12:35.490 --> 12:38.840
Esta es la parte de la que no mucha gente es fanática.

12:39.060 --> 12:47.520
Pero es algo que una vez que nos acostumbramos no es tan malo. JavaScript tiene algo llamado 'try catch blocks'.

12:47.790 --> 12:55.770
y es entonces cuando ve la palabra "intentar" que ejecutará automáticamente lo que está dentro de ella.

12:55.770 --> 13:08.130
En nuestro caso, todo este bloque queremos que se ejecute en un bloque de prueba y luego 'probar' viene con un bloque catch

13:08.160 --> 13:09.200
también.

13:09.540 --> 13:15.450
Entonces, prueba un bloque catch y dentro de la captura si algo falla aquí.

13:15.690 --> 13:19.460
Bueno, podemos atraparlo aquí para que podamos simplemente console.log

13:19.550 --> 13:20.190
'Ups'

13:21.890 --> 13:29.760
Así que ahora digamos que escribí mal una de las URL y copiemos esto. Probémoslo.

13:30.020 --> 13:31.720
Tendremos las nuevas URL.

13:31.820 --> 13:37.880
Déjame aclarar eso. Nuevas URL con la URL mal escrita para una de ellas.

13:37.880 --> 13:44.270
Vamos a copiar y pegar el getData y verás aquí que obtenemos un error de sintaxis.

13:44.560 --> 13:53.570
Y eso es porque una cosa que debes recordar es que la captura recibe un error y

13:53.570 --> 13:55.390
este error puede consolar log

13:55.430 --> 14:00.310
si tu quieres. Así que vamos a la consola de registro y luego intente esto de nuevo.

14:01.530 --> 14:07.230
Esta vez llamaremos a esto getData1 -perfecto.

14:07.240 --> 14:14.770
Ahora si borro esto un poco y hago getData1 con el bloque try catch que obtengo

14:15.100 --> 14:15.910
'Ups'

14:15.920 --> 14:17.420
Error de tipo no captado.

14:17.510 --> 14:26.860
Así que obtengo el bloque catch con el error al igual que lo hicimos con la promesa. Solo usamos promesas.

14:27.400 --> 14:28.400
Y ahí lo tienes.

14:28.420 --> 14:29.250
Eso es.

14:29.330 --> 14:37.090
Async espera aunque intimidante al principio porque hay un poco de nueva sintaxis que realmente hace las cosas bastante

14:37.090 --> 14:40.130
aspecto agradable y sincrónico.

14:40.210 --> 14:48.370
Simplemente tenemos una variable a la que asignamos la promesa de esperar y luego la función se detiene allí

14:48.370 --> 14:53.710
hasta que la promesa regrese y luego continúe con el registro de la consola.

14:53.860 --> 14:59.690
Y solo tienes que recordar los bloques de captura de prueba aquí para detectar tus errores y eso es todo.

14:59.710 --> 15:02.280
Ahora estás esperando una asincronización Maestro.

15:02.350 --> 15:05.170
Puedes usar el que prefieras.

15:05.170 --> 15:12.370
Como dije al final del día, use promises o async aguarde funciones basadas en cualquiera que sea más simple

15:12.370 --> 15:19.510
para usted y su equipo, pero ojalá cuando se encuentre con ambos, ahora se sienta mucho más cómodo.

15:19.660 --> 15:21.570
Te veré en el próximo. Adiós.
