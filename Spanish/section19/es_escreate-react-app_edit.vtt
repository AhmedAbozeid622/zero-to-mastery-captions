WEBVTT

00:01.340 --> 00:02.130
Dar una buena acogida.

00:02.180 --> 00:06.380
Es hora de crear nuestra aplicación Robo Friends para comenzar.

00:06.500 --> 00:08.850
Bien, abramos nuestra terminal.

00:08.870 --> 00:11.050
Ya deberíamos sentirnos cómodos con eso.

00:11.480 --> 00:17.960
Para esta sección, realmente recomiendo codificar y seguir los procesos

00:17.960 --> 00:23.310
porque aprenderás mucho mejor haciendo esto tú mismo.

00:23.360 --> 00:24.530
Y como prometí.

00:24.530 --> 00:28.750
Es bastante fácil y tendremos una hermosa aplicación al final.

00:28.850 --> 00:35.450
Pero para aquellos que disfrutan de mirar y trabajar después, les proporcionaré los archivos finales de la aplicación

00:35.540 --> 00:38.190
Robo Friends al final de esta sección.

00:40.150 --> 00:40.590
OKAY.

00:40.860 --> 00:41.940
Entonces no tenemos nada todavía.

00:41.970 --> 00:43.470
Estamos en el escritorio

00:43.470 --> 00:52.940
Necesitamos realmente crear una carpeta de proyecto y necesitamos instalar reaccionar.

00:52.940 --> 01:01.490
Ahora, si recuerdas en NPM, podríamos instalar react y tenerlo como parte de nuestros paquetes en el paquete. json: pero hay una herramienta nuevamente

01:01.500 --> 01:02.350
porque

01:02.530 --> 01:07.480
las aplicaciones de reacción son muy comunes.

01:07.480 --> 01:15.320
Hay una herramienta que nos permite crear de inmediato una aplicación de reacción con todos nuestros archivos ya instalados.

01:15.370 --> 01:18.050
Se llama crear crear reaccionar

01:20.580 --> 01:21.280
aplicación.

01:21.680 --> 01:29.780
Esta herramienta es un paquete global que desea instalar desde NPM y crea un proyecto de inicio que contiene

01:29.810 --> 01:36.270
un paquete web que contiene babel para que podamos usar las últimas funciones de JavaScript.

01:36.620 --> 01:41.860
Contiene pelusa y depuración que todavía no hemos visto realmente.

01:41.990 --> 01:46.880
Crea toda esta infraestructura para usted, por lo que puede comenzar a escribir la aplicación de inmediato

01:46.880 --> 01:51.720
y es una herramienta muy buena que mucha gente usa, por lo que instalaremos create-react-app.

01:51.740 --> 01:55.880
Si recuerda que simplemente hacemos npm install dash

01:59.110 --> 02:04.130
g y esto nos dará crear-reaccionar-aplicación nuevamente si obtiene estos errores.

02:04.160 --> 02:07.220
Siempre recuerde hacer sudo ahora

02:14.550 --> 02:20.920
que tenemos create-react-app, simplemente decimos create-react-app y el nombre de nuestra aplicación.

02:20.940 --> 02:25.390
En nuestro caso lo llamaremos Robo Friends.

02:29.180 --> 02:36.010
Ves que está instalando un montón de cosas que necesitamos.

02:36.400 --> 02:44.260
Parece que fue un Robo Friends creado con éxito en mi directorio e incluso le da algunos

02:44.290 --> 02:52.600
buenos comandos npm start npm run build npm test npm run eject pero llegaremos a eso más tarde.

02:52.600 --> 02:55.940
Veamos qué tenemos en nuestra carpeta de escritorio.

02:57.120 --> 03:01.250
Tenemos amigos Robo que ya han sido creados para nosotros.

03:01.650 --> 03:03.270
OK vamos a cd en eso.

03:05.000 --> 03:14.690
Y ahora, si lo hago, parece que tenemos un montón de carpetas y archivos, como el paquete. json que ya se crearon para nosotros y los

03:14.690 --> 03:18.150
módulos de nodo, lo increíble es

03:18.170 --> 03:23.790
Ya instala reacciona y todas las dependencias que necesitamos.

03:23.930 --> 03:28.830
De hecho, si vamos al escritorio, vemos la carpeta aquí.

03:28.970 --> 03:31.690
Así que arrastremos esto a Sublime Text.

03:31.880 --> 03:36.740
Ábrelo y voy a cambiar las pantallas para que podamos ver

03:40.280 --> 03:42.190
ambas al mismo tiempo.

03:47.680 --> 03:56.180
Ahora, antes de mostrarle lo que hay en la carpeta, vemos que si vamos al paquete. json vemos las dependencias que tenemos

03:56.180 --> 03:57.530
reaccionar.

03:57.530 --> 04:04.880
Tenemos algo llamado react-dom y react-scripts y también tenemos un montón de scripts que ya

04:04.970 --> 04:07.160
han creado para nosotros.

04:07.160 --> 04:10.850
Tenemos inicio prueba de compilación y expulsión.

04:11.010 --> 04:16.710
Comencemos con start porque parece que start lee los scripts de reacción y

04:16.710 --> 04:18.210
arranca nuestro servidor.

04:18.210 --> 04:19.790
Así que voy

04:26.870 --> 04:35.990
a decir que npm start mira que tenemos en nuestro host local una aplicación de reacción de muestra para que todo funcione.

04:36.030 --> 04:40.200
No tuvimos que hacer nada excepto ejecutar dos comandos realmente.

04:40.470 --> 04:41.220
Muy genial.

04:41.400 --> 04:41.680
OKAY.

04:41.700 --> 04:46.530
Veamos qué crear-reaccionar-aplicación ha creado para nosotros.

04:46.530 --> 04:52.660
Tenemos un archivo Léame que es solo información que si recuerdas cuando lo ponemos en github,

04:52.710 --> 04:53.820
se mostrará

04:53.840 --> 05:01.040
en la carpeta del proyecto que tenemos en el paquete. json que nuevamente tiene sentido.

05:01.280 --> 05:03.500
Te explicaré lo que significan las dependencias.

05:03.530 --> 05:04.710
en el siguiente video

05:04.940 --> 05:12.110
Pero vemos que los scripts que nos proporcionan y todos usan scripts de reacción.

05:12.410 --> 05:16.540
Ahora reaccionar scripts es lo que hace que create-react-app

05:16.580 --> 05:22.960
sea tan increíble en lugar de que nosotros instalemos cosas como webpack y babel.

05:22.970 --> 05:29.330
¿Recuerdas cuánta configuración tuvimos que hacer para que JavaScript ES6 funcionara?

05:29.480 --> 05:36.170
Y luego también utilizamos browserify para agrupar los archivos JavaScript, los scripts de reacción hacen

05:36.170 --> 05:42.940
todo por usted y utiliza lo último y lo mejor de lo que no debemos preocuparnos.

05:42.950 --> 05:49.820
Por lo tanto, permite a las personas crear aplicaciones realmente muy rápidas y puede usar la expulsión si desea

05:49.820 --> 05:53.610
personalizar los scripts de reacción e ir por su cuenta.

05:54.020 --> 06:00.710
Entonces, a medida que su proyecto se hace más y más grande, siempre puede expulsar y personalizar su aplicación, es la mejor manera de

06:00.710 --> 06:02.450
comenzar un proyecto de reacción.

06:02.450 --> 06:06.920
Es administrado por el equipo de Facebook y es realmente muy bueno.

06:08.580 --> 06:09.060
OKAY.

06:09.230 --> 06:16.910
También vemos que hay bloqueo de paquete. json y este es un archivo que se genera automáticamente por

06:16.910 --> 06:18.390
paquete. json

06:18.620 --> 06:26.000
Se asegura de que los números de versión de sus dependencias estén bloqueados, de modo que si le doy este proyecto

06:26.000 --> 06:33.350
a otra persona en cualquier parte del mundo, nos aseguramos de que las versiones sean correctas para que funcione el 100

06:34.130 --> 06:35.300
por ciento del tiempo.

06:36.370 --> 06:40.900
También tenemos algo llamado git-ignore y tiene un punto delante.

06:40.900 --> 06:42.600
En realidad se llama un archivo de puntos.

06:42.850 --> 06:47.230
Y antes de ejecutar git y empujar este proyecto en github.

06:47.560 --> 06:54.460
Bueno, comprueba este archivo y si ve algo aquí que no debería incluir, automáticamente dice

06:54.460 --> 06:56.030
ignorar estos archivos.

06:56.200 --> 07:01.720
Así que recuerda cómo dije que los módulos de nodo no queremos llevar eso a un repositorio porque bueno, tenemos un paquete. json y crea un trabajo innecesario y

07:01.720 --> 07:08.950
esperamos para impulsar nuestro proyecto de nuevo, no nos importa la carpeta de módulos de nodo, no nos importa

07:08.950 --> 07:13.780
la carpeta de cobertura, que nuevamente se trata de pruebas, no necesitamos

07:13.780 --> 07:14.870
cubrir eso.

07:15.100 --> 07:18.430
Y tampoco nos importan las carpetas de compilación.

07:18.450 --> 07:25.940
Y un par de otros simplemente genera esto automáticamente para nosotros, no necesitamos tocarlo.

07:26.120 --> 07:32.810
Entonces, obviamente, tenemos nuestros módulos de nodos y puede ver aquí que hay un montón de

07:32.840 --> 07:36.940
ellos que nuevamente crear-reaccionar-aplicación simplemente crea para nosotros automáticamente.

07:36.990 --> 07:41.850
También tenemos una carpeta pública y aquí todo debería ser familiar.

07:41.850 --> 07:48.730
Tenemos indice. html tenemos algo llamado manifiesto. json Es una nueva característica

07:49.070 --> 07:56.750
que permite a las personas descargar un acceso directo a su sitio web y tener un icono en su escritorio.

07:56.750 --> 07:58.640
Pero, de nuevo, no tenemos que preocuparnos por eso.

07:58.760 --> 08:06.620
Y luego tenemos favicon. ico, que es el pequeño ícono que aparece en la parte

08:06.620 --> 08:13.060
superior aquí y puedes cambiarlo con lo que sea. archivo ico que desea y hay herramientas en línea para generar estos para usted.

08:13.070 --> 08:14.970
Otra vez algo de lo que no debemos preocuparnos.

08:16.520 --> 08:21.240
Y finalmente tenemos la carpeta src que es la carpeta fuente.

08:21.400 --> 08:25.090
Aquí es donde ocurre toda la reacción mágica.

08:25.370 --> 08:29.640
Si nos fijamos en el índice. js ese es el archivo de script principal.

08:29.660 --> 08:37.100
Estamos haciendo algunas importaciones que recuerda que solo estamos importando diferentes scripts y simplemente estamos diciendo esta

08:37.100 --> 08:40.720
nueva sintaxis que nunca antes habíamos visto.

08:40.730 --> 08:45.310
El documento de la aplicación de procesamiento ReactDOM obtiene el elemento por ID.

08:45.320 --> 08:46.890
OK, sabemos esto.

08:47.000 --> 08:55.420
Entonces, estamos tomando un elemento de la raíz de ID y estamos diciendo que la aplicación de procesamiento ReactDOM.

08:55.700 --> 09:02.120
Si vamos al índice. el archivo html que vemos aquí y tienen

09:02.130 --> 09:11.580
comentarios muy agradables que puedes leer, vemos que dentro del cuerpo solo hay un div este archivo noscript en caso de que un navegador

09:11.580 --> 09:13.260
no esté usando JavaScript.

09:13.260 --> 09:15.660
Nuevamente, no debemos preocuparnos por eso.

09:15.690 --> 09:18.360
Solo viene con el valor predeterminado porque es una buena práctica.

09:18.630 --> 09:23.960
Pero en el cuerpo solo tenemos este div con ID root y nada más.

09:23.980 --> 09:26.160
Sin embargo, cuando vamos a nuestra aplicación, vemos eso.

09:26.370 --> 09:28.270
Bueno, definitivamente hay algo allí.

09:28.360 --> 09:33.310
Hay al menos texto aquí y al menos un logotipo allí. Así que volviendo aquí.

09:34.550 --> 09:37.010
Sin saber ninguna reacción podemos decir eso.

09:37.170 --> 09:37.840
OKAY.

09:38.300 --> 09:48.820
Estamos tomando esta raíz de ID en el índice. js y estamos diciendo que queremos renderizar este componente de la

09:49.300 --> 09:54.750
aplicación y esto es lo que llamamos sintaxis JSX que abordaremos más adelante.

09:54.910 --> 09:59.030
Esta aplicación es la forma de reaccionar de decir que este es un componente de reacción.

09:59.050 --> 10:06.240
Y quiero que muestres esto en la pantalla del cuerpo para que

10:06.550 --> 10:13.550
pueda cambiar esto a Bueno, podemos decir h1 Hola Mundo.

10:14.120 --> 10:18.760
Hello World h1 Y ahora, si guardo esto,

10:19.680 --> 10:29.520
notará que reaccionar automáticamente lo compila para nosotros, así que no tengo que actualizar y mirar eso en

10:29.520 --> 10:32.490
nuestro sitio web que tenemos

10:32.670 --> 10:33.860
Hello World.

10:35.280 --> 10:36.490
Muy genial.

10:36.510 --> 10:39.450
Ahora, otra vez, otra gran cosa acerca de crear-reaccionar-aplicación

10:39.450 --> 10:43.670
También le da advertencias, dice que la aplicación está definida pero nunca utilizada.

10:43.680 --> 10:48.920
Entonces, si voy aquí, sí, estoy importando la aplicación, pero nunca la estoy usando.

10:48.930 --> 10:56.740
Así que también recibimos buenos consejos en nuestra terminal sobre cómo podemos mejorar la aplicación.

10:57.010 --> 10:57.490
OKAY.

10:57.750 --> 11:02.160
Lo último que quiero mostrarles antes de pasar a la siguiente sección es que en realidad comenzamos a profundizar

11:02.160 --> 11:05.800
en el código, ya que pueden ver que el color está un poco apagado.

11:05.820 --> 11:12.280
Y eso es porque Sublime Text realmente no entiende lo que está sucediendo aquí.

11:13.790 --> 11:21.080
Si cambiamos esto a Babel JavaScript, ya está.

11:21.230 --> 11:26.720
Obtenemos la buena sintaxis y todo se ve bien.

11:27.660 --> 11:28.500
Perfecto.

11:28.560 --> 11:33.260
Tenemos nuestra aplicación configurada. Quiero que cambies la etiqueta aquí a Hello

11:33.270 --> 11:33.900
World

11:33.900 --> 11:37.540
por ahora solo para asegurarte de que todo funcione.

11:37.660 --> 11:43.880
Pero por ahora tiene una configuración en el próximo video, vamos a revisar el resto de los

11:43.880 --> 11:47.270
archivos y realmente comenzaremos a construir nuestro primer componente.

11:47.300 --> 11:48.430
Va a ser muy divertido.

11:48.470 --> 11:49.410
Te veré en ese. Adiós
