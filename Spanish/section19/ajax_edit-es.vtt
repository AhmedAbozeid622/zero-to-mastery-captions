WEBVTT

00:01.060 --> 00:09.590
Bienvenidos a los videos anteriores que aprendimos sobre HTTP y JSON. Aprendimos que podemos enviar solicitudes

00:09.650 --> 00:14.830
y obtener respuestas. Pero hay un problema. Hasta ahora

00:14.920 --> 00:23.720
cada vez que necesitamos comunicarnos con el servidor hacemos esa solicitud, luego el navegador cuando recibe

00:23.870 --> 00:29.930
la respuesta hace una actualización de página. Originalmente

00:30.810 --> 00:35.710
cargar la página en la web era simple, enviaría una solicitud de un sitio web a un servidor.

00:35.940 --> 00:43.350
Y mientras nada vaya mal, los activos se descargarán en la página web y se mostrarán en su

00:43.350 --> 00:44.150
computadora.

00:45.280 --> 00:51.820
El problema con este modelo es que siempre que quiera actualizar alguna parte de la página, por ejemplo, mostrar

00:51.820 --> 00:59.390
un nuevo conjunto de productos como Amazon. Bueno, tendrás que cargar todo el programa nuevamente,

00:59.510 --> 01:09.050
incluso el contorno, incluso la barra de navegación en la parte superior. Todo tenía que volver a cargarse:una actualización completa de la página.

01:09.080 --> 01:16.070
Esto es extremadamente derrochador y resulta en una experiencia de usuario deficiente, especialmente a medida que las páginas se hacen más grandes y más

01:16.070 --> 01:17.770
complejo.

01:17.930 --> 01:20.220
Puedes pensarlo en el sitio web de Udemy.

01:20.810 --> 01:34.640
Si vamos a Udemy, bueno si hago clic en digamos marketing, la barra superior permanecerá. ¿Viste eso?

01:34.640 --> 01:37.230
Es una buena experiencia de usuario.

01:37.520 --> 01:41.500
Puedo hacer clic en las pestañas y no obtendré una actualización completa de la página.

01:41.510 --> 01:48.630
Está bien, carga datos automáticamente en la página.

01:48.640 --> 01:55.450
Ahora, este problema que tuvimos aquí condujo a la creación de tecnologías que permiten a las páginas web solicitar pequeñas

01:55.450 --> 02:04.520
trozos de datos como HTML, XML, texto plano, JSON y mostrarlos solo cuando sea necesario.

02:05.740 --> 02:07.990
Ayudando a resolver este problema de actualización.

02:09.340 --> 02:14.010
Y la tecnología se llamaba AJAX.

02:14.040 --> 02:22.470
Le permite leer desde un servidor web después de que la página se haya cargado y actualizar una página web sin necesidad de volver a cargar

02:22.470 --> 02:31.610
la página. Y finalmente envíe datos en segundo plano mientras el usuario está interactuando con el sitio web.

02:31.660 --> 02:40.000
Fue creado por primera vez por Google en 2006 y ahora es lo que esperamos de los sitios web y cualquier aplicación web que

02:40.000 --> 02:42.790
ver en línea utiliza Ajax ahora.

02:42.800 --> 02:50.920
Como Google tiene este gran problema cuando buscamos algo, bueno, inicialmente escribirías

02:50.920 --> 02:56.430
en 'apple' y haría una actualización completa de la página.

02:56.430 --> 03:03.270
Pero ahora con esto puedo mantener la barra superior y tener esto cargado.

03:03.410 --> 03:05.050
Incluso puedo tener sugerencias

03:07.980 --> 03:09.190
Criado desde el servidor.

03:09.300 --> 03:17.070
Y todo esto es una respuesta del servidor diciendo que estas son algunas de las sugerencias basadas en

03:17.080 --> 03:18.200
Tienda Apple.

03:18.650 --> 03:24.410
Entonces, fue un gran problema para Google y pudieron resolverlo con Ajax, pero ahora todos tenemos esto

03:24.410 --> 03:25.650
capacidad.

03:25.670 --> 03:27.530
Entonces, ¿cómo podemos hacer esto?

03:27.530 --> 03:37.430
"¿Qué es Ajax?" AJAX es solo una tecnología, un método para combinar piezas para lograr esto.

03:37.590 --> 03:46.280
Y se logró utilizando una herramienta que los navegadores crearon y se llamó solicitud XML HTTP.

03:46.620 --> 03:49.670
Se veía algo como esto.

03:50.130 --> 03:58.110
Creó un nuevo objeto de solicitud HTTP XML. Como pueden ver, se ve un poco difícil.

03:58.980 --> 04:08.810
Realiza una solicitud:realiza una solicitud de obtención en esta URL que dices onload cuando se carga. Si el

04:08.810 --> 04:15.200
estado la respuesta es mayor que 200 o menor que 400.

04:15.200 --> 04:16.300
Es un exito

04:16.310 --> 04:25.880
Vamos a analizar el texto de respuesta, porque estamos recibiendo una cadena del servidor. Si es

04:25.880 --> 04:36.640
no es un éxito, podemos devolver un error y luego enviamos nuestra solicitud y también escuchamos cualquier error.

04:37.320 --> 04:44.440
Parece bastante difícil, pero son cosas que hemos examinado. Pero no te preocupes, realmente no hacemos esto

04:44.440 --> 04:44.770
nunca más.

04:44.770 --> 04:49.560
Esta era la forma antigua de hacerlo cuando se introdujo Ajax por primera vez.

04:49.570 --> 04:52.980
jQuery vino y dijo que esto es algo difícil de hacer

04:52.980 --> 04:58.320
cada vez. Te lo haremos fácil solo haciendo esto.

04:58.550 --> 05:01.820
Y esa era otra parte de la razón por la que jQuery era popular.

05:01.820 --> 05:05.700
Podemos hacer las solicitudes Ajax haciendo este método.

05:06.050 --> 05:11.690
Pero ahora hay una manera aún más nueva y más nueva que hemos usado en realidad cuando construimos nuestra reacción

05:11.690 --> 05:17.220
aplicación y es compatible con los navegadores y eso se llama recuperación.

05:17.510 --> 05:26.930
Como recuerdas, fue a buscar en la URL y luego hicimos esto '.then (respuesta)' y recibimos una respuesta.

05:26.930 --> 05:31.790
Ahora esto es algo realmente bueno porque las actualizaciones de la página son mucho más rápidas y no tienes que esperar

05:31.790 --> 05:33.140
la página para refrescar

05:33.140 --> 05:36.660
Lo que significa que el sitio se siente más rápido y más receptivo.

05:38.390 --> 05:44.250
También se descargan menos datos en cada actualización, lo que significa menos ancho de banda desperdiciado.

05:44.750 --> 05:50.840
Y este es un problema importante, especialmente en dispositivos móviles donde la conexión a Internet podría no ser

05:50.840 --> 05:52.460
tan bueno.

05:52.580 --> 06:03.370
Ajax permite que las páginas web y, por extensión, las aplicaciones web cambien el contenido de forma dinámica y está en todas partes.

06:04.080 --> 06:06.510
Es algo que es muy agradable.

06:06.510 --> 06:14.140
Parece intimidante, pero es solo cuestión de hacer esto que HTTP hace por ti y por ti

06:14.140 --> 06:21.090
do es decir si desea hacer un GET, un POST y agregar algunos datos JSON a esa solicitud.

06:21.220 --> 06:29.460
Así que revisemos nuevamente lo que sucede con Ajax. Se produce un evento en una página web, como iniciar sesión y yo

06:29.460 --> 06:34.200
haga clic en iniciar sesión. Objeto de solicitud XML HTTP-

06:34.290 --> 06:41.280
De nuevo, se crea algo que los navegadores web han implementado y se crea mediante javascript.

06:41.560 --> 06:49.800
El objeto de solicitud HTTP XML envía una solicitud al servidor web donde el servidor procesa la solicitud y luego el

06:49.920 --> 06:54.500
el servidor envía una respuesta a la página web.

06:54.590 --> 07:03.650
La respuesta la lee javascript y el usuario puede iniciar sesión. Al mismo tiempo, solo se actualiza una pequeña

07:03.650 --> 07:06.490
porción de la ventana.

07:06.530 --> 07:12.380
Eso es lo que es una aplicación de una sola página y es una palabra que probablemente haya escuchado antes y es una tendencia

07:12.410 --> 07:21.770
en cómo hacer aplicaciones web. Donde cargas una base, una página casi vacía y construyes el contenido sobre la marcha

07:21.770 --> 07:25.010
basado en los datos obtenidos del servidor.

07:25.010 --> 07:27.790
Volvamos a Udemy.

07:27.900 --> 07:36.270
Cuando hago clic en un curso, hagamos "relaciones públicas", verá que esto se está cargando de uno en uno. tuve

07:36.810 --> 07:38.040
la barra superior cargada.

07:38.160 --> 07:41.350
Luego tuve una pausa y luego el resto cargado.

07:41.400 --> 07:45.900
Si hago clic en 'Explorar curso', verá nuevamente la barra superior cargada.

07:45.930 --> 07:50.540
Otras partes de la web se cargan dinámicamente de forma lenta.

07:50.620 --> 07:59.820
Y nuevamente, si vuelvo a 'fotografía', por ejemplo, partes de la página web se cargan dinámicamente y eso es

07:59.820 --> 08:06.890
la belleza. Estas aplicaciones casi nunca hacen una recarga completa, destruyen todo el contenido anterior o

08:06.890 --> 08:12.270
una parte de él y lo construimos en base a datos nuevos - página nueva.

08:12.470 --> 08:14.760
Y esto puede sonarle familiar.

08:15.720 --> 08:19.350
¿Recuerdas cómo construimos nuestra aplicación 'robofriends'?

08:19.740 --> 08:24.950
Buscamos esta URL que nos dio a los usuarios.

08:25.330 --> 08:30.260
Entonces, ahora que entendemos estos conceptos vamos a ir línea por línea y ver qué pasa.

08:30.280 --> 08:34.790
Usé fetch -based en lo que dije, Fetch debería ser parte del objeto de la ventana ¿verdad?

08:34.990 --> 08:41.500
Vamos a revisar. Si abro la consola y lo hago

08:41.730 --> 08:43.870
'window.fetch' sí

08:43.940 --> 08:53.520
fetch es una función que podemos usar y esta URL si recuerda devoluciones para nosotros-

08:53.620 --> 08:54.200
¿Que es eso?

08:54.220 --> 08:56.540
Sí, un objeto JSON.

08:56.800 --> 09:05.500
Y este objeto JSON, fetch nos permite hacer algo llamado response - 'response.json ()'.

09:05.840 --> 09:08.800
Bien, hagamos esto por ahora y veamos qué pasa.

09:08.810 --> 09:14.750
Voy a copiar y pegar esto. Voy a abrir la consola y sabes que voy a abrir

09:14.750 --> 09:17.180
una nueva pestaña para mostrarle que puede hacer esto desde cualquier lugar.

09:18.170 --> 09:25.770
Si copio y pego esta búsqueda, recibo algo llamado promesa y esto es algo en javascript

09:26.040 --> 09:27.630
a lo que te acostumbrarás

09:27.750 --> 09:34.050
Promise está diciendo "hey, estoy haciendo una solicitud en algún lugar a través de Internet y prometo informarte

09:34.050 --> 09:37.160
cuando tengo este valor devuelto ".

09:37.650 --> 09:42.310
Así que la forma en que accedes a la promesa es - entonces tienes esto:'una vez que esto sea devuelto

09:42.360 --> 09:43.540
dame el valor '.

09:43.620 --> 09:45.540
Tu haces '.then'

09:45.660 --> 09:51.600
y te da la respuesta. Si agrego a mi solicitud anterior.

09:51.920 --> 10:05.520
Y hago 'response console.log (respuesta)'.

10:05.690 --> 10:11.510
Mira que tengo una respuesta. Status 200 recordaremos esto.

10:11.720 --> 10:12.520
Ok, eso es bueno.

10:12.530 --> 10:19.690
Y también obtenemos este cuerpo pero dice flujo respirable. Y buscar

10:19.850 --> 10:25.930
Quiero decir que aprendimos sobre JSON.parse para analizar JSON.

10:26.340 --> 10:32.300
Pero fetch en realidad viene con su propio método llamado "json".

10:32.450 --> 10:39.770
Entonces en esta respuesta si hacemos "json" en realidad la convertirá para nosotros.

10:39.770 --> 10:49.310
Veamos. Si regreso nuevamente a esa solicitud, recibo una respuesta. Si en lugar de registrar la consola, digo

10:49.380 --> 10:51.320
'response.json ()'

10:51.530 --> 10:55.800
En ese caso, recibo una promesa nuevamente.

10:55.800 --> 11:03.300
Entonces eso significa que tenemos que hacer. Entonces recibir cada vez que esto devuelva la promesa que es el valor.

11:03.680 --> 11:07.440
Entonces, de nuevo, voy y hago.

11:07.600 --> 11:13.780
Y, en este caso, veamos qué datos recibimos, obtenemos datos y los datos de console.log.

11:17.680 --> 11:31.800
Si presiono enter Mira que recibimos a nuestros usuarios, los mismos usuarios que estuvieron aquí.

11:31.880 --> 11:40.160
Así que ahora ves que simplemente usamos la API de búsqueda que nos permite hacer una llamada AJAX después del componente

11:40.160 --> 11:40.740
montado.

11:40.880 --> 11:48.830
Así que una vez que nuestra aplicación Robo Friends se cargó hicimos una solicitud Ajax utilizando la API de búsqueda.

11:49.100 --> 11:53.350
Recibimos una respuesta que fue una promesa.

11:53.360 --> 12:01.190
Entonces, teníamos que hacer eso y esta respuesta, y esto es solo un estándar, que cada vez que busquemos obtendremos

12:01.190 --> 12:03.420
solo recuerda hacer .json

12:03.710 --> 12:11.270
Convertí esto en algo que bien podemos usar en javascript y porque esto nos devolvió una promesa

12:11.270 --> 12:21.440
lo hicimos. Entonces obtuvimos los usuarios y ahora tenemos el objeto de los usuarios y nunca tuvimos que actualizar la página.

12:21.510 --> 12:29.870
Y, por cierto, si quieres este JSON cada vez que accedas a él para que se vea más bonito y ser un poco

12:29.870 --> 12:36.560
Un poco más legible Estoy usando una extensión de Chrome llamada 'JSONView'.

12:36.590 --> 12:37.130
Es gratis.

12:37.130 --> 12:39.580
Usted simplemente lo agrega Chrome lo hace automáticamente por usted.

12:39.590 --> 12:43.000
Lo recomiendo altamente. Bueno

12:43.460 --> 12:46.030
volvamos a esto

12:46.040 --> 12:47.450
- Esto debería tener sentido ahora.

12:47.810 --> 12:56.670
Ahora tenemos la capacidad de cargar dinámicamente nuestras páginas web para hacer aplicaciones de una sola página usando AJAX y

12:56.750 --> 13:07.640
Ajax es una combinación de herramientas para usar la API de búsqueda, usando HTTP, usando JSON para comunicarse con

13:07.640 --> 13:08.630
servidores.

13:09.080 --> 13:20.000
Y ahora tenemos una imagen completa de nuestra interfaz. Nuestro front end puede tener HTML, CSS, javascript, reaccionar.

13:20.000 --> 13:31.670
Podemos usar AJAX para comunicarnos con los servidores y usamos datos JSON para enviar datos a través del cable. De Verdad

13:31.670 --> 13:33.660
emocionado por el siguiente par de videos.

13:34.500 --> 13:35.470
Entonces lo veré en eso. Adiós.
