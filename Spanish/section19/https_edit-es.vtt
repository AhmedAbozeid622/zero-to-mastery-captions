WEBVTT

00:01.450 --> 00:07.380
En 1989, Tim Berners-Lee inventó el código HTML que cambió el mundo.

00:07.400 --> 00:13.930
Pero HTML realmente no haría mucho si no pudiéramos obtener documentos de todo el mundo y diferentes computadoras.

00:13.930 --> 00:16.860
Para que eso suceda

00:16.870 --> 00:24.280
Tim creó el 'Protocolo de transferencia de hipertexto' o HTTP para abreviar.

00:24.290 --> 00:29.810
Ahora recuerda estas flechas de los diagramas que hemos tenido.

00:30.020 --> 00:37.070
Te dijimos que estas flechas eran simplemente los cables conectados que conectaban el mundo

00:37.250 --> 00:37.860
web.

00:38.840 --> 00:39.960
"¿Este derecho?

00:39.980 --> 00:46.590
Recordabas el diagrama. "Pero ves que estos son solo cables.

00:46.610 --> 00:53.840
No hay instrucciones sobre cómo hacer las cosas para lo que necesita algo llamado protocolo.

00:53.840 --> 01:00.830
Piense en ello como un estándar que todos siguen. Si todos están de acuerdo, entonces el protocolo funciona y puede ser

01:00.830 --> 01:11.570
utilizado por todos. El HTTP que tengo aquí es un protocolo que permite la búsqueda de recursos como HTML

01:11.700 --> 01:12.630
documentos.

01:12.670 --> 01:17.470
Quiero decir que está en el nombre correcto Protocolo de transferencia de hipertexto.

01:17.540 --> 01:24.120
Ahora, con el uso de HTML y HTTP, ahora tenemos la World Wide Web.

01:24.260 --> 01:31.610
Podemos tomar los archivos HTML y recibirlos si vamos a 'google.com/about' vamos a la

01:31.610 --> 01:34.260
Página HTML lo agarramos y lo recibimos.

01:34.280 --> 01:43.290
Entonces HTTP es el protocolo o las reglas que usamos a través de los cables.

01:43.440 --> 01:50.550
Es la base de cualquier intercambio de datos en la web y allana el camino para algo llamado cliente

01:50.730 --> 02:01.870
protocolo de servidor, lo que significa que las solicitudes son iniciadas por el destinatario, que en nuestro caso es el navegador web.

02:01.950 --> 02:09.240
Entonces envían una solicitud usando HTTP. El servidor ahora entiende lo que dice el navegador web porque

02:10.200 --> 02:18.000
está hablando en HTTP y el servidor ahora puede responder con HTML y el navegador lo entiende porque

02:18.270 --> 02:20.310
está hablando a través de HTTP

02:20.340 --> 02:21.780
Una vez más.

02:21.940 --> 02:29.950
Por lo tanto, debería pensar en HTTP como un lenguaje común que un cliente y un servidor pueden usar para comunicarse.

02:29.950 --> 02:33.930
Simplemente dicen Hey, ¿puedes darme este documento?

02:34.170 --> 02:36.570
Y el servidor puede decir que sí, no hay problema.

02:36.630 --> 02:37.920
Aquí está.

02:37.920 --> 02:43.330
Y hasta este momento, realmente no hemos hablado con un servidor en nuestra aplicación, ¿o sí?

02:43.440 --> 02:50.160
Construimos las aplicaciones de front-end o las aplicaciones de cliente usando HTML, CSS, javascript

02:50.190 --> 02:54.120
y reaccionamos, pero vivimos en nuestro propio mundo.

02:54.340 --> 03:01.860
Sin comunicaciones con otra computadora. HTTP nos permite ahora comunicarnos con los servidores, con el exterior

03:01.860 --> 03:02.990
mundo.

03:03.060 --> 03:06.050
Repasemos la terminología una vez más.

03:06.200 --> 03:15.780
Los clientes y servidores pueden comunicarse intercambiando mensajes individuales. Los mensajes enviados por el cliente

03:16.320 --> 03:28.180
generalmente un navegador web se llama solicitudes y los mensajes enviados por el servidor generalmente se llaman respuestas.

03:28.220 --> 03:35.120
Entonces, si HTTP es el lenguaje que nos permite comunicarnos entre estos dos, enséñame algunas de las

03:35.120 --> 03:35.990
palabras correctas

03:36.290 --> 03:37.690
Quiero decir que es una buena pregunta.

03:37.820 --> 03:44.690
Y afortunadamente para ti HTTP es bastante fácil de aprender porque solo tienes unas pocas palabras y voy a mostrar

03:44.690 --> 03:45.940
tú lo que son en este momento.

03:46.070 --> 03:51.910
Has 'GET' tienes 'POST' tienes 'PUT'.

03:51.990 --> 03:53.880
Y finalmente tienes 'DELETE'.

03:57.360 --> 04:00.130
y ahora estás pensando "umm ¿eso es todo?"

04:00.130 --> 04:04.880
Y sí, HTTP es hermoso porque es simple.

04:04.920 --> 04:06.660
No necesitas complicar demasiado las cosas.

04:07.750 --> 04:15.520
Aprendes estas cuatro palabras y estos idiomas y puedes construir la aplicación de tus sueños.

04:15.520 --> 04:18.810
Entonces, repasemos uno por uno. 'OBTENER' significa

04:18.820 --> 04:22.530
Bueno, quiero obtener un archivo HTML.

04:22.660 --> 04:28.360
Entonces pide algo y el servidor responde con esa solicitud.

04:28.420 --> 04:31.700
Un 'POST' dice que quiero publicar algo.

04:31.710 --> 04:38.410
Así que voy a enviar algunos datos a los servidores de Google y quiero que 'POST' -Quiero que lo agreguen

04:38.950 --> 04:44.520
a sus servidores o su base de datos. 'PUT' es

04:44.780 --> 04:46.530
Voy a enviarte algunos datos.

04:46.700 --> 04:51.950
Y quiero que actualice algunos datos que ya existen en los servidores de Google y simplemente actualice con este nuevo

04:51.950 --> 04:59.270
información y luego 'ELIMINAR' significa borrar bien una parte de los datos en el servidor, en los servidores o en el

04:59.270 --> 05:01.240
base de datos.

05:01.250 --> 05:08.270
Entonces, si usamos Twitter como ejemplo, 'GET' será para recibir el feed de Twitter con todos los tweets de

05:08.270 --> 05:18.450
hoy. 'POST' sería si creó un nuevo usuario y desea agregarlo a los servidores de Twitter. 'PONER'

05:18.600 --> 05:25.880
sería si hiciera un tweet pero quiere hacer un cambio o una edición para editar ese tweet y 'DELETE'

05:25.890 --> 05:32.080
significará bien que elimine su cuenta de usuario o elimine un tweet. Y no te preocupes, vamos a

05:32.080 --> 05:36.130
Úselos cuando lleguemos a la sección back-end y construyamos nuestro proyecto final.

05:36.520 --> 05:45.040
Ahora, a lo largo de los años, HTTP se ha ampliado para no solo preocuparse por el texto. No solo busca documentos de hipertexto

05:45.040 --> 05:53.500
como HTML, pero también imágenes y videos y publicar contenido en servidores como con los resultados de formularios HTML.

05:53.650 --> 06:01.300
y HTTP también se puede utilizar para buscar parte de los documentos para actualizar las páginas web bajo demanda que se llama AJAX

06:01.750 --> 06:04.900
y tenemos un video que viene hablando de esto.

06:05.020 --> 06:09.170
Pero la idea principal sigue en pie usando estos cuatro verbos

06:09.190 --> 06:13.230
Acabamos de enterarnos, ahora podemos comunicarnos con los servidores.

06:13.340 --> 06:13.630
Todo bien.

06:13.630 --> 06:23.220
Entonces, sabemos que esta flecha aquí arriba usa HTTP para hacer solicitudes usando uno de estos cuatro verbos.

06:23.230 --> 06:23.680
Bueno,

06:23.700 --> 06:27.630
así que creo que obtienes la parte de solicitud. Ahora,

06:27.700 --> 06:29.320
¿Con qué responde el servidor?

06:29.320 --> 06:30.770
¿Qué hay de la respuesta aquí?

06:30.850 --> 06:38.140
El servidor te envía dos cosas principales. uno es un mensaje HTTP.

06:38.210 --> 06:42.780
Eso es algo que definitivamente has visto antes y voy a vincular a esto

06:42.800 --> 06:49.360
Recursos de W3school un mensaje de 200 significa exitoso.

06:49.410 --> 06:57.250
Probablemente haya visto 200 OK antes de que haya visto 404 mensajes, lo que significa que no los encontró.

06:57.390 --> 07:03.530
Si ingresas una URL que no existe obtendrás un 404 y tal vez a veces obtengas un 500

07:03.570 --> 07:05.080
mensaje de error que es

07:05.230 --> 07:07.260
Bueno, hay algo mal con el servidor.

07:07.530 --> 07:15.000
Entonces, este es solo un código numérico que viene con cada respuesta que le dice la respuesta del servidor.

07:15.000 --> 07:16.080
Entonces esa es la primera.

07:18.390 --> 07:22.980
El segundo es generalmente algún tipo de datos como HTML.

07:23.190 --> 07:25.530
Y hasta ahora eso es lo que hemos estado haciendo HTML.

07:25.830 --> 07:31.160
Pero en los próximos videos te mostraré que puede enviar otras cosas además del simple HTML.

07:31.230 --> 07:33.600
Así que vamos a agregar a este diagrama ahora.

07:34.230 --> 07:43.760
Queremos decir que esto también tiene un código de estado y diremos 200 por ahora que todo estuvo bien y en

07:43.790 --> 07:50.770
la respuesta daría el código de estado más el nuevo archivo HTML.

07:51.020 --> 07:51.890
Todo bien.

07:52.070 --> 07:56.900
Demostrémoslo en línea para ver cómo se puede ver esta acción.

07:58.360 --> 08:04.410
Tengo aquí un gran sitio web llamado 'example.com' y es un sitio web simple que puedes visitar.

08:04.510 --> 08:05.330
ahora mismo.

08:05.440 --> 08:12.830
Pero lo bueno de esto es que si abres tu consola de desarrollador, hasta este punto hemos analizado

08:12.830 --> 08:20.450
la pestaña de elementos y luego la pestaña de la consola Quiero mostrarle la pestaña Red que tenemos aquí. Ahora

08:20.450 --> 08:21.620
la pestaña Red

08:21.980 --> 08:27.610
Es posible que deba hacer clic en algunos de estos íconos y verá que aparecerán cosas diferentes.

08:27.710 --> 08:30.900
Asegúrese de que el filtro se haya ido.

08:31.780 --> 08:39.960
Todo está sin hacer clic y ahora en 'example.com' mientras está abierto, simplemente actualice

08:43.010 --> 08:44.420
y mira eso.

08:44.600 --> 08:47.880
Voy a hacer clic en este icono que lo hace un poco más grande.

08:47.900 --> 08:52.010
Este es un complemento, así que no te preocupes por este javascript, pero lo mejor es que dice.

08:52.010 --> 08:55.940
"example.com" "Estado:200 OK"

08:55.970 --> 09:03.140
Y "Tipo:documento" e incluso me dice el tamaño:el tiempo que tardó en obtener esto, que es de 53 milisegundos ...

09:03.140 --> 09:04.760
Eso es bastante rápido.

09:04.760 --> 09:07.790
Entonces eso significa que el servidor respondió con 200.

09:07.790 --> 09:13.830
Si hago clic en esto obtengo un montón de cosas de las que realmente no tenemos que preocuparnos, pero algunas

09:13.830 --> 09:16.080
cosas 'Request URL'

09:16.080 --> 09:23.340
esto es lo que solicitamos Obtenemos un código de estado de 200 del servidor.

09:23.340 --> 09:31.280
Y si hacemos clic en la respuesta hay un mensaje de respuesta, recibimos el documento HTML del

09:31.280 --> 09:32.760
servidor.

09:32.860 --> 09:36.870
Si volvemos a los encabezados, también vemos que nuestro método de solicitud fue un 'OBTENER'.

09:36.970 --> 09:44.430
Hicimos una solicitud 'GET'. Vamos a cerrar esto y actualizar de nuevo.

09:44.490 --> 09:48.880
Ahora obtengo un estado 304. A 304

09:48.930 --> 09:55.050
Si miramos aquí significa que no modificado indica que la página de solicitud no ha sido modificada ya que

09:55.050 --> 09:59.150
último pedido. Porque ya he solicitado esto

09:59.170 --> 10:04.800
ahora Google es lo suficientemente inteligente como para decir oh, no voy a preocuparme por el servidor y solicitar el mismo

10:04.800 --> 10:05.640
cosa una y otra vez

10:05.640 --> 10:09.960
Ya lo tengo memorizado así que aquí está.

10:10.130 --> 10:10.730
Muy genial.

10:10.730 --> 10:13.740
Así que la pestaña Red es realmente muy útil para eso.

10:14.030 --> 10:14.420
Todo bien.

10:14.420 --> 10:20.330
Así que puedes seguir y jugar con 'example.com' y ver por ti mismo cómo funciona HTTP.

10:21.970 --> 10:29.590
Y, por cierto, sí, este HTTP que ves aquí eso es lo que significa cuando haces una solicitud HTTP, dice

10:29.680 --> 10:34.340
oye HTTP:estamos usando la red mundial.

10:34.640 --> 10:38.260
Y ve a solicitar esto desde el servidor.

10:38.450 --> 10:39.110
Muy genial.

10:39.140 --> 10:40.650
Y si te estás preguntando sobre el 's'.

10:40.670 --> 10:43.850
No se preocupe, le dejaré saber al final de este video lo que eso significa también.

10:46.410 --> 10:46.970
Todo bien.

10:47.120 --> 10:49.780
Ahora que pasa si quiero enviar datos.

10:49.850 --> 10:53.790
Si volvemos a nuestro diagrama, solo estoy haciendo una solicitud 'OBTENER'.

10:53.840 --> 10:58.090
Pero, ¿qué sucede si realmente quiero enviar información al servidor?

10:58.100 --> 11:02.120
Aparte de alguna URL que dice que quiero esta información.

11:02.120 --> 11:04.330
Bueno, hay dos formas en que puedes hacerlo.

11:05.440 --> 11:08.300
Uno es algo llamado cadena de consulta.

11:08.530 --> 11:13.140
Y luego el segundo es a través del cuerpo de la solicitud.

11:13.250 --> 11:20.450
Así que les voy a mostrar cómo funcionan los dos que tengo aquí, la forma que creamos en nuestro primer

11:20.660 --> 11:24.270
sección avanzada de HTML cuando solo conocíamos HTML.

11:24.860 --> 11:25.990
Vamos a abrir este archivo.

11:29.810 --> 11:30.850
Lo tengo aquí.

11:30.870 --> 11:34.650
Si hago doble clic -ahh, recuerdas esto, ¿verdad?

11:34.650 --> 11:37.990
Hemos recorrido un largo camino. Ene sta forma

11:38.100 --> 11:46.280
si recuerdas que teníamos un método de formulario 'GET' y ahora puedes entender lo que significa 'GET'.

11:46.320 --> 11:52.220
Está diciendo que con este formulario quiero que hagas una solicitud 'OBTENER'.

11:52.350 --> 11:59.960
Veamos qué sucede cuando hago clic en registrarme mientras abro la pestaña de red.

12:00.160 --> 12:04.000
Voy a hacer clic en 'Registrarse'.

12:04.010 --> 12:04.650
Todo bien.

12:04.730 --> 12:07.190
Entonces tenemos esta solicitud.

12:07.190 --> 12:14.810
Vemos que hemos hecho una solicitud y ha creado estas cosas llamadas cadenas de consulta.

12:14.840 --> 12:21.370
La primera forma de enviar datos al servidor. Con una solicitud 'GET' si desea enviar información a través de un

12:21.380 --> 12:29.710
formulario lo agrega a la URL usando este questionmark que dice "Hey, estoy por enviarte una consulta"

12:29.710 --> 12:34.400
cadenas y va a tener una clave y un valor.

12:34.630 --> 12:36.550
En este caso primer nombre, apellido

12:36.550 --> 12:38.310
todo está vacío, así que no hay información.

12:38.320 --> 12:42.110
Pero de lo contrario diré que el nombre es igual a Andrei.

12:42.400 --> 12:51.900
Si hago clic en esto, vemos que hay Parámetros de cadena de consulta que hemos enviado. Tenemos primer nombre,

12:51.960 --> 12:55.370
apellido, correo electrónico, contraseña y fecha de cumpleaños, que está en blanco.

12:55.710 --> 13:02.590
Pero si nos desplazamos hacia abajo en autos, el valor predeterminado es Volvo para que tengamos Cars:Volvo.

13:02.730 --> 13:07.140
Entonces esta información ahora se envía al servidor.

13:07.140 --> 13:10.260
Eso es parámetros de cadena de consulta usando 'GET'.

13:10.260 --> 13:12.390
Y mencionamos una cosa sin embargo.

13:12.480 --> 13:16.530
Vemos que tenemos una contraseña aquí que no es muy segura.

13:16.560 --> 13:27.850
Si volví al formulario y escribo 'secreto', hago clic en registrar nuevamente. Ahora tengo mi contraseña

13:28.270 --> 13:34.900
al aire libre enviado por el cable e incluso lo tengo aquí en mi barra de URL.

13:35.070 --> 13:35.370
Todo bien.

13:35.370 --> 13:36.350
Volveremos sobre eso.

13:37.790 --> 13:39.060
Entonces esa es una forma.

13:39.170 --> 13:44.930
La segunda forma es a través del cuerpo de la solicitud.

13:44.930 --> 13:48.210
Déjame mostrarte cómo funciona la forma en que enviamos información a

13:48.230 --> 13:57.110
el cuerpo es que usamos una solicitud 'POST' y esto es algo que verás con más frecuencia que una solicitud 'GET'

13:57.110 --> 14:04.690
es que queremos agregar algunos datos de formulario al servidor, entonces queremos publicar algo si cambio esto

14:04.690 --> 14:06.790
aquí voy a guardar esto.

14:06.970 --> 14:09.300
Y vamos a abrir una nueva pestaña.

14:10.430 --> 14:14.920
Con una nueva información guardada, esta es una forma de publicación.

14:15.010 --> 14:23.540
Si lo abro aquí y escribo la contraseña 'secreto', hago clic en '¡Registrarse!'

14:26.590 --> 14:32.230
Obtengo 'register.html' pero no cadenas de consulta.

14:32.350 --> 14:33.370
Si hago clic en esto,

14:36.350 --> 14:41.290
Veo que ahora en lugar de cadenas de consulta, se trata de datos de formulario.

14:41.480 --> 14:48.650
E incluso dice 'Content-Type:application / x-www-form-urlencoded'.

14:49.070 --> 14:57.830
Y esto es solo una forma HTML de decir que esta es una forma y este es el cuerpo pero no se muestra aquí.

14:57.860 --> 15:03.200
Así que ahora el servidor puede acceder no desde los parámetros de consulta y no se preocupe, le mostraré cómo servidores

15:03.200 --> 15:03.780
Haz eso.

15:03.860 --> 15:09.740
Cuando lleguemos a la sección de back-end. En lugar de acceder a él a través de los parámetros de consulta ahora puedo acceder

15:09.740 --> 15:12.160
a través de los datos del formulario.

15:12.170 --> 15:15.440
Volvamos al diagrama.

15:15.610 --> 15:22.850
Ahora comprendemos que podemos hacer solicitudes HTTP usando 'GET', 'POST', 'PUT' y 'DELETE'.

15:22.850 --> 15:35.140
Puedo usar cadenas de consulta que se encuentran en la parte superior de la URL para enviar los datos o el cuerpo de la solicitud

15:35.500 --> 15:41.350
y luego el servidor responde con un código de estado basado en cómo fue mi solicitud y la devuelve con

15:41.350 --> 15:42.440
una respuesta.

15:42.820 --> 15:52.290
Pero el único problema que vimos fue que la contraseña era visible en ambos casos, ¿no?

15:52.300 --> 15:57.550
Y qué pasaría si tuviéramos una persona de aspecto aterrador aquí.

15:57.560 --> 15:58.360
Ahí tienes.

15:58.580 --> 16:08.140
¿Qué pasaría si tuviéramos a una persona que mirara nuestra comunicación nuestras solicitudes HTTP y la monitoreara?

16:08.380 --> 16:15.370
Si utilicé cadenas de consulta para poner allí mi contraseña, él puede mirar por encima de mis hombros y ver

16:15.440 --> 16:18.790
oh la contraseña de Andrea es secreta

16:18.790 --> 16:29.510
Ahora puedo iniciar sesión en su cuenta de Google o si uso la forma corporal de enviar datos bien, él puede encontrar una manera

16:29.510 --> 16:33.460
para obtener esta solicitud para acercarse a él primero. Y

16:36.900 --> 16:44.160
Solo mire los datos del formulario y vea que mi contraseña es secreta. "Eso no es

16:44.180 --> 16:44.750
muy bueno ¿verdad?

16:44.750 --> 16:57.210
Bueno, una solución a esto fue la idea de HTTPS. Ahora HTTPS significa transferencia de hipertexto

16:57.240 --> 17:06.820
Protocol Secure y puede ver aquí que "W3C" usa la versión segura de HTTPS.

17:06.860 --> 17:11.280
La comunicación entre el navegador y los sitios web ahora está encriptada.

17:12.610 --> 17:13.330
¿Y qué significa eso?

17:13.330 --> 17:22.380
Encriptado solo significa que está mezclado para que solo el cliente y el servidor conozcan el pase secreto o

17:22.390 --> 17:25.360
clave secreta para leer el mensaje

17:26.740 --> 17:35.050
Y esta parte 'S' del secreto utiliza una tecnología llamada seguridad de la capa de transporte o su predecesora segura

17:35.050 --> 17:41.870
capa de sockets o TLS y SSL para abreviar.

17:41.920 --> 17:51.820
Ahora, incluso con HTTPS, si el atacante o lo que llamamos un hombre en el medio, la persona que está monitoreando

17:51.820 --> 17:58.030
nuestras peticiones Incluso si obtienen nuestra contraseña va a ser un jibberish completo que va a

17:58.030 --> 18:06.120
tener algo similar a esto y bueno, esa no es nuestra contraseña, así que va a ser insignificante, evita

18:06.170 --> 18:07.690
ese ataque.

18:07.690 --> 18:08.960
Este es solo el consejo.

18:09.280 --> 18:17.040
Como desarrollador, debes informar a todos tus amigos si alguna vez envías información confidencial, tal vez registrando

18:17.040 --> 18:18.330
en una cuenta bancaria

18:18.450 --> 18:26.130
Asegúrese de que haya HTTPS disponible si no hay HTTPS cuando envía, tal vez su inicio de sesión

18:26.130 --> 18:27.560
con tu contraseña

18:27.690 --> 18:30.250
Bueno, eso no es seguro.

18:30.400 --> 18:30.890
Todo bien.

18:31.010 --> 18:40.860
Revisemos. Su navegador web es un cliente HTTP que envía solicitudes a las máquinas del servidor. Cuando el navegador

18:40.920 --> 18:48.930
el usuario ingresa las solicitudes de seguimiento abriendo un archivo o escribiendo una URL o haciendo clic en un hipertexto

18:48.930 --> 18:50.500
vincular una etiqueta de anclaje

18:50.880 --> 18:56.530
El navegador crea una solicitud HTTP y la envía para comunicarse con el servidor.

18:56.730 --> 19:02.380
Ahora el servidor puede devolvernos la información. La primera versión que podríamos usar

19:02.470 --> 19:09.430
Parámetros de URL como 'www.google.com/about' y solo específicamente obtener HTML.

19:09.510 --> 19:11.020
Eso fue todo.

19:11.050 --> 19:18.950
Luego vino el formulario, así que ahora podemos enviar más datos además de la URL diciendo que

19:18.950 --> 19:20.880
quiero ir a este archivo HTML

19:21.260 --> 19:34.930
Ahora podríamos usar 'GET' o 'POST' para enviar datos. Ya sea a través de un cuerpo o una cadena de consulta y un servidor puede tomar

19:34.930 --> 19:40.540
acción basada en esos datos y devolver una nueva página.

19:40.630 --> 19:47.200
Y esta es la base de la web y cómo la red mundial que tenemos ahora fue posible. Mediante

19:47.380 --> 19:53.140
comunicación del servidor del cliente. En los próximos videos vamos a aprender aún más.

19:53.390 --> 19:56.820
Para entender realmente este poder, te veré en el siguiente. Adiós.
