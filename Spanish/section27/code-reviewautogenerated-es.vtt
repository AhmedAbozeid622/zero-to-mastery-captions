WEBVTT

00:01.000 --> 00:02.050
Dar una buena acogida.

00:02.050 --> 00:09.070
En este video, quiero hacer algo llamado revisión de código y específicamente para el front-end de nuestra aplicación

00:09.610 --> 00:14.710
una revisión de código es algo que desea hacer de vez en cuando cuando trabaja con su base de código

00:14.950 --> 00:17.400
porque siempre se puede mejorar

00:17.410 --> 00:23.650
Nunca es perfecto y el proyecto en el que hemos estado trabajando es bastante bueno, pero hay ajustes menores

00:23.890 --> 00:25.770
que podríamos hacer

00:25.780 --> 00:31.600
En este video, quiero pasar por un simple proceso de revisión de código para mostrarle cómo podemos mejorar el

00:31.600 --> 00:37.030
aplicación para que pueda tomar esta base de código y expandirla, hacerlo aún mejor, por su cuenta.

00:38.900 --> 00:40.700
Déjame mostrarte un error que tenemos.

00:40.970 --> 00:50.520
Si creo un nuevo usuario, Mike y Mike tienen un correo electrónico y una contraseña. Ahora si me conecto con Mike y tengo una

00:50.520 --> 00:59.620
muestra aquí que podemos usar. Si entro en esta cara, me levanto a la disección de mi cara, que es genial, pero

00:59.770 --> 01:05.590
cuando salgo ahora y me registro con un nuevo usuario, llamémoslo Wes

01:11.440 --> 01:17.830
Bueno, nunca borramos el estado de la aplicación de interfaz.

01:17.840 --> 01:24.810
Entonces, Wes ahora ve de alguna manera lo que Mike envió. Así que arreglemos esto.

01:24.810 --> 01:34.100
Si vamos a nuestra aplicación de front-end y vamos a abrir app.js, tenemos el onRouteChange que

01:34.100 --> 01:36.040
es llamado aquí

01:36.200 --> 01:42.610
cuando nos registramos Y cuando nos desconectamos, todo lo que hacemos es setState a isSignedIn:falso.

01:42.610 --> 01:51.090
Pero si miramos nuestro estado, nunca borramos el objeto del usuario, ¿verdad?

01:51.430 --> 01:55.060
El objeto de usuario que al principio era Mike sigue siendo el mismo.

01:55.270 --> 02:03.110
Y cuando volvemos a iniciar sesión como Wes, tenemos la información de Mike.

02:03.220 --> 02:07.080
Entonces podemos hacer algo interesante aquí, podemos simplemente crear un estado inicial

02:10.110 --> 02:20.330
así que fuera de la aplicación lo llamaremos estado inicial y este estado inicial tendrá todo este objeto

02:21.690 --> 02:32.080
para que este estado de punto sea el estado inicial.

02:32.090 --> 02:32.830
Todo bien.

02:32.960 --> 02:40.120
Y ahora podemos simplemente usar esta variable para cambiar onRouteChange cuando nos desconectemos.

02:40.130 --> 02:42.340
Queremos eliminar toda la información.

02:42.380 --> 02:55.700
Entonces, en lugar de hacer que SetState haya iniciado sesión en falso, podemos decir que queremos establecer el estado en initialState.

02:55.730 --> 02:56.750
Veamos si eso funciona.

02:57.620 --> 03:04.790
Voy a guardar volver a nuestra aplicación e iniciar sesión nuevamente como Mike.

03:12.250 --> 03:14.510
Y agarraremos esta cara otra vez.

03:20.460 --> 03:21.540
Cara se detecta

03:21.570 --> 03:26.100
Si nos desconectamos ahora e iniciamos sesión como Wes

03:33.240 --> 03:37.700
recibimos un error - solicitud incorrecta.

03:37.740 --> 03:40.990
Ah, y eso es porque yo mal interpreto su nombre.

03:41.010 --> 03:44.430
Intentaremos eso de nuevo. Inicia sesión. ¡De acuerdo!

03:44.460 --> 03:45.170
Ahí tienes.

03:45.360 --> 03:47.550
Ahora tenemos a Wes con un perfil claro.

03:47.560 --> 03:51.410
Él no sabe lo que Mike ha estado haciendo.

03:51.410 --> 03:51.690
Todo bien.

03:51.710 --> 03:56.610
Logramos arreglar un error que es genial.

03:56.810 --> 04:00.220
¿Qué más podemos hacer con esta base de código?

04:00.250 --> 04:08.320
Hay muchas cosas que creo que podemos limpiar, por ejemplo, siempre es importante tener una trampa

04:08.320 --> 04:12.490
declaración cada vez que haces algún tipo de búsqueda.

04:12.580 --> 04:19.950
Vemos que estamos usando fetch pero nunca captamos si por alguna razón esta respuesta de búsqueda a localhost

04:20.010 --> 04:23.230
la imagen falla alguna vez

04:24.500 --> 04:31.710
Lo único que atrapamos es capturar si falla la API de clarifai.

04:31.900 --> 04:36.310
Pero una buena práctica es tener siempre un punto de captura luego de hacer cualquier punto.

04:36.310 --> 04:45.480
Entonces podemos hacer algo simple como un registro de punto de la consola de captura para cerrar cualquier error que tengamos.

04:45.700 --> 04:52.210
Y eso es algo que mejorará lo que llamamos manejo de errores para asegurarse de que no tiene

04:52.240 --> 04:54.220
errores que ocurren sin que lo sepamos.

04:55.640 --> 05:03.580
Así que eso es algo que podemos mejorar, también tenemos los componentes de registro e inicio de sesión. Si tu recuerdas

05:03.590 --> 05:07.350
esos son muy similares, hicimos muchas copias y pegar.

05:07.490 --> 05:14.930
Y lo único que era realmente diferente con ellos eran estos valores de entrada. El formulario de registro tiene un extra

05:15.200 --> 05:20.860
campo que es el nombre, y el inicio de sesión, bien solo tenía correo electrónico y contraseña.

05:23.800 --> 05:24.820
Y no entraremos en eso

05:24.820 --> 05:31.900
en este video porque es bastante simple y hay muchas maneras de hacerlo. Pero podemos imaginarnos tal vez

05:31.900 --> 05:39.810
tener un componente compartido tal vez lo llamaremos formulario y esta forma acepta diferentes accesorios como entrada

05:39.880 --> 05:47.080
tipos para que podamos establecer y compartir ese componente entre el inicio de sesión y el registro por lo que no tenemos este duplicado

05:47.640 --> 05:52.510
código base

05:52.530 --> 05:52.990
Todo bien.

05:53.010 --> 05:53.780
Increíble.

05:53.800 --> 06:00.540
Así que eso es algo que podemos hacer con nuestra interfaz solo para mejorar algunos de nuestros errores y algunos de

06:00.540 --> 06:02.340
la duplicación de código.

06:02.790 --> 06:09.490
Probablemente podamos incluso poner esto en un componente contenedor para que App.js App.css y App.test.js

06:09.650 --> 06:12.320
están todos en un componente de contenedor.

06:12.510 --> 06:16.050
Pero en general, la parte delantera se ve bastante bonita y limpia.

06:16.080 --> 06:17.490
Bastante simple.

06:17.760 --> 06:24.330
A medida que ampliamos la aplicación, siempre podemos mover componentes y hacerlos cada vez más pequeños si queremos, así que

06:24.330 --> 06:25.490
quiero reutilizarlos

06:26.380 --> 06:32.470
Vemos que ya hablamos sobre cómo podemos desglosar el componente de inicio de sesión y registro. Quizás dentro del

06:32.470 --> 06:36.660
formulario de enlace de imagen si vamos a ese componente.

06:36.900 --> 06:42.360
Podemos dividir la entrada y el botón para que podamos reutilizarlo en alguna parte.

06:42.360 --> 06:48.340
Pero para una aplicación de este tamaño, creo que este es un lugar lo suficientemente bueno para abandonar esta aplicación.

06:48.570 --> 06:54.300
Pasemos al back-end y veamos cómo podemos mejorar el back-end.

06:54.510 --> 07:04.900
Recuerda aquí nuestra API, que está conectada a una base de datos, y tenemos nuestras cuatro rutas simples, y hemos

07:04.900 --> 07:06.790
mantuvo esto un poco desordenado.

07:08.240 --> 07:11.840
Hemos tenido todo en un solo servidor de archivos.js.

07:11.930 --> 07:19.590
Pero, idealmente, en cualquier proyecto grande no tienes un solo archivo que contenga todo.

07:19.800 --> 07:23.880
Aunque se trata de cuatro rutas, puede imaginarse cada vez más grande.

07:23.880 --> 07:31.280
Entonces, una cosa que me gusta hacer en el back-end es crear algo llamado carpeta de controladores.

07:34.630 --> 07:42.350
Y qué controladores tienen los controladores son cosas que controlan todo lo que sucede cuando se golpea un punto final.

07:43.560 --> 07:44.770
Déjame mostrarte lo que quiero decir.

07:44.840 --> 07:54.590
Voy a crear un nuevo archivo y este archivo dirá register.js y dentro de register.js

07:54.590 --> 08:01.980
podemos copiar esta función completa, esta transacción completa que usamos

08:06.380 --> 08:15.340
de modo que ahora tenemos apt dot post register y podemos llamar a la función aquí en lugar de tener toda esa información

08:15.340 --> 08:16.930
bloquear.

08:16.950 --> 08:26.670
Entonces digamos que vamos a llamarlo register dot handleRegister.

08:26.700 --> 08:27.860
Entonces, ¿cómo va a funcionar esto?

08:28.020 --> 08:34.370
Bueno, vamos al archivo de registro y voy a copiar la función que acabo de copiar

08:34.410 --> 08:35.160
fuera de allí.

08:37.110 --> 08:45.270
Al mirar el punto js del servidor, vemos que Register dot handleRegister obtendrá la respuesta de solicitud, por lo que

08:45.270 --> 08:52.840
que cuando se llegue al punto final de registro recibiré la solicitud y respuesta y me llamarán.

08:57.190 --> 09:00.820
Entonces, todo lo que haremos aquí es

09:03.710 --> 09:07.360
módulo dot exports.

09:07.630 --> 09:09.050
Si recuerdas esta sintaxis

09:13.740 --> 09:22.490
y aquí dentro tendremos una función de registro de control que crearemos.

09:22.720 --> 09:28.770
Y solo estamos exportándolo y esta función de registro de manejo será solo este bloque de función

09:28.770 --> 09:31.910
que estamos creando

09:31.950 --> 09:37.050
Entonces lo llamaremos const handleRegister.

09:37.220 --> 09:44.310
es igual a este bloque, pero es posible que notes un problema aquí.

09:45.800 --> 09:55.370
Tenemos la solicitud y la respuesta, pero no tenemos DB o bcrypt.

09:55.520 --> 10:01.940
Si ejecuto esta función en este archivo, obtendré un error que dice que no tengo idea de qué es bcrypt y que tengo

10:01.940 --> 10:05.510
no tengo idea de qué es DB y tenemos dos opciones.

10:05.840 --> 10:08.780
Podemos dentro de este archivo colocar el

10:12.050 --> 10:20.690
bcrypt y KNEX importan y se conectan a la base de datos o podemos pasarlos a la función.

10:20.690 --> 10:21.140
Deja que te enseñe.

10:24.030 --> 10:30.420
Dentro del registro, bueno, simplemente puedo hacer una respuesta de solicitud.

10:33.080 --> 10:45.630
Y esta respuesta de solicitud recibirá la respuesta de solicitud, así como la base de datos se conecta y bcrypt.

10:45.710 --> 10:51.760
Entonces tiene eso disponible. Esto que llamamos inyección de dependencia estamos inyectando las dependencias

10:52.210 --> 10:56.310
esta función de registro de mango necesita.

10:56.350 --> 11:08.280
Entonces, si retrocedemos y ahora cambiamos nuestros parámetros para incluir los que hemos establecido y guardar bien.

11:08.400 --> 11:11.050
Bajemos y veamos eso.

11:11.060 --> 11:11.240
Sí.

11:11.280 --> 11:14.860
Tenemos exportaciones modulares, todo se ve bien en este extremo.

11:15.670 --> 11:27.220
Si vuelvo al servidor y ahora aquí hago un const el registro requiere y le damos un

11:27.220 --> 11:28.000
camino.

11:28.060 --> 11:33.280
En nuestro caso, serán controladores y se registrarán.

11:36.740 --> 11:50.890
Entonces, veamos si esto funciona. Ir a Tim Tim en gmail dot com contraseña 1 2 3 registrarse y parece que estoy registrado.

11:51.110 --> 12:01.120
Si voy a mi base de datos y me aseguro de tener a Tim allí, puedo seleccionar la estrella de los usuarios.

12:01.120 --> 12:04.090
Está bien, tengo a Tim ahí y si voy a la mesa de inicio de sesión

12:09.410 --> 12:12.780
Tengo el correo electrónico de Tim también.

12:12.930 --> 12:15.390
Entonces no hemos cambiado ninguna de nuestras funcionalidades.

12:15.390 --> 12:23.100
Todo sigue funcionando pero la única diferencia es que ahora hemos hecho que el registro solo tenga uno

12:23.100 --> 12:32.280
alinee y sepárelo de la función de registro para que solo esté en este archivo. Entonces, si quisiéramos tener más

12:32.280 --> 12:39.720
cosas agregadas específicamente para registrar separamos estas preocupaciones de la lógica de registro para estar en este archivo.

12:40.870 --> 12:43.520
Y esta es una mejor forma de hacer las cosas.

12:43.660 --> 12:47.270
Entonces, hagamos lo mismo y hagámoslo también al resto de las funciones.

12:48.380 --> 12:51.910
Comenzaremos con el inicio de sesión ahora.

12:51.960 --> 13:02.990
Una vez más, copiaré esto y veremos que el inicio de sesión también requiere la bcrypt y la base de datos.

13:07.970 --> 13:24.760
Diré que la solicitud de respuesta se ejecutará con una función que es signin dot handle signin que

13:24.760 --> 13:27.160
tendrá una respuesta de solicitud

13:30.210 --> 13:32.890
DB y la brypt

13:35.680 --> 13:42.340
y hago esto más pequeño solo para que puedas ver mejor.

13:42.340 --> 13:42.640
Todo bien.

13:42.640 --> 13:56.660
Y podemos crear eso aquí diciendo requerimiento de inicio de sesión y crearemos ese archivo inmediatamente después de esto.

13:56.850 --> 13:58.640
Lo llamaremos signin.

14:03.900 --> 14:05.160
Yendo a los controladores.

14:08.210 --> 14:10.450
Parece que tenemos un error aquí, vamos a comprobar esto:14:13.370 --> 14:15.860
no puede encontrar el módulo porque lo estamos creando en este momento.

14:15.860 --> 14:35.000
Voy a decir que el nuevo archivo signin dot js copia y pega nuestra función y lo llamaremos handleSignin recibirá

14:35.030 --> 14:44.550
la base de datos y bcrypt a través de la inyección de dependencia y lo exportaremos

14:50.110 --> 14:54.770
handleSignin como handleSignin

14:55.160 --> 15:06.690
Ahorremos Asegúrate de que aún podamos iniciar sesión en nuestra aplicación. Nos desconectaremos, inicia sesión en Tim at gmail dot com

15:07.050 --> 15:12.460
y su contraseña fue 1 2 3 derecha, obtenemos un poco de error.

15:12.460 --> 15:16.360
Veamos. Esa solicitud

15:20.770 --> 15:25.970
Oh, queremos asegurarnos de que deletreemos ese derecho, bcript. Asegúrate de tener eso en el servidor también

15:26.100 --> 15:27.290
bcrypt.

15:27.440 --> 15:29.510
De acuerdo, demos una oportunidad.

15:29.510 --> 15:36.210
Iremos a firmar y tenemos a Wes en la contraseña de Gmail. 1 2 3 podemos firmarlo.

15:36.240 --> 15:36.930
Todo bien.

15:39.220 --> 15:41.900
OK, las cosas están empezando a parecer un poco más limpias.

15:43.480 --> 15:45.540
Continuemos con este de nuevo.

15:45.550 --> 15:48.000
Y puedes ver que hay un poco de repetición aquí.

15:49.210 --> 15:52.600
Pero espero que esto ahora tenga sentido.

15:52.600 --> 15:57.000
Sabemos que aquí no estamos usando bcrypt pero estamos usando la base de datos.

15:57.220 --> 16:01.790
Así que haremos una solicitud de respuesta

16:06.670 --> 16:07.920
diremos perfil

16:11.810 --> 16:14.570
handleProfile y diremos Get Here.

16:18.140 --> 16:27.670
Y se solicitará respuesta y el DB. Nuevamente crearemos un nuevo archivo llamándolo perfil punto js.

16:30.920 --> 16:45.200
const handleProfileGet que recibe el DB. Y, por supuesto, haremos módulos dot exports

16:49.360 --> 16:53.540
y haremos handleProfileGet y te mostraré de nuevo con ES6

16:53.540 --> 16:56.700
en realidad no necesitamos de-valor.

16:57.050 --> 17:02.170
Si hago esto, vaya al servidor, vamos a

17:04.900 --> 17:09.670
hacer perfil aquí y perfil.

17:09.670 --> 17:19.710
Y finalmente, hagamos nuestro punto final de imagen que no necesita bcrypt, pero sí necesita la dependencia DB.

17:19.840 --> 17:22.100
Entonces haremos una solicitud de respuesta

17:26.120 --> 17:32.280
image.handleImage solicita DB de respuesta.

17:35.410 --> 17:43.250
Crear una nueva imagen de archivo dot js

17:43.580 --> 17:45.170
Copia eso apropiadamente así tendré que

17:56.080 --> 17:58.300
handleImage

18:02.230 --> 18:04.030
módulo punto exportaciones

18:06.640 --> 18:07.550
handleImage

18:10.590 --> 18:13.500
y asegúrese de tener esa base de datos allí también.

18:15.220 --> 18:20.370
Regrese a nuestros servidores y asegurémonos de que este punto final de imagen funcione.

18:20.660 --> 18:23.470
Si vuelvo, el signo está como Wes

18:30.610 --> 18:37.060
y enviaré una cara aquí.

18:37.310 --> 18:41.250
Y no obtengo el punto de entrada, así que cometimos un error, volvamos aquí.

18:47.030 --> 18:52.820
la imagen no está definida y eso es porque arriba en la parte superior aquí

18:52.870 --> 18:55.630
aún no hemos importado

19:00.790 --> 19:07.260
controladores e imagen. Todo bien.

19:07.290 --> 19:08.370
Démosle una oportunidad.

19:08.490 --> 19:10.030
Asegúrate de que no tenemos ningún error.

19:12.520 --> 19:17.440
Intentemos de nuevo detectar que estamos haciendo uno.

19:17.440 --> 19:20.740
Y si detectamos nuevamente, somos dos.

19:20.740 --> 19:21.840
Todo está funcionando.

19:22.830 --> 19:23.600
Increíble.

19:24.030 --> 19:33.000
Así que eso fue un poco repetitivo, pero mira cuánto más limpio se ve nuestro servidor jds punto ahora.

19:33.000 --> 19:44.290
Solo tenemos archivos muy simples, muy simples, y alguien puede venir y mirar el servidor

19:44.320 --> 19:46.580
y saber exactamente cuáles son nuestros puntos finales

19:49.030 --> 19:53.850
Y cada vez que queremos agregar más funciones para manejar imágenes, tal vez no queremos hacer una solicitud posterior

19:53.950 --> 19:59.310
con una imagen tal vez con perfil, también queremos hacer una solicitud de eliminación.

19:59.500 --> 20:05.800
Podemos ampliar esto y saber exactamente dónde están nuestras preocupaciones con el perfil y solo importar

20:05.800 --> 20:09.230
en nuestro servidor como una forma de manejar las cosas.

20:09.280 --> 20:12.760
La última cosa que quería mostrarte es cómo podemos limpiar esto.

20:12.790 --> 20:17.980
Así que esto es realmente bueno porque puedes ver exactamente de qué depende cada función.

20:17.980 --> 20:24.790
Pero también puedes hacer algo como esto en lugar de declarar la función

20:28.640 --> 20:36.680
y ahora, debido a la forma en que hacemos esto, primero estamos ejecutando esta función con DB y bcrypt.

20:36.830 --> 20:41.760
Y luego recibe automáticamente la solicitud y la respuesta.

20:41.810 --> 20:43.980
Entonces esta función se ejecuta.

20:44.130 --> 20:51.370
A continuación, se solicita la respuesta a la solicitud.

20:52.510 --> 20:57.430
Y sé que es un poco confuso y está un poco avanzado, pero si recuerdas nuestras funciones

20:57.520 --> 21:04.480
Sección sección de función avanzada en javascript. Es similar a eso, podemos volver a nuestro identificador de manejo

21:05.110 --> 21:08.080
y dentro de aquí ahora podemos tener

21:14.780 --> 21:18.240
solicitar respuesta.

21:18.270 --> 21:22.980
Sé que esto parece un poco aterrador, pero veamos qué pasa si guardo esto

21:26.660 --> 21:35.330
inicia sesión como Wes y funciona bien agrega otra imagen aquí.

21:38.010 --> 21:41.220
Todo sigue funcionando.

21:41.410 --> 21:47.670
Y esto es un poco avanzado y puede tomar un tiempo para entenderlo.

21:47.680 --> 21:55.580
Tenemos una función que devuelve otra función y luego ejecuta esto.

21:55.660 --> 22:00.060
Pero si lo miras paso a paso, está bastante claro.

22:00.160 --> 22:03.610
Estamos ejecutando handleSignin con DB y bcrypt.

22:03.610 --> 22:13.720
Si volvemos a él, para volver a iniciar sesión estamos aprobando esto y luego también lo estamos cuando la firma se daña.

22:13.840 --> 22:20.790
Estamos pasando la respuesta de solicitud, de modo que estamos ejecutando la función de nuevo, solicitamos una respuesta.

22:21.010 --> 22:30.160
Para que este orden sea exactamente igual a este orden aquí mismo.

22:30.330 --> 22:36.330
Y esta es una cuestión de preferencia si esto te resulta un poco confuso puedes recurrir a este

22:36.330 --> 22:38.070
otra forma de hacerlo.

22:39.690 --> 22:45.180
No creo que uno sea mejor que el otro, solo es cuestión de preferencia, me gusta el hecho de que esto

22:45.180 --> 22:50.220
se ve mucho más limpio que la repetición aquí, pero podría ser más confuso para algunos miembros del equipo

22:50.220 --> 22:51.870
Quería mostrarte las dos formas.

22:53.850 --> 22:54.470
Todo bien.

22:54.470 --> 22:57.320
Creo que eso es suficiente para una revisión del código.

22:58.020 --> 23:01.500
Hemos hecho que este servidor sea un poco más limpio.

23:01.500 --> 23:05.880
Nuestro servidor dot js se ve muy bonito y bastante limpio.

23:05.880 --> 23:14.280
Aquí solo tenemos 35 líneas de código y sabemos exactamente dónde encontrar nuestros controladores.

23:14.280 --> 23:17.400
ruta se llama.

23:17.410 --> 23:19.090
De acuerdo, eso es todo por ahora.

23:19.090 --> 23:20.810
Te veré en el próximo video.

23:20.820 --> 23:21.330
Adiós.
