WEBVTT

00:01.070 --> 00:02.480
Dar una buena acogida.

00:02.480 --> 00:10.100
Quiero hacer una revisión rápida de nuestra seguridad y de cómo está funcionando nuestra aplicación en este momento porque poner un seguro

00:10.310 --> 00:19.650
la aplicación web en línea es una responsabilidad muy importante del desarrollador web. Regresemos a nuestra base de código.

00:19.750 --> 00:24.250
Hay dos problemas principales que veo hasta ahora.

00:24.280 --> 00:28.870
Lo primero es que no estamos haciendo nada llamado validación.

00:29.010 --> 00:39.820
Si voy a iniciar sesión aquí y voy a mi controlador de inicio de sesión si un usuario no ingresa el correo electrónico correcto

00:40.150 --> 00:45.460
o introduce algo que no esperamos que deje ese campo de correo electrónico en blanco o el campo de contraseña en blanco

00:46.860 --> 00:51.310
Bueno, ¿qué pasa entonces? Y lo mismo con el registro.

00:51.470 --> 01:00.800
Si vamos a registrarnos y un usuario no ingresa el correo electrónico o nombre o contraseña correctos, técnicamente

01:00.800 --> 01:09.230
Todavía los registra porque si dejamos el correo electrónico en blanco, el nombre en blanco, la contraseña en blanco, simplemente ingresarán un espacio en blanco

01:09.260 --> 01:10.810
usuario en la base de datos.

01:12.160 --> 01:14.670
Vamos a la aplicación y le mostraremos lo que eso significa.

01:15.460 --> 01:23.480
Si dejo esto en blanco y hago clic en registrar, miro que estoy ingresado en la aplicación y si vuelvo a la

01:23.480 --> 01:24.170
base de datos

01:26.910 --> 01:37.200
y vaya a los usuarios que veo un usuario en blanco. Y esto no es muy dañino, pero muestra un tema importante

01:37.200 --> 01:44.790
en el que realmente quieres concentrarte en tu aplicación y eso es la validación, asegurándote de que cuando te comunicas

01:44.790 --> 01:49.520
entre el frente y la parte de atrás hay algunas capas de seguridad.

01:49.620 --> 01:54.420
Primero, el Front-End hará su propia validación.

01:54.420 --> 02:03.670
Por ejemplo, si vamos a la página de inicio de sesión o a la página de registro dentro de nuestro front-end dentro de nuestra reactivación

02:03.670 --> 02:10.100
la aplicación que realmente comprobaremos antes cuando haga clic en registrar tendrá un botón Enviar.

02:10.330 --> 02:18.360
Y en el envío va a verificar que el nombre no esté vacío, el correo electrónico tiene el formato de correo electrónico correcto

02:18.450 --> 02:26.830
como tener un signo at o un punto com al final y luego la contraseña tendrá algún tipo de validación para

02:26.830 --> 02:33.690
digamos que tiene que ser mayor a seis caracteres. Y ahora la interfaz envía esa información validada

02:34.320 --> 02:40.520
al backend y una cosa importante que quiere asegurarse con su servidor es que el servidor

02:40.520 --> 02:45.590
nunca confía en nada recibido desde el frente.

02:45.640 --> 02:48.050
Por lo tanto, debe hacer su propia validación.

02:48.070 --> 02:56.470
Es para verificar el nombre y la contraseña del correo electrónico y asegurarse de que haya valores que quiera ingresar y realizar transacciones

02:56.590 --> 02:58.030
en la base de datos.

02:58.920 --> 03:14.470
Una forma en que podemos hacer esto. Bueno, podemos simplemente decir eso si el correo electrónico o el nombre o la contraseña y podemos simplemente hacer el

03:14.800 --> 03:17.070
no es así, eso es todo lo contrario.

03:17.320 --> 03:20.700
Entonces, si esto está vacío, se convertirán en verdaderos.

03:20.740 --> 03:24.500
Si está vacío, se convertirá en verdadero, está vacío y se convertirá en verdadero.

03:24.580 --> 03:30.280
Entonces, si alguno de estos está vacío, solo podemos responder el estado

03:32.710 --> 03:33.370
400

03:36.330 --> 03:40.910
y podemos simplemente responder con el envío de formulario incorrecto.

03:43.710 --> 03:45.420
Vamos a guardar esto y ver qué pasa.

03:47.570 --> 03:53.500
Lo salvaré Lo único que quiero hacer es volver a mi base de datos y ejecutar mi PSQL

03:53.500 --> 03:53.850
aquí.

03:53.890 --> 03:58.540
Si voy a iniciar sesión o a los usuarios, quiero eliminar el usuario vacío.

03:58.540 --> 03:58.800
Ahora

04:02.920 --> 04:07.130
y este es muy perfecto

04:07.350 --> 04:09.570
Si vuelvo aquí e intento hacer clic en registrar

04:12.780 --> 04:15.470
Todavía obtengo el registro.

04:15.490 --> 04:19.180
Eso es porque si regreso veo que me sale un error aquí

04:23.080 --> 04:26.050
y obtengo "no puedo establecer encabezados después de que se envían".

04:26.590 --> 04:33.430
Y esto es un pequeño truco porque si vas aquí y abres la consola.

04:33.660 --> 04:44.890
Está bien, tenemos una mala solicitud del servidor, pero esta declaración if se ejecuta y luego continúa

04:44.890 --> 04:52.810
y hace esto también porque recuerda para finalizar la ejecución dentro de una función, tenemos que decir

04:53.050 --> 04:53.670
regreso.

04:53.920 --> 05:01.870
Entonces, si esto se ejecuta, regresa de esta función y esta parte nunca se ejecuta.

05:03.480 --> 05:14.860
Déjame que guarde eso, vuelve a nuestra aplicación ahora vamos a actualizar aquí. Haremos un usuario en blanco.

05:14.950 --> 05:21.100
Nuevamente estamos ingresando porque ahora cuando vayamos a la parte delantera si lo recuerda en nuestro registro

05:21.100 --> 05:26.030
archivo en el frente cuando haga clic en Registrarse.

05:28.890 --> 05:30.180
Bueno, estamos buscando

05:32.690 --> 05:40.640
y solo estamos verificando si el usuario y este usuario están respondiendo aquí con el envío de un formulario incorrecto

05:41.060 --> 05:43.400
el usuario será eso.

05:43.400 --> 05:51.530
Así que vamos a verificar aquí la ID. Ahorramos y recordamos, esto es algo que hicimos con nuestro inicio de sesión

05:51.560 --> 06:00.310
también en los videos anteriores si retrocedemos regresemos para intentar registrarnos.

06:00.780 --> 06:06.430
No me deja porque si abro la consola no pude cargar los recursos.

06:06.430 --> 06:17.400
Si voy a la red, inténtelo de nuevo, vaya a registrarme y recibo una "presentación incorrecta del formulario".

06:17.520 --> 06:19.530
Entonces eso es realmente muy importante.

06:19.560 --> 06:28.460
El servidor y el cliente deben hacer su propia validación y asegurarse de que maneje todas las posibilidades.

06:28.530 --> 06:35.610
Si un atacante, por ejemplo, ingresa un fragmento de código realmente muy malo en lugar de un correo electrónico. Bueno, necesitamos

06:35.610 --> 06:42.260
para validar en contra de eso y asegurarse de que tomemos las medidas adecuadas basadas en eso.

06:42.430 --> 06:49.220
Entonces podemos agregar cosas como esta en otras partes de nuestra aplicación, especialmente en aquellas en las que aceptamos comentarios.

06:49.510 --> 06:57.760
Afortunadamente para nosotros, eso es para nuestro registro y luego tenemos nuestro registro también.

06:57.760 --> 07:05.430
Y luego para el inicio de sesión simplemente podemos copiar y pegar y aquí estamos usando request dot dot dot email

07:05.550 --> 07:10.740
y contraseña para que podamos simplemente simplemente reestructurarlo de nuevo

07:13.540 --> 07:17.310
contraseña de pedido cuerpo de punto

07:20.360 --> 07:21.390
eliminaremos el nombre

07:25.190 --> 07:34.300
y nuevamente, eliminaremos el cuerpo del punto de solicitud de estos solo para hacerlo un poco más limpio.

07:34.460 --> 07:37.270
Y si guardo esto, esto debería funcionar también.

07:37.640 --> 07:40.610
Vamos a iniciar sesión, asegúrese de que no pueda iniciar sesión.

07:40.730 --> 07:41.260
Perfecto.

07:41.270 --> 07:51.570
Y si voy a Wes at gmail dot com Uno dos tres inicia sesión, puedo iniciar sesión.

07:51.590 --> 07:54.550
De acuerdo, esa es la primera parte de la seguridad que quería cubrir.

07:54.890 --> 07:59.170
Obviamente hay algunas cosas más que podemos hacer aquí, pero creo que entiendes la idea.

08:00.570 --> 08:09.160
Lo siguiente, y otra falla importante en nuestra aplicación, es que cuando enviamos una imagen agarremos esto

08:12.200 --> 08:14.880
y vamos a abrir la pestaña.

08:15.320 --> 08:18.020
La pestaña de red aquí haga clic en detectar

08:20.930 --> 08:25.600
y si miras bien el punto final de la imagen cuando lo solucionamos.

08:25.610 --> 08:31.560
Pero si mira los resultados, aquí es donde le pedimos API clarifai para la solicitud.

08:31.580 --> 08:43.650
Si hago clic en esto y miro los encabezados y miro la autorización, obtengo la clave con DCB17e ...

08:43.690 --> 08:49.290
Y si vuelvo al Front-End y debajo de la aplicación punto js

08:55.810 --> 08:58.170
DCB17e ...

08:58.180 --> 08:59.970
Esa es nuestra clave API.

09:00.390 --> 09:03.520
Estamos creando nuestra clave API, que en mi caso es gratuita.

09:03.520 --> 09:11.190
Pero cuando utilizas una API que cuesta dinero, alguien puede robar esta información y usar tu API

09:11.350 --> 09:19.690
solo cargar esa API con solicitudes y hacerle pagar mucho dinero y nunca quiere hacer esto cuando

09:19.690 --> 09:22.090
estás jugando como desarrollador en tu propio proyecto.

09:22.090 --> 09:23.230
Esta bien.

09:23.590 --> 09:26.560
Pero cosas como esta no deberían suceder.

09:26.560 --> 09:31.880
Entonces, una cosa que podemos hacer para evitar esto es mover esto al backend en lugar del front end.

09:32.200 --> 09:33.510
Déjame mostrarte cómo podemos hacer eso.

09:36.800 --> 09:44.390
Vamos a volver a nuestra parte delantera y en nuestro frente voy a copiar el clarifai

09:44.390 --> 09:49.440
información al Backend y eliminarlo de la interfaz.

09:49.910 --> 09:56.490
Entonces, si recuerdas, tenemos que instalar Clarifai en la parte de atrás, así que voy a detener el servidor y

09:56.490 --> 10:02.370
hacer NPM instalar Clarifai para que tengamos el paquete dot json

10:06.500 --> 10:14.230
lo importaremos esta vez usando require.

10:14.250 --> 10:16.200
Así que vamos a nuestra imagen de manejar

10:19.250 --> 10:29.860
y luego la imagen del mango que acabaremos de importar y en lugar de importar haremos que const clarifai sea igual a requerir

10:32.150 --> 10:41.550
clarifai y copiaremos exactamente lo que tenemos en nuestra aplicación y queremos eliminar esto para cortar

10:41.550 --> 10:42.120
esto afuera

10:46.840 --> 10:48.730
utiliza nuestra clave API aquí.

10:52.680 --> 11:01.940
Luego, al desplazarnos, echamos un vistazo a dónde utilizamos nuestra clave API en nuestro caso, aquí está la aplicación.modelos.

11:02.280 --> 11:08.940
Y aquí queremos simplemente hacer el clarifai y luego tomar nuestra respuesta.

11:09.090 --> 11:11.210
Entonces esta parte inferior la podemos mantener.

11:11.210 --> 11:19.620
Solo necesitamos que la llamada a clarifai venga desde el back-end, así que copiaremos eso.

11:19.670 --> 11:20.900
Regresa a nuestra espalda endand

11:24.110 --> 11:31.320
pongámoslo en su lugar porque ahora tenemos la aplicación de la nueva instanciación de clarifai y ahora lo haremos

11:31.320 --> 11:33.500
necesito agarrar la entrada.

11:33.570 --> 11:40.210
Entonces parece que necesitaremos un nuevo punto final. Vamos a limpiar esto un poco y predecir

11:42.580 --> 11:43.380
clarifai

11:46.470 --> 11:49.950
hagámoslo aquí solo para que podamos ver mejor. Voy a minimizar esto un poco

11:52.860 --> 12:03.780
y los modelos de punto de aplicación predicen que lo predeciremos con nuestra entrada de punto de cuerpo de punto de solicitud que obviamente

12:03.780 --> 12:04.470
no tengo.

12:04.490 --> 12:09.980
Pero ahora sabemos que necesitamos la información y podemos envolverla en una función como esta.

12:10.140 --> 12:20.560
Podemos decir const handleApiCall y este recibirá una respuesta de solicitud

12:25.280 --> 12:30.230
y vamos a mover esto aquí.

12:30.300 --> 12:39.550
Así que ahora podemos decir simplemente manejar la llamada API en la parte inferior aquí y en nuestro servidor podemos crear un nuevo

12:39.550 --> 12:48.710
punto final para Image y podemos hacer una solicitud posterior porque lo agregaremos a nuestra solicitud dot body y

12:48.710 --> 12:50.540
llamaremos a esa imageurl

12:50.570 --> 12:59.900
y el punto final imageurl tendrá el handleApiCall.

13:00.040 --> 13:07.240
No necesitará la base de datos. Definitivamente tendremos que importarlo, pero ya lo tenemos en el objeto de imagen.

13:07.240 --> 13:17.220
De acuerdo, entonces si guardo esto, debemos asegurarnos de recibir el cuerpo con la URL, por lo que vamos a

13:17.220 --> 13:18.940
la parte delantera.

13:19.190 --> 13:28.980
Le diremos que en el envío debemos buscar y copiar esto.

13:28.980 --> 13:36.780
Lo que tenemos aquí por ahora. Queremos buscar imageurl.

13:37.010 --> 13:49.310
Va a ser un método de publicación y tendremos un json de entrada y esa entrada simplemente será que este

13:49.310 --> 14:01.700
estado de entrada DOT. Eso nos dará una respuesta y esa respuesta seguirá bajando de esta manera.

14:01.810 --> 14:08.220
Pero ten en cuenta que, debido a que esto es un alcance, tendremos que hacer una respuesta dot json.

14:08.470 --> 14:16.550
Así que eso es lo suficientemente simple como para arreglar la sangría aquí y haremos un punto, entonces la respuesta es igual

14:18.530 --> 14:19.760
respuesta punto Jason

14:22.420 --> 14:28.510
Guardaremos y querremos volver y asegurarnos de que esto funcione.

14:28.510 --> 14:41.660
Así que vamos a nuestro servidor ve a la imagen y asegúrate de que estamos respondiendo aquí con el punto, luego los datos y

14:41.660 --> 14:43.180
esta información tendrá una respuesta dot json

14:43.260 --> 14:51.470
de datos. Lo que sea que esto nos dé Si hay algún tipo de error, haremos una trampa.

14:54.470 --> 14:56.420
Diré el estado de respuesta 400.

14:59.050 --> 15:00.810
Bien hecho.

15:00.810 --> 15:12.900
json "incapaz de trabajar con API". Ahorremos Veremos si esto funciona la primera vez.

15:12.920 --> 15:23.930
Por lo general, no es así, pero si iniciamos sesión con Wes en Gmail punto com 1 2 3 inicia sesión, tenemos un pequeño problema.

15:25.420 --> 15:29.060
Vayamos a consol - no se pudo recuperar

15:32.090 --> 15:38.040
Oh, necesitamos realmente NPM iniciar nuestro servidor.

15:38.110 --> 15:39.510
Está bien y ahora tenemos algunos errores.

15:39.520 --> 15:40.660
Todo bien.

15:40.660 --> 15:47.510
Nos faltan corchetes, así que acabamos de hacer un poco de error de sintaxis aquí y eso es porque

15:47.510 --> 15:50.270
Olvidé un período aquí.

15:50.270 --> 15:51.390
Vamos a guardar eso.

15:51.920 --> 15:58.810
Y si vamos a nuestra parte frontal ejecutándose, la parte trasera se está ejecutando. Vamos a cerrar esto y probar esto de nuevo.

16:00.170 --> 16:01.190
Está bien, estoy registrado.

16:01.250 --> 16:09.680
Si copio esta imagen nuevamente Momento de la verdad.

16:09.790 --> 16:10.180
Todo bien.

16:10.180 --> 16:17.820
Estamos obteniendo la imagen, pero la respuesta, algo no funciona. No hemos podido recuperar la respuesta del servidor

16:17.900 --> 16:20.390
con un estado de 500.

16:20.390 --> 16:24.140
Entonces, recibimos un error en el servidor y parece que

16:26.740 --> 16:29.620
manejar llamada API no es una función.

16:29.650 --> 16:39.010
Así que vamos al servidor y mi terrible error de ortografía nuevamente. Esto siempre te lleva a la ortografía.

16:39.040 --> 16:41.150
Probemos eso una vez más.

16:41.340 --> 16:47.710
Limpiaremos esto y lo detectaremos. Sin errores.

16:47.750 --> 16:48.480
Todo bien.

16:48.570 --> 16:49.410
Mira eso.

16:49.680 --> 16:51.120
Eso está funcionando.

16:51.120 --> 16:52.100
Asombroso.

16:52.530 --> 16:59.340
No veo errores en mi API o en la interfaz.

16:59.420 --> 17:00.510
Entonces eso no estuvo mal.

17:00.590 --> 17:08.100
Y si de hecho vuelvo a la solicitud, vaya a la pestaña de red y revisemos esto, voy a presionar

17:08.100 --> 17:12.810
detectar si voy a imageurl.

17:13.060 --> 17:15.560
No estamos viendo ninguna de nuestras llaves.

17:15.580 --> 17:21.780
Lo único que estamos viendo es una respuesta que es la respuesta que obtenemos de clarifai pero nuestro servidor

17:21.780 --> 17:25.850
se está ejecutando en nuestro propio entorno y nadie tiene acceso a él.

17:27.290 --> 17:30.110
Así que repasemos lo que acabamos de hacer.

17:30.200 --> 17:39.720
Creamos un nuevo punto final y porque ahora tenemos nuestros propios controladores y se trata de la imagen que

17:39.720 --> 17:46.500
puede agregarlo a los controladores de imagen y dentro de los controladores de imagen creamos una nueva función y solo

17:46.500 --> 17:54.480
prácticamente copiar y pegar exactamente como teníamos en el frente y respondimos con datos de Json y

17:54.480 --> 17:59.400
estos datos de Json ahora se envían como respuesta JSON.

17:59.790 --> 18:09.920
Entonces, al principio, simplemente creamos una solicitud de recuperación que envió la entrada y respondimos con una respuesta.

18:10.290 --> 18:14.630
Así que no cambió mucho en la parte frontal, excepto por el hecho de que ahora estamos ocultando la clave API.

18:14.760 --> 18:21.030
Y en lugar de tener clarifai aquí, lo tenemos en el back-end.

18:21.280 --> 18:26.630
Espero que hayan sido algunos consejos valiosos de seguridad para ti.

18:26.650 --> 18:31.130
Hay muchas cosas cuando se trata de seguridad y definitivamente es algo que tienes que conseguir

18:31.130 --> 18:35.190
solía tener más y más años de experiencia.

18:36.250 --> 18:43.900
Pero teniendo esa regla general de asegurarse de que su máquina o en nuestro caso su base de código de frente

18:43.900 --> 18:49.210
final y posterior y nunca confía en la seguridad del otro siempre se enfoca y se asegura de que sea lo que sea

18:49.220 --> 18:55.650
las entradas que obtiene de otros lugares fuera de él siempre se validan.

18:55.780 --> 19:00.510
Y protegemos todos los secretos que tenemos del mundo exterior.

19:00.610 --> 19:04.760
Nunca confíes en nadie es más o menos el lema en materia de seguridad.

19:05.570 --> 19:08.680
Así que espero que sea revelador y lo veré en el próximo video.

