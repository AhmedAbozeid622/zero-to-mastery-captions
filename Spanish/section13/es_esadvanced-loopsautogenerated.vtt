WEBVTT

00:00.870 --> 00:07.300
Bienvenido de nuevo. Quiero hablar un poco sobre el bucle de JavaScript.

00:07.430 --> 00:13.760
Verán, de hecho, omití algunas otras formas en que podemos buclear en JavaScript.

00:13.790 --> 00:23.270
Hemos hablado de que nuestros cuatro bucles son mientras que los bucles vencen mientras que los bucles y también hablamos de cada uno.

00:23.510 --> 00:31.040
Pero en realidad hay otras dos formas en que podemos usar JavaScript y voy a mostrarle

00:31.040 --> 00:33.720
cómo hacerlo en este video.

00:33.730 --> 00:43.940
Ahora imaginemos que tenemos una canasta y esta canasta es una matriz que tiene nuestra lista de compras.

00:44.030 --> 00:45.880
Digamos que queremos comprar manzanas.

00:46.010 --> 00:52.280
Queremos comprar naranjas y también queremos comprar uvas porque las uvas son los dulces de la naturaleza.

00:52.280 --> 00:53.220
Son deliciosos.

00:54.220 --> 00:59.590
Ahora, para que podamos recorrer esta canasta, sabemos cómo hacerlo bien.

00:59.590 --> 01:07.330
Hemos aprendido sobre los cuatro bucles en los que podemos hacer mucho, igual a cero.

01:07.400 --> 01:16.220
Mientras yo sea menor que la longitud de la canasta, los presentadores moriremos uno por uno.

01:18.520 --> 01:26.530
Y menos solo la cesta de registro de la consola para indexar.

01:26.560 --> 01:29.550
Ese es el primer tipo de bucle que vimos.

01:29.950 --> 01:31.540
Si ejecuta esto en

01:34.160 --> 01:38.850
el navegador y presiona Enter, vemos que obtenemos manzanas, naranjas y uvas.

01:38.930 --> 01:43.040
Muy bien, esa es la primera forma en que ya sabemos cómo hacerlo.

01:43.080 --> 01:54.110
También podríamos usar el bucle For Each que llegó nuevo y el S-5 y allí podemos decir que el ítem usará las funciones aéreas de

01:54.130 --> 01:56.140
las que hemos aprendido.

01:56.440 --> 01:59.530
Y en esta era, simplemente cancelé nuestro blog

02:03.000 --> 02:06.020
y parece mucho más limpio que antes.

02:06.030 --> 02:08.280
Si ejecuto esta función ahora obtengo

02:11.710 --> 02:12.830
lo mismo.

02:13.060 --> 02:18.970
Estamos recorriendo los elementos y no voy a mostrarle cómo hacer el ciclo while y el ciclo

02:18.970 --> 02:25.460
do while porque hemos hablado al respecto, pero hay otras dos formas en que podemos recorrer las cosas y Javascript.

02:25.690 --> 02:35.000
El primero se llama cuatro de bucle y el otro es para bucle.

02:35.070 --> 02:39.210
Sé que nombrar es un poco confuso, pero quédate conmigo aquí.

02:39.300 --> 02:45.480
El primero, el bucle for, funciona de manera muy similar a estos dos.

02:45.600 --> 02:52.780
Es casi como si estuviéramos combinando estos dos juntos y esta es una nueva especificación con ESX. Por lo

02:52.780 --> 03:03.380
tanto, esta es una nueva característica de Javascript, la forma en que funciona es que comenzamos con un bucle for y decimos que el elemento de Baskett ve que

03:04.660 --> 03:07.750
es la sintaxis cortó muy bien para mí.

03:07.870 --> 03:16.460
Todo es azul y aquí simplemente decimos cancelar el elemento de registro.

03:16.550 --> 03:17.620
No está mal, verdad.

03:18.770 --> 03:22.210
Estamos usando la palabra clave for aquí, pero estamos diciendo de.

03:22.400 --> 03:26.370
Y solo estamos creando una variable, podemos nombrarla como queramos.

03:26.460 --> 03:28.660
De Baskett, que es nuestra matriz.

03:28.880 --> 03:37.970
Y eso lo recorrerá de modo que si copio y pego esto aquí y presiono enter, obtendré

03:38.270 --> 03:40.360
exactamente lo mismo.

03:40.590 --> 03:45.630
Y como sabemos en la programación, hay muchas formas de hacer las cosas y estas son solo algunas de

03:45.630 --> 03:47.790
las formas en que podemos recorrer esta matriz.

03:48.780 --> 03:51.420
Pero quiero mencionar un término clave aquí.

03:52.370 --> 04:00.400
Lo que estamos haciendo aquí es algo llamado iterar sobre esta matriz y esta redacción.

04:00.410 --> 04:02.030
Hagamos esto un poco más grande.

04:04.050 --> 04:08.090
Esta redacción es realmente confusa al principio cuando la escuchas por primera vez.

04:08.820 --> 04:18.690
Pero leer simplemente significa que podemos pasar uno por uno a través de un elemento como, por ejemplo, una cesta que tiene una

04:18.690 --> 04:27.020
matriz ir uno por uno y ver estos elementos y la iteración se puede hacer en JavaScript en

04:27.030 --> 04:28.940
lo que llamamos iterable.

04:29.250 --> 04:38.040
Y estas variables es algo que JavaScript nos proporciona y dice: oye, puedes iterar sobre esto

04:38.040 --> 04:40.600
y qué es esto.

04:40.800 --> 04:46.300
Bueno, en Javascript puedes iterar sobre matrices y eso ya lo hemos visto.

04:46.470 --> 04:49.610
Y también la fuerza en lugar de Baskett.

04:49.620 --> 04:54.000
Si solo convierto esto en una cadena y ejecuto el bucle for

04:57.210 --> 05:01.560
aquí, veo que estoy iterando sobre la cadena uno por uno.

05:01.560 --> 05:13.050
Entonces, tanto las matrices como las cadenas son iterables en javascript porque podemos iterar sobre elementos individuales

05:13.140 --> 05:24.120
y para todos nos permite iterar sobre estos intervalos Sé que la redacción es realmente confusa.

05:24.130 --> 05:29.200
Pero en muchos libros de tutoriales e incluso en el lugar de trabajo vas a escuchar esta palabra

05:29.200 --> 05:30.890
y quieres saber lo que significa.

05:30.970 --> 05:39.700
Pero hablemos de lo siguiente: el bucle for el bucle foráneo se parece a esto.

05:39.770 --> 05:42.850
Y, de hecho, volvamos a lo que era.

05:43.010 --> 05:45.680
Entonces, la fuerza no es la teoría.

05:46.700 --> 05:52.430
Y voy a comentar o eliminar el bucle con el que ya estamos familiarizados.

05:52.650 --> 05:55.650
Solo para que tengamos un mejor espacio aquí.

05:56.390 --> 06:02.270
Ahora el bucle for in funciona con objetos.

06:02.450 --> 06:12.490
Así que creemos un objeto aquí y llamaremos a este objeto cesta detallada en esta cesta detallada será

06:12.500 --> 06:15.310
un objeto que contiene manzanas.

06:15.440 --> 06:21.680
Y, en realidad, la cantidad de manzanas que queremos queremos cinco manzanas y también tendremos naranjas y

06:22.190 --> 06:25.210
tal vez podamos decir que tenemos 10 naranjas.

06:25.370 --> 06:26.760
Mucha vitamina C.

06:26.960 --> 06:29.180
Y finalmente, las uvas y están deliciosas.

06:29.180 --> 06:31.760
Entonces mil uvas para todos.

06:32.960 --> 06:43.040
Ahora con este Vaska detallado ahora puedo usar un bucle for y puedo decir para el elemento en lugar de este

06:44.270 --> 06:49.620
tipo de canasta detallada y puedo dialogar con Konsole aquí.

06:49.830 --> 06:58.470
Entonces, si borro esto, copiemos la cesta detallada.

06:58.580 --> 07:00.260
Entonces ese es nuestro objetivo.

07:00.560 --> 07:04.580
Y ejecutamos el bucle for aquí.

07:04.580 --> 07:07.770
Fíjate en lo que pasa.

07:08.020 --> 07:21.290
Obtengo manzanas, naranjas, uvas, el bucle for nos permite recorrer y ver las propiedades del objeto.

07:23.120 --> 07:29.320
Para que pueda verificar lo que necesito para ir a comprar comestibles manzanas, naranjas y uvas.

07:29.330 --> 07:35.420
Ahora aquí está la parte difícil y escucharás que esta sala se menciona mucho cuando hablas con tus amigos de

07:35.420 --> 07:35.950
programación.

07:36.260 --> 07:43.970
Y puede ser realmente muy confuso lo que estamos haciendo aquí no es iterar porque iterar es

07:43.970 --> 07:49.980
algo que podemos hacer con matrices y cadenas con un objeto en javascript.

07:50.060 --> 07:59.390
Estamos haciendo algo llamado enumerar todo VERRET de béisbol porque las propiedades de un objeto son

07:59.390 --> 08:09.220
lo que llamamos en numerable y un objeto en javascript es enumerable si nos permite ver las propiedades.

08:09.230 --> 08:12.480
Entonces las manzanas, naranjas y uvas son innumerables.

08:12.530 --> 08:17.910
Es decir, podemos usarlo en un bucle for para verificarlos.

08:18.020 --> 08:20.870
Entonces, enumerar es para

08:24.640 --> 08:33.800
objetos numerables e iterables lo que sucede si cambio esto y si tengo una canasta aquí.

08:33.940 --> 08:37.750
Y la cesta detallada aquí.

08:37.840 --> 08:42.180
Entonces estamos usando un bucle for con un objeto.

08:42.190 --> 08:43.860
Qué piensas tú que sucederá.

08:44.100 --> 08:44.870
Eso.

08:45.130 --> 08:49.890
Voy a copiar y pegar esto en nuestra consola.

08:49.890 --> 08:56.910
Golpear a Ron y recibo una cesta detallada de error no es iterable.

08:56.910 --> 08:57.980
Y por qué es eso.

08:58.230 --> 08:59.550
Bueno, eso lo sabemos bien.

08:59.580 --> 09:06.930
Dije que en javascript tenemos un aumento en las cadenas que son iterables y los objetos en la mayoría

09:07.590 --> 09:10.230
de los casos no son iterables.

09:10.230 --> 09:17.790
Verá que cuatro de loob no funcionan con objetos porque simplemente el lenguaje javascript necesita proporcionar

09:18.210 --> 09:26.750
esta propiedad que se llama iterable cuando esta propiedad solo está dada por matrices y cadenas y porque

09:26.750 --> 09:31.170
cuatro de los bucles solo funcionan con iterable.

09:32.260 --> 09:34.920
Nos va a dar esto.

09:35.090 --> 09:36.150
Pero qué hay de aquí.

09:36.350 --> 09:40.060
¿Qué pasa si hago un bucle for en la canasta?

09:40.100 --> 09:41.120
Cuál es la matriz.

09:41.330 --> 09:49.450
Si copio y pego esto y ejecuto este código, mira que está funcionando.

09:49.630 --> 10:00.040
Obtengo 0 1 2 y eso es porque debajo del capó se puede pensar en matrices de JavaScript como objetos.

10:00.040 --> 10:00.500
Correcto.

10:00.550 --> 10:04.530
Porque una matriz tiene un índice de 0 1 y 2.

10:04.660 --> 10:18.090
Por lo tanto, no podemos pensar en Baskett como un objeto que tiene propiedades cero iguales a las manzanas.

10:18.280 --> 10:25.660
Tenemos naranjas que tienen un índice de 2 o un índice de uno y luego un índice de dos.

10:25.680 --> 10:28.180
Tenemos crepes

10:28.260 --> 10:38.820
Entonces, el bucle for es y la calificación de Neumar sobre las propiedades es 0 1 y 2, que lo enumera para nosotros.

10:39.640 --> 10:41.180
Hagamos esto un poco más pequeño.

10:42.550 --> 10:48.400
Pero quería hacer este video para ti porque mucha gente se confunde entre estos dos.

10:48.910 --> 10:57.590
Y aunque puede pasar mucho tiempo sin usar nunca los bucles finales, podemos usar algo como las teclas acopladas a

10:57.590 --> 10:59.860
objetos que hemos visto antes.

11:00.930 --> 11:12.160
O valles o entradas o podemos usar para cada bucle o para bucles en lugar de cuatro de ellos, es bueno saber estas diferencias porque si

11:12.160 --> 11:17.800
las ve en una base de código quiere comprender qué está sucediendo.

11:18.600 --> 11:25.130
Y también, si alguna vez escuchas a alguien decir iterable o numerable, tienes una idea de la diferencia.

11:25.130 --> 11:35.150
Ahora, para revisar un bucle for en bucles sobre innumerables propiedades y nombres de propiedades numerables de un

11:36.310 --> 11:43.210
objeto, el bucle for no funciona con objetos porque no son iterables.

11:43.270 --> 11:52.210
Ahora hay pequeñas advertencias y excepciones a estas reglas, pero el 99 por ciento de las veces debe considerar

11:52.210 --> 11:52.920
esto.

11:53.020 --> 12:00.800
Está utilizando el bucle for para objetos y el bucle for para matrices y cadenas.

12:00.810 --> 12:02.270
Nos vemos en la próxima.

12:02.620 --> 12:02.830
Mover.
