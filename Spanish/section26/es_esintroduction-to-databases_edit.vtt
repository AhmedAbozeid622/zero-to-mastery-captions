WEBVTT

00:01.910 --> 00:10.340
Todas las empresas almacenan datos. Desde un simple libro de registro de una pequeña empresa, tal vez incluso

00:10.340 --> 00:11.580
en un diario

00:11.690 --> 00:17.810
o una hoja de papel, hasta compañías masivas como Amazon que necesitan computadoras para almacenar Petabytes de datos.

00:17.810 --> 00:26.000
Ahora, para almacenar esta información, casi todas las empresas y, a veces, las personas también necesitan algo

00:26.000 --> 00:27.940
llamado base de datos.

00:28.070 --> 00:35.060
Vimos en la última sección lo difícil que era hacer que nuestro servidor recordara a un nuevo usuario. Cada vez que el servidor fallaba,

00:35.060 --> 00:35.810
la

00:35.810 --> 00:40.030
variable se reiniciaba y luego comenzaba de nuevo.

00:40.460 --> 00:48.400
O si quisiéramos hacer un inicio de sesión o una verificación de inicio de sesión e iterar a través de los correos electrónicos y las

00:48.470 --> 00:52.160
contraseñas, hacer un bucle a través de JavaScript que es ineficiente.

00:52.160 --> 00:54.240
Ahí es donde la base de datos viene al rescate.

00:54.990 --> 00:58.850
Entonces preguntémonos qué es una base de datos.

00:58.890 --> 01:01.960
Una base de datos es una recopilación de datos.

01:02.050 --> 01:03.540
Y lo que entendemos por

01:03.850 --> 01:05.730
datos: hay muchas formas correctas de ellos.

01:05.770 --> 01:10.360
Puede haber números, puede haber fechas, puede haber hashes de

01:10.360 --> 01:17.440
contraseñas, puede haber información del usuario. Las bases de datos nos permiten organizar estos datos

01:17.440 --> 01:24.340
de una manera que nos sea útil y facilita la gestión de datos y algo salió de eso.

01:24.650 --> 01:29.930
Y se llama sistema de gestión de bases de datos o DBMS para abreviar.

01:29.990 --> 01:35.120
Es una colección de programas que nos permite acceder a bases de datos y trabajar con datos.

01:35.450 --> 01:39.740
Y también permite el acceso controlado a los usuarios de la base de datos.

01:41.600 --> 01:50.820
Entonces, un DBMS es algo en este cuadro que nos permite una herramienta o un software que nos permite

01:50.820 --> 01:59.420
comunicarnos con la base de datos, almacenar información que nos es útil y también nos permite actualizar,

02:00.050 --> 02:05.780
insertar, eliminar, buscar lo que esté en el base de datos.

02:05.840 --> 02:12.980
Y esta idea de un DBMS realmente comenzó a tomar forma en la década de 1960 y ahora está a la vanguardia de

02:12.980 --> 02:14.130
muchas cosas emocionantes.

02:14.150 --> 02:19.850
Hay toda una industria de ingenieros que solo trabajan con bases de datos porque es muy importante.

02:21.100 --> 02:27.130
Ahora hay dos tipos de DBMS que son realmente populares en este momento y de los que vamos a hablar en

02:27.130 --> 02:27.980
este curso.

02:29.820 --> 02:36.310
Y estos dos tipos están muy bien representados por Postgres y MongoDB.

02:36.450 --> 02:43.230
Hablemos de la primera, que es la base de datos relacional. Y este es probablemente el más popular. Como puedes ver en el

02:43.230 --> 02:44.600
lado derecho.

02:44.610 --> 02:49.410
Verá que todas estas son bases de datos relacionales.

02:49.630 --> 02:56.890
Postgres, Oracle, servidor SQL, es posible que haya oído hablar de mySQL, SQLite.

02:57.230 --> 03:03.840
Estos son todos los tipos de bases de datos que tienen esta etiqueta de base de datos relacional.

03:04.100 --> 03:06.770
Y la belleza con ellos es que todos son bastante similares.

03:06.770 --> 03:10.630
Todos siguen el mismo formato estándar.

03:10.640 --> 03:19.510
Las bases de datos relacionales consisten en dos o más tablas con columnas y filas.

03:19.530 --> 03:27.180
Entonces, en este caso, los usuarios son una tabla y full_name, username, text, created_at son columnas y

03:27.180 --> 03:30.900
los valores que tienen aquí son filas.

03:31.230 --> 03:34.690
Cada fila representa una entrada y cada columna

03:34.700 --> 03:39.710
almacena un tipo muy específico de información como nombre, dirección o números de teléfono.

03:39.930 --> 03:48.050
Y luego la relación entre tablas y campo se llama esquema. En una base de datos relacional, el esquema debe estar claramente

03:48.170 --> 03:55.480
definido antes de que se pueda agregar cualquier información. Y si esto es confuso en este momento, no se preocupe, en realidad

03:55.480 --> 03:59.230
vamos a crear estas bases de datos, por lo que tiene sentido para usted.

03:59.500 --> 04:05.470
Si tuviéramos Twitter, por ejemplo, puede ver aquí los tipos de tablas que tendríamos y

04:05.470 --> 04:07.130
cómo lo organizaríamos.

04:07.240 --> 04:15.400
Tendríamos una tabla de usuarios, una tabla de tweets, una tabla siguiente y podemos conectar toda esta información.

04:15.420 --> 04:23.220
Por ejemplo conectando diferentes piezas de la mesa. Por ejemplo, el nombre de usuario será el mismo

04:23.220 --> 04:27.560
en la tabla de usuarios que en la tabla de tweets.

04:27.570 --> 04:37.530
De esa manera podemos decir que el nombre de usuario en la tabla de tweets es la clave externa del

04:37.530 --> 04:46.090
nombre de usuario en la tabla de usuarios. Y luego from_user será la clave externa del nombre de usuario en la siguiente tabla.

04:46.110 --> 04:56.400
Ahora, cosas como el nombre completo o la identificación, algo que identifica cada fila en una tabla se llama clave

04:57.060 --> 05:01.940
principal y lo veremos más adelante en esta sección.

05:01.940 --> 05:07.130
Muy bien, así que todas estas bases de datos vamos a aprender sobre Postgres SQL, pero todas son más o menos

05:07.130 --> 05:07.670
lo mismo.

05:07.670 --> 05:14.810
Entonces, una vez que conoces uno, es bastante fácil elegir los otros, ¿cómo se comunican realmente

05:15.660 --> 05:22.230
con el servidor con el Backend? Bueno, todas las bases de datos relacionales usan algo llamado SQL.

05:26.510 --> 05:34.960
Y SQL nos permite comunicarnos como lo hizo HTTP entre el frontend y el backend. Con SQL podemos comunicarnos con la

05:34.960 --> 05:42.410
base de datos y modificar u obtener o actualizar como queramos.

05:43.040 --> 05:45.620
Y también tendremos un video sobre este tema.

05:45.620 --> 05:49.820
Muy bien, entonces eso es bases de datos relacionales.

05:49.820 --> 05:51.740
¿Qué pasa con el segundo tipo?

05:51.800 --> 05:58.870
El segundo tipo se llama una base de datos no relacional o una base de datos NoSQL.

05:59.000 --> 06:05.000
Y una vez más, hay muchos tipos diferentes de bases de datos con algunos nombres geniales

06:05.000 --> 06:06.680
como CouchDB e HYPERTABLE.

06:06.810 --> 06:12.810
Ahora, una base de datos mongoDB o no relacional le permite crear una

06:12.810 --> 06:14.900
aplicación sin tener que

06:14.970 --> 06:26.400
definir primero el esquema, a diferencia de una base de datos relacional. Si volvemos a la base de datos relacional, este esquema o estas tablas tienen

06:26.490 --> 06:27.750
que estar predefinidas.

06:27.750 --> 06:35.930
Necesitamos saber cómo se verá nuestra aplicación, hacer estas tablas para que una vez que la aplicación sea pública

06:35.940 --> 06:45.030
podamos comenzar a ingresar información del usuario, tweets y seguidores. Con una base de datos NoSQL o no relacional, podemos definirla

06:45.030 --> 06:47.050
a medida que avanzamos.

06:47.340 --> 06:53.410
Y todos tienen diferentes formas de almacenar esta información, por lo que cada uno es muy, muy diferente.

06:53.490 --> 06:58.650
Y esta es otra razón poderosa para usar una base de datos no relacional es que, si sus requisitos de datos no están claros

06:58.650 --> 07:05.790
al comienzo de su proyecto y tal vez tenga una gran cantidad de datos no estructurados. Es posible que no tenga el lujo

07:05.790 --> 07:11.390
de desarrollar una base de datos relacional con un esquema claramente definido.

07:11.480 --> 07:18.390
En su lugar, ofrecen una mayor flexibilidad, ya que una base de datos no relacional se parece más a las

07:18.390 --> 07:21.510
carpetas, simplemente reuniendo información relacionada de todo tipo.

07:22.340 --> 07:26.560
Ahora MongoDB es algo llamado documento orientado.

07:26.600 --> 07:31.740
Almacena información como documentos.

07:31.750 --> 07:33.700
Déjame ilustrarte este punto.

07:33.700 --> 07:37.170
Tengo mi escritorio aquí con dos carpetas.

07:37.540 --> 07:40.330
Uno es una base de datos relacional.

07:40.330 --> 07:48.920
Y aquí tengo usuarios, tweets, perfil, siguientes. Y puede pensar en bases de datos relacionales con este tipo de almacenamiento donde esta

07:48.920 --> 07:56.540
carpeta vive en algún lugar de una computadora que almacena esta información. Y cada vez que necesitemos pedir algo a

07:56.540 --> 08:02.600
una base de datos, atrapamos a los usuarios y si también queremos obtener

08:02.600 --> 08:09.680
los tweets del usuario. Encontramos el usuario que nos interesa. Luego, encuentre los tweets del usuario que

08:09.680 --> 08:17.510
también nos interesan con la clave externa que enlaza con los usuarios y también podemos encontrar la cantidad de seguidores que tenga

08:17.540 --> 08:18.680
ese usuario.

08:18.680 --> 08:22.780
Tomamos esa información y la mostramos en nuestra aplicación web.

08:25.480 --> 08:27.360
MongoDB, por

08:28.240 --> 08:37.100
otro lado, tendrá a cada usuario como documento. Entonces, si quisiera agarrar al primer usuario.

08:37.420 --> 08:43.740
Bueno, acabo de agarrar este documento y tiene todos los seguidores, los tweets,

08:43.740 --> 08:51.590
el perfil, todo está en este documento. Y usted podría estar pensando "MongoDB parece una mejor opción que tener esta forma de hacer las

08:53.100 --> 08:54.390
cosas bien? "Bueno, depende

08:55.560 --> 09:00.000
de su necesidad y es por eso que las bases de datos son un tema tan complejo.

09:00.030 --> 09:02.460
Realmente, realmente depende de tu situación.

09:02.490 --> 09:08.760
Puede ver que esta forma de MongoDB es muy útil si tiene algo como un perfil, tal vez un perfil

09:08.760 --> 09:09.410
de linkedin.

09:09.630 --> 09:15.390
Pero si necesita algo en el que está trabajando con solo seguir datos o solo datos de tweets, tal vez con

09:15.430 --> 09:19.020
los tweets que desea ver cuál es el tamaño promedio de tweet.

09:19.140 --> 09:25.530
Bueno, es realmente fácil simplemente tomar este archivo y calcularlo de esta manera, donde es posible que tenga

09:25.530 --> 09:28.810
que extraerlo de cada uno de los usuarios.

09:29.010 --> 09:31.900
Por lo tanto, realmente depende de tus necesidades.

09:32.050 --> 09:40.990
Déjame mostrarte otro diagrama que podría ser útil. Cuando miramos bases de datos relacionales versus no

09:40.990 --> 09:42.000
relacionales.

09:42.220 --> 09:44.950
Puede pensar en relacional ya que cada tabla

09:45.040 --> 09:54.250
tiene publicaciones de blog, una etiqueta de blog, comentarios de blog y vincula estas tablas para brindarle la información del blog versus una no relacional

09:55.030 --> 10:02.170
que almacena toda esta publicación de bloque en una entrada y tiene comentarios, etiquetas , categorías y todos los

10:02.590 --> 10:04.200
demás datos relacionados

10:04.210 --> 10:05.920
Solo en un solo lugar.

10:05.950 --> 10:08.890
Entonces, ¿qué utiliza MongoDB para comunicarse?

10:09.420 --> 10:16.130
Si volvemos a nuestro ejemplo aquí, teníamos SQL para bases de datos relacionales como Postgres.

10:16.200 --> 10:26.760
Bueno, MongoDB tiene su propio lenguaje de consulta y es solo el lenguaje de consulta de MongoDB.

10:31.690 --> 10:33.690
Pero ambos apuntan a hacer lo mismo.

10:33.700 --> 10:40.060
Es decir, comunicarse con la base de datos, proporcionar una manera fácil para que el servidor se comunique con

10:40.060 --> 10:41.690
la base de datos.

10:41.810 --> 10:46.280
Y en esta sección hablaremos de eso y finalmente conectaremos los puntos y le

10:46.850 --> 10:51.510
mostraremos el poder de las bases de datos una vez que estén conectadas a un servidor.

10:51.560 --> 10:53.600
Ya veré en la próxima. Adiós.
