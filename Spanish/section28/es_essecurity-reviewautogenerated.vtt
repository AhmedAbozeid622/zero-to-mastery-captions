WEBVTT

00:01.070 --> 00:02.480
Dar una buena acogida.

00:02.480 --> 00:10.100
Quiero hacer una revisión rápida de nuestra seguridad y de cómo funciona nuestra aplicación en este momento porque poner una aplicación

00:10.310 --> 00:19.650
web segura en línea es una responsabilidad muy importante del desarrollador web. Volvamos a nuestra base de código.

00:19.750 --> 00:24.250
Hay dos problemas principales que veo hasta ahora.

00:24.280 --> 00:28.870
Lo primero es que no estamos haciendo nada llamado validación.

00:29.010 --> 00:39.820
Si voy a iniciar sesión aquí y voy a mi controlador de inicio de sesión si un usuario no ingresa el correo electrónico adecuado o ingresa algo que no esperamos tal

00:40.150 --> 00:45.460
vez deje ese campo de correo electrónico en blanco o el campo de contraseña en

00:46.860 --> 00:51.310
blanco Bueno ¿Qué pasa entonces? Y lo mismo con el registro.

00:51.470 --> 01:00.800
Si vamos a registrarnos y un usuario no escribe el correo electrónico o el nombre o la contraseña adecuados, técnicamente aún los registramos

01:00.800 --> 01:09.230
porque si dejamos el correo electrónico en blanco, la contraseña en blanco solo ingresará un usuario en blanco en la

01:09.260 --> 01:10.810
base de datos.

01:12.160 --> 01:14.670
Vayamos a la aplicación y le mostraremos lo que eso significa.

01:15.460 --> 01:23.480
Si dejo esto en blanco y hago clic en registrar, mire que estoy ingresado en la aplicación y si regreso a

01:23.480 --> 01:24.170
la

01:26.910 --> 01:37.200
base de datos y voy a los usuarios, veo un usuario en blanco. Y esto no es muy dañino, pero muestra un tema importante en

01:37.200 --> 01:44.790
el que realmente desea centrarse en su aplicación y es la validación, asegurándose de que cuando se comunica

01:44.790 --> 01:49.520
entre el front-end y el back-end hay algunas capas de seguridad.

01:49.620 --> 01:54.420
Primero, el Front-End hará su propia validación.

01:54.420 --> 02:03.670
Por ejemplo, si vamos a la página de inicio de sesión o a la página de registro dentro de nuestro Front-End dentro de nuestra aplicación de

02:03.670 --> 02:10.100
reactivación, en realidad lo verificaremos antes cuando hagamos clic en registrarse para que aparezca el botón Enviar.

02:10.330 --> 02:18.360
Y al enviar va a verificar para asegurarse de que el nombre no esté vacío, el correo electrónico tiene el formato de

02:18.450 --> 02:26.830
correo electrónico adecuado, como tener un signo at o un punto com al final y luego la contraseña tendrá algún tipo de validación,

02:26.830 --> 02:33.690
digamos que tiene que Ser mayor de seis caracteres. Y ahora el front end envía esa

02:34.320 --> 02:40.520
información validada al backend y una cosa importante que desea asegurarse con su servidor

02:40.520 --> 02:45.590
es que el servidor nunca confíe en nada recibido del front end.

02:45.640 --> 02:48.050
Entonces debería hacer su propia validación.

02:48.070 --> 02:56.470
Es para verificar el nombre y la contraseña del correo electrónico y asegurarse de que haya valores que desee ingresar y realizar transacciones en

02:56.590 --> 02:58.030
la base de datos.

02:58.920 --> 03:14.470
Una forma en que podemos hacer esto. Bueno, simplemente podemos decir que si es correo electrónico o nombre o contraseña y simplemente podemos hacer lo

03:14.800 --> 03:17.070
contrario, eso es lo contrario.

03:17.320 --> 03:20.700
Entonces, si esto está vacío, se convertirán en verdad.

03:20.740 --> 03:24.500
Si esto está vacío, se convertirán en verdadero, esto está vacío, se convertirán en verdadero.

03:24.580 --> 03:30.280
Entonces, si alguno de estos está vacío, solo podemos responder el estado

03:32.710 --> 03:33.370
400

03:36.330 --> 03:40.910
y podemos responder con el envío incorrecto del formulario.

03:43.710 --> 03:45.420
Guardemos esto y veamos qué sucede.

03:47.570 --> 03:53.500
Yo ahorraré Lo único que quiero hacer es volver a mi base de datos y colocar mi PSQL ejecutándose

03:53.500 --> 03:53.850
aquí.

03:53.890 --> 03:58.540
Si voy a iniciar sesión o usuarios quiero eliminar el usuario vacío.

03:58.540 --> 04:07.130
Ahora y este está bien perfecto.

04:07.350 --> 04:09.570
Si vuelvo aquí y trato de

04:12.780 --> 04:15.470
hacer clic en registrar, todavía obtengo el registro.

04:15.490 --> 04:19.180
Eso es porque si vuelvo veo que recibo un error aquí y obtengo

04:23.080 --> 04:26.050
"no puedo establecer encabezados después de que se envían".

04:26.590 --> 04:33.430
Y este es un pequeño truco porque si vas aquí y abres la consola.

04:33.660 --> 04:44.890
Muy bien, tenemos una solicitud incorrecta del servidor, pero esta instrucción if se ejecuta y luego continúa y también lo

04:44.890 --> 04:52.810
hace porque recuerde para finalizar la ejecución dentro de una función, tenemos que decir

04:53.050 --> 04:53.670
return.

04:53.920 --> 05:01.870
De esta manera, si esto se ejecuta, vuelve de esta función y esta parte nunca se ejecuta.

05:03.480 --> 05:14.860
Permítanme guardar eso, regrese a nuestra aplicación. Ahora, simplemente actualicemos aquí. Simplemente haremos un usuario en blanco.

05:14.950 --> 05:21.100
Nuevamente estamos iniciando sesión porque ahora cuando vamos al front-end si recuerdas en nuestro

05:21.100 --> 05:26.030
archivo de registro en el front-end cuando hacemos clic en registrarse.

05:28.890 --> 05:30.180
Bueno, estamos

05:32.690 --> 05:40.640
buscando y solo estamos verificando si el usuario y este usuario porque estamos respondiendo aquí con un usuario de

05:41.060 --> 05:43.400
envío de formulario incorrecto será eso.

05:43.400 --> 05:51.530
Entonces, verifiquemos aquí la identificación. Guardamos y recordamos, esto es algo que

05:51.560 --> 06:00.310
hicimos con nuestro inicio de sesión también en los videos anteriores, si volvemos, volvemos a registrar, intentamos registrarnos.

06:00.780 --> 06:06.430
No me está permitiendo porque si abro la consola no he podido cargar los recursos.

06:06.430 --> 06:17.400
Si voy a la red, intente de nuevo ir a registrarme obtengo "envío de formulario incorrecto".

06:17.520 --> 06:19.530
Entonces eso es realmente muy importante.

06:19.560 --> 06:28.460
El servidor y el cliente deben hacer su propia validación y asegurarse de que maneja todas las posibilidades.

06:28.530 --> 06:35.610
Si un atacante, por ejemplo, ingresa un código realmente muy malo en lugar de un correo electrónico. Bueno, debemos validar eso y

06:35.610 --> 06:42.260
asegurarnos de tomar las medidas adecuadas en función de eso.

06:42.430 --> 06:49.220
Por lo tanto, podemos agregar cosas como esta en otras partes de nuestra aplicación, especialmente aquellas en las que aceptamos aportes.

06:49.510 --> 06:57.760
Afortunadamente para nosotros, eso es para nuestro registro y luego también tenemos nuestro inicio de sesión.

06:57.760 --> 07:05.430
Y luego, para el inicio de sesión, simplemente podemos copiar y pegar, y aquí usamos el correo electrónico

07:05.550 --> 07:10.740
y la contraseña de request dot body dot para que podamos simplemente

07:13.540 --> 07:17.310
reestructurar su contraseña desde el cuerpo de punto

07:20.360 --> 07:21.390
de solicitud,

07:25.190 --> 07:34.300
eliminaremos el nombre y nuevamente lo eliminaremos. solicite el cuerpo de puntos de estos solo para hacerlo un poco más limpio.

07:34.460 --> 07:37.270
Y si guardo esto, esto también debería funcionar.

07:37.640 --> 07:40.610
Vamos a iniciar sesión, asegúrese de que no puedo iniciar sesión.

07:40.730 --> 07:41.260
Perfecto.

07:41.270 --> 07:51.570
Y si voy a Wes en gmail dot com Uno dos tres inicio de sesión, puedo iniciar sesión.

07:51.590 --> 07:54.550
Muy bien, esa es la primera parte de la seguridad que quería cubrir.

07:54.890 --> 07:59.170
Obviamente hay algunas cosas más que podemos hacer aquí, pero creo que entiendes la idea.

08:00.570 --> 08:09.160
Lo siguiente, y otra falla importante en nuestra aplicación, es que cuando enviamos una imagen, tomemos esto

08:12.200 --> 08:14.880
y abramos la pestaña.

08:15.320 --> 08:18.020
La pestaña de red aquí hace clic en detectar

08:20.930 --> 08:25.600
y si nos fijamos bien en el punto final de la imagen que cuando nos ocupamos.

08:25.610 --> 08:31.560
Pero si nos fijamos en los resultados, aquí es donde le pedimos a API clarifai la solicitud.

08:31.580 --> 08:43.650
Si hago clic en esto y miro los encabezados y miro la autorización, obtengo la clave con DCB17e ...

08:43.690 --> 08:49.290
Y si vuelvo al Front-End y bajo la aplicación dot

08:55.810 --> 08:58.170
js DCB17e ...

08:58.180 --> 08:59.970
Esa es nuestra clave API.

09:00.390 --> 09:03.520
Estamos creando nuestra clave API, que en mi caso es gratuita.

09:03.520 --> 09:11.190
Pero cuando usa una API que cuesta dinero, alguien podría robar esta información y usar su API

09:11.350 --> 09:19.690
para cargar esa API con solicitudes y hacer que pague mucho dinero y nunca quiera hacer esto cuando juegue como

09:19.690 --> 09:22.090
desarrollador en tu propio proyecto.

09:22.090 --> 09:23.230
Esta bien.

09:23.590 --> 09:26.560
Pero cosas como esta no deberían suceder.

09:26.560 --> 09:31.880
Entonces, una cosa que podemos hacer para evitar esto es moverlo al backend en lugar del front end.

09:32.200 --> 09:33.510
Déjame mostrarte cómo podemos hacer eso.

09:36.800 --> 09:44.390
Vamos a volver a nuestro front end y en nuestro front end voy a copiar la

09:44.390 --> 09:49.440
información clarifai al Backend y eliminarla del front end.

09:49.910 --> 09:56.490
Entonces, si recuerdas, solo necesitamos instalar clarifai en el back-end, así

09:56.490 --> 10:02.370
que voy a detener el servidor e instalar NPM

10:06.500 --> 10:14.230
clarifai para que tengamos el paquete dot json, lo importaremos esta vez usando require.

10:14.250 --> 10:16.200
Así que vayamos

10:19.250 --> 10:29.860
a nuestra imagen de identificador y luego la imagen de identificador que solo importaremos y en lugar de importar

10:32.150 --> 10:41.550
haremos const clarifai igual requiere clarifai y simplemente copiaremos exactamente lo que tenemos en nuestra aplicación y

10:41.550 --> 10:48.730
queremos eliminar esto yendo a corta esto usa nuestra clave API aquí.

10:52.680 --> 11:01.940
Luego, desplazándonos hacia abajo, miramos dónde usamos nuestra clave API en nuestro caso, aquí está la aplicación. modelos.

11:02.280 --> 11:08.940
Y aquí queremos hacer el clarifai y luego obtener nuestra respuesta.

11:09.090 --> 11:11.210
Así que esta parte inferior podemos mantenerla

11:11.210 --> 11:19.620
Solo necesitamos que la llamada clarifai provenga del backend, así que la copiaremos.

11:19.670 --> 11:20.900
Regrese a

11:24.110 --> 11:31.320
nuestro back end y pongámoslo en su lugar porque ahora tenemos una aplicación de la nueva instancia de clarifai

11:31.320 --> 11:33.500
y ahora necesitaremos obtener la entrada.

11:33.570 --> 11:40.210
Parece que necesitaremos un nuevo punto final. Vamos a limpiar esto un poco y predecir clarifai hagámoslo

11:42.580 --> 11:43.380
aquí solo

11:46.470 --> 11:49.950
para que podamos ver mejor. Voy a minimizar esto

11:52.860 --> 12:03.780
un poco y los modelos de puntos de aplicación predicen que lo predeciremos con nuestra solicitud de entrada de punto de cuerpo de punto que obviamente no

12:03.780 --> 12:04.470
tenemos.

12:04.490 --> 12:09.980
Pero ahora sabemos que necesitamos la entrada y podemos ajustar esto alrededor de una función como esta.

12:10.140 --> 12:20.560
Podemos decir const handleApiCall y este recibirá una respuesta de solicitud

12:25.280 --> 12:30.230
y simplemente lo trasladaremos aquí.

12:30.300 --> 12:39.550
Entonces, ahora podemos decir que manejemos la llamada API en la parte inferior aquí y en nuestro

12:39.550 --> 12:48.710
servidor podemos crear un nuevo punto final para Image y podemos hacer una solicitud posterior porque la

12:48.710 --> 12:50.540
agregaremos a nuestro

12:50.570 --> 12:59.900
cuerpo de punto de solicitud y simplemente llamaremos ese imageurl y el punto final imageurl tendrán el handleApiCall.

13:00.040 --> 13:07.240
No necesitará la base de datos. Definitivamente necesitaremos importarlo, pero ya lo tenemos en el objeto de imagen.

13:07.240 --> 13:17.220
Bien, si guardo esto, ahora debemos asegurarnos de que recibimos el cuerpo con la URL, así que vamos

13:17.220 --> 13:18.940
al front-end.

13:19.190 --> 13:28.980
Diremos que al enviar necesitamos buscar y simplemente copiemos esto.

13:28.980 --> 13:36.780
Lo que tenemos aquí por ahora. Queremos buscar imageurl.

13:37.010 --> 13:49.310
Será un método de publicación y tendremos un json de entrada y esa entrada será

13:49.310 --> 14:01.700
simplemente que esta entrada DOT de estado. Eso nos dará una respuesta y esa respuesta seguirá goteando de esta manera.

14:01.810 --> 14:08.220
Pero tenga en cuenta que debido a que esta es una búsqueda, tendremos que hacer la respuesta dot json.

14:08.470 --> 14:16.550
Así que es bastante simple de hacer, arreglemos la sangría aquí y haremos un punto, luego la respuesta es

14:18.530 --> 14:19.760
igual al

14:22.420 --> 14:28.510
punto de respuesta Jason Guardaremos y querremos volver y asegurarnos de que esto esté funcionando.

14:28.510 --> 14:41.660
Así que vamos a nuestro servidor, ve a la imagen y asegúrate de que estamos respondiendo aquí con punto y luego datos y estos datos

14:41.660 --> 14:43.180
tendrán una

14:43.260 --> 14:51.470
respuesta punto json de datos. Lo que sea que esto nos dé. Si hay algún tipo de error haremos una captura.

14:54.470 --> 14:56.420
Diré el estado de respuesta 400.

14:59.050 --> 15:00.810
Bien hecho.

15:00.810 --> 15:12.900
json "no se puede trabajar con API". Vamos a salvar Veremos si esto funciona la primera vez.

15:12.920 --> 15:23.930
Por lo general, no es así, pero si iniciamos sesión con Wes en Gmail dot com 1 2 3, tenemos un pequeño problema.

15:25.420 --> 15:29.060
Vayamos a la consola - no

15:32.090 --> 15:38.040
se pudo obtener Oh, necesitamos realmente que NPM inicie nuestro servidor.

15:38.110 --> 15:39.510
Muy bien y ahora tenemos algunos errores.

15:39.520 --> 15:40.660
Todo bien.

15:40.660 --> 15:47.510
Nos faltan paréntesis, así que solo cometimos un pequeño error de sintaxis aquí y es

15:47.510 --> 15:50.270
porque olvidé un punto aquí.

15:50.270 --> 15:51.390
Vamos a guardar eso.

15:51.920 --> 15:58.810
Y si vamos a nuestro front end corriendo, el back end está corriendo. Cerremos esto e intentemos esto de nuevo.

16:00.170 --> 16:01.190
Muy bien, he iniciado sesión.

16:01.250 --> 16:09.680
Si copio esta imagen nuevamente. Momento de la verdad.

16:09.790 --> 16:10.180
Todo bien.

16:10.180 --> 16:17.820
Recibimos la imagen, pero la respuesta: algo no funciona. No hemos podido obtener la respuesta del servidor

16:17.900 --> 16:20.390
con un estado de 500.

16:20.390 --> 16:24.140
Entonces obtenemos un error en el servidor y parece que manejar

16:26.740 --> 16:29.620
la llamada API no es una función.

16:29.650 --> 16:39.010
Así que vamos al servidor y mi terrible error de ortografía nuevamente. Esto siempre te lleva a la ortografía.

16:39.040 --> 16:41.150
Probemos eso una vez más.

16:41.340 --> 16:47.710
Despejaremos esto y lo detectaremos. Sin errores.

16:47.750 --> 16:48.480
Todo bien.

16:48.570 --> 16:49.410
Mira eso.

16:49.680 --> 16:51.120
Eso esta funcionando.

16:51.120 --> 16:52.100
Asombroso.

16:52.530 --> 16:59.340
No veo errores en mi API o en el front end.

16:59.420 --> 17:00.510
Eso no estuvo mal.

17:00.590 --> 17:08.100
Y si realmente vuelvo a la solicitud, vaya a la pestaña de red y

17:08.100 --> 17:12.810
verifiquemos que presionaré detectar si voy a imageurl.

17:13.060 --> 17:15.560
No estamos viendo ninguna de nuestras llaves.

17:15.580 --> 17:21.780
Lo único que estamos viendo es una respuesta que es la respuesta que obtenemos de clarifai, pero nuestro servidor

17:21.780 --> 17:25.850
se ejecuta en nuestro propio entorno y nadie tiene acceso a él.

17:27.290 --> 17:30.110
Así que repasemos lo que acabamos de hacer.

17:30.200 --> 17:39.720
Creamos un nuevo punto final y debido a que ahora tenemos nuestros propios controladores y se trata de la imagen, podemos agregarlo a

17:39.720 --> 17:46.500
los controladores de imagen y dentro de los controladores de imagen creamos una nueva función y

17:46.500 --> 17:54.480
prácticamente la copiamos y pegamos exactamente como teníamos en el de frente y respondimos con datos de Json y estos

17:54.480 --> 17:59.400
datos de Json ahora se envían como punto de respuesta Json.

17:59.790 --> 18:09.920
Entonces, en el extremo frontal, simplemente creamos una solicitud de captación que envió la entrada y respondimos con una respuesta.

18:10.290 --> 18:14.630
Por lo tanto, no ha cambiado mucho en la parte frontal, excepto por el hecho de que ahora estamos ocultando la clave API.

18:14.760 --> 18:21.030
Y en lugar de tener clarifai aquí, lo tenemos en el backend.

18:21.280 --> 18:26.630
Espero que hayan sido algunos consejos de seguridad valiosos para usted.

18:26.650 --> 18:31.130
Hay muchas cosas en lo que respecta a la seguridad y definitivamente es algo a lo

18:31.130 --> 18:35.190
que tienes que acostumbrarte ya que tienes más y más años de experiencia.

18:36.250 --> 18:43.900
Pero tener esa regla general de asegurarse de que su máquina o, en nuestro caso, su base de código de front-end

18:43.900 --> 18:49.210
y back-end y nunca dependa de la seguridad del otro siempre se enfoca y

18:49.220 --> 18:55.650
asegúrese de que cualquier entrada que reciba de otros lugares fuera de sí misma siempre esté validada .

18:55.780 --> 19:00.510
Y protegemos cualquier secreto que tengamos del mundo exterior.

19:00.610 --> 19:04.760
Nunca confíes en nadie es el lema de la seguridad.

19:05.570 --> 19:08.680
Así que espero que haya sido perspicaz y lo veré en el próximo video.
