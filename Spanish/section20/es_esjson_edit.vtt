WEBVTT

00:00.900 --> 00:06.940
Bienvenido de nuevo, hay una pieza que falta con el diagrama que creamos en el

00:06.980 --> 00:08.620
video anterior en HTTP.

00:08.790 --> 00:16.860
Hablamos sobre parámetros de URL como el "google". com / about "y parámetros de cadena de consulta que

00:16.860 --> 00:20.480
podemos hacer con GET, pero ¿qué pasa con los

00:20.490 --> 00:23.960
datos cuando publicamos algo? ¿Podemos publicar algo?

00:24.000 --> 00:31.970
Bueno en realidad no. Al intercambiar datos entre un navegador y un servidor, los datos solo pueden ser texto.

00:32.070 --> 00:40.940
Por lo tanto, no podemos simplemente enviar un objeto javascript, como un usuario con el nombre John y el apellido doe.

00:41.010 --> 00:44.070
Uno porque HTTP no lo entenderá.

00:44.460 --> 00:49.070
Pero también si estuviéramos enviando estos datos a los servidores de Google.

00:49.220 --> 00:56.700
Bueno, a diferencia del Front-End del navegador web, donde HTML, CSS y Javascript son un estándar cuando envío un

00:56.700 --> 00:58.980
objeto de usuario al servidor.

00:59.190 --> 01:02.500
Un servidor puede usar

01:02.640 --> 01:13.010
cualquier tipo de lenguaje como Python, Go, PHP. Si les enviamos un tipo de script java, como un objeto, realmente se confundirán porque no tendrían

01:13.010 --> 01:14.890
idea de lo que es.

01:15.260 --> 01:16.790
Ese no es realmente su idioma.

01:17.820 --> 01:22.410
El texto, por otro lado, puede ser entendido por todos.

01:22.440 --> 01:28.050
Por lo tanto, necesitamos una forma de tener una forma estándar de enviar datos a través de los cables y recibirlos.

01:28.050 --> 01:32.360
Eso es JSON y de lo que hablaremos en este video.

01:32.580 --> 01:40.620
JSON significa notación de objeto javascript. Es una sintaxis para almacenar e intercambiar datos y es texto

01:40.800 --> 01:43.540
escrito con notación de objeto javascript.

01:43.650 --> 01:45.180
Veamos el segundo punto aquí.

01:45.270 --> 01:49.320
JSON es una sintaxis para almacenar e intercambiar datos.

01:49.320 --> 01:52.530
Se utiliza para enviar datos entre máquinas.

01:52.650 --> 02:05.800
¿Es la única forma? No, también hay XML. Tanto XML como JSON se pueden usar para recibir datos de un

02:05.860 --> 02:06.760
servidor web.

02:07.920 --> 02:10.020
Y puedes ver las diferencias entre los dos.

02:10.020 --> 02:12.630
Estos son los mismos datos.

02:12.630 --> 02:16.970
Solo los nombres y apellidos de los empleados y XML usan esta sintaxis

02:16.980 --> 02:25.740
de HTML, mientras que JSON usa bien un objeto: la sintaxis de objetos de JavaScript. Pero el estándar ahora está más dirigido a JSON porque cuando

02:25.740 --> 02:31.740
estás escribiendo código de front-end en Javascript, recuperar los datos de JSON hace que sea más

02:31.740 --> 02:37.560
fácil cargar esos datos en un árbol de objetos porque es muy similar a un

02:37.560 --> 02:40.130
objeto javascript que a un XML.

02:40.880 --> 02:48.500
Y el formato JSON es una forma más sucinta que ahorra ancho de banda y mejora los tiempos de respuesta al enviar

02:48.740 --> 02:51.590
mensajes entre el cliente y el servidor.

02:53.030 --> 03:00.810
Y XML simplemente no es muy eficiente. Entonces, JSON ahora es más un estándar que todavía verá XML, pero está

03:00.810 --> 03:04.300
desactualizado, por lo que no hablaremos de eso en este video.

03:04.470 --> 03:13.770
Pero ambos se utilizan para transferir datos entre dos máquinas que pueden no hablar el mismo idioma.

03:14.190 --> 03:20.330
JSON sin embargo, aunque se parece a Javascript, es un poco diferente.

03:20.340 --> 03:24.210
Tiene estas comillas dobles para propiedades pares.

03:24.210 --> 03:28.440
Todo tiene que ser una cadena y entre comillas dobles.

03:28.920 --> 03:38.120
Y bueno, parece que es una sintaxis de objeto. Pero JSON puede leerse en cualquier idioma.

03:39.100 --> 03:45.250
Si los servidores de Google ejecutaban un idioma diferente, entenderían JSON, podrán modificar

03:45.760 --> 03:50.550
ese JSON, que es solo texto en su propia versión.

03:50.560 --> 03:59.100
Así que ahora podemos convertir esto en un objeto JSON, enviarlo a través de HTTP.

04:00.390 --> 04:06.780
Y luego los servidores de Google o lo que sea, lo cambiarán a su propio idioma y lo entenderán y luego

04:06.780 --> 04:08.010
enviarán una respuesta.

04:08.010 --> 04:13.270
Nuevamente, digamos, por ejemplo, que estaba regresando: el usuario tiene dinero de 345 dólares.

04:13.620 --> 04:22.330
Bueno, entonces modificará esto a JSON, lo enviará por cable y luego el navegador web lo

04:22.330 --> 04:25.080
cambiará de JSON a javascript.

04:25.270 --> 04:26.540
¿Pero cómo podemos hacer eso?

04:26.590 --> 04:31.550
Afortunadamente para nosotros, JavaScript viene con su propia función JSON.

04:33.350 --> 04:39.440
Tenemos JSON analizar y JSON. stringify con JSON. analizar si

04:39.440 --> 04:50.150
teníamos JSON nuevamente en este formulario, simplemente lo ajustamos como el parámetro de análisis y devolverá un objeto.

04:50.210 --> 04:53.100
De la manera opuesta con stringify

04:53.270 --> 04:58.750
podemos darle un objeto como el que acabamos de crear y devolverá JSON.

04:59.300 --> 05:09.490
Entonces, esta variable myJSON ahora se puede poner en la solicitud HTTP para enviarla por cable o el servidor puede

05:09.490 --> 05:11.410
responder con myJSON.

05:11.410 --> 05:20.380
Así que revisemos que JSON es texto y podemos convertir cualquier objeto de JavaScript en JSON y enviar JSON al

05:20.380 --> 05:21.060
servidor.

05:21.070 --> 05:29.080
También podemos convertir cualquier JSON recibido del servidor en objetos javascript. De esta forma, podemos trabajar con datos como

05:29.080 --> 05:36.940
objetos javascript sin traducción complicada y este texto puede usarse como formato de datos para cualquier

05:36.940 --> 05:38.640
lenguaje de programación.

05:38.770 --> 05:40.620
Así que vamos a

05:40.620 --> 05:48.530
pasar por el flujo una vez más ahora con esto completo. Objeto de usuario antes de enviarlo con HTTP

05:48.610 --> 05:51.030
haré "JSON". stringify (user);

05:51.070 --> 06:02.210
"Así que ahora se convierte en una cadena JSON y esta cadena JSON se enviará a través de HTTP a los servidores de

06:02.210 --> 06:02.940
Google.

06:03.080 --> 06:08.840
Entonces va a decir JSON. analizar este usuario para que lo entienda.

06:08.870 --> 06:11.620
Digamos que estaba ejecutando Javascript o Node.

06:11.930 --> 06:19.790
Ahora entenderá al usuario. Dirán: oh, él quiere la cantidad de dinero para este usuario.

06:19.990 --> 06:29.860
Entonces ahora obtiene dinero 345 de la cuenta. Es stringify es la variable dinero. Lo envía con un código

06:29.860 --> 06:32.070
de estado

06:32.240 --> 06:42.880
de 200 Y ahora el navegador web puede analizar esta cadena que recibió y ver que

06:42.880 --> 06:52.060
tengo una cantidad variable de $ 345. Y no se preocupe cuando lleguemos a la sección de backend en

06:52.060 --> 07:01.000
algunos videos que le mostraremos exactamente cómo hacer esto en código. Cómo hacer solicitudes HTTP, usar JSON, usar los métodos GET, POST, PUT,

07:01.000 --> 07:03.540
DELETE y le mostraré cómo hacerlo también

07:03.640 --> 07:05.720
en nuestro proyecto final.

07:05.860 --> 07:11.830
Pero ahora este diagrama, aunque un poco desordenado, debería tener un poco más de sentido y

07:11.830 --> 07:14.930
ahora debería comprender cómo funcionan las cosas.

07:16.290 --> 07:23.120
En el siguiente video, voy a presentarles algo que cambió la navegación web en 2006.

07:23.410 --> 07:25.060
Te veré en ese. Adiós.
