WEBVTT

00:00.540 --> 00:05.330
Es hora de aprender otro tema interesante y vamos a entrar en los conceptos básicos de Backend.

00:05.610 --> 00:10.650
Pero quería mostrarte lo que hemos cubierto hasta ahora en el front-end.

00:10.840 --> 00:17.950
Comenzamos con este diagrama de preguntas sobre "¿Quién es google.com?" y pasando por el ISP preguntando

00:17.950 --> 00:20.810
el servidor de nombre de dominio para la dirección IP.

00:20.950 --> 00:29.460
Luego le preguntamos a la dirección IP para encontrar los servidores de Google y luego los servidores de Google nos dan nuestro HTML,

00:29.470 --> 00:34.400
Archivo CSS y JavaScript que podemos obtener uno a través de HTML

00:34.420 --> 00:43.040
Y luego las etiquetas de enlace y las etiquetas de script para obtener el CSS y Javascript. El navegador lee el archivo para

00:43.040 --> 00:51.860
nosotros, el motor HTML, CSS y V8 o el motor de JavaScript del navegador lo utilizan para leer el JavaScript

00:51.920 --> 00:58.510
y manipulamos el DOM usando JavaScript.

00:58.520 --> 01:05.300
También aprendimos que la ubicación del servidor es importante, cuántos viajes hacemos, cuántas solicitudes HTTP

01:05.300 --> 01:06.590
hacemos es importante

01:06.590 --> 01:08.560
El tamaño de los archivos es importante.

01:08.810 --> 01:16.660
Y aprendimos algunas de esas soluciones, como las redes de entrega de contenido, teniendo script en solo un archivo bundle.js

01:16.820 --> 01:21.230
y también minimizando nuestros archivos.

01:23.740 --> 01:33.040
Y luego también aprendimos acerca de esta nueva tecnología llamada AJAX donde podemos simplemente buscar usuarios, hablar con

01:33.040 --> 01:40.750
el servidor mientras el usuario sigue navegando por el sitio web y recibe una respuesta JSON para actualizar el

01:40.750 --> 01:43.050
sitio web en tiempo real.

01:43.390 --> 01:49.730
Y esta imagen con la que empezamos parece mucho más clara que en el primer video, ¿no es así?

01:49.780 --> 01:53.210
Entendemos lo que hace un desarrollador Front-End.

01:53.230 --> 02:00.760
Vemos el poder de React y también sabemos que estas flechas simplemente significan solicitudes HTTP; un lenguaje que

02:01.090 --> 02:08.310
tanto el Front-End como el Back-End pueden hablar y usar AJAX y JSON lo podemos hacer dinámicamente.

02:09.570 --> 02:15.930
Ahora el back-end y el rol de un desarrollador back-end. Ellos son los que están a cargo de trabajar

02:15.930 --> 02:24.330
con servidores y bases de datos. Y un servidor es responsable de lo que sea que obtenga en el navegador.

02:24.650 --> 02:32.140
Puedo preguntarle algo al navegador; como "Ir a google.com". Pero al final del día, el servidor web

02:32.170 --> 02:38.890
puede darme lo que quiera Si me va a enviar a twitter.com en lugar de a google.com,

02:38.920 --> 02:42.500
Bueno, eso depende del servidor. Lo que sea que necesitemos,

02:42.520 --> 02:47.740
simplemente hacemos la solicitud y esperamos que el servidor nos proporcione lo que solicitamos. Y si recuerdas

02:47.980 --> 02:57.740
un servidor es solo una computadora; una computadora que está en algún lugar del mundo simplemente escuchando este HTTP

02:57.880 --> 03:02.770
conexión, preguntando si tenemos algún archivo.

03:02.830 --> 03:11.800
El más básico de los servidores y es posible que haya usado esto antes, quizás usando Hostgator, un sitio de alojamiento

03:11.860 --> 03:19.120
o incluso sitios de WordPress y ponerlos en Hostgator. Utiliza algo llamado 'PILA DE LÁMPARA'.

03:19.120 --> 03:28.330
Esto era lo que era útil para los sitios web más básicos, es decir, (si) solo quieres una información simple

03:28.330 --> 03:28.920
sitio web

03:29.050 --> 03:33.460
Tal vez un simple sitio web de WordPress donde no ocurre nada complejo.

03:33.550 --> 03:41.380
Nada profesional realmente. Lo que usaron fue un servidor Linux que es el sistema operativo.

03:41.740 --> 03:47.280
Al igual que tengo Mac, Linux será el sistema operativo del servidor.

03:47.430 --> 03:48.810
Tenemos el servidor Apache.

03:48.810 --> 03:51.980
Apache es un servidor, otra vez

03:52.080 --> 03:58.500
un programa escrito por alguien que es realmente bueno aceptando solicitudes y enviando

03:58.500 --> 04:01.070
respuestas de archivos

04:01.200 --> 04:03.990
Tuvimos MySQL, que es una base de datos.

04:03.990 --> 04:09.230
Tal vez tenías una sección de comentarios en tu blog y necesitas almacenar esa información,

04:09.260 --> 04:16.680
esa sería la base de datos. Y luego teníamos el PHP, que era solo un lenguaje que puedes usar para tener

04:16.680 --> 04:23.040
un poco de lógica en sus servidores. Y el servidor, al igual que su computadora, tenía un sistema de archivos donde todo el

04:23.040 --> 04:29.140
archivos de su sitio web están almacenados. Y Apache simplemente hizo eso.

04:29.330 --> 04:31.790
Solo escucha para ver si alguien entró

04:31.790 --> 04:37.650
funfunwebsite.com en la URL. Si recibió esa solicitud,

04:37.770 --> 04:42.270
simplemente te dará index.html por defecto.

04:42.720 --> 04:51.260
Si alguien ingresó a funfunwebsite.com/about, solo le dará about.html. Era un muy

04:51.260 --> 04:53.640
servidor simple muy fácil.

04:53.750 --> 05:00.860
Eso es lo que usan la mayoría de los sitios web de hosting como Hostgator. Y usted podría estar preguntando "¿Podría simplemente descargar Apache

05:00.860 --> 05:05.150
servidor y solo ejecuta mi propio servidor desde su computadora? "

05:05.160 --> 05:07.320
Sí, absolutamente puedes.

05:07.490 --> 05:11.630
Pero sin tener un software de servidor,

05:12.080 --> 05:14.210
bueno, nuestra computadora es inalcanzable

05:14.360 --> 05:21.350
Nadie a través de Internet puede acceder a nuestra computadora porque nuestra computadora no es un servidor, no tiene un código que

05:21.350 --> 05:25.570
dice "Oye, si recibo una solicitud, envíala".

05:25.710 --> 05:33.930
Pero como vimos en nuestros videos anteriores, podemos crear servidores falsos para probar nuestros sitios web.

05:33.960 --> 05:36.710
Ahora esta era la vieja forma de hacer las cosas.

05:36.720 --> 05:39.530
No tenía mucha lógica, no se podía expandir.

05:39.720 --> 05:46.190
No puede tener sitios web como Facebook o Amazon usando este tipo de sistema.

05:46.350 --> 05:51.940
Como dije, esto fue para sitios web muy básicos.

05:52.000 --> 05:59.310
Ahora una nueva pila que llamamos servidor de aplicaciones se parece más a esto.

05:59.380 --> 06:06.580
Ahora un servidor de aplicaciones es diferente a nuestro ejemplo anterior porque a diferencia del uso del servidor Apache

06:06.610 --> 06:14.050
eso es muy simple y solo solicita respuesta, solo da archivos allí y de regreso. Con algo así como

06:14.050 --> 06:23.750
un servidor de Nodo donde tiene Node.js ejecutándose, así puede escribir un script y decir "Si recibo una solicitud"

06:23.750 --> 06:33.230
para iniciar sesión, luego verifique el nombre de usuario del usuario en la base de datos. Si coincide, házmelo saber y luego

06:33.320 --> 06:42.260
envíe una respuesta a través de JSON a la aplicación de Front-End. Y podemos personalizar lo que dicen estos guiones.

06:42.260 --> 06:50.990
Hasta ahora solo hemos podido usar JavaScript en la web. Pero ahora, con Node.js, podemos usarlo en un servidor,

06:51.680 --> 06:55.670
en una computadora que no ejecuta un navegador web. Con Node.js,

06:55.670 --> 07:02.630
podemos escribir JavaScript donde, si publiqué algo en Facebook, esa publicación en Facebook, cuando hice clic en 'publicar',

07:02.630 --> 07:08.060
se enviará al servidor de nodo que está escuchando solicitudes.

07:09.000 --> 07:18.060
Dirá eso, "Andrei acaba de publicar este mensaje que está en formato JSON". El archivo Node.js y Express.js

07:18.180 --> 07:27.000
en el servidor lo leerá y dirá "Ah, queremos almacenar esta publicación en nuestra base de datos". y esto

07:27.000 --> 07:32.460
la base de datos va a almacenar esa publicación, de modo que cuando regrese la próxima vez todavía esté allí.

07:32.460 --> 07:39.360
Y una vez hecho esto, responderá con éxito diciendo que "mi publicación es un éxito" y ahora

07:39.360 --> 07:42.060
muestra en mi línea de tiempo.

07:42.420 --> 07:49.410
Puedo editar la publicación, puedo eliminar la publicación y, nuevamente, el Servidor de nodo puede eliminar esa publicación de la base de datos y

07:49.410 --> 07:52.520
luego envíe una respuesta y elimínela de la línea de tiempo.

07:52.560 --> 07:59.070
Simplemente tiene el poder de interactuar constantemente con el Front-End. En los próximos dos videos

07:59.070 --> 08:03.570
vamos a construir un proyecto que incorpore todo esto.

08:03.630 --> 08:07.320
Vamos a crear un servidor de nodo usando un Express,

08:07.320 --> 08:14.610
Vamos a crear nuestra propia base de datos donde almacenaremos información del usuario. Y vamos a usar AJAX

08:14.610 --> 08:20.400
y JSON para crear constantemente, iniciar sesión y actualizar la información del usuario.

08:20.460 --> 08:26.880
Entonces, tenemos una comprensión de este sistema completo. Si está creando sitios web y aplicaciones web,

08:26.910 --> 08:34.540
bueno, realmente no estás construyendo esto. Como desarrollador web, estás creando algo más parecido a esto:08:34.750 --> 08:38.300
pero podrías preguntarte:"¿Es esto?"

08:38.320 --> 08:44.420
"¿Es este el último fin de lo que puede hacer una infraestructura de servidor back-end?"

08:44.770 --> 08:53.760
Bueno, no, si eres Facebook, Twitter o Amazon, harías algo así y no te preocupes demasiado

08:53.760 --> 08:57.210
aquí, podemos explicar lo que está pasando.

08:57.280 --> 09:01.740
Solo está haciendo copias de su computadora.

09:01.750 --> 09:11.660
Entonces piense en cada uno de estos rectángulos como una computadora. Y debido a que Facebook atrapa a mucha gente, hace que

09:11.660 --> 09:15.720
una copia de su servidor y ponerlo tal vez en Asia,

09:15.860 --> 09:22.640
y uno en África, para que todos los asiáticos puedan acceder a este y todos los de África pueden

09:22.640 --> 09:23.530
acceda a este,

09:23.630 --> 09:30.530
en lugar de que todos accedan a un servidor y sobrecarguen el sistema. Porque tienen el mismo servidor

09:30.560 --> 09:35.910
solo está copiando estos archivos y colocándolos en un servidor en otro lugar.

09:35.970 --> 09:36.570
Eso es.

09:36.650 --> 09:43.900
Y eso es lo que llamamos escalamiento. Pero también usan la misma base de datos, por lo que si desde este servidor

09:43.900 --> 09:51.460
alguien actualiza la información, bueno, esta persona de aquí que usa este servidor, este usuario seguirá

09:51.460 --> 09:55.920
tener acceso a la información actualizada de la persona que usa este servidor.

09:55.960 --> 10:04.640
Y finalmente, tenemos algo llamado 'Load Balancer'. Y esto es similar a lo que Apache o NginX

10:05.240 --> 10:14.090
haría. Donde escucha una solicitud HTTP y nota que "Hmm, esta aquí en América del Norte"

10:14.090 --> 10:15.700
realmente está muy ocupado ahora ".

10:15.720 --> 10:22.940
"Voy a transferir esta persona a este servidor aquí". y solo equilibra la carga de los servidores.

10:24.040 --> 10:29.290
y puede seguir creciendo teniendo más y más servidores a medida que tienes más y más usuarios.

10:29.410 --> 10:33.390
Y finalmente puedes incluso tener múltiples bases de datos.

10:33.400 --> 10:40.600
De nuevo, estos cuadrados representan cada uno una computadora; una computadora que está ejecutando una base de datos, una computadora que está

10:40.600 --> 10:48.380
ejecutando un servidor, una computadora que ejecuta un equilibrador de carga. Y puedes tener múltiples bases de datos, de nuevo,

10:48.400 --> 10:52.220
para que no se sientan abrumados con todas estas solicitudes.

10:52.420 --> 10:59.250
Y cada uno mantiene una copia de la otra. Y esto es algo de lo que hablaremos (más) cuando lleguemos a

10:59.250 --> 11:02.030
la sección del nodo y la sección de la base de datos.

11:02.100 --> 11:08.160
Pero quiero mostrarte la idea detrás de los servidores. Para trabajar con el Back-End,

11:08.370 --> 11:18.050
el objetivo principal es asegurarnos de que cuando hacemos una solicitud HTTP desde el Front-End recibamos una respuesta

11:18.470 --> 11:22.100
retroceda lo más rápido posible con los datos correctos.

11:22.370 --> 11:28.680
Y eso es lo que es el desarrollo de Back-End. Asegurándonos de devolver esos recursos para que nuestro Front-End

11:28.700 --> 11:35.870
el equipo puede estar seguro de que recibiremos exactamente lo que necesitamos.

11:35.880 --> 11:42.090
Así que quiero que se emocione porque en las siguientes secciones nos enfocaremos en el Back-End como

11:42.090 --> 11:49.920
así como el Front-End. Vamos a construir una aplicación que use todas estas tecnologías en un solo lugar.

11:49.920 --> 11:57.210
Entonces sabes exactamente cómo está todo conectado y tienes una idea de cómo pasar de algo así como

11:57.210 --> 12:04.290
esto a un día tener algo como esto.

12:04.400 --> 12:05.210
Veré en el siguiente, adiós.
