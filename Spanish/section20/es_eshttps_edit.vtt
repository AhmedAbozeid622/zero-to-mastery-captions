WEBVTT

00:01.450 --> 00:07.380
En 1989, Tim Berners-Lee inventó el HTML que cambió el mundo.

00:07.400 --> 00:13.930
Pero HTML realmente no haría mucho si no pudiéramos obtener documentos de todo el mundo y diferentes computadoras.

00:13.930 --> 00:16.860
Para que eso suceda,

00:16.870 --> 00:24.280
Tim creó el 'Protocolo de transferencia de hipertexto' o HTTP para abreviar.

00:24.290 --> 00:29.810
Ahora recuerda estas flechas de los diagramas que hemos tenido.

00:30.020 --> 00:37.070
Les dijimos que estas flechas eran simplemente los cables conectados y los cables que conectaban la web

00:37.250 --> 00:37.860
mundial.

00:38.840 --> 00:39.960
"¿Este derecho?

00:39.980 --> 00:46.590
Te acordaste del diagrama. "Pero ves que estos son solo cables.

00:46.610 --> 00:53.840
No hay instrucciones sobre cómo hacer las cosas para las que necesita algo llamado protocolo.

00:53.840 --> 01:00.830
Piense en ello como un estándar que todos siguen. Si todos están de

01:00.830 --> 01:11.570
acuerdo, el protocolo funciona y todos pueden usarlo. HTTP que tengo aquí es un protocolo que permite obtener recursos como

01:11.700 --> 01:12.630
documentos HTML.

01:12.670 --> 01:17.470
Quiero decir que está en el nombre correcto del Protocolo de transferencia de hipertexto.

01:17.540 --> 01:24.120
Ahora con el uso de un HTML y HTTP, ahora tenemos la World Wide Web.

01:24.260 --> 01:31.610
Podemos tomar archivos HTML y recibirlos si vamos a 'google. com / about 'vamos a la página acerca de

01:31.610 --> 01:34.260
HTML, la tomamos y la recibimos.

01:34.280 --> 01:43.290
Entonces HTTP es el protocolo o las reglas que usamos a través de los cables.

01:43.440 --> 01:50.550
Es la base de cualquier intercambio de datos en la web y allana el camino

01:50.730 --> 02:01.870
para algo llamado protocolo de servidor cliente, lo que significa que las solicitudes son iniciadas por el destinatario, que en nuestro caso es el navegador web.

02:01.950 --> 02:09.240
Entonces envían una solicitud usando HTTP. El servidor ahora entiende lo que dice el navegador web

02:10.200 --> 02:18.000
porque está hablando en HTTP y el servidor ahora puede responder con HTML y el navegador lo entiende porque está

02:18.270 --> 02:20.310
hablando a través de HTTP

02:20.340 --> 02:21.780
una vez más.

02:21.940 --> 02:29.950
Por lo tanto, debe pensar en HTTP como un lenguaje común que un cliente y un servidor pueden usar para comunicarse.

02:29.950 --> 02:33.930
Simplemente están diciendo Hey, ¿puedes darme este documento?

02:34.170 --> 02:36.570
Y el servidor puede decir sí, no hay problema.

02:36.630 --> 02:37.920
Aquí está.

02:37.920 --> 02:43.330
Y hasta este momento no hemos hablado realmente con un servidor en nuestra aplicación, ¿verdad?

02:43.440 --> 02:50.160
Construimos las aplicaciones de front-end o las aplicaciones de cara al cliente usando HTML, CSS, javascript

02:50.190 --> 02:54.120
y reaccionamos, pero vivimos en nuestro propio mundo.

02:54.340 --> 03:01.860
No hay comunicaciones con otra computadora. HTTP nos permite ahora comunicarnos con servidores, con el

03:01.860 --> 03:02.990
mundo exterior.

03:03.060 --> 03:06.050
Así que repasemos la terminología una vez más.

03:06.200 --> 03:15.780
Los clientes y los servidores pueden comunicarse mediante el intercambio de mensajes individuales. Los mensajes enviados por el cliente,

03:16.320 --> 03:28.180
generalmente un navegador web, se denominan solicitudes y los mensajes enviados por el servidor generalmente se denominan respuestas.

03:28.220 --> 03:35.120
Entonces, si HTTP es el lenguaje que nos permite comunicarnos entre estos dos, enséñame algunas de las

03:35.120 --> 03:35.990
palabras correctas.

03:36.290 --> 03:37.690
Quiero decir que es una buena pregunta.

03:37.820 --> 03:44.690
Y por suerte para ti, HTTP es bastante fácil de aprender porque solo tienes unas pocas palabras y te mostraré cuáles son

03:44.690 --> 03:45.940
en este momento.

03:46.070 --> 03:51.910
Tienes 'OBTENER' tienes 'POSTAR' tienes 'PONER'.

03:51.990 --> 03:53.880
Y finalmente tienes 'BORRAR'.

03:57.360 --> 04:00.130
y ahora estás pensando "umm eso es "Y

04:00.130 --> 04:04.880
sí, HTTP es hermoso porque es simple.

04:04.920 --> 04:06.660
No necesitas complicar demasiado las cosas.

04:07.750 --> 04:15.520
Aprendes estas cuatro palabras y estos idiomas y puedes construir la aplicación de tus sueños.

04:15.520 --> 04:18.810
Así que veamos uno por uno. 'OBTENER' significa

04:18.820 --> 04:22.530
Bueno, quiero obtener un archivo HTML.

04:22.660 --> 04:28.360
Entonces, pide obtener algo y el servidor responde con esa solicitud.

04:28.420 --> 04:31.700
Un 'POST' dice que quiero publicar algo.

04:31.710 --> 04:38.410
Así que voy a enviar algunos datos a los servidores de Google y quiero que 'POSTES', quiero que los agregue

04:38.950 --> 04:44.520
a sus servidores o su base de datos. 'PONER' es que te voy a

04:44.780 --> 04:46.530
enviar algunos datos.

04:46.700 --> 04:51.950
Y quiero que actualices algunos datos que ya existen en los servidores de Google

04:51.950 --> 04:59.270
y solo actualízalos con esta nueva información y luego 'BORRAR' significa eliminar bien un dato en el servidor o en

04:59.270 --> 05:01.240
la base de datos.

05:01.250 --> 05:08.270
Entonces, si usamos Twitter como ejemplo, 'GET' será recibir el feed de Twitter

05:08.270 --> 05:18.450
con todos los tweets de hoy. 'POST' sería si creó un nuevo usuario y desea agregarlo a los servidores de Twitter. 'PUT' sería si hiciera un tweet pero desea

05:18.600 --> 05:25.880
hacer un cambio o una edición, por lo que edita ese tweet y 'DELETE' significará que eliminará su

05:25.890 --> 05:32.080
cuenta de usuario o eliminará un tweet. Y no se preocupe, los usaremos cuando

05:32.080 --> 05:36.130
lleguemos a la sección de backend y construyamos nuestro proyecto final.

05:36.520 --> 05:45.040
Ahora, a lo largo de los años, HTTP se extendió para no solo preocuparse por el texto. No solo busca documentos de hipertexto como HTML,

05:45.040 --> 05:53.500
sino también imágenes y videos y publica contenido en servidores como con resultados de formularios HTML.

05:53.650 --> 06:01.300
y HTTP también se puede utilizar para obtener parte de los documentos para actualizar las páginas web a pedido, que se llama

06:01.750 --> 06:04.900
AJAX, y tenemos un video que habla sobre esto.

06:05.020 --> 06:09.170
Pero la idea principal sigue en pie usando estos cuatro verbos

06:09.190 --> 06:13.230
que acabamos de aprender, ahora podemos comunicarnos con los servidores.

06:13.340 --> 06:13.630
Todo bien.

06:13.630 --> 06:23.220
Así que sabemos que esta flecha aquí en la parte superior usa HTTP para hacer solicitudes usando uno de estos cuatro verbos.

06:23.230 --> 06:23.680
De

06:23.700 --> 06:27.630
acuerdo, entonces creo que recibiste la solicitud. Ahora, ¿con qué responde

06:27.700 --> 06:29.320
el servidor?

06:29.320 --> 06:30.770
¿Qué pasa con la respuesta aquí?

06:30.850 --> 06:38.140
El servidor te envía dos cosas principales. uno es un mensaje HTTP.

06:38.210 --> 06:42.780
Eso es algo que definitivamente has visto antes

06:42.800 --> 06:49.360
y vincularé a los recursos de esta W3school un mensaje 200 significa exitoso.

06:49.410 --> 06:57.250
Probablemente haya visto 200 OK antes de haber visto 404 mensajes, lo que significa que no se encuentra.

06:57.390 --> 07:03.530
Si ingresas una URL que no existe, obtendrás un 404 y, a veces, recibirás un mensaje de error

07:03.570 --> 07:05.080
500 que dice que

07:05.230 --> 07:07.260
hay algo mal con el servidor.

07:07.530 --> 07:15.000
Entonces, este es solo un código numérico que viene con cada respuesta que le indica la respuesta del servidor.

07:15.000 --> 07:16.080
Así que ese es el primero.

07:18.390 --> 07:22.980
El segundo suele ser algún tipo de datos como HTML.

07:23.190 --> 07:25.530
Y hasta ahora eso es lo que hemos estado haciendo HTML.

07:25.830 --> 07:31.160
Pero en los siguientes videos le mostraré que puede enviar otras cosas además de HTML simple.

07:31.230 --> 07:33.600
Así que agreguemos a este diagrama ahora.

07:34.230 --> 07:43.760
Queremos decir que esto también tiene un código de estado y diremos 200 por ahora que todo estaba bien y

07:43.790 --> 07:50.770
en la respuesta daría el código de estado más el nuevo archivo HTML.

07:51.020 --> 07:51.890
Todo bien.

07:52.070 --> 07:56.900
Realmente demostremos esto en línea para ver cómo puede ver que esta acción tenga lugar.

07:58.360 --> 08:04.410
Tengo aquí un gran sitio web llamado 'ejemplo. com 'y es un sitio web simple que puedes visitar

08:04.510 --> 08:05.330
ahora mismo.

08:05.440 --> 08:12.830
Pero lo bueno de esto es que si abres tu consola de desarrollador, hasta este punto hemos visto la pestaña de elementos y luego

08:12.830 --> 08:20.450
la pestaña de consola. Quiero mostrarte la pestaña Red que tenemos aquí. Ahora la pestaña Red: puede que tenga

08:20.450 --> 08:21.620
que hacer

08:21.980 --> 08:27.610
clic en algunos de estos iconos y verá que aparecerán diferentes elementos.

08:27.710 --> 08:30.900
Asegúrese de que el filtro se haya ido.

08:31.780 --> 08:39.960
Todo está sin hacer clic y ahora en 'ejemplo. com 'mientras está abierto, simplemente actualiza y

08:43.010 --> 08:44.420
mira eso.

08:44.600 --> 08:47.880
Voy a hacer clic en este icono que lo hace un poco más grande.

08:47.900 --> 08:52.010
Este es un complemento, así que no te preocupes por este javascript, pero es lo mejor que dice.

08:52.010 --> 08:55.940
"ejemplo. com "" Estado: 200 OK

08:55.970 --> 09:03.140
"y" Tipo: documento "e incluso me dice el tamaño, el tiempo que tardó en obtener esto, que es de 53 milisegundos ...

09:03.140 --> 09:04.760
Eso es bastante rápido

09:04.760 --> 09:07.790
Eso significa que el servidor respondió con 200.

09:07.790 --> 09:13.830
Si hago clic en esto, obtengo un montón de cosas de las que realmente

09:13.830 --> 09:16.080
no debemos preocuparnos, pero

09:16.080 --> 09:23.340
algunas cosas 'Solicitar URL' es lo que solicitamos. Obtenemos un código de estado de 200 del servidor.

09:23.340 --> 09:31.280
Y si hacemos clic en la Respuesta hay un mensaje de Respuesta, recibimos el documento HTML

09:31.280 --> 09:32.760
del servidor.

09:32.860 --> 09:36.870
Si volvemos a los encabezados, también vemos que nuestro método de solicitud fue 'GET'.

09:36.970 --> 09:44.430
Hicimos una solicitud 'OBTENER'. Cerremos esto y volvamos a actualizar.

09:44.490 --> 09:48.880
Ahora obtengo un estado 304. Un 304 Si miramos aquí

09:48.930 --> 09:55.050
significa que no modificado indica que la página de solicitud no se ha modificado

09:55.050 --> 09:59.150
desde la última solicitud. Debido a que ya solicité esto ahora, Google

09:59.170 --> 10:04.800
es lo suficientemente inteligente como para decir oh, no me voy a preocupar por el servidor y solicitar lo mismo una y

10:04.800 --> 10:05.640
otra vez.

10:05.640 --> 10:09.960
Ya lo tengo memorizado, así que aquí está.

10:10.130 --> 10:10.730
Muy genial.

10:10.730 --> 10:13.740
Entonces la pestaña Red es realmente muy útil para eso.

10:14.030 --> 10:14.420
Todo bien.

10:14.420 --> 10:20.330
Entonces puedes seguir adelante y jugar con 'ejemplo. com 'y vea por usted mismo cómo funciona HTTP.

10:21.970 --> 10:29.590
Y, por cierto, sí, este HTTP que ves aquí, eso es lo que significa cuando haces una

10:29.680 --> 10:34.340
solicitud HTTP, dice oye, HTTP: estamos usando la web mundial.

10:34.640 --> 10:38.260
Y ve a solicitar esto al servidor.

10:38.450 --> 10:39.110
Muy genial.

10:39.140 --> 10:40.650
Y si te preguntas sobre la 's'.

10:40.670 --> 10:43.850
No se preocupe, le dejaré saber al final de este video qué significa eso también.

10:46.410 --> 10:46.970
Todo bien.

10:47.120 --> 10:49.780
Ahora, ¿qué pasa si quiero enviar datos?

10:49.850 --> 10:53.790
Si volvemos a nuestro diagrama, solo estoy haciendo una solicitud 'GET'.

10:53.840 --> 10:58.090
Pero, ¿y si realmente quiero enviar alguna información al servidor?

10:58.100 --> 11:02.120
Aparte de alguna URL que dice que quiero esta información.

11:02.120 --> 11:04.330
Bueno, hay dos formas de hacerlo.

11:05.440 --> 11:08.300
Uno es algo llamado cadena de consulta.

11:08.530 --> 11:13.140
Y luego el segundo es a través del cuerpo de la solicitud.

11:13.250 --> 11:20.450
Así que les voy a mostrar cómo funcionan ambos. Tengo aquí el formulario que creamos en nuestra

11:20.660 --> 11:24.270
primera sección HTML avanzada cuando solo sabíamos HTML.

11:24.860 --> 11:25.990
Abramos este archivo.

11:29.810 --> 11:30.850
Lo tengo por aquí.

11:30.870 --> 11:34.650
Si hago doble clic -ahh, recuerdas esto, ¿no?

11:34.650 --> 11:37.990
Hemos recorrido un largo camino muy largo. En este formulario,

11:38.100 --> 11:46.280
si recuerda, teníamos un método de formulario 'GET' y ahora podría entender lo que significa 'GET'.

11:46.320 --> 11:52.220
Con este formulario dice que quiero que hagas una solicitud 'GET'.

11:52.350 --> 11:59.960
Veamos qué sucede cuando hago clic en registrar al abrir la pestaña de red.

12:00.160 --> 12:04.000
Voy a hacer clic en 'Registrarse! '.

12:04.010 --> 12:04.650
Todo bien.

12:04.730 --> 12:07.190
Entonces tenemos esta solicitud.

12:07.190 --> 12:14.810
Vemos que hemos realizado una solicitud y ha creado estas cosas llamadas cadenas de consulta.

12:14.840 --> 12:21.370
La primera forma de enviar datos al servidor. Con una solicitud 'OBTENER' si desea enviar información

12:21.380 --> 12:29.710
a través de un formulario, la agrega a la URL usando este signo de interrogación que dice oye, estoy a punto de

12:29.710 --> 12:34.400
enviarle algunas cadenas de consulta y tendrá una clave y un valor.

12:34.630 --> 12:36.550
En este caso, nombre, apellido, todo está vacío,

12:36.550 --> 12:38.310
por lo que no hay información.

12:38.320 --> 12:42.110
Pero de lo contrario diré que el nombre es igual a Andrei.

12:42.400 --> 12:51.900
Si hago clic en esto, vemos que hay parámetros de cadena de consulta que hemos enviado. Tenemos nombre, apellido, correo electrónico, contraseña y fecha de

12:51.960 --> 12:55.370
nacimiento que está en blanco.

12:55.710 --> 13:02.590
Pero si nos desplazamos hacia abajo en los automóviles, el valor predeterminado es Volvo, de modo que tenemos Cars: Volvo.

13:02.730 --> 13:07.140
Entonces esta información ahora se envía al servidor.

13:07.140 --> 13:10.260
Esos son los parámetros de la cadena de consulta usando 'GET'.

13:10.260 --> 13:12.390
Y sí mencionamos una cosa sin embargo.

13:12.480 --> 13:16.530
Vemos que aquí tenemos una contraseña que no es muy segura.

13:16.560 --> 13:27.850
Si volví al formulario y escribo 'secreto' y hago clic en registrar nuevamente Bueno, ahora tengo mi contraseña abierta y enviada

13:28.270 --> 13:34.900
por cable e incluso la tengo aquí en mi barra de URL.

13:35.070 --> 13:35.370
Todo bien.

13:35.370 --> 13:36.350
Volveremos a eso.

13:37.790 --> 13:39.060
Entonces esa es una forma.

13:39.170 --> 13:44.930
La segunda forma es a través del cuerpo de la solicitud.

13:44.930 --> 13:48.210
Permítame mostrarle cómo funciona la forma en que

13:48.230 --> 13:57.110
enviamos información al cuerpo si usamos una solicitud 'POST' y esto es algo que verá más a menudo que una solicitud 'GET' es

13:57.110 --> 14:04.690
que queremos agregar algunos datos de formulario a el servidor por lo que queremos publicar algo si cambio esto

14:04.690 --> 14:06.790
aquí voy a guardar esto.

14:06.970 --> 14:09.300
Y abramos una nueva pestaña.

14:10.430 --> 14:14.920
Con un nuevo dato guardado, este es un formulario de publicación.

14:15.010 --> 14:23.540
Si lo abro aquí y escribo la contraseña 'secreto' y hago clic en '¡Registrarse! Registro 'I

14:26.590 --> 14:32.230
get'. html 'pero sin cadenas de consulta.

14:32.350 --> 14:33.370
Si hago clic

14:36.350 --> 14:41.290
en esto, veo que ahora, en lugar de las cadenas de consulta, son datos de formulario.

14:41.480 --> 14:48.650
E incluso dice 'Content-Type: application / x-www-form-urlencoded'.

14:49.070 --> 14:57.830
Y esta es solo una forma HTML de decir que este es un formulario y este es el cuerpo, pero que no se muestra aquí.

14:57.860 --> 15:03.200
Así que ahora el servidor puede acceder a él no desde los parámetros de consulta y no se preocupe, le mostraré cómo lo hacen

15:03.200 --> 15:03.780
los servidores.

15:03.860 --> 15:09.740
Cuando lleguemos a la sección de backend. En lugar de acceder a través de los parámetros de consulta, ahora puedo

15:09.740 --> 15:12.160
acceder a él a través de los datos del formulario.

15:12.170 --> 15:15.440
Entonces volvamos al diagrama.

15:15.610 --> 15:22.850
Ahora entendemos que podemos hacer solicitudes HTTP usando 'GET', 'POST', 'PUT' y 'DELETE'.

15:22.850 --> 15:35.140
Puedo usar cadenas de consulta que se encuentran en la parte superior de la URL para enviar los datos o el cuerpo de la solicitud y luego el servidor responde con

15:35.500 --> 15:41.350
un código de estado basado en cómo era mi solicitud y lo devuelve con

15:41.350 --> 15:42.440
una respuesta.

15:42.820 --> 15:52.290
Pero el único problema que vimos fue que la contraseña era visible en ambos casos, ¿no?

15:52.300 --> 15:57.550
¿Y si tuviéramos una persona de aspecto aterrador por aquí?

15:57.560 --> 15:58.360
Ahí tienes.

15:58.580 --> 16:08.140
¿Qué pasaría si tuviéramos una persona que observara nuestras comunicaciones y nuestras solicitudes HTTP y las supervisara?

16:08.380 --> 16:15.370
Si usé cadenas de consulta para poner mi contraseña allí, él puede mirar por encima de mis hombros y

16:15.440 --> 16:18.790
ver que la contraseña de Andrea es secreta.

16:18.790 --> 16:29.510
Ahora puedo iniciar sesión en su cuenta de Google o si utilizo bien la forma del cuerpo de enviar datos, él puede encontrar una manera de hacer que esta

16:29.510 --> 16:33.460
solicitud llegue primero a él. Y solo mire los

16:36.900 --> 16:44.750
datos del formulario y vea que mi contraseña es secreta. "Eso no es muy bueno, ¿verdad?

16:44.750 --> 16:57.210
"Bueno, una solución a esto fue la idea de HTTPS. Ahora HTTPS significa Protocolo de transferencia de hipertexto

16:57.240 --> 17:06.820
seguro y puede ver aquí que "W3C" usa la versión segura de HTTPS.

17:06.860 --> 17:11.280
La comunicación entre el navegador y los sitios web ahora está encriptada.

17:12.610 --> 17:13.330
¿Y qué significa eso?

17:13.330 --> 17:22.380
Cifrado solo significa que está desordenado, de modo que solo el cliente y el servidor conocen el pase secreto o la

17:22.390 --> 17:25.360
clave secreta para leer el mensaje.

17:26.740 --> 17:35.050
Y esta parte 'S' del secreto utiliza una tecnología llamada seguridad de la capa de transporte

17:35.050 --> 17:41.870
o su capa de sockets seguros predecesora o TLS y SSL para abreviar.

17:41.920 --> 17:51.820
Así que ahora incluso con HTTPS si el atacante o lo que llamamos un hombre en el medio es la persona

17:51.820 --> 17:58.030
que solo está monitoreando nuestras solicitudes. Incluso si obtienen nuestra contraseña, será un truco

17:58.030 --> 18:06.120
completo que tendrá algo similar a esto y bueno, esa no es nuestra contraseña, por lo que no tendrá sentido,

18:06.170 --> 18:07.690
evitará ese ataque.

18:07.690 --> 18:08.960
Esto es solo el consejo.

18:09.280 --> 18:17.040
Como desarrollador, debe informar a todos sus amigos si alguna vez envía información confidencial, tal vez inicie sesión en

18:17.040 --> 18:18.330
una cuenta bancaria.

18:18.450 --> 18:26.130
Asegúrese de que haya HTTPS por ahí si no hay HTTPS cuando envíe, tal vez su inicio de sesión

18:26.130 --> 18:27.560
con su contraseña.

18:27.690 --> 18:30.250
Bueno, eso no es seguro.

18:30.400 --> 18:30.890
Todo bien.

18:31.010 --> 18:40.860
Revisemos. Su navegador web es un cliente HTTP que envía solicitudes a las máquinas del servidor. Cuando el usuario del navegador ingresa las solicitudes de

18:40.920 --> 18:48.930
seguimiento, ya sea abriendo un archivo o escribiendo una URL o haciendo clic en un enlace de hipertexto en una

18:48.930 --> 18:50.500
etiqueta de anclaje.

18:50.880 --> 18:56.530
El navegador crea una solicitud HTTP y la envía para comunicarse con el servidor.

18:56.730 --> 19:02.380
Ahora el servidor puede devolvernos la información. La primera versión podríamos usar parámetros

19:02.470 --> 19:09.430
de URL como 'www. google. com / about 'y solo específicamente obtener HTML.

19:09.510 --> 19:11.020
Eso fue todo.

19:11.050 --> 19:18.950
Luego vino el formulario para que ahora podamos enviar más datos además de la URL que dice que queremos ir

19:18.950 --> 19:20.880
a este archivo HTML.

19:21.260 --> 19:34.930
Ahora podríamos usar 'GET' o 'POST' para enviar datos. Ya sea a través de un cuerpo o una cadena de consulta, un servidor puede

19:34.930 --> 19:40.540
tomar medidas basadas en esos datos y devolver una nueva página.

19:40.630 --> 19:47.200
Y esta es la base de la web y cómo la web mundial que tenemos ahora fue posible. A través de la comunicación

19:47.380 --> 19:53.140
del servidor del cliente. En los próximos videos vamos a aprender aún más.

19:53.390 --> 19:56.820
Para entender realmente este poder, nos vemos en el próximo. Adiós.
